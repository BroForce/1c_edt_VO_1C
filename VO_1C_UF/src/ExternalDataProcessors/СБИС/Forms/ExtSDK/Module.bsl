&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем ЕстьИзменения Экспорт;
&НаКлиенте
Перем ПоследнееИзменение Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры

//------------------------------------------------------
&НаКлиенте
Функция ВключитьЛогирование(Кэш, КаталогЛоговИмя, Уровень) Экспорт
	// Включает/отключает логирование	
	
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("ТипРеестра", ТипРеестра));
	
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш) Экспорт
	// Получает список документов определенного типа с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Возврат сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно); 
КонецФункции
//&НаКлиенте
//Функция	УстановитьСоответствиеЭлементовДанных(Карта)
//	
//	//Результат.s
//	//оДокумент
//	СтруктураДанных	= Новый	Структура(	"Дата, 			ИдСБИС, 	Контрагент, НашаОрганизация",
//										"doc_datetime", "doc_id",	);
//	
//КонецФункции
&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	ИмяФайла = сбисПолучитьФайл(Кэш,Ссылка);
	
	Если ИмяФайла = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстДок = Новый ЧтениеТекста(ИмяФайла);
	СтрокаТекст = СтрЗаменить(НРег(ТекстДок.ПрочитатьСтроку()),"'","""");
	СтрокаКодировка = Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех;
	//Проверим кодировки для принудительного чтения.	
	Для Каждого КодировкаДляЧтения Из Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.Определять Цикл
		Если Найти(СтрокаТекст, "encoding=""" + КодировкаДляЧтения + """") Тогда
			СтрокаКодировка = КодировкаДляЧтения;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//Переоткрываем файл в найденной кодировке
	ТекстДок.Открыть(ИмяФайла,СтрокаКодировка);
	РезультатТекст = ТекстДок.Прочитать();
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	Если	РезультатТекст = Неопределено
		Или	Лев(РезультатТекст,4)="%PDF" Тогда// для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
		РезультатТекст = "";
	КонецЕсли;
	
	Возврат РезультатТекст;
КонецФункции
&НаКлиенте
функция ПолучитьДанныеЗашифрованногоФайла(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	ИмяФайла = сбисПолучитьФайл(Кэш,Ссылка);
	
	Если ИмяФайла = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатТекст = РасшифроватьДанныеФайла(Кэш,ИмяФайла);
	
	Возврат РезультатТекст;
КонецФункции
&НаКлиенте
функция сбисПолучитьФайл(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	РезультатЗаписи = Кэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла);
	Если РезультатЗаписи = Ложь Тогда
		Возврат РезультатЗаписи;
	КонецЕсли;
	
	Возврат ИмяФайла;
КонецФункции
&НаКлиенте
функция ПолучитьПараметрыШтампа(Вложение) Экспорт//au
	Подпись = Неопределено;
	Событие = Неопределено;
	Результат = Неопределено;
	
	Если Не	Вложение.Свойство("Событие",Событие) Тогда
		Возврат Результат;
	КонецЕсли;
	Вложение.Свойство("Подпись",Подпись);
	
	//Есть события, значит заполним дополнительные данные для штампа подписи.
	//Сперва отсортируем по дате для корректного вывода подписей
	СписокСобытия = Новый СписокЗначений;
	СписокСобытия.ЗагрузитьЗначения(Событие);
	Для Каждого ЭлементСписка Из СписокСобытия Цикл
		ЭлементСписка.Представление = ЭлементСписка.Значение.ДатаВремя;
	КонецЦикла;
	СписокСобытия.СортироватьПоПредставлению();
	Событие = СписокСобытия.ВыгрузитьЗначения();
	
	Результат = Новый Массив;
	СтруктураПоиска = Новый Структура("Название", Вложение.Название);
	Для Каждого ЭлементСобытие Из Событие Цикл
		//Смотрим в событиях наше вложение и если есть, то выбираем подпись и дату.
		Если Не ЭлементСобытие.Свойство("Вложение") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ЭлементВложение	Из ЭлементСобытие.Вложение Цикл
			Найден = Истина;
			Для Каждого Отбор Из СтруктураПоиска Цикл
				Если ЭлементВложение[Отбор.Ключ] = Отбор.Значение Тогда
					Продолжить;
				КонецЕсли;
				Найден = Ложь;
				Прервать;
			КонецЦикла;
			Если Не Найден Тогда
				Продолжить;
			КонецЕсли;
			ВложениеПодписи = Неопределено;
			Если Не ЭлементВложение.Свойство("Подпись", ВложениеПодписи) Тогда
				Продолжить;
			КонецЕсли;
			//Чтобы исключить возможность попадания сертификатов, не относящихся к вложению, проверяем, что подпись события есть в подписях вложения.
			Для Каждого ПодписьСобытия Из ВложениеПодписи Цикл
				Найден = Ложь;
				Если Подпись = Неопределено Тогда
					Найден = Истина;//Подписи не переданы, значит возьмем первый сертификат из списка
				Иначе	
					Для Каждого ПодписьВложения Из Подпись Цикл 
						Если ПодписьСобытия.Сертификат.СерийныйНомер = ПодписьВложения.Сертификат.СерийныйНомер Тогда
							Найден = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если Не Найден Тогда
					Продолжить;
				КонецЕсли;
				СтрокаРезультат = Новый Структура("Сертификат, Переход, ДатаВремя",ПодписьСобытия.Сертификат,ПодписьСобытия.Направление,"");
				//Переставляем названия для штампа
				СтрокаРезультат.ДатаВремя = ?(ЗначениеЗаполнено(ЭлементСобытие.ДатаВремяДокумента), ЭлементСобытие.ДатаВремяДокумента,ЭлементСобытие.ДатаВремя);
				Если Вложение.Направление = "Входящий" Тогда
					Если		СтрокаРезультат.Переход = "Входящая" Тогда 
						СтрокаРезультат.Переход = "Отправка";
					ИначеЕсли	СтрокаРезультат.Переход = "Исходящая" Тогда
						СтрокаРезультат.Переход = "Подпись";
					КонецЕсли;
				Иначе
					Если		СтрокаРезультат.Переход = "Входящая" Тогда 
						СтрокаРезультат.Переход = "Подпись";
					ИначеЕсли	СтрокаРезультат.Переход = "Исходящая" Тогда
						СтрокаРезультат.Переход = "Отправка";
					КонецЕсли;
				КонецЕсли;
				Результат.Добавить(СтрокаРезультат);
				Если Подпись = Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции
// << alo Меркурий
&НаКлиенте
функция СБИСЗаписатьВложения(Кэш,СоставПакета, Вложение) экспорт
	если СоставПакета.свойство("Идентификатор") и значениеЗаполнено(СоставПакета.Идентификатор) тогда
		Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
			Имя= Вложение.ИмяФайла;
			ДвоичныеДанные= сбисФайлСКлиентаВBASE64(Вложение.ПолноеИмяФайла); 
		Иначе  // сформирован xml
			если Вложение.свойство("СтруктураФайла") тогда
				Имя= Вложение.СтруктураФайла.Файл.Имя+".xml";
			иначе
				Имя= Вложение.Файл.Имя+".xml";
			конецесли;
			если Вложение.свойство("XMLДокумента") тогда
				ДвоичныеДанные= сбисСтрокаВBASE64(Вложение.XMLДокумента);
			иначе
				ДвоичныеДанные="";
			конецесли
		КонецЕсли;
		если ЗначениеЗаполнено(ДвоичныеДанные) тогда
			document = Новый Структура;
			document.Вставить( "Идентификатор", СоставПакета.Идентификатор ); 
			attachmentList = Новый Массив;
			attachment = Новый Структура;
			file = Новый Структура;
			file.Вставить( "Имя", Имя);
			file.Вставить( "ДвоичныеДанные", ДвоичныеДанные);
			attachment.Вставить( "Файл", file );
			если не( Вложение.свойство("Идентификатор") и ЗначениеЗаполнено(Вложение.Идентификатор)) тогда
				ИдВложения = строка(Новый УникальныйИдентификатор());
				Вложение.Вставить("Идентификатор", ИдВложения);
			конецесли;
			attachment.Вставить( "Идентификатор",  Вложение.Идентификатор);
			attachmentList.Добавить( attachment );
			document.Вставить( "Вложение", attachmentList );
			
			Отказ				= Ложь;
			ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЖдатьОтвета", Ложь, Истина, Истина);
			Результат = Кэш.Интеграция.СБИСПлагин_ЗаписатьВложение(Кэш, document, ДопПараметрыЗапроса, Отказ);
			Если Отказ Тогда
				Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
				Возврат Ложь;
			КонецЕсли;
			Возврат истина;
		иначе
			Сообщить("Нет файла для записи");
			Возврат Ложь;
		конецесли;
	иначе
		Сообщить("Не указан документ для записи");
		Возврат Ложь;
	конецесли;
КонецФункции		// alo Меркурий >>
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	МестныйКэш = Кэш;	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	// Прочитаем пакет   
	СоставПакета = ПрочитатьДокумент(Кэш,Идентификатор);
	Если СоставПакета=Ложь Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
		action = Неопределено;
		Комментарий = "";
		ПараметрыОтклонения = Новый Структура("Кэш,СоставПакета,ИмяКоманды,ПредставлениеПакета",Кэш, СоставПакета, ИмяКоманды, ПредставлениеПакета);
		Если ИмяКоманды = "Отклонить" Тогда
			СтрокаПодсказка = "Причина отклонения"; 
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Если Не ВвестиСтроку(Комментарий,СтрокаПодсказка,,Истина) Тогда
					Комментарий = "";
				КонецЕсли;
			#Иначе
				ПоказатьВводСтроки(Новый ОписаниеОповещения("сбисВыполнитьКомандуПослеВвводаКомментария",ЭтаФорма, ПараметрыОтклонения),Комментарий,СтрокаПодсказка,,Истина);
				Возврат Ложь;
			#КонецЕсли
		КонецЕсли;	
		Возврат сбисВыполнитьКомандуПослеВвводаКомментария(Комментарий,  ПараметрыОтклонения);
	КонецЕсли;	
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьКомандуПослеВвводаКомментария(Комментарий, ДопПараметры) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	Кэш = ДопПараметры.Кэш;
	СоставПакета = ДопПараметры.СоставПакета;
	ПредставлениеПакета = ДопПараметры.ПредставлениеПакета;
	ИмяКоманды = ДопПараметры.ИмяКоманды;
	
	Если ИмяКоманды = "Отклонить" и НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Новый Структура("code, message, details", 780, "Не заполнено обязательное поле", "Для выполнения операции, необходимо указать комментарий!"), Новый Структура());
		Возврат Ложь;
	КонецЕсли;
	
	//Ищем действие соответсвующее команде
	Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
		Если Действие.Название = ИмяКоманды Тогда
			результат = сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
			Если	Кэш.ПараметрыСистемы.Клиент.УправляемоеПРиложение
				И	ИмяКоманды = "Отклонить" Тогда
				Кэш.ГлавноеОкно.ОбновитьКонтент();
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция Утвердить_ЭДОНакл(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	Возврат "Отсутствует настройка для формирования титула получателя для зашифрованного документа " + Вложение.Тип + " "+Вложение.ПодТип + " "+Вложение.ВерсияФормата;
КонецФункции
&НаКлиенте
Функция Утвердить_АктВР(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	Возврат "Отсутствует настройка для формирования титула получателя для зашифрованного документа " + Вложение.Тип + " "+Вложение.ПодТип + " "+Вложение.ВерсияФормата;
КонецФункции
&НаКлиенте
Функция Утвердить_ЭДОНакл_1175010_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "НаклПокуп");
	НовоеВложение.Вставить("Подтип", "1175011");
	НовоеВложение.Вставить("Название", "Товарная накладная (титул покупателя)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
	НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_ЭДОНакл_1175010_5_01";
	ПрефиксФайла = "DP_TOVTORGPOK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры);
	
КонецФункции
&НаКлиенте
Функция Утвердить_АктВР_1175012_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "АктЗаказ");
	НовоеВложение.Вставить("Подтип", "1175013");
	НовоеВложение.Вставить("Название", "Акт (титул заказчика)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
	НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_АктВР_1175012_5_01";
	ПрефиксФайла = "DP_REZRUZAK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры);
	
КонецФункции
&НаКлиенте
Функция Утвердить_УпдДоп_1115125_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "УпдДопПокуп");
	НовоеВложение.Вставить("Подтип", "1115126");
	НовоеВложение.Вставить("Название", "Передаточный документ (титул покупателя)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
	НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_УпдДоп_1115125_5_01";
	ПрефиксФайла = "ON_SCHFDOPPOK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла);
	
КонецФункции
&НаКлиенте
Функция Утвердить_УпдДоп_1115131_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "УпдДопПокуп");
	НовоеВложение.Вставить("Подтип", "1115132");
	НовоеВложение.Вставить("Название", "Передаточный документ (титул покупателя)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
		НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_УпдДоп_1115131_5_01";
	ПрефиксФайла = "ON_NSCHFDOPPOK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры);
	
КонецФункции
&НаКлиенте
Функция Утвердить_УпдСчфДоп_1115125_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "УпдСчфДопПокуп");
	НовоеВложение.Вставить("Подтип", "1115126");
	НовоеВложение.Вставить("Название", "Универсальный передаточный документ (титул покупателя)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
	НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_УпдДоп_1115125_5_01";
	ПрефиксФайла = "ON_SCHFDOPPOK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры);
	
КонецФункции
&НаКлиенте
Функция Утвердить_УпдСчфДоп_1115131_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "УпдСчфДопПокуп");
	НовоеВложение.Вставить("Подтип", "1115132");
	НовоеВложение.Вставить("Название", "Универсальный передаточный документ (титул покупателя)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
		НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_УпдДоп_1115131_5_01";
	ПрефиксФайла = "ON_NSCHFDOPPOK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры);
	
КонецФункции
&НаКлиенте
Функция Утвердить_УкдДис_1115127_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "УкдДисПокуп");
	НовоеВложение.Вставить("Подтип", "1115128");
	НовоеВложение.Вставить("Название", "Универсальный Корректировочный документ (титул покупателя)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
	НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_УкдДис_1115127_5_01";
	ПрефиксФайла = "ON_KORSCHFDOPPOK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры);
	
КонецФункции
&НаКлиенте
Функция Утвердить_УкдКсчфДис_1115127_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	НовоеВложение = Новый Структура;
	НовоеВложение.Вставить("Тип", "УкдКсчфДисПокуп");
	НовоеВложение.Вставить("Подтип", "1115128");
	НовоеВложение.Вставить("Название", "Универсальный корректировочный документ (титул покупателя)");
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
	НовоеВложение.Вставить("ТребуетШифрования", "Да");
	КонецЕсли;
	ИмяXSLT = "Утвердить_УкдДис_1115127_5_01";
	ПрефиксФайла = "ON_KORSCHFDOPPOK_";
	
	сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры);
	
КонецФункции

//5.02
&НаКлиенте
Функция Утвердить_ЭДОНакл_1175010_5_02(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	Если ДопПараметры=Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("ВерсияФормата", "5.02");
	Возврат Утвердить_ЭДОНакл_1175010_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры);	
КонецФункции
&НаКлиенте
Функция Утвердить_АктВР_1175012_5_02(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	Если ДопПараметры=Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("ВерсияФормата", "5.02");
	Возврат Утвердить_АктВР_1175012_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры);	
КонецФункции
&НаКлиенте
Функция Утвердить_УкдДис_1115127_5_02(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	Если ДопПараметры=Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("ВерсияФормата", "5.02");
	Возврат Утвердить_УкдДис_1115127_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры);	
КонецФункции
&НаКлиенте
Функция Утвердить_УкдКсчфДис_1115127_5_02(Кэш, СоставПакета, Вложение, Действие, ДопПараметры=Неопределено) Экспорт
	Если ДопПараметры=Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры.Вставить("ВерсияФормата", "5.02");
	Возврат Утвердить_УкдКсчфДис_1115127_5_01(Кэш, СоставПакета, Вложение, Действие, ДопПараметры);	
КонецФункции

&НаКлиенте
Функция сбисСформироватьТитулПолучателяАктаНакладной_5_01(Кэш, СоставПакета, Вложение, НовоеВложение, Действие, ИмяXSLT, ПрефиксФайла, ДопПараметры = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("Шифрование") И ДопПараметры.Шифрование Тогда
	ДвоичныеДанныеBase64 = ПолучитьДанныеЗашифрованногоФайла(Кэш,Вложение.Файл.Ссылка);
	XMLФайла = Кэш.ОбщиеФункции.сбисТекстИзBase64(ДвоичныеДанныеBase64);
	Иначе
		XMLФайла = ПолучитьДанныеФайла(Кэш,Вложение.Файл.Ссылка);
	КонецЕсли;
	СтруктураФайла = Кэш.ОбщиеФункции.ЗаполнитьСтруктуруФайла(XMLФайла);
	ЭП = Новый Массив;
	Для Каждого Подпись Из Вложение.Подпись Цикл
		ФайлПодписи = сбисПолучитьФайл(Кэш, Подпись.Файл.Ссылка);
		ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлПодписи);
		ЭП.Добавить(Новый Структура("ЭП",СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеПодписи),Символы.ПС,""),Символы.ВК,"")));
	КонецЦикла;
	ИдПол =  СтруктураФайла.Файл.СвУчДокОбор.ИдПол;
	ИдОтпр =  СтруктураФайла.Файл.СвУчДокОбор.ИдОтпр;
	ДатаДок = ТекущаяДата();
	ИмяФайла = ПрефиксФайла+ИдОтпр+"_"+ИдПол+"_"+формат(ДатаДок,"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор());	
	ДанныеПолучателя = Новый Структура;
	ДанныеПолучателя.Вставить("ИдФайл", ИмяФайла);
	ДанныеПолучателя.Вставить("ДатаДок", формат(ДатаДок,"ДФ=dd.MM.yyyy"));
	ДанныеПолучателя.Вставить("ВремДок", формат(ДатаДок,"ДФ=HH.mm.ss"));
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ЕстьРасхождения") И ДопПараметры.ЕстьРасхождения Тогда
		ДанныеПолучателя.Вставить("КодИтога", "2");
		ДанныеПолучателя.Вставить("СодОпер", "Товары(груз)/услуги(результаты работ, права) принял с расхождениями");
	КонецЕсли;
	Подписант = Кэш.ОбщиеФункции.сбисПолучитьФИО(Действие.Сертификат.ФИО);
	Подписант.Вставить("ИНН",Действие.Сертификат.ИНН);
	Подписант.Вставить("Должность",Действие.Сертификат.Должность);
	ДанныеПолучателя.Вставить("Подписант", Подписант);
	ДанныеПолучателя.Вставить("Подпись", ЭП);
	ДанныеПолучателя.Вставить("НашаОрганизация", СоставПакета.НашаОрганизация);
	СтруктураФайла.Файл.Вставить("ДанныеПолучателя", ДанныеПолучателя);
	ОшибкаПреобразования = Ложь;
	РезультатПреобразования = Кэш.ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент(Кэш, СтруктураФайла, ИмяXSLT, Новый Структура, ОшибкаПреобразования);
	Если ОшибкаПреобразования Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатПреобразования,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисСформироватьТитулПолучателяАктаНакладной_5_01"));
		XMLДокумента = Неопределено;
	Иначе
		XMLДокумента = РезультатПреобразования;
	КонецЕсли;
	
	НовоеВложение.Вставить("ИмяФайла", ИмяФайла+".xml");
	НовоеВложение.Вставить("XMLДокумента", XMLДокумента);
	
	Если ЗначениеЗаполнено(ДопПараметры) И ДопПараметры.Свойство("ВерсияФормата") Тогда
		НовоеВложение.Вставить("ВерсияФормата", ДопПараметры.ВерсияФормата);
	Иначе
	НовоеВложение.Вставить("ВерсияФормата", "5.01");
	КонецЕсли;
	НовоеВложение.Вставить("Служебный", "Да");
	НовоеВложение.Вставить("Дата", формат(ДатаДок,"ДФ=dd.MM.yyyy"));
	
	СоставПакета.Вложение.Добавить(НовоеВложение);	
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
	// Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Обработка служебных документов",ГлавноеОкно);
	СписокИНН = Новый СписокЗначений;
	МассивОрганизаций = ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			КонецЕсли;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ПараметрыВвода = Новый Структура("СертификатИмя", Кэш.ОбщиеФункции.СформироватьЗаголовокСертификатаДляФормыВвода(Кэш, Сертификат));
			КодАктивации = ФормаВводаПинкода.Показать(ПараметрыВвода);
			Если	Не	ЗначениеЗаполнено(КодАктивации)
				Или		КодАктивации.ПинКод = "" Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Ложь;	
			КонецЕсли;
			Сертификат.Вставить("КодАктивации", КодАктивации.ПинКод);
		КонецЦикла;
		Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	Для Каждого оОрганизация из МассивОрганизаций Цикл
		ИзвещенияОбработаны = ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация);
	КонецЦикла;	
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции


//////////////// Вспомогательные функции/////////////////////

&НаКлиенте
Функция ПолучитьФильтр(ГлавноеОкно,ДопПараметры) Экспорт
	// Формирует структуру фильтра для списочных методов SDK	
	filter = Новый Структура; 
	
	filter.Вставить( "ДопПоля", "Этап,Лицо2");
	
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаНач) Тогда
		filter.Вставить( "ДатаС", Формат(ГлавноеОкно.ФильтрДатаНач,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаКнц) Тогда
		filter.Вставить( "ДатаПо", Формат(ГлавноеОкно.ФильтрДатаКнц,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ГлавноеОкно.СписокСостояний.Количество()>0 и ГлавноеОкно.ФильтрСостояние<>ГлавноеОкно.СписокСостояний.НайтиПоИдентификатору(0).Значение Тогда
		filter.Вставить( "Состояние", ГлавноеОкно.ФильтрСостояние ); 
	КонецЕсли;
	Если ГлавноеОкно.ФильтрТипыДокументов.Количество()>0 тогда
		списокТипДок="";//"ЭДОНакл,Договор,СчФктр"
		для каждого типДок из ГлавноеОкно.ФильтрТипыДокументов цикл
			списокТипДок=списокТипДок+типДок.Значение+",";
		конеццикла;
		filter.Вставить( "ТипВложения", лев(списокТипДок,СтрДлина (списокТипДок)-1)); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрОрганизация) Тогда
		org = Новый Структура; 
		ИННОрг = СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН"));
		Если СтрДлина(ИННОрг) = 12 Тогда
			СвФЛ = Новый Структура;
			СвФЛ.Вставить( "ИНН", ИННОрг ); 
			org.Вставить( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = Новый Структура;
			СвЮЛ.Вставить( "ИНН", ИННОрг ); 
			СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "КПП") );
			org.Вставить( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		filter.Вставить( "НашаОрганизация", org ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрКонтрагент) Тогда
		kontr = Новый Структура; 
		ИННКонтр = СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН"));
		Если ЗначениеЗаполнено(ИННКонтр) Тогда // если выбрана папка контрагентов, то ИНН получается NaN
			Если СтрДлина(ИННКонтр) = 12 Тогда
				СвФЛ = Новый Структура;
				СвФЛ.Вставить( "ИНН", ИННКонтр ); 
				kontr.Вставить( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = Новый Структура;
				СвЮЛ.Вставить( "ИНН", ИННКонтр ); 
				СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "КПП") );
				kontr.Вставить( "СвЮЛ", СвЮЛ );
			КонецЕсли;
			Если ГлавноеОкно.ФильтрКонтрагентСФилиалами Тогда
				kontr.Вставить( "ДопПоля", "СФилиалами" );
			КонецЕсли;
			filter.Вставить( "Контрагент", kontr );
		КонецЕсли;
	КонецЕсли;
	//a.v. matyakin
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрМаска) Тогда
		filter.Вставить( "Маска",ГлавноеОкно.ФильтрМаска); 
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Элемент Из ДопПараметры Цикл
			filter.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
	КонецЕсли;
	
	navigation = Новый Структура; 
	navigation.Вставить( "РазмерСтраницы", строка(ГлавноеОкно.ЗаписейНаСтранице) ); 
	navigation.Вставить( "Страница", строка(ГлавноеОкно.ФильтрСтраница-1) ); 
	filter.Вставить( "Навигация", navigation );
	
	Возврат filter;	
КонецФункции
&НаКлиенте
Функция СокращенноеФИО(Кэш, ФИО)
	// Формирует сокращенное ФИО из полного	
	ФИО = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(ФИО," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,Лев(ФИО[1],1)+".","");
	Отчество = ?(ФИО.Количество()>=3,Лев(ФИО[2],1)+".","");
	Возврат Фамилия+" "+Имя+Отчество;
КонецФункции
//&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита)
	// Получает значение реквизита объекта 1С	
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции

//Получает текущую дату в миллисекундах с начала 1970г
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "getMillisecondsSinceEpoch2", Новый Структура, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат 0;
	КонецЕсли;
	Возврат Результат;
КонецФункции
//&НаСервереБезКонтекста
функция сбисСтрокаВBASE64(строка, кодировка = "windows-1251") экспорт
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(строка);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, кодировка);
	ТекстXMLBase64 = сбисФайлВBASE64(ИмяВрФ);  
	Попытка 
		УдалитьФайлы(ИмяВрФ); 
	Исключение 
	КонецПопытки;	
	Возврат ТекстXMLBase64;
КонецФункции
//&НаСервереБезКонтекста
функция сбисBASE64ВСтроку(ТекстXMLBase64) экспорт
	ДвоичныеДанныеXML = Base64Значение(ТекстXMLBase64);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ДвоичныеДанныеXML.Записать(ИмяВрФ);
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать(ИмяВрФ);
	html_text = ТекстДок.ПолучитьТекст();
	Попытка 
		УдалитьФайлы(ИмяВрФ); 
	Исключение 
	КонецПопытки;
	Возврат html_text;
КонецФункции
//&НаСервереБезКонтекста
функция сбисФайлВBASE64(ПолноеИмяФайла) экспорт
	ДвоичныеДанныеXML = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ТекстXMLBase64 = СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеXML),Символы.ПС,""),Символы.ВК,"");  
	Возврат ТекстXMLBase64;
КонецФункции
&НаКлиенте
функция сбисФайлСКлиентаВBASE64(ПолноеИмяФайла) экспорт
	# Если НЕ ВебКлиент Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
		Возврат сбисФайлНаСервереВBASE64(ДвоичныеДанные);
	# Иначе
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла,""));
		ПомещенныеФайлы = Новый Массив;
		Попытка
			ПоместитьФайлы(ПомещаемыеФайлы,ПомещенныеФайлы,,Ложь, УникальныйИдентификатор);
			Возврат сбисФайлНаСервереВBASE64(ПомещенныеФайлы, Истина);
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	# КонецЕсли
	Возврат "";
КонецФункции
//&НаСервереБезКонтекста
функция сбисФайлНаСервереВBASE64(Данные, ЭтоВебКлиент = Ложь) экспорт
	Если ЭтоВебКлиент Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Данные[0].Хранение);
	Иначе
		ДвоичныеДанные = Данные;
	КонецЕсли;
	Возврат Base64Строка(ДвоичныеДанные);
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
	// Если более часа не проверяли статусы, то выводим красное предупреждение	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);
	ДатКнцЧтенияСтатусов= Неопределено;
	ОбновитьСтатусы		= Ложь;
	Если		СтруктураНастроек.Свойство("ДатКнцЧтенияСтатусов", ДатКнцЧтенияСтатусов)
		И	(	Не	ЗначениеЗаполнено(ДатКнцЧтенияСтатусов)
			Или		ТекущаяДата()-ДатКнцЧтенияСтатусов > 3600) Тогда
		ОбновитьСтатусы = Истина;
	КонецЕсли;	
	сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = ОбновитьСтатусы;

КонецПроцедуры
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
	// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название) Экспорт
	// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Процедура сбисПрерываниеПользователем()
	// Прячет состояние при прерывании отправки, обработки служебных, обработки статусов	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
	// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ЕстьИзменения и ПоследнееИзменение.Свойство("Событие") Тогда
		КоличествоСобытий = ПоследнееИзменение.Событие.Количество();
		СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя,ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор);
		МестныйКэш.ФормаНастроек.СохранитьПараметрыСБИС(МестныйКэш,СтруктураНастроек, МестныйКэш.Парам.ИдентификаторНастроек);
		ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя;
		ГлавноеОкно.ИдентификаторПоследнегоСобытия = ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор;
	КонецЕсли;
	МестныйКэш.ФормаНастроек.СохранитьПараметрыСБИС(МестныйКэш,Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), МестныйКэш.Парам.ИдентификаторНастроек);
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры

////////////////Методы взаимодействия с плагином/////////////

////////////////////////////////////////////////////
//////////////////Автообновление////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисПолучитьПараметрыАктуальнойВерсии(Кэш, ПараметрыОбновления, Отказ) Экспорт
	Возврат сбисСохранитьВФайлПоСсылке(Кэш, ПараметрыОбновления, Отказ);
КонецФункции

&НаКлиенте
Функция сбисСохранитьВФайлПоСсылке(Кэш, сбисПараметрыФайла, Отказ) Экспорт
	
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	ПараметрыМетода		= Новый Структура("filename_in, uri_in", сбисПараметрыФайла.ИмяФайла);
	Если Не сбисПараметрыФайла.Свойство("URLПолный", ПараметрыМетода.uri_in) Тогда
		ПараметрыМетода.uri_in = сбисПараметрыФайла.Протокол + "://" + сбисПараметрыФайла.Сервер + сбисПараметрыФайла.URL;
	КонецЕсли;
	сбисРезультатЧтения = сбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURIToFile2", ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(сбисРезультатЧтения,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисСохранитьВФайлПоСсылке", 700, "Неизвестная ошибка подключения", сбисРезультатЧтения.details);
	КонецЕсли;	
	Возврат Истина;	
	
КонецФункции

////////////////////////////////////////////////////
////////////////////Авторизация/////////////////////
////////////////////////////////////////////////////

//Авторизуется по логину/паролю	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,Отказ=Ложь) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату", Ложь, Истина, Ложь);
	МестныйКэш = Кэш;
	
	РезультатЗапроса = СформироватьНастройкиПодключения(Кэш,,ДопПараметры,Отказ);	
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура(	"Метод,				Параметры,											ДополнительныеПараметры", 
											"Authenticate2",	Новый Структура("login,password", Логин, Пароль),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", СбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
	
КонецФункции

// Авторизуется по сертификату	
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,Отказ=Ложь) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату", Ложь, Истина, Истина);
	МестныйКэш = Кэш;
	
	РезультатЗапроса = СформироватьНастройкиПодключения(Кэш,,ДопПараметры,Отказ);	
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура(	"Метод,							Параметры,							ДополнительныеПараметры", 
											"AuthenticateByCertificate2",	Новый Структура("id", Сертификат),	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);	
КонецФункции

// Авторизуется по токену	
&НаКлиенте
Функция АвторизоватьсяПоТокену(Кэш,Отказ=Ложь) Экспорт 	
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПоСертификату", Ложь, Истина, Ложь);
	МестныйКэш = Кэш;
	
	Токен = сбисПолучитьФорму("API").ПолучитьТокенДляТекущегоПользователя(Кэш, Отказ);
	Если Отказ Тогда
		Возврат Токен;
	КонецЕсли;
	
	РезультатЗапроса = СформироватьНастройкиПодключения(Кэш,,ДопПараметры,Отказ);	
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;

	ДопПараметры.Вставить("ОчиститьПараметры", Истина);
	ПараметрыРезультат = Новый Структура( "Метод, Параметры, ДополнительныеПараметры", "AuthenticateByToken", Новый Структура("Token", Токен), ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыРезультат.Метод, ПараметрыРезультат.Параметры, ДопПараметры, Отказ));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

// функция получает токен по текущему сиду	
&НаКлиенте
функция ПолучитьТикетДляТекущегоПользователя(Кэш) Экспорт
	Отказ = Ложь;
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "GetTicketForCurrentSid", Новый Структура, Новый Структура,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

//Функция обрабатывает результат авторизации
&НаКлиенте
Функция СбисРезультатАвторизации(Кэш, ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если Не Отказ Тогда
		Кэш.СБИС.Авторизован = Истина;
		Возврат РезультатАвторизации;
	КонецЕсли;
	Если РезультатАвторизации.code = 303 Тогда
		//Если код ошибки - 303, значит ожидается подтверждение аутентификации. Разбираем строку в details ошибки для выборки данных формирования СМС и последующей авторизации.
		addInfo = Новый Структура;
		addInfo.Вставить("Идентификатор",		РезультатАвторизации.dump.data.addinfo.ResourceID);
		addInfo.Вставить("ИдентификаторСессии",	РезультатАвторизации.dump.data.addinfo.SessionID);
		addInfo.Вставить("МетодВалидации",		РезультатАвторизации.dump.data.addinfo.MethodToValidate);
		addInfo.Вставить("ПоСертификату",		ПараметрыРезультата.ДополнительныеПараметры.ПоСертификату);
		РезультатАвторизации.Вставить("data", Новый Структура("addinfo", addinfo));
	//Плагин сам переключает домен.	
	//ИначеЕсли РезультатАвторизации.code = 759 Тогда
	//	РезультатАвторизации = Кэш.ОбщиеФункции.сбисПереключитьДомен(Кэш, ПараметрыРезультата, Отказ)
	КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции

//Закрывает текущую сессию	
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт 	
	Отказ				= Ложь;
	Кэш.КэшСертификатов	= Новый Структура;
	ДопПараметрыЗапроса	= Новый Структура;
	Кэш.СБИС.Авторизован = Ложь;
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "TerminateSession2", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции	

//Получает строковое представление ФИО о текущем пользователе	
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "ReadCurrentUserInfo2", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	Фамилия	= Неопределено;
	Имя		= Неопределено;
	Отчество= Неопределено;
	
	Если Не РезультатЗапроса.Пользователь.Свойство("Фамилия", Фамилия) Тогда
		Фамилия = "";
	КонецЕсли;
	Если Не РезультатЗапроса.Пользователь.Свойство("Имя", Имя) Тогда
		Имя = "";
	КонецЕсли;
	Если Не РезультатЗапроса.Пользователь.Свойство("Отчество",	Отчество) Тогда
		Отчество = "";
	КонецЕсли;
	Возврат Фамилия+" "+Имя+" "+Отчество;
КонецФункции

//Отправляет код авторизации на номер телефона, указанный в карточке сотрудника
&НаКлиенте
Функция ОтправитьКодАвторизации(Кэш, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	
	Парам = Новый Структура("Идентификатор", ПараметрыПодтверждения.Идентификатор);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "SendAuthenticateCode", Парам, ДопПараметрыЗапроса, Отказ);
КонецФункции

//Функция выполняет подтверждение введенного кода для двухфакторной аутентификации
&НаКлиенте
Функция ПодтвердитьАвторизацию(Кэш, ПараметрыВвода, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	
	ПараметрыЗапроса = Новый Структура("Код, Идентификатор, Метод, ПоСертификату", ПараметрыВвода.ПинКод, ПараметрыПодтверждения.Идентификатор, ПараметрыПодтверждения.МетодВалидации, ПараметрыПодтверждения.ПоСертификату);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "ConfirmAuthentication", ПараметрыЗапроса, ДопПараметрыЗапроса, Отказ);
	Если Не Отказ Тогда
		Кэш.СБИС.Авторизован = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Получает список сертификатов, пригодных для авторизации	
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш, ТекстОшибки) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ВернутьОшибку, ЕстьРезультат, ВремяОжиданияОтвета", Истина, Истина, 120);      // увеличено время ожидания, т.к. через сбисПараметры можно переопределить только для вызовов после авторизаии
	МестныйКэш			= Кэш;
	
	РезультатЗапроса = СформироватьНастройкиПодключения(Кэш,,ДопПараметрыЗапроса,Отказ);	
	Если Отказ Тогда
		ТекстОшибки = РезультатЗапроса.message;
		Возврат Ложь;
	КонецЕсли;
	
	ДопПараметрыЗапроса.Вставить("ЕстьРезультат", Истина);
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "ReadCertificatesForAuth", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		ТекстОшибки = РезультатЗапроса.message;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработатьСписокСертификатовДляАвторизации(Кэш, РезультатЗапроса["Сертификат"]);
КонецФункции

&НаКлиенте
Функция ОбработатьСписокСертификатовДляАвторизации(Кэш, ObjectList) Экспорт
	Если ObjectList = Неопределено Тогда
		Возврат ObjectList;
	КонецЕсли;
	СписокСертификатов = Новый СписокЗначений();
	Размер = ObjectList.Количество();
	Для сч=0 По Размер-1 Цикл
		Сертификат = ObjectList[сч];
		Если Сертификат.Аутентификация.Зарегистрирован = "Да" Тогда
			Если Сертификат.Свойство("ДействителенПо") Тогда
				Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
					ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
				Иначе
					ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
				КонецЕсли;
			КонецЕсли;
			СписокСертификатов.Добавить(Сертификат,СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность")," ("+Сертификат.Должность+"), ","")
			        + ?(Сертификат.Свойство("Название"),Сертификат.Название+ " ","")
					+ ?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","")
			        +?(Сертификат.Свойство("ДействителенПо"),(", действителен до "+Формат(ДействителенПо,"ДЛФ=DD")),""));
		КонецЕсли;
	КонецЦикла;
	Возврат СписокСертификатов;

КонецФункции

&НаКлиенте
Функция ОбработатьСписокСертификатовДляАктивации(Кэш, ObjectList) Экспорт
	Если ObjectList = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СписокСертификатов	= Новый СписокЗначений();
	Размер = ObjectList.Количество();
	Для сч=0 По Размер-1 Цикл
		Сертификат = ObjectList[сч];
		Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
			ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
		Иначе
			ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
		КонецЕсли;
		Если ДействителенПо>=ТекущаяДата() Тогда
			СписокСертификатов.Добавить(Сертификат);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокСертификатов;
КонецФункции

&НаКлиенте
Функция СбисВключенРезервныйДомен(Кэш, АдресСервера) Экспорт
	Возврат Ложь;
КонецФункции

//Проверяет активна ли текущая сессия
&НаКлиенте
Функция СбисСессияДействительна(Кэш) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "CheckSession2", Новый Структура, ДопПараметрыЗапроса,Отказ);
	Если Не Отказ
		И РезультатЗапроса.СессияАктивна = "Да" Тогда
		Возврат 1;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция СбисИдАккаунта(Кэш) Экспорт
	Возврат Неопределено;
КонецФункции

//Устанавливает в SDK настройки подключения		
&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "", ДополнительныеПараметрыЗапроса=Неопределено, Отказ=Ложь) Экспорт
	Параметр = Новый Структура("host", СтрЗаменить(Кэш.СБИС.АдресСервера,".ru/",".ru"));
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Параметр.Вставить("sid",ИдентификаторСессии);
	КонецЕсли;
	Если ДополнительныеПараметрыЗапроса = Неопределено Тогда
		ДополнительныеПараметрыЗапроса = Новый Структура;	
	КонецЕсли;
	Рез = сбисОтправитьИОбработатьКоманду(Кэш,"setConnectionInfo",Параметр, ДополнительныеПараметрыЗапроса,Отказ);
	ПолучитьНастройкиПлагина(Кэш, Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Ложь), Отказ);
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция СбисУстановитьВремяОжидания(Кэш, ВремяОжидания) Экспорт
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("ВремяОжиданияОтвета", ВремяОжидания);
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиПлагина(Кэш, ДополнительныеПараметрыЗапроса=Неопределено, Отказ=Ложь) Экспорт
	Если 	(	Кэш.Парам.СпособОбмена = 5 Или Кэш.Парам.СпособОбмена = 7)
		И		Кэш.Парам.ШифроватьВыборочно = Истина
		И	Не Кэш.Свойство("КаталогЗашифрованных") Тогда
		Параметр = Новый Структура();
		Если ДополнительныеПараметрыЗапроса = Неопределено Тогда
			ДополнительныеПараметрыЗапроса = Новый Структура;	
		КонецЕсли;
		Рез = сбисОтправитьИОбработатьКоманду(Кэш,"getPluginSettings",Параметр, ДополнительныеПараметрыЗапроса,Отказ);	
		Если Не Отказ Тогда
			Если Рез.Свойство("NEW_SETTINGS") и Рез.NEW_SETTINGS.Свойство("SecureLoading") и Рез.NEW_SETTINGS.SecureLoading.Свойство("fromFolder") и Рез.NEW_SETTINGS.SecureLoading.encrypt = Истина Тогда
				Кэш.Вставить("КаталогЗашифрованных", Рез.NEW_SETTINGS.SecureLoading.fromFolder);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции	

////////////////////////////////////////////////////
////////////////////Сертификаты/////////////////////
////////////////////////////////////////////////////

//Функция активирует серверные сертификаты для определенного списка ИНН	
&НаКлиенте
Функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	ДопПараметрыЗапроса = Новый Структура;
	Отказ = Ложь;
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		ПараметрыАктивации = Новый Структура;
		ПараметрыАктивации.Вставить("Отпечаток", Сертификат.Отпечаток);
		ПараметрыАктивации.Вставить("КодАктивации", Сертификат.КодАктивации);
		
		РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "ActivateCertificate", ПараметрыАктивации, ДопПараметрыЗапроса,Отказ);
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Не Отказ;
КонецФункции

//Получает список доступных сертификатов	
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
	МестныйКэш			= Кэш;
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если filter = Неопределено Тогда
		filter = Новый Структура;
	КонецЕсли;
	
	РезультатЗапроса = СбисОтправитьИОбработатьКоманду(Кэш, "ReadCertificates", filter, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Возврат ОбработатьСписокСертификатовДляАктивации(Кэш, РезультатЗапроса.Сертификат);
КонецФункции

//Функция активирует серверные сертификаты для определенного списка ИНН	
&НаКлиенте
Функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	СписокСертификатовДляАктивации = Новый СписокЗначений;
	СписокСертификатов = Кэш.Интеграция.ПолучитьСписокСертификатов(Кэш);
	Для Каждого ИНН Из СписокИНН Цикл
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.ИНН = ИНН.Значение Тогда
				Если Сертификат.Ключ.Тип = "Серверный" и Сертификат.Ключ.Активирован = "Нет" Тогда
					СписокСертификатовДляАктивации.Добавить(Сертификат);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокСертификатовДляАктивации;
КонецФункции

//Функция получает код активации для сертификата
&НаКлиенте
Функция ПолучитьКодАктивацииСертификата(Кэш, Сертификат) Экспорт
	МестныйКэш			= Кэш;
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура;
	
	ПараметрыАктивации = Новый Структура("Отпечаток", Сертификат.Отпечаток);
	
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "AcquireCertificateActivation", ПараметрыАктивации, ДопПараметрыЗапроса,Отказ);
	Возврат Не Отказ;
КонецФункции

////////////////////////////////////////////////////
/////////////////Списочные методы///////////////////
////////////////////////////////////////////////////

//Получает список документов реализации с online.sbis.ru 	
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	Отказ						= Ложь;
	СтруктураДляОбновленияФормы	= Новый Структура;
	ГлавноеОкно					= Кэш.ГлавноеОкно;
	
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Результат = Кэш.Интеграция.СБИСПлагин_СписокДокументов(Кэш, filter, Новый Структура, Отказ);
	Если Отказ Тогда
		ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	
	ГлавноеОкно.ФильтрЕстьЕще	= Результат.Навигация.ЕстьЕще="Да";
	ГлавноеОкно.ФильтрСтраница	= Число(Результат.Навигация.Страница)+1;
	Выборка = Результат.Документ;
	
	МассивДокументов = Новый Массив;	
	
	Размер = Выборка.Количество();
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура("Проведен", -1);   // alo Меркурий 
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Статус", Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("Контрагент", оДокумент.Контрагент.Название);
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("НашаОрганизация", оДокумент.НашаОрганизация.Название);
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//  << alo Меркурий
		если счВложений =0 и Кэш.Парам.Меркурий тогда
			МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, ""));
		конецесли;		//  alo Меркурий >>
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		//  << alo_ТекущийЭтап
		если оДокумент.свойство("Этап") И оДокумент.Этап.количество()>0 тогда
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Этап[0].Название);
		иначе 
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Состояние.Название);
		конецесли;
		//  alo_ТекущийЭтап >>
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		МассивДокументов.Добавить(НоваяСтр)
	КонецЦикла;
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции

//Получает статусы документов сбис
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш) Экспорт
	Отказ		= Ложь;
	ДопПараметры= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	
	//Тут ищем новую функцию. Переназначение на старые обработчики происходит внутри типовой формы работы со статусами
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("СбисЗаписатьИзмененияПоДокументам1С", Кэш.ФормаРаботыСоСтатусами, "", Кэш);
	// << alo 
	Если Кэш.парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьИзмененияПоДокументам1С");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	// alo >>
	фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений","РаботаСДокументами1С","",Кэш);
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	
	СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);
	Если (Не ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов)) 
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) и СтруктураНастроек.ДатКнцЧтенияСтатусов>=СтруктураНастроек.ДатНачЧтенияСтатусов)
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ТекущаяДата()-СтруктураНастроек.ДатНачЧтенияСтатусов>30) Тогда
		Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов) Тогда
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов = НачалоДня(ТекущаяДата());
		КонецЕсли;
		filter = Новый Структура; 
		filter.Вставить( "ПолныйСертификатЭП", "Нет");
		Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
			filter.Вставить( "ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
		Иначе
			filter.Вставить( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
		КонецЕсли;
		
		navigation = Новый Структура; 
		navigation.Вставить( "РазмерСтраницы", "100" ); 
		filter.Вставить( "Навигация", navigation );
		//navigation.Вставить( "ВернутьРазмерСписка", "Да" );
		сч = 0;
		счДок = 0;
		оДокумент = Новый Структура;
		ЕстьИзменения = Ложь;
		ЕстьЕще = Истина;
		ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
		Пока ЕстьЕще Цикл
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатНачЧтенияСтатусов", ТекущаяДата()),Кэш.Парам.ИдентификаторНастроек);
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			МассивДокументов = Новый Массив;
			Если сч>0 Тогда
				Если оДокумент.Свойство("Событие") Тогда
					КоличествоСобытий = оДокумент.Событие.Количество();
					filter.Вставить( "ИдентификаторСобытия", оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
					filter.Удалить( "ДатаВремяС");
				Иначе
					Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), Кэш.Парам.ИдентификаторНастроек);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Результат = Кэш.Интеграция.СБИСПлагин_СписокИзменений(Кэш, filter, ДопПараметры, Отказ);
			Если Отказ Тогда
				//Если проблемы с плагином, то просто сообщим ошибку и закончим работу.
				Если	Результат.code = 775
					Или	Результат.code = 400 Тогда
					ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
					Возврат Ложь;
				КонецЕсли;
				//Если событие на онлайне удалили, то пытаемся по дате запросить
				Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) и сч = 0 Тогда
					filter = Новый Структура;
					filter.Вставить( "ПолныйСертификатЭП", "Нет");
					filter.Вставить( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") );
					filter.Вставить( "Навигация", navigation );
					
					Отказ = Ложь;
					Результат = Кэш.Интеграция.СБИСПлагин_СписокИзменений(Кэш, filter, ДопПараметры, Отказ);
					Если Отказ Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе	
					ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
					ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
					Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), Кэш.Парам.ИдентификаторНастроек);
					Возврат Ложь;
				КонецЕсли;    
			КонецЕсли;
			
			сч = сч + 1;
			СписокИзменений = Результат;
			ЕстьЕще = СписокИзменений.Навигация.ЕстьЕще="Да";
			Для Каждого оДокумент Из СписокИзменений.Документ Цикл
				счДок = счДок + 1;
				ЕстьИзменения = Истина;
				сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
				МассивДокументов.Добавить(оДокумент);
				Если Кэш.ИспользоватьОбработчикиСобытий = Истина Тогда
					ИмяОбработчика = СтрЗаменить("сбис"+оДокумент.Регламент.Название+"_"+оДокумент.Событие[0].Название, " ", "_");
					фрмОбработчика = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяОбработчика,"РаботаСДокументами1С","",Кэш);
					Если фрмОбработчика <> Ложь Тогда
						Контекст = Новый структура("Док, Кэш", оДокумент, Кэш);
						Результат=вычислить("фрмОбработчика."+ИмяОбработчика+"(Контекст)");
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			ПоследнееИзменение = оДокумент;
			//сбисПоказатьСостояние("Запись статусов в регистр сведений", ГлавноеОкно);
			//фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
			фрм.СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, Новый Структура);
			// << alo 
			если кэш.парам.СостояниеЭД тогда
				фрмЭД.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
			конецесли; // alo >>
			Если фрмПольз<>Ложь Тогда
				фрмПольз.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
			КонецЕсли;
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("ДатКнцЧтенияСтатусов", ТекущаяДата()), Кэш.Парам.ИдентификаторНастроек);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;	
		Если ЕстьИзменения и оДокумент.Свойство("Событие") Тогда
			КоличествоСобытий = оДокумент.Событие.Количество();
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", оДокумент.Событие[КоличествоСобытий-1].ДатаВремя,оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,СтруктураНастроек, Кэш.Парам.ИдентификаторНастроек);
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = оДокумент.Событие[КоличествоСобытий-1].ДатаВремя;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия = оДокумент.Событие[КоличествоСобытий-1].Идентификатор;
		КонецЕсли;
	Иначе
		Сообщить("Обновление статусов уже выполняется по запросу другого пользователя.");
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции

//Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
	Отказ						= Ложь;
	СтруктураДляОбновленияФормы	= Новый Структура;
	МестныйКэш					= Кэш;
	
	ЕстьЕще				= Истина;
	ТекущаяСтраница		= 0;
	МассивОрганизаций	= Новый Массив;
	
	Пока ЕстьЕще Цикл
		filter		= Новый Структура;
		navigation	= Новый Структура;
		navigation.Вставить( "Страница", строка(ТекущаяСтраница));
		filter.Вставить( "Навигация", navigation );
		
		Результат = Кэш.Интеграция.СБИСПлагин_СписокНашихОрганизаций(Кэш, filter, Новый Структура,Отказ);
		Если Отказ Тогда
			Возврат МассивОрганизаций;
		КонецЕсли;
		
		//Получаем список наших организаций
		Выборка	= Результат.НашаОрганизация;
		Размер	= Выборка.Количество();
		СтруктураОрганизаций = Новый Структура;
		Для сч=0 По Размер-1 Цикл
			оОрганизация = Выборка[сч];	
			Организация1С = Ложь;
			Организация1С = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, оОрганизация);
			Если Организация1С<>Ложь Тогда
				оОрганизация.Вставить("Название", строка(Организация1С));
				
				МассивОрганизаций.Добавить(оОрганизация);
				// добавляем ИНН в список для активации серверных ключей
				Если оОрганизация.Свойство("СвФЛ") Тогда
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
						СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
					КонецЕсли;
				Иначе
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
						СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтраница = ТекущаяСтраница + 1;
		ЕстьЕще = Результат.Навигация.ЕстьЕще="Да";
	КонецЦикла;
	Возврат МассивОрганизаций;
КонецФункции

//Получает список документов по событиям с online.sbis.ru	
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
	Отказ						= Ложь;
	МестныйКэш					= Кэш;
	ГлавноеОкно					= Кэш.ГлавноеОкно;
	СтруктураДляОбновленияФормы	= Новый Структура;

	Результат = Кэш.Интеграция.СБИСПлагин_СписокДокументовПоСобытиям(Кэш, filter, Новый Структура,Отказ) ;
	Если Отказ Тогда
		ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	
	ГлавноеОкно.ФильтрЕстьЕще = Результат.Навигация.ЕстьЕще="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.Навигация.Страница)+1;
	Выборка = Результат.Реестр;
	МассивДокументов = Новый Массив;	
	Размер = Выборка.Количество();
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно, Мин(100,Окр((сч+1)*100/Размер)));
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("Статус", Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		//НоваяСтр.Вставить("Примечание", оДокумент.Состояние.Примечание);
		НоваяСтр.Вставить("Дата", оДокумент.ДатаВремя);
		оДокумент = оДокумент.Документ;
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если НЕ Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//  << alo Меркурий
		если счВложений =0 и Кэш.Парам.Меркурий тогда
			МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, ""));
		конецесли; //  alo Меркурий >>
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		//  << alo_ТекущийЭтап
		если оДокумент.свойство("Этап") И оДокумент.Этап.количество()>0 тогда
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Этап[0].Название);
		иначе 
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Состояние.Название);
		конецесли;
		//  alo_ТекущийЭтап >>
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		НоваяСтр.Вставить("Проведен", -1);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции

//Получает список документов определенного типа с online.sbis.ru
&НаКлиенте
Функция сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт	
	Отказ						= Ложь;
	МестныйКэш					= Кэш;
	ГлавноеОкно					= Кэш.ГлавноеОкно;
	СтруктураДляОбновленияФормы	= Новый Структура;
	
	Если Не ТипЗнч(filter) = Тип("Структура") Тогда
		ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;

	Результат = Кэш.Интеграция.СБИСПлагин_СписокДокументов(Кэш, filter, Новый Структура, Отказ);
	Если Отказ Тогда
		ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	
	Выборка = Результат.Документ;
	
	МассивДокументов = Новый Массив;	
	
	Размер = Выборка.Количество();
	Навигация = Результат.Навигация; 
	Если Навигация.Свойство("ЕстьЕще") Тогда
		ГлавноеОкно.ФильтрЕстьЕще = Навигация.ЕстьЕще="Да";
	Иначе
		ГлавноеОкно.ФильтрЕстьЕще = Ложь;
	КонецЕсли;
	Если Навигация.Свойство("Страница") Тогда
		ГлавноеОкно.ФильтрСтраница = Число(Навигация.Страница)+1;
	Иначе
		ГлавноеОкно.ФильтрСтраница = 1;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;	
	Для сч=0 По Размер-1 Цикл
		
		оДокумент = Выборка[сч];
		
		НоваяСтр = Новый Структура("Контрагент,Организация,Лицо2,Срок");// alo СтатусГос
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Проведен", -1);
		НоваяСтр.Вставить("Статус", Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Организация = оДокумент.НашаОрганизация.Название; // alo СтатусГос
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("Участники") и оДокумент.Участники.Свойство("Лицо2") Тогда
			Попытка
				НоваяСтр.Лицо2 = оДокумент.Участники.Лицо2.СвЮЛ.Название;
			Исключение
				НоваяСтр.Лицо2 = оДокумент.Участники.Лицо2.СвФЛ.Фамилия + " " + оДокумент.Участники.Лицо2.СвФЛ.Имя + " " + оДокумент.Участники.Лицо2.СвФЛ.Отчество;
			КонецПопытки;
		КонецЕсли;
		Если оДокумент.Свойство("Расширение") и оДокумент.Расширение.Свойство("СрокПоставки") Тогда
			НоваяСтр.Срок = оДокумент.Расширение.СрокПоставки;
		КонецЕсли;
		
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		//  << alo_ТекущийЭтап
		если оДокумент.свойство("Этап") И оДокумент.Этап.количество()>0 тогда
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Этап[0].Название);
		иначе 
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Состояние.Название);
		конецесли;
		//  alo_ТекущийЭтап >>
		
		НоваяСтр.Вставить("Склад", ?(оДокумент.Свойство("Подразделение"),оДокумент.Подразделение.Название,""));
		НоваяСтр.Вставить("Комментарий", ?(оДокумент.Свойство("Примечание"),оДокумент.Примечание,""));
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если Размер>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдПакетаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы;
КонецФункции

//Получает список документов определенного типа с online.sbis.ru	
&НаКлиенте
Функция СбисПолучитьСписокЗадач(Кэш, сбисФильтр, Отказ) Экспорт
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат", Истина);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "getTaskList", сбисФильтр, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат, "ExtSDK.сбисПолучитьСписокЗадач");
	КонецЕсли;
	Возврат Результат
КонецФункции

////////////////////////////////////////////////////
/////////////////Чтение документов//////////////////
////////////////////////////////////////////////////

//Получает структуру документа СБИС
&НаКлиенте
Функция ПрочитатьДокумент(Кэш, ИдДок, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	ПараметрыЧтения = Новый Структура("Идентификатор",ИдДок);
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	ИначеЕсли ДопПараметры.Свойство("Этап") Тогда
		ПараметрыЧтения.Вставить("Этап", ДопПараметры.Этап);
	КонецЕсли;
	ДопПараметры.Вставить("ЕстьРезультат", Истина);
	
	оДокумент = Кэш.Интеграция.СБИСПлагин_ПрочитатьДокумент(Кэш, ПараметрыЧтения, ДопПараметры,Отказ);
	Если	Отказ//Для сохранения совместимости со старым функционалом.
		И	оДокумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оДокумент;
КонецФункции

//Получает html по xml	
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, Вложение) экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Если ТипЗнч(Вложение) = Тип("Структура") Тогда
		document = Новый Структура("XML", Вложение.XMLДокумента);
	Иначе   // для совместимости с внешними функциями (СформироватьРасхождение)
		document = Новый Структура("XML", Вложение);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(document) Тогда
		Возврат "";
	КонецЕсли;
	
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "GenerateHTMLFromXML", document, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат РезультатЗапроса.HTML;
КонецФункции

//Проверка подписей на вложении	
&НаКлиенте
Функция ПроверитьПодписиВложения(Кэш,Вложение) экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура;
	
	Если Вложение.Свойство("Подпись") Тогда
		Для Каждого Подпись из Вложение.Подпись Цикл
			ФайлПодписи = сбисПолучитьФайл(Кэш, Подпись.Файл.Ссылка);
			Если ФайлПодписи = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлПодписи);
			Подпись.Файл.Вставить("ДвоичныеДанные",СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанныеПодписи),Символы.ПС,""),Символы.ВК,""));
			
			Попытка
				УдалитьФайлы(ФайлПодписи);
			Исключение
			КонецПопытки;
		КонецЦикла;
		СбисОтправитьИОбработатьКоманду(Кэш, "CheckSignatures", Вложение, ДопПараметрыЗапроса, Отказ);
	КонецЕсли;
	Возврат Не Отказ;
КонецФункции

//Получает html по идентификаторам пакета и вложения
//Используется при просмотре документов из реестров СБИС
&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	
	Если Вложение.Зашифрован = "Да" Тогда
		Вложение.Вставить("ПодписьШтамп", ПолучитьПараметрыШтампа(Вложение));
	КонецЕсли;
	Парам = Новый Массив;
	document = Новый Структура();
	document.Вставить("Идентификатор",ИдДок);
	ext_document = Новый Структура;
	ext_document.Вставить("Зашифрован", Вложение.Зашифрован);
	ext_document.Вставить("Тип", Вложение.Тип);
	ext_document.Вставить("Подтип", Вложение.Подтип);
	ext_document.Вставить("ВерсияФормата", Вложение.ВерсияФормата);
	Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
		ext_document.Вставить("ПодВерсияФормата", Вложение.ПодВерсияФормата);
	КонецЕсли;
	Если Вложение.Свойство("ПодписьШтамп") и ЗначениеЗаполнено(Вложение.ПодписьШтамп) Тогда
		ext_document.Вставить("ПодписьШтамп", Вложение.ПодписьШтамп);
	КонецЕсли;
	ext_document.Вставить("СсылкаНаHTML", Вложение.СсылкаНаHTML);
	ext_document.Вставить("Файл", Вложение.Файл);
	document.Вставить("Вложение",ext_document);
	
	РезультатЗапроса = Кэш.Интеграция.СБИСПлагин_ПрочитатьДокументКакHTML(Кэш, document, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Если	Вложение.Зашифрован = "Да"
			Или	(	ЗначениеЗаполнено(Вложение.СсылкаНаHTML) 
				И	Вложение.Зашифрован = "Нет") Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатЗапроса);
		КонецЕсли;
		Возврат "";
	КонецЕсли;
	
	Возврат РезультатЗапроса.HTML;
КонецФункции

////////////////////////////////////////////////////
//////////////////Действия и операции///////////////
////////////////////////////////////////////////////

//Обрабатывает служебные документы организации	
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация)
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	param   = Новый Структура;
	Орг = оОрганизация;
	org = Новый Структура; 
	Если Орг.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", Орг.СвФЛ.ИНН); 
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", Орг.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", Орг.СвЮЛ.КПП );
		Если Орг.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(Орг.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", Орг.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	param.Вставить("НашаОрганизация",org);
	
	сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно);
	ИнформацияПоНеобработанным = Кэш.Интеграция.СБИСПлагин_ИнформацияОСлужебныхЭтапах(Кэш, param, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		ЕстьНеобработанныеИзвещения = "Да";
		Обработано = 0;
		ПодключитьОбработчикОжидания("сбисПрерываниеПользователем",0.1,Истина);
		Пока ЕстьНеобработанныеИзвещения = "Да" Цикл
			Результат = Кэш.Интеграция.СБИСПлагин_ОбработкаСлужебныхЭтапов(Кэш, param, ДопПараметрыЗапроса, Отказ);
			Если Отказ Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ЕстьНеобработанныеИзвещения = Результат.ЕстьНеобработанныеЭтапы;
			ОбработаноЗаИтерацию = Число(Результат.ОбработаноЭтапов);
			Обработано = Обработано + ОбработаноЗаИтерацию;
			
			сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно,Мин(100,Окр(Обработано*100/Всего)), "(прервать -  Ctrl+Break)");
			
			Если ОбработаноЗаИтерацию=0 и ЕстьНеобработанныеИзвещения = "Да" Тогда     // Необработанные есть, но обработать по какой-то причине не можем
				Прервать;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		ОтключитьОбработчикОжидания("сбисПрерываниеПользователем");
		ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Обрабатывает служебные по одному пакету
&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	Парам   = Новый Структура;
	Парам.Вставить("ИдентификаторДокумента",СоставПакета.Идентификатор);
	
	ИнформацияПоНеобработанным = Кэш.Интеграция.СБИСПлагин_ИнформацияОСлужебныхЭтапах(Кэш, Парам, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		ДопПараметрыЗапроса = Новый Структура;
		Кэш.Интеграция.СБИСПлагин_ОбработкаСлужебныхЭтапов(Кэш, Парам, ДопПараметрыЗапроса, Отказ);
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//Отправляет каталог товаров в СБИС	
&НаКлиенте
функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	param = Новый Структура;
	param.Вставить( "Файл", сбисСтрокаВBASE64(КаталогТоваров, "UTF-16") ); 
	//Выполняем метод и не ждём ответа. Если вызов упал, то сообщить
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ПолучитьОтвет", Ложь, Истина, Ложь);
	РезультатОтправки = Кэш.Интеграция.СБИСПлагин_ИмпортНоменклатурыИзCML(Кэш, param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатОтправки);
	КонецЕсли;
	Возврат Не Отказ;
КонецФункции

//&НаКлиенте
//Функция сбисЭмитироватьКМ(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
//	Отказ				= Ложь;
//	МестныйКэш			= Кэш;
//	
//	param = Новый Структура("url,method_name,method_params", Кэш.СБИС.АдресСервера+"/service/?srv=1", "СБИС.ЭмитироватьКМ", Новый Структура("Документ", Новый Структура("Идентификатор",ИдДок)));
//	Если ДополнительныеПараметры = Неопределено Тогда
//		ДополнительныеПараметры = Новый Структура;
//	КонецЕсли;
//	ДополнительныеПараметры.Вставить("ЕстьРезультат", Истина);
//	
//	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "callBLObjectEx2", param, ДополнительныеПараметры, Отказ);
//	Если Отказ Тогда
//		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЭмитироватьКМ");
//	КонецЕсли;
//	Возврат Результат
//	
//КонецФункции

//&НаКлиенте
//Функция сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
//	Отказ				= Ложь;
//	МестныйКэш			= Кэш;
//	
//	param = Новый Структура("url,method_name,method_params", Кэш.СБИС.АдресСервера+"/service/?srv=1", "СБИС.ЗарегистрироватьВГоссистеме", Новый Структура("Документ", Новый Структура("Идентификатор",ИдДок)));
//	Если ДополнительныеПараметры = Неопределено Тогда
//		ДополнительныеПараметры = Новый Структура;
//	КонецЕсли;
//	ДополнительныеПараметры.Вставить("ЕстьРезультат", Истина);
//	
//	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "callBLObjectEx2", param, ДополнительныеПараметры, Отказ);
//	Если Отказ Тогда
//		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисЗарегистрироватьВГоссистеме");
//	КонецЕсли;
//	Возврат Результат
//	
//КонецФункции
&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK2"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK2"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции

//Получает Информацию о контрагенте с онлайна
&НаКлиенте
Функция ПолучитьИнформациюОКонтрагенте(Кэш, СтруктураКонтрагента) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	kontr = Новый Структура; 
	Если СтруктураКонтрагента.Свойство("СвФЛ") Тогда
		kontr.Вставить( "СвФЛ", СтруктураКонтрагента.СвФЛ );	
	Иначе
		kontr.Вставить( "СвЮЛ", СтруктураКонтрагента.СвЮЛ );
	КонецЕсли;
	
	оКонтрагент = СбисОтправитьИОбработатьКоманду(Кэш, "ReadContragentInfo", kontr, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оКонтрагент;
КонецФункции

//Расшифровывает данные файла вложения	
&НаКлиенте
Функция РасшифроватьДанныеФайла(Кэш,ИмяФайла) Экспорт
	Отказ				= Ложь;
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
	
	ДД_Файла	= Новый ДвоичныеДанные(ИмяФайла);
	СтрокаBase64= СтрЗаменить(СтрЗаменить(Base64Строка(ДД_Файла),Символы.ПС,""),Символы.ВК,"");
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	ПараметрыЗапроса = Новый Структура("encrypted_data", СтрокаBase64);
	
	Результат = Кэш.Интеграция.СБИСПлагин_РасшифроватьФайл(Кэш, ПараметрыЗапроса, ДопПараметрыЗапроса, Отказ);
	
	Если Отказ Тогда
		Если	Не	Кэш.Свойство("ЕстьОшибкиРасшифровки") 
			Или		Кэш.ЕстьОшибкиРасшифровки = Ложь Тогда// сообщаем об ошибке один раз на весь пакет, а не на каждое вложение
			ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
			Если Кэш.Свойство("ЕстьОшибкиРасшифровки") Тогда
				Кэш.Вставить("ЕстьОшибкиРасшифровки", Истина);
			КонецЕсли;
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;

КонецФункции

//Выполняет указанное действие по документу СБИС
&НаКлиенте
Функция СбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	// для клиентских берем из списка сертификатов
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		ИННОрг = ?(СоставПакета.НашаОрганизация.Свойство("СвЮЛ"), СоставПакета.НашаОрганизация.СвЮЛ.ИНН, СоставПакета.НашаОрганизация.СвФЛ.ИНН);
	Иначе
		ИННОрг = "";
	КонецЕсли;
	Если Кэш.КэшСертификатов.Свойство("с"+ИННОрг) и Кэш.КэшСертификатов["с"+ИННОрг]<>Неопределено и ТекущаяДата()-Кэш.КэшСертификатов.ДатаОбновления<=60 Тогда
		Сертификат = Кэш.КэшСертификатов["с"+ИННОрг];
	Иначе
		СписокСертификатов = Кэш.Интеграция.ПолучитьСписокСертификатов(Кэш, Новый Структура("ИНН",ИННОрг));
		Если СписокСертификатов.Количество()>0 Тогда
			Сертификат = СписокСертификатов[0].Значение;	
		Иначе
			Сертификат = Неопределено;
		КонецЕсли;
		Кэш.КэшСертификатов.Вставить("с"+ИННОрг,Сертификат);
		Кэш.КэшСертификатов.Вставить("ДатаОбновления", ТекущаяДата());
	КонецЕсли;
	// если нет клиентского серта, то попробуем взять с действия отложенный
	Если Сертификат = Неопределено Тогда
		Попытка
			Для Каждого Серт Из Действие.Сертификат Цикл
				Если Серт.Ключ.Тип = "Отложенный" Тогда
					Сертификат = Серт;   // для отложенных берем из действия, т.к. они возвращаются с сервера в ПрочитатьДокумент
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Если (Сертификат = Неопределено) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета);
	
	// Назначение действие на этап
	action = Новый Структура;
	action.Вставить("Название", Действие.Название);
	Если Сертификат <> Неопределено Тогда
		certificate = Сертификат;
		action.Вставить("Сертификат", certificate);
		Действие.Вставить("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Вставить("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = Новый Структура;
	stage.Вставить("Название", Этап.Название);
	stage.Вставить("Идентификатор",Этап.Идентификатор); 
	stage.Вставить("Действие", action);
	
	
	document_in = Новый Структура;
	document_in.Вставить( "Этап", stage );
	document_in.Вставить( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = Кэш.Интеграция.СБИСПлагин_ПодготовитьДействие(Кэш, document_in, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	attachmentListPrepared = ?(prepared_document.Этап[0].Свойство("Вложение"),prepared_document.Этап[0].Вложение,Новый Массив);
	attachmentList = Новый Массив;  // вложения, которые будем передавать в ВыполнитьДействие
	
	//UAA формирование титулов
	сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	ОшибкаФормирования = Ложь;
	РезультатФормирования = Кэш.ОбщиеФункции.сбисСформироватьТитулы(Кэш, СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	Если ОшибкаФормирования Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".сбисВыполнитьДействие"));
		Возврат Ложь;
	КонецЕсли;
	// формирование титулов для зашифрованных вложений
	Шифрование = сбисПараметрыТитулов.Шифрование;
	
	Размер = attachmentListPrepared.Количество();
	Если Сертификат <> Неопределено и Сертификат.Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			attachment = Новый Структура;
			attachment.Вставить( "Идентификатор",  Запись.Идентификатор);
			file = Новый Структура;
			file.Вставить( "Имя", Запись.Файл.Имя );
			file.Вставить( "Хеш", Запись.Файл.Хеш ); 
			Если Запись.Свойство("Зашифрован") и Запись.Зашифрован = "Да" Тогда   // для зашифрованных вложений передаем ссылку, чтобы в ExecuteAction получить данные, расшифровать и подписать
				attachment.Вставить( "Зашифрован",  "Да");	
				file.Вставить( "Ссылка", Запись.Файл.Ссылка );
			КонецЕсли;
			attachment.Вставить( "Файл", file );
			attachmentList.Добавить( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураПодготовленныхВложенийПоТипам = Новый Структура;
	Если СоставПакета.Свойство("Вложение") Тогда
		// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
		ИдПодтвЗаказа = "";
		НомПодтвЗаказа = 0;
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared[сч];
			Попытка
				// Формируем структуру подготовленных вложений по типам, чтобы можно было их заменить на сформированные в 1С
				ПолныйТип =  СтрЗаменить(СтрЗаменить(Запись.Тип+Запись.Подтип+Запись.ВерсияФормата + Запись.ПодверсияФормата, " ", ""), ".", "_");
				СтруктураПодготовленныхВложенийПоТипам.Вставить(ПолныйТип, Новый Структура("Идентификатор, сч", Запись.Идентификатор, сч));	
			Исключение
			КонецПопытки;
			Если Запись.Свойство("Тип") и Запись.Тип = "ПодтверждениеЗаказа" Тогда
				ИдПодтвЗаказа = Запись.Идентификатор;
				НомПодтвЗаказа = сч;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Не Вложение.Свойство("Идентификатор") Тогда
				attachment = Новый Структура;
				file = Новый Структура;
				ИмяФайла = ?(Вложение.Свойство("ИмяФайла"),Вложение.ИмяФайла,Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml");
				file.Вставить( "Имя", ИмяФайла ); 
				file.Вставить( "ДвоичныеДанные", сбисСтрокаВBASE64(Вложение.XMLДокумента) ); 
				attachment.Вставить( "Файл", file );
				Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
					ИдВложения = ИдПодтвЗаказа; 
					Если Сертификат <> Неопределено и Сертификат.Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
						attachmentList.Удалить(НомПодтвЗаказа);
					КонецЕсли;
				Иначе 
					Попытка
						// Проверяем нет ли такого же вложения, сформированного онлайном и если есть, то берем его идентификатор, чтобы заменить своим вложением
						ПолныйТип =  СтрЗаменить(СтрЗаменить(Вложение.Тип+Вложение.Подтип+Вложение.ВерсияФормата + ?(Вложение.Свойство("ПодверсияФормата"),Вложение.ПодверсияФормата, ""), " ", ""), ".", "_");
						Если СтруктураПодготовленныхВложенийПоТипам.Свойство(ПолныйТип) Тогда
							ИдВложения = СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].Идентификатор; 
							Если Сертификат <> Неопределено и Сертификат.Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
								attachmentList.Удалить(СтруктураПодготовленныхВложенийПоТипам[ПолныйТип].сч);
							КонецЕсли;
						Иначе
							ИдВложения = строка(Новый УникальныйИдентификатор());
						КонецЕсли;
					Исключение
						ИдВложения = строка(Новый УникальныйИдентификатор());
					КонецПопытки;
				КонецЕсли;
				attachment.Вставить( "Идентификатор",  ИдВложения);
				Если Шифрование Тогда      // если входящие документы зашифрованы, то и ответ шифруем
					attachment.Вставить( "ТребуетШифрования",  "Да");
					Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
						attachment.Вставить( "Тип",  Вложение.Тип);
						attachment.Вставить( "Подтип",  Вложение.ПодТип);
						attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
					КонецЕсли;
					Если Вложение.Свойство("Дата") и ЗначениеЗаполнено(Вложение.Дата) Тогда
						attachment.Вставить( "Дата",  Вложение.Дата);
					КонецЕсли;
					Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
						attachment.Вставить( "Название",  Вложение.Название);
					КонецЕсли;
				КонецЕсли;
				
				attachment.Вставить( "Служебный",  ?(Вложение.Свойство("Служебный"),Вложение.Служебный,"Нет"));
				attachmentList.Добавить( attachment );
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	prepared_stage = prepared_document.Этап[0];
	prepared_action = prepared_document.Этап[0].Действие[0];
	prepared_certificates = ?(prepared_action.Свойство("Сертификат"),prepared_action.Сертификат,Неопределено);
	certificates = Новый Массив;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.Количество();
		Для сч=0 По КолСерт-1 Цикл
			certificate = Новый Структура;
			certificate.Вставить( "Отпечаток", prepared_certificates[сч].Отпечаток );
			certificate.Вставить( "Ключ", Новый Структура("Тип", prepared_certificates[сч]["Ключ"]["Тип"]));
			certificates.Добавить( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Новый Структура;
	action.Вставить("Комментарий", prepared_action.Комментарий);
	action.Вставить("Название", prepared_action.Название);
	action.Вставить("Идентификатор", ?(prepared_action.Свойство("Идентификатор"),prepared_action.Идентификатор,""));
	Если ЗначениеЗаполнено(certificates) Тогда
		action.Вставить("Сертификат", certificates);
	КонецЕсли;
	action.Вставить("ТребуетПодписания", prepared_action.ТребуетПодписания);
	stage = Новый Структура;
	stage.Вставить("Действие", action);
	stage.Вставить("Вложение", attachmentList);
	stage.Вставить("Идентификатор", prepared_stage.Идентификатор);
	stage.Вставить("Название", prepared_stage.Название);
	Если Этап.Свойство("Исполнитель") Тогда
		stage.Вставить("Исполнитель", Этап.Исполнитель);
	КонецЕсли;
	document_in = Новый Структура;
	document_in.Вставить( "Идентификатор", prepared_document.Идентификатор );
	prepared_redact = prepared_document.Редакция;
	redactions = Новый Массив;
	КолРедакций = prepared_redact.Количество();
	Для сч=0 По КолРедакций-1 Цикл
		redaction = Новый Структура;
		redaction.Вставить( "Идентификатор", prepared_redact[сч].Идентификатор );
		redactions.Добавить( redaction );
	КонецЦикла;
	document_in.Вставить( "Редакция", redactions );
	document_in.Вставить( "Этап", stage );
	// добавляем на случай шифрования
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		document_in.Вставить( "НашаОрганизация", СоставПакета.НашаОрганизация );
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		document_in.Вставить( "Контрагент", СоставПакета.Контрагент );
	КонецЕсли;
	
	// Завершение этапа
	Кэш.Интеграция.СБИСПлагин_ВыполнитьДействие(Кэш, document_in, Новый Структура, Отказ);
	
	Возврат Не Отказ;
КонецФункции

// Переводит документ повторно на ранее выполненный этап
&НаКлиенте
Функция СбисПовторитьЭтап(Кэш, ИдДок, ЭтапНазвание, Отказ=Ложь) Экспорт
	Отказ				= Ложь;
	МестныйКэш			= Кэш;
	
	ПараметрыКоманды = Новый Структура("Документ", Новый Структура("Идентификатор,Этап",ИдДок, Новый Структура("Название", ЭтапНазвание)));
	ДопПараметрыЗапроса = Новый Структура("ЕстьРезультат, СообщатьПриОшибке", Истина, Истина);
	
	оДокумент = сбисОтправитьИОбработатьКоманду(Кэш, "RepeatStage", ПараметрыКоманды, ДопПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат оДокумент;
КонецФункции

//Функция вызывает отправку на СБИС диск файл кусками. Вовзращает ид загрузки файла по которому придёт событие о завершении
&НаКлиенте
Функция ОтправитьФайлНаСбисДиск(Кэш, ПолноеИмяФайла, ДопПараметры, Отказ)
	
	AccountID =	СтрПолучитьСтроку(СтрЗаменить(Кэш.Парам.ИдентификаторСессии, "-", Символы.ПС), 2) + "@" +
				СтрЗаменить(Сред(Кэш.СБИС.АдресСервера, Найти(Кэш.СБИС.АдресСервера, ":")+1), "/", "");
	лПараметрыЗапроса = Новый Структура;
	лПараметрыЗапроса.Вставить("fileName",			ПолноеИмяФайла);
	лПараметрыЗапроса.Вставить("targetURL",			Кэш.СБИС.АдресСервера + "disk/api/v1/temp");
	лПараметрыЗапроса.Вставить("AccountID",			AccountID); 
	лПараметрыЗапроса.Вставить("removeAfterUpload",	Ложь);
	лПараметрыЗапроса = Новый Структура("requestParams", Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(лПараметрыЗапроса));
	//Если обработчик ответа не передан извне, то сделаем по-умолчанию, для отправки
	ДополнительныеПараметрыВызова = Новый Структура("Аккаунт, Модуль, ВремяОжиданияОтвета, События", AccountID, "FileLoader", ДопПараметры.ВремяОжиданияОтвета);
	Если Не ДопПараметры.Свойство("События", ДополнительныеПараметрыВызова.События) Тогда
		//Подписка на событие загрузчика по типу. Можно сделать события по-умолчанию, но пока только передача извне.
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".UploadToSbisDisk", 700,,"Отсутствует описание событий для вызова асинхронной функции!");
		//СбисПараметрыСобытия = Новый Структура("Кэш, Параметры", Кэш, ДопПараметры);
		//СбисОбработчикиСобытий = Новый Структура;
		//СбисОбработчикиСобытий.Вставить("UploadToSbisDiskCompleteEvent",	Новый Структура("Параметры", СбисПараметрыСобытия));
		//СбисОбработчикиСобытий.Вставить("UploadToSbisDiskFatalErrorEvent",Новый Структура("Параметры", СбисПараметрыСобытия));
		//СбисОбработчикиСобытий.Вставить("НеПолученОтвет",					Новый Структура("Параметры", СбисПараметрыСобытия));
	КонецЕсли;
	//Отправляем загрузку на вызов, подписываем на обработку результата. 
	//Не используем штатный механизм, так как ИД подписки будет ИД чтения событий, который сперва надо прочитать.
	СБИС3Команда = СБИСПлагин_Команда(Кэш, "uploadToSbisDisk", лПараметрыЗапроса,ДополнительныеПараметрыВызова, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СБИС3Команда,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".UploadToSbisDisk");
	КонецЕсли;
	
	РезультатВызова = СБИСПлагин_ВыполнитьМетод(Кэш, СБИС3Команда, ДополнительныеПараметрыВызова, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".UploadToSbisDisk");
	КонецЕсли;
	
	РезультатВызова = СБИСПлагин_ПолучитьОтвет_Синхронно(Кэш, СБИС3Команда, ДополнительныеПараметрыВызова, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".UploadToSbisDisk");
	КонецЕсли;
	
	РезультатВызова = СБИСПлагин_ОбработатьРезультат_Синхронно(Кэш, РезультатВызова, ДополнительныеПараметрыВызова, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".UploadToSbisDisk");
	КонецЕсли;
	
	СБИСПлагин_ЗанятьПоток(Кэш, РезультатВызова, СБИС3Команда);
	Возврат РезультатВызова;

КонецФункции

//Сохраняет вложение по ссылке со сбисДиск в указанный файл
&НаКлиенте
Функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла) Экспорт
	Отказ				= Ложь;
	ДопПараметрыЗапроса	= Новый Структура("ЕстьРезультат", Истина);
	
	ПараметрыЗаписи = Новый Структура("uri_in, filename_in", Ссылка, ИмяФайла);
	
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURIToFile2", ПараметрыЗаписи, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////
//////////////Сотрудники////////////////////////////
////////////////////////////////////////////////////

&НаКлиенте
функция сбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	ДопПараметрыЗапроса = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	РезультатОтправки = Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов, Успешные", Новый СписокЗначений,0,0,0,0, Новый Соответствие,ДанныеСотрудников.Количество(), Новый Массив);
	Для Каждого Элемент Из ДанныеСотрудников Цикл
		Отказ = Ложь;
		РезультатЗапроса = Кэш.Интеграция.СБИСПлагин_ЗаписатьСотрудника(Кэш, Элемент.Значение, ДопПараметрыЗапроса, Отказ);
		Если Отказ Тогда 
			РезультатОтправки.Ошибок = РезультатОтправки.Ошибок + 1;
			// TODO убрать после обертки ошибки в плагине
			Если РезультатЗапроса.message = "Неизвестная ошибка БЛ" и Лев(РезультатЗапроса.details, 30) = "В справочнике ролей не найдены" Тогда
				РезультатЗапроса.message = "В справочнике ролей не найдены роли";
			КонецЕсли;
			ТекстОшибки = РезультатЗапроса.message;
			ЭлементСписка = РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
			Если ЭлементСписка=Неопределено Тогда
				РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
			Иначе
				ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
			КонецЕсли;
			ЭлементСоответствия = РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
			Если ЭлементСоответствия=Неопределено Тогда
				ЭлементСоответствия = Новый Массив;
				РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
			КонецЕсли;
			СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С,Сообщение,СтруктураОшибки", Элемент.Ключ, РезультатЗапроса.details, Новый Структура("message,details,code", ТекстОшибки, РезультатЗапроса.details, РезультатЗапроса.code));
			ЭлементСоответствия.Добавить(СтрокаВСоответствие);
		Иначе			
			РезультатОтправки.Отправлено = РезультатОтправки.Отправлено + 1;
			РезультатОтправки.Успешные.Добавить(РезультатЗапроса);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатОтправки;
КонецФункции

////////////////////////////////////////////////////
//////////////Серверные настройки вызов/////////////
////////////////////////////////////////////////////

//Возвращает доступность получения настроек с облака для способа обмена.
&НаКлиенте
Функция ДоступныСерверныеНастройки() Экспорт
	
	Возврат	Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьXslt(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	ДопПараметрыЗапроса.Вставить("ВернутьОшибку",		Истина);
	Результат = сбисОтправитьИОбработатьКоманду(Кэш,"getXslt2",,ДопПараметрыЗапроса,Отказ);
	Если Результат.Свойство("result") Тогда
		Результат = Результат.result;
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция ПолучитьИни(Кэш, ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	ДопПараметрыЗапроса.Вставить("ВернутьОшибку",		Истина);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, ИмяМетода, ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ЗаписатьConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	ДопПараметрыЗапроса.Вставить("ВернутьОшибку",		Истина);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "WriteConnection", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConnection(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	ДопПараметрыЗапроса.Вставить("ВернутьОшибку",		Истина);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "ReadConnectionList", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

&НаКлиенте
Функция ПолучитьСписокConfig(Кэш, ПараметрыМетода, ДопПараметрыЗапроса, Отказ) Экспорт
	ДопПараметрыЗапроса.Вставить("СообщатьПриОшибке",	Ложь);
	ДопПараметрыЗапроса.Вставить("ВернутьОшибку",		Истина);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "ReadConfigList_v2", ПараметрыМетода, ДопПараметрыЗапроса, Отказ)
КонецФункции

////////////////////////////////////////////////////
//////////////////Статистика вызов//////////////////
////////////////////////////////////////////////////

//Отправляет собщение о статистике на online
&НаКлиенте
Функция сбисОтправитьСообщениеСтатистики(Кэш, СообщениеСтатистики, Отказ) Экспорт
	ДопПараметры = Новый Структура("ВернутьОшибку", Истина);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "WriteStat", СообщениеСтатистики, ДопПараметры, Отказ);
КонецФункции

//Отправляет собщение о ошибке на online
&НаКлиенте
Функция сбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ) Экспорт
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	СообщениеОбОшибке.data = Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(СообщениеОбОшибке.data);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "WriteError", СообщениеОбОшибке, ДопПараметры, Отказ);
КонецФункции

////////////////////////////////////////////////////
//////////////////Системные команды/////////////////
////////////////////////////////////////////////////

//Выполняет указанный метод и возвращает результат, либо генерирует и сообщает ошибку.
//Дополнительные параметры - структура, для управления выводом и возвратом результата в случае ошибок. 
//	Возможные значения: СообщатьПриОшибке(Истина),ВернутьОшибку(Ложь),ЕстьРезультат(Ложь), ЖдатьОтвета(Истина). 
//	Так же в качестве дополнительного параметра может быть передана структура Поток и Идентификатор для выполнения запроса.
//Отказ - булево, определяет наличие ошибок в процессе выполнения метода и что вернулось в качестве результата. Если Истина, то структура ошибки с полями "code, message, details"
&НаКлиенте
Функция СбисОтправитьИОбработатьКоманду(Кэш,Метод,ПараметрыМетода=Неопределено,ДопПараметры,Отказ) Экспорт
	Сбис3Команда = СБИСПлагин_Команда(Кэш, Метод, ПараметрыМетода, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Сбис3Команда.Ответ,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СбисОтправитьИОбработатьКоманду");
	КонецЕсли;
	РезультатВызова = СБИСПлагин_ОтправитьКоманду_Асинхронно(Кэш, Сбис3Команда, ДопПараметры, Отказ);
	Если Не Отказ Тогда
		РезультатВызова = СБИСПлагин_ПолучитьОтвет_Синхронно(Кэш, Сбис3Команда, ДопПараметры, Отказ);
	КонецЕсли;
	//Проверим ответ на наличие ошибок
	Результат = СБИСПлагин_ОбработатьРезультат_Синхронно(Кэш, РезультатВызова, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.ИнтеграцияИмя + "." + Метод);
		СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ", Сбис3Команда.Идентификатор,"ERROR",Результат));
		Если Не ДопПараметры.Свойство("СообщатьПриОшибке")
			Или	ДопПараметры.СообщатьПриОшибке Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
		КонецЕсли;
		Если 	(	ДопПараметры.Свойство("ВернутьОшибку")
			И	Не	ДопПараметры.ВернутьОшибку) Тогда
			Возврат Неопределено; 
		КонецЕсли;
	Иначе
		СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ", Сбис3Команда.Идентификатор,"MESSAGE",Результат));
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Добавляет СБИСПлагин в Кэш	
&НаКлиенте
Функция Включить(Кэш, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	//Ставим время по-умолчанию 60 секунд. Меняется при наличии одноименного узла в сбисПараметрах при установке настроек.	
	//Ставим время на отправку по-умолчанию 120 секунд. После меняется при наличии одноименного узла в сбисПараметрах при установке настроек.
	ПараметрыВключения = Новый Структура("ВремяОжиданияОтвета, ВремяОжиданияОтвета_Отправка, КоличествоПотоков, ИнтеграцияИмя", 60, 120, 10, "ExtSdk");
	Если ЗначениеЗаполнено(ДопПараметры) Тогда 
		ЗаполнитьЗначенияСвойств(ПараметрыВключения, ДопПараметры);
	КонецЕсли;
	Результат = ВключитьExtSDK(Кэш,ПараметрыВключения,Отказ);
	Возврат СбисОценитьРезультатВключения(Кэш, Результат, ДопПараметры, Отказ);
КонецФункции

&НаКлиенте
Функция ВключитьExtSDK(Кэш,ДопПараметры,Отказ)
	Перем  ExtSDK1_ID;
	ОжиданиеОтвета = 10;//На время включения, ответ от плагина должен приходить быстро

	РезультатЗапроса = ПолучитьМодульИнтеграции(Кэш,ДопПараметры,Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Кэш.СБИС.ОбменВключен = Истина;//Переключим обмен для вызова CallMethod
	Если Не Кэш.СБИС.ДанныеИнтеграции.Свойство("ExtSdk1", ExtSDK1_ID) Тогда
		ExtSDK1_ID = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Парам				= Новый Структура("id", ExtSDK1_ID);
	ДопПараметры_EXT	= Новый Структура("ЕстьРезультат,ВернутьОшибку,СообщатьПриОшибке,ВремяОжиданияОтвета", Истина, Истина, Ложь, ОжиданиеОтвета);
	
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "getConnectionID", Парам, ДопПараметры_EXT, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось получить расширение ExtSdk. Возможно, СБИС плагин не запущен.";
		КонецЕсли;
		Возврат РезультатЗапроса;
	КонецЕсли;
	ExtSDK1_ID = РезультатЗапроса;
	
	//Возьмём версию и проверим, что соответствует минимально допустимой
	РезультатЗапроса = сбисОтправитьИОбработатьКоманду(Кэш, "getVersion", , ДопПараметры_EXT, Отказ);
	Если Отказ Тогда
		Если РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = "Не удалось получить расширение ExtSdk. Возможно, СБИС плагин не запущен.";
		КонецЕсли;
		Возврат РезультатЗапроса;
	КонецЕсли;

	ВерсияИнтеграции = РезультатЗапроса;
	
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Вставить("ExtSdk1", ExtSDK1_ID);	
	Кэш.СБИС.ПараметрыИнтеграции.Версия = ВерсияИнтеграции;
	Кэш.СБИС.ОбменВключен = Истина;
	Кэш.Плагин = ЭтаФорма;//Для сохранения совместимости со старым кодом
	
	СбисУстановитьПодпискиСбис3Плагина(Кэш);
	Возврат Кэш.СБИС.ОбменВключен;
	
КонецФункции

//Функция делает GetModule выбранной интеграции, устанавливает параметры работы
&НаКлиенте
Функция ПолучитьМодульИнтеграции(Кэш,ДопПараметры,Отказ) Экспорт
	Перем ExtSDK_ID, ОбъектПлагин, Т_ОбъектыИнтеграции;
	ОжиданиеОтвета		= 10;//На время включения, ответ от плагина должен приходить быстро
	НачДата				= ТекущаяДата();
	ОбъектыИнтеграции	= Новый Структура("Форма_ExtSDK", ЭтаФорма);
	
	Если Не Кэш.СБИС.ДанныеИнтеграции.Свойство("Объекты",Т_ОбъектыИнтеграции) Тогда
		Т_ОбъектыИнтеграции = Новый Структура;
	КонецЕсли;
	
	Кэш.СБИС = Кэш.ГлавноеОкно.СформироватьСтруктуруКэшСБИС(Кэш.СБИС);
	//Создаем объект транспорта, или берём существующий
	Если 		Т_ОбъектыИнтеграции.Свойство("Плагин", ОбъектПлагин)
		И	Не	ОбъектПлагин = Неопределено Тогда
		//Чистим все старые, накопленные сообщения
		Попытка
			ОбъектПлагин.ReadAllXml2();
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 762, "Версия системы не поддерживается", "Обновите СБИС плагин.");
		КонецПопытки;
	Иначе
		Попытка
			ОбъектПлагин = Новый COMОбъект("Tensor.SbisPluginClientCOM");
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 767, "Ошибка при создании COM-объекта", "Не зарегистрирована компонента Tensor.SbisPluginClientCOM." + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	ОбъектыИнтеграции.Вставить("Плагин", ОбъектПлагин);
	//Дозаполняем данные в кэше
	Кэш.СБИС.ДанныеИнтеграции.Вставить("Объекты", ОбъектыИнтеграции);
	Кэш.СБИС.ДанныеИнтеграции.Вставить("Плагин", Новый Структура("Подписки, Потоки, НеизвестныеОтветы", Новый Соответствие, Новый Соответствие, Новый Соответствие));
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("ВремяОжиданияОтвета_Отправка",			ДопПараметры.ВремяОжиданияОтвета_Отправка);
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("Потоки_КоличествоСвободных",				ДопПараметры.КоличествоПотоков);//Общее количество свободных потоков при асинхронном режиме
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("Потоки_МаксимальноеКоличество",			ДопПараметры.КоличествоПотоков);
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("ИнтеграцияИмя",							ДопПараметры.ИнтеграцияИмя);
	СбисУстановитьВремяОжидания(Кэш, ДопПараметры.ВремяОжиданияОтвета);
	
	//Получаем SDK	
	НачалоПодключения = ТекущаяДата();
	РезультатЗапроса = СБИСПлагин_GetModule(Кэш, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя, Отказ);
	Если Отказ Тогда
		Если		РезультатЗапроса.code = 756 Тогда
			//Попытка переподключения
			ОшибкаНаВозврат = РезультатЗапроса;
			ОшибкаПодключения = Ложь;
			СбисПлагинКомандаConnected = СБИСПлагин_Команда(Кэш, "ОжиданиеСобытия",,Новый Структура("Аккаунт", Неопределено),Отказ);
			СбисПлагинКомандаConnected.Идентификатор = "SbisPluginClientCOM.Connected";
			СбисПлагинКомандаConnected.ВремяОжиданияОтвета = 0;
			РезультатКоманды = Неопределено;
			Пока	ТекущаяДата() - НачалоПодключения < ОжиданиеОтвета
				И	РезультатКоманды = Неопределено Цикл
				ОшибкаПодключения = Ложь;
				РезультатКоманды = СБИСПлагин_ЧтениеОтветовИВызовСобытий(Кэш,,, ОшибкаПодключения);
				РезультатКоманды = СБИСПлагин_ПолучитьОтвет_Синхронно(Кэш, СбисПлагинКомандаConnected, Новый Структура, ОшибкаПодключения);
				Если ОшибкаПодключения Тогда
					Возврат РезультатКоманды;
				КонецЕсли;
				РезультатКоманды = СБИСПлагин_GetModule(Кэш, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя, ОшибкаПодключения);
			КонецЦикла;
			Если  РезультатКоманды = Неопределено Тогда
				Возврат ОшибкаНаВозврат;
			ИначеЕсли ОшибкаПодключения Тогда
				Возврат РезультатКоманды;
			КонецЕсли;
			Отказ = Ложь;
		ИначеЕсли	РезультатЗапроса.code = 762 Тогда
			Возврат РезультатЗапроса;
		ИначеЕсли	РезультатЗапроса.code = 775 Тогда
			РезультатЗапроса.details = РезультатЗапроса.details + " Возможно СБИС плагин не запущен.";
			Возврат РезультатЗапроса;
		Иначе
			Возврат РезультатЗапроса;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СбисОценитьРезультатВключения(Кэш, Результат, ДопПараметры, Отказ) Экспорт
	Если Отказ Тогда
		//Пришла структура ошибки. Сообщим об ошибке. Если это проблема с версией компоненты, то покажем полное предупреждение со ссылкой для скачки 
		Кэш.СБИС.ОбменВключен = Ложь;
		сбисОткрытьПредупреждение = Ложь;
		Если Результат.code = 762 Тогда
			сбисОткрытьПредупреждение = Истина;
			ТекстПредупреждение = Результат.message + " (" + Результат.details + ")" + Символы.ПС + "Переустановите плагин в режиме полной установки и перезапустите 1С для дальнейшей работы.";
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("АдресСсылка",	"https://update.sbis.ru/Sbis3Plugin/master/win32/sbis3plugin-setup-full.msi");
			ПараметрыСообщения.Вставить("ТекстСсылка",	"Скачать последнюю версию СБИС плагина");
			ПараметрыСообщения.Вставить("Текст",		ТекстПредупреждение);
		ИначеЕсли Результат.code = 767 Тогда
			сбисОткрытьПредупреждение = Истина;
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/1C_set/modul/typical_errors/activex_component");
			ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы регистрации Tensor.SbisPluginClientCOM");
			ПараметрыСообщения.Вставить("Текст",		Результат.message + " (" + Результат.details + ")");
		ИначеЕсли Результат.code = 775 Тогда
			сбисОткрытьПредупреждение = Истина;
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы запуска СБИС3 плагина");
			ПараметрыСообщения.Вставить("Текст",		Результат.message + " (" + Результат.details + ")");
			ПараметрыСообщения.Вставить("АдресСсылка",	"https://online.sbis.ru/reg/?check=ExtSDK");
		КонецЕсли;
		Если сбисОткрытьПредупреждение Тогда
			ФормаВладелец = Неопределено;
			Если 		ДопПараметры=Неопределено
				Или	Не	ДопПараметры.Свойство("ФормаВладелец", ФормаВладелец) Тогда
				ФормаВладелец = Кэш.ГлавноеОкно;
			КонецЕсли;
			ФормаПредупреждение = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПредупреждения",,,ФормаВладелец);
			ФормаПредупреждение.Показать(Кэш, ПараметрыСообщения);
		Иначе
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат, ДопПараметры);			
		КонецЕсли;
		Возврат Результат.message + "(" + Результат.details + ")";
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура СбисУстановитьПодпискиСбис3Плагина(Кэш)
	//Добавим подписчики событий файл лоадера
	ПараметрыПодписчиков = Новый Структура("Кэш", Кэш);
	//TODO40 спилить старые имена событий
	//Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("uploadtosbisdiskcompleteevent",		Новый Структура("Параметры", ПараметрыПодписчиков));
	//Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("uploadtosbisdiskfatalerrorevent",	Новый Структура("Параметры", ПараметрыПодписчиков));
	//Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("uploadedchunkevent",				Новый Структура("Параметры", ПараметрыПодписчиков));
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("SbisPluginClientCOM.Disconnected", 	Новый Структура("Функция, Параметры", "Disconnected",						ПараметрыПодписчиков));
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("sbisdisk.complete-event",			Новый Структура("Функция, Параметры", "uploadtosbisdiskcompleteevent",		ПараметрыПодписчиков));
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("sbisdisk.fatal-error",				Новый Структура("Функция, Параметры", "uploadtosbisdiskfatalerrorevent",	ПараметрыПодписчиков));
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Вставить("sbisdisk.uploaded-chunk",			Новый Структура("Функция, Параметры", "uploadedchunkevent",					ПараметрыПодписчиков));	
КонецПроцедуры

&НаКлиенте
Функция Завершить(Кэш, ДопонительныеПараметры, Отказ) Экспорт
	Возврат ЗавершитьExtSDK(Кэш, ДопонительныеПараметры, Отказ)
КонецФункции

&НаКлиенте
Функция ЗавершитьExtSDK(Кэш, ДопПараметры, Отказ) Экспорт
	Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета = 0;
	СБИСПлагин_ОчиститьНевостребованныеОтветы();
	ЭтаФорма.ОтключитьОбработчикОжидания("СБИСПлагин_ОчиститьНевостребованныеОтветы");
	Кэш.СБИС.ОбменВключен = Ложь;
	//Очищаем все объекты extSDK
	Кэш.СБИС.ДанныеИнтеграции.Объекты.Очистить();
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Очистить();
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////
/////////////////////СБИСПлагин/////////////////////
////////////////////////////////////////////////////

//Делает вызов extSDK в плагине
&НаКлиенте
Функция СБИСПлагин_ВыполнитьМетод(Кэш, ПараметрыСБИС3Команды, ДопПараметры, Отказ) Экспорт
	Перем Sbi3Module_ID, Call_method, Call_param, Connection_ID, Acc_ID, ПараметрПроверка;
	
	//Если IDConnection не указан, то модуль вызывается напрямую
	Если Не Кэш.СБИС.ДанныеИнтеграции.Свойство("Объекты", ПараметрПроверка) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ВыполнитьМетод", 700,,"Не подключена подсистема взаимодействия со СБИС плагин");
	ИначеЕсли ПараметрыСБИС3Команды.Модуль = "ExtSdk" Тогда
		Sbi3Module_ID = ПараметрПроверка[ПараметрыСБИС3Команды.Модуль];
		Call_Ext = Ложь;
		Если Не ПараметрПроверка.Свойство("ExtSdk1", Connection_ID) Тогда
			Connection_ID = "";
		ИначеЕсли ЗначениеЗаполнено(Connection_ID) Тогда
			Call_Ext = Истина;
		КонецЕсли;
		Если Call_Ext Тогда
			Call_method	= "callMethod";
			Call_param = Новый Структура;
			Call_param.Вставить("idConnection",	Connection_ID);
			Call_param.Вставить("method",		ПараметрыСБИС3Команды.Метод);
			Call_param.Вставить("param",		ПараметрыСБИС3Команды.Параметры);
		Иначе
			Call_method	= ПараметрыСБИС3Команды.Метод;
			Call_param	= Новый Структура("param", ПараметрыСБИС3Команды.Параметры);
		КонецЕсли;
	Иначе
		Call_param = ПараметрыСБИС3Команды.Параметры;
		Call_method= ПараметрыСБИС3Команды.Метод;
		Если Не ПараметрПроверка.Свойство(ПараметрыСБИС3Команды.Модуль, Sbi3Module_ID) Тогда
			Sbi3Module_ID = СБИСПлагин_GetModule(Кэш, ПараметрыСБИС3Команды.Модуль, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(Sbi3Module_ID, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ВыполнитьМетод");
			КонецЕсли;
		КонецЕсли;
		ПараметрыСБИС3Команды.Свойство("Аккаунт", Acc_ID);
	КонецЕсли;
	Если Не ПараметрыСБИС3Команды.События = Неопределено Тогда
		СБИСПлагин_ВызватьСобытие(Кэш, Неопределено, ПараметрыСБИС3Команды, "Before_Call");
	КонецЕсли;
	Call_param	= Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(Call_param, Новый Структура("Режим", ПараметрыСБИС3Команды.Модуль));
	ПараметрыСБИС3Команды.ВремяВызова = ТекущаяДата();
	Попытка
		Если	ДопПараметры.Свойство("БезАвторизации")
			И	ДопПараметры.БезАвторизации Тогда
			Хост = Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера;
			Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.CallMethodWithoutAuth(ПараметрыСБИС3Команды.Идентификатор, Sbi3Module_ID, ПараметрыСБИС3Команды.Модуль + "." + Call_method, Call_param, Хост);
		Иначе
			Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.CallMethod(ПараметрыСБИС3Команды.Идентификатор, Sbi3Module_ID, ПараметрыСБИС3Команды.Модуль + "." + Call_method, Call_param, Acc_ID);
		КонецЕсли;
		РезультатВызова = ПараметрыСБИС3Команды.Идентификатор;
	Исключение
		Отказ = Истина;
		РезультатВызова = Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), ПараметрыСБИС3Команды.Модуль + "." + Call_method, 700, Call_method,, "Ошибка вызова метода плагина " + Call_method + ". Детально: " + ОписаниеОшибки());
	КонецПопытки;
	Если	ДопПараметры.Свойство("ОчиститьПараметры")
		И	ДопПараметры.ОчиститьПараметры Тогда
		ПараметрыСБИС3Команды.Параметры=Неопределено;
	КонецЕсли;	
	
	Если Не ПараметрыСБИС3Команды.События = Неопределено Тогда
		СБИСПлагин_ВызватьСобытие(Кэш, РезультатВызова, ПараметрыСБИС3Команды, "After_Call", Отказ);
	КонецЕсли;

	Возврат РезультатВызова;
	
КонецФункции

//Выполняет указанный метод. При ошибке отправки(не обработки!) возвращает её.
//Дополнительные параметры - структура. 
//Отказ - булево, определяет наличие ошибок в процессе выполнения метода и что вернулось в качестве результата. Если Истина, то объект ExtSysException
&НаКлиенте
Функция СБИСПлагин_ОтправитьКоманду_Асинхронно(Кэш, СБИС3Команда, ДопПараметры, Отказ) Экспорт
	Если Не Кэш.СБИС.ОбменВключен Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОтправитьКоманду_Асинхронно", 409,,"Перезапустите СБИС Плагин для дальнейшей работы");
	КонецЕсли;
	//Вызываем метод плагина и подключаем обработчик на результат.
	РезультатВызова = СБИСПлагин_ВыполнитьМетод(Кэш, СБИС3Команда, ДопПараметры, Отказ);
	Если Отказ Тогда
		СБИС3Команда.Ответ = Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОтправитьКоманду_Асинхронно");
		Возврат СБИС3Команда;
	КонецЕсли;
	СБИСПлагин_ЗанятьПоток(Кэш, СБИС3Команда.Идентификатор, СБИС3Команда);
	Возврат Истина;
КонецФункции

//Проверяет наличие ответа от плагина и вызывает событие обработки полученного ответа.
//Имеет смысл сделать обработчиком ожидания, но тогда придётся кардинально переделывать отправку на других формах
&НаКлиенте
Процедура СБИСПлагин_ОбработатьОтветы_Асинхронно(Кэш)
	//Кэш = МестныйКэш;
	Отказ = Ложь;
	//Читаем все ответы, которые пришли
	РезультатПолучения = СБИСПлагин_ЧтениеОтветовИВызовСобытий(Кэш,,,Отказ);
	Если Отказ Тогда
		Если Кэш.Свойство("РезультатОтправки") Тогда
			//Если идёт отправка, то прерываем
			Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", РезультатПолучения.details);
		КонецЕсли;
		//Ошибка чтения ответов. Выходим из цикла чтения, сообщив.
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатПолучения);
		Возврат;
	КонецЕсли;
	СБИСПлагин_ОбработатьПросроченныеВызовы(Кэш);
КонецПроцедуры

&НаКлиенте
Процедура СБИСПлагин_ОбработатьПросроченныеВызовы(Кэш)
	//Проверим отправленные запросы на предмет их актуальности.
	СбисТочкаПроверки = ТекущаяДата();
	ЗапросыПросрочены = Новый Массив;
	Для Каждого КлючИЗначениеЗапросов Из Кэш.СБИС.ДанныеИнтеграции.Плагин.Потоки Цикл
		Если СбисТочкаПроверки - КлючИЗначениеЗапросов.Значение.ВремяВызова > КлючИЗначениеЗапросов.Значение.ВремяОжиданияОтвета Тогда
			ЗапросыПросрочены.Добавить(КлючИЗначениеЗапросов.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ИдЗапросПросрочен Из ЗапросыПросрочены Цикл
		//Генерируем сообщение о просроченном запросе, чистим вызов так как уже не ждём ответа, если есть подписка на событие не получен ответ, вызываем.
		Сбис3КомандаПросрочена = Кэш.СБИС.ДанныеИнтеграции.Плагин.Потоки.Получить(ИдЗапросПросрочен);
		ОтветПросрочено = Кэш.ОбщиеФункции.СбисИсключение(,Сбис3КомандаПросрочена.Метод, 775,, Сбис3КомандаПросрочена.Метод + "() не вернул ответ за разумное время");
		СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ", ИдЗапросПросрочен,"ERROR", ОтветПросрочено));
		Если Не СБИСПлагин_ВызватьСобытие(Кэш, ОтветПросрочено, Сбис3КомандаПросрочена, "НеПолученОтвет") Тогда
			СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдЗапросПросрочен, ОтветПросрочено);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//Обработчик ответа при синхронном вызове
&НаКлиенте
Функция СБИСПлагин_ОбработатьРезультат_Синхронно(Кэш, СбисРезультат, ДопПараметры, Отказ)
	Перем message_result, message_type, checkResult;
	Если Отказ Тогда
		Если Не СбисРезультат.Свойство("Ответ",message_result) Тогда 
			message_result = СбисРезультат;
		КонецЕсли;
	ИначеЕсли Не	СбисРезультат.Свойство("Ответ", message_result) Тогда
		//Метод не вернул результат. Проверить, должно ли так быть. (Для метода, у которого однозначно должен быть ответ это ошибка)
		Если	ДопПараметры.Свойство("ЕстьРезультат")
			И	ДопПараметры.ЕстьРезультат Тогда
			Отказ = Истина;
			message_result = Кэш.ОбщиеФункции.СбисИсключение(,СбисРезультат.Метод,400,,"Отсутствует результат выполнения метода " + СбисРезультат.Метод + "()");
		Иначе
			message_result = Неопределено;
		КонецЕсли;
	ИначеЕсли Не message_result.Свойство("data", checkResult) Тогда
		Отказ = Истина;
		message_result = Кэш.ОбщиеФункции.СбисИсключение(,СбисРезультат.Метод,400,,"Неизвестный формат ответа в результате выполнения метода " + СбисРезультат.Метод + "(). Отсутвует поле ""data""");
	Иначе
		Если message_result.type = "Error" Тогда
			Отказ = Истина;
			Если	Не	ТипЗнч(checkResult) = Тип("Структура")
				Или	Не	checkResult.Свойство("Error", message_result) Тогда
				message_result = checkResult;
			КонецЕсли;
		ИначеЕсли	Не	ТипЗнч(checkResult) = Тип("Структура")
				Или	Не	checkResult.Свойство("Result", message_result) Тогда
			message_result = checkResult;
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		message_result = Кэш.ОбщиеФункции.СбисИсключение(message_result, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОбработатьРезультат_Синхронно");
	КонецЕсли;
	
	Возврат	message_result;	
	
КонецФункции

//Ожидает получения ответа на вызов команды.
&НаКлиенте
Функция СБИСПлагин_ПолучитьОтвет_Синхронно(Кэш, СБИС3Команда, ДопПараметры, Отказ) Экспорт
	Перем Результат;
	ОжидаемыеКоманды = Новый Соответствие;
	ОжидаемыеКоманды.Вставить(СБИС3Команда.Идентификатор, СБИС3Команда);
	Результат = Неопределено;
	Пока Истина Цикл
		РезультатПолучения = СБИСПлагин_ЧтениеОтветовИВызовСобытий(Кэш, ОжидаемыеКоманды, ДопПараметры, Отказ);
		Если Отказ Тогда
			Возврат РезультатПолучения;
		КонецЕсли;
		Результат = РезультатПолучения.Получить(СБИС3Команда.Идентификатор);
		Если	Не Результат = Неопределено 				
			Или	Не СБИС3Команда.ВремяОжиданияОтвета Тогда 
			//Получен ответ на запрос, или делаем один проход на чтение	
			Прервать;
		ИначеЕсли ТекущаяДата() - СБИС3Команда.ВремяВызова > СБИС3Команда.ВремяОжиданияОтвета Тогда
			//Установленный на команде таймаут
			Отказ = Истина;
			Результат = Кэш.ОбщиеФункции.СбисИсключение(, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПолучитьОтвет_Синхронно",775,, СБИС3Команда.Метод + "() не вернул ответ за разумное время");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Вызов обработчика события
&НаКлиенте
Функция СБИСПлагин_ВызватьСобытие(Кэш, РезультатВызова=Неопределено, Сбис3Команда, КлючСобытия, Отказ=Ложь)
	Перем СобытиеВыполнить;
	Если Не Сбис3Команда.События.Свойство(КлючСобытия, СобытиеВыполнить) Тогда
		Возврат Ложь;
	КонецЕсли;
	СобытиеВыполнить.Параметры.Вставить("Отказ",	Отказ);
	СобытиеВыполнить.Параметры.Вставить("Команда",	Сбис3Команда);
	СобытиеВыполнить.Параметры.Вставить("Тип",		КлючСобытия);
	
	СБИСПлагин_ВызватьФункциюСобытия(Кэш, РезультатВызова, СобытиеВыполнить);
	Возврат Истина;
КонецФункции

//Класс команды для вызова СБИС3 плагина
&НаКлиенте
Функция СБИСПлагин_Команда(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры=Неопределено, Отказ) Экспорт
	Перем СбисАккаунт;
	Если ПараметрыМетода = Неопределено Тогда
		ПараметрыМетода = Новый Структура;
	КонецЕсли;
	Попытка
		СбисИдЗапроса = Строка(Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.GenerateQueryID());
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_Команда", 400,,"Ошибка при генерации ИД запроса. Детально: " + ОписаниеОшибки());
	КонецПопытки;
	Результат = Новый Структура(
	"Метод,	Параметры,			Идентификатор,	Модуль,										События,		Аккаунт, Ответ, ВремяОжиданияОтвета, ВремяВызова, ВремяПолучения", 
	Метод,	ПараметрыМетода,	СбисИдЗапроса,	Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя,	Новый Структура);
	Если ДопПараметры = Неопределено Тогда
		Результат.Аккаунт = Кэш.СБИС.ДанныеИнтеграции.Объекты["Форма_" + Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя].СбисИдАккаунта(Кэш);
		Возврат Результат;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ВремяОжиданияОтвета", Результат.ВремяОжиданияОтвета) Тогда
		Результат.ВремяОжиданияОтвета = Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета;
	КонецЕсли;
	Если ДопПараметры.Свойство("Модуль") Тогда
		Результат.Модуль = ДопПараметры.Модуль;
	КонецЕсли;
	//Спилить переопределение аккаунта, после переезда на extSDK2
	Если ДопПараметры.Свойство("Аккаунт") Тогда
		Результат.Аккаунт = ДопПараметры.Аккаунт;
	Иначе
		Результат.Аккаунт = Кэш.СБИС.ДанныеИнтеграции.Объекты["Форма_" + Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя].СбисИдАккаунта(Кэш);
	КонецЕсли;
	Если ДопПараметры.Свойство("События") Тогда
		Результат.События = ДопПараметры.События;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Добавляет не ожидаемый ответ от плагина в список на обработку/очистку. Подключает очищалку. 
&НаКлиенте
Процедура СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторОтвета, НеобработанныйОтвет) Экспорт
	НеобработанныеКоманды = Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы.Получить(ИдентификаторОтвета);
	Если НеобработанныеКоманды = Неопределено Тогда
		НеобработанныеКоманды = Новый Массив;
	КонецЕсли;
	НеобработанныеКоманды.Добавить(Новый Структура("Ответ, ВремяПолучения",НеобработанныйОтвет,ТекущаяДата()));
	Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы.Вставить(ИдентификаторОтвета, НеобработанныеКоманды);
	СБИСПлагин_ОчиститьНевостребованныеОтветы();
КонецПроцедуры

//Обрабатываем необработанные в срок ответы, чистим их по времени существования ответа
&НаКлиенте
Процедура СБИСПлагин_ОчиститьНевостребованныеОтветы() Экспорт
	Кэш = МестныйКэш;
	Если	Не Кэш.СБИС.ДанныеИнтеграции.Свойство("Плагин")//Костыль на случай переключения на другой способ обмена. Уже всё почищено. 
		Или	Не Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы.Количество() Тогда
		Возврат;
	КонецЕсли;

	ТочкаПроверки = ТекущаяДата();
	КлючиОтветовНеВостребованы = Новый Массив;
	Для Каждого КлючИЗначениеОтвета Из Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы Цикл
		ИндексКоманд = 0;
		Пока ИндексКоманд < КлючИЗначениеОтвета.Значение.Количество() Цикл
			КомандаНевостребована = КлючИЗначениеОтвета.Значение[ИндексКоманд];
			Если ТочкаПроверки - КомандаНевостребована.ВремяПолучения > Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета Тогда
				Если Кэш.Парам.РежимОтладки Тогда
					//Дампаем в лог необработанные события если надо
					лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Сообщение", "UNCALLED", "ExtSDK", "Unknown", ТочкаПроверки, Кэш.РаботаСJson.ПреобразоватьЗначениеВJSON(КлючИЗначениеОтвета.Значение));
					ДанныеВЛог = Новый Массив;
					ДанныеВЛог.Добавить(лОтладочныеДанные);
					Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
				КонецЕсли;
				КлючИЗначениеОтвета.Значение.Удалить(ИндексКоманд);
			Иначе
				ИндексКоманд = ИндексКоманд + 1;
			КонецЕсли;
		КонецЦикла;
		Если Не КлючИЗначениеОтвета.Значение.Количество() Тогда
			КлючиОтветовНеВостребованы.Добавить(КлючИЗначениеОтвета.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючУдалить Из КлючиОтветовНеВостребованы Цикл
		Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы.Удалить(КлючУдалить);
	КонецЦикла;
	//Каждую минуту в режиме простоя повторно проверяем оставшиеся невостребованными сообщения, пока не будут почищены все.
	Если Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы.Количество() Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("СБИСПлагин_ОчиститьНевостребованныеОтветы", 60, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СБИСПлагин_ЧтениеОтветовИВызовСобытий(Кэш, Сбис3КомандыОжидаются=Неопределено, ДопПараметры=Неопределено, Отказ)
	Результат	= Новый Соответствие;
	МестныйКэш	= Кэш;
	//TODO40 обработка исключений от плагина
	Попытка
		СтрокаXML = Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.ReadAllXml2();
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadAllXml2", 773,,"Ошибка обработки ответа от плагина. Детально: " + ОписаниеОшибки());
	КонецПопытки;
	СбисСобытия = XmlSerializer_Decode(Кэш, СтрокаXML, Отказ);
	ВремяПолученияСобытий = ТекущаяДата();
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисСобытия, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
	КонецЕсли;
	Для Каждого Сбис3СобытиеОтвет Из СбисСобытия Цикл
		ОтветОбработан = Ложь;
		Если		Сбис3СобытиеОтвет.type = "Message" Тогда	//parse_Message
			Сбис3СобытиеОтвет.data = XmlSerializer_Decode(Кэш, Сбис3СобытиеОтвет.data, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(Сбис3СобытиеОтвет.data,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
			КонецЕсли;
		ИначеЕсли	Сбис3СобытиеОтвет.type = "Event" Тогда	//parse_Event
			Сбис3СобытиеОтвет.data = XmlSerializer_Decode(Кэш, Сбис3СобытиеОтвет.data, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(Сбис3СобытиеОтвет.data,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
			КонецЕсли;
			СбисEventName = Сбис3СобытиеОтвет.data.eventName;
			Сбис3СобытиеОтвет.Вставить("queryID", СбисEventName);
			
			РезультатСобытия = Неопределено;
			ОшибкаОбработки = Ложь;
			//костылим имя эвента при чтении ответа.
			Если		СбисEventName = "extsdk2.async.error" Тогда
				Сбис3СобытиеОтвет = Новый Структура("type,queryID,data","Error", Сбис3СобытиеОтвет.data.data.QueryId, Сбис3СобытиеОтвет.data.data);
			ИначеЕсли	СбисEventName = "extsdk2.async.complete" Тогда
				Сбис3СобытиеОтвет = Новый Структура("type,queryID,data","Message",Сбис3СобытиеОтвет.data.data.QueryId, Сбис3СобытиеОтвет.data.data);				 
			ИначеЕсли СБИСПлагин_ВызватьСобытиеПоПодписке(Кэш, Сбис3СобытиеОтвет,,РезультатСобытия, ОшибкаОбработки) Тогда
				Если ОшибкаОбработки Тогда
					Отказ = Истина;
					Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатСобытия, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
				Иначе
					ОтветОбработан = Истина;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли	Сбис3СобытиеОтвет.type = "Error" Тогда	//parse_Error
			Если Сбис3СобытиеОтвет.queryID = "ReadAllXml" Тогда//ошибка сериализатора
				Отказ = Истина;
				Возврат Кэш.ОбщиеФункции.СбисИсключение(,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadAllXml2", 700,,Сбис3СобытиеОтвет.data);
			КонецЕсли;
			Сбис3СобытиеОтвет.data = XmlSerializer_Decode(Кэш, Сбис3СобытиеОтвет.data, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(Сбис3СобытиеОтвет.data,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий");
			ИначеЕсли ТипЗнч(Сбис3СобытиеОтвет.data) = Тип("Строка") Тогда
				//Отвалился плагин. Останавливаем обмен
				Если	Найти(Сбис3СобытиеОтвет.data, "disconnect")
					Или	Сбис3СобытиеОтвет.data = "Not connected"
					Или	Сбис3СобытиеОтвет.data = "Server not found" Тогда
					Сбис3СобытиеОтвет.data = Кэш.ОбщиеФункции.СбисИсключение(,	 Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЧтениеОтветовИВызовСобытий", 
																				756, "Подключение недоступно", "Работа СБИС плагина была остановлена. Перезапустите СБИС Плагин для дальнейшей работы.");
					Сбис3СобытиеОтвет.queryID = "SbisPluginClientCOM.Disconnected";
					ОтветОбработан = СБИСПлагин_ВызватьСобытиеПоПодписке(Кэш, Сбис3СобытиеОтвет);
				КонецЕсли;
			ИначеЕсли	Сбис3СобытиеОтвет.data.Свойство("detail")
					И	Сбис3СобытиеОтвет.data.detail = "#ASYNC" Тогда
				//Если это асинхронное событие, то проставим в команду что есть ответ, но поток не снимается а продолжается его ожидание
				АсинхронныйПоток = Кэш.СБИС.ДанныеИнтеграции.Плагин.Потоки.Получить(Сбис3СобытиеОтвет.queryID);
				Если Не АсинхронныйПоток = Неопределено Тогда
					АсинхронныйПоток.Ответ = Сбис3СобытиеОтвет.data;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadAllXml2", 773,,"Не поддерживаемый формат ответа!");
		КонецЕсли;
		ИдентификаторСобытия = Сбис3СобытиеОтвет.queryID;
		//После чтения ответа, посмотрим что с ним сделать:
		//1. Есть соответствующий запрос, отправленный ранее. Тогда надо освободить поток и проверить наличие подписки на тип ответа и вызвать обработчик.
		//2. Мы ожидаем этот ответ синхронно, тогда добавим его в результат чтения.
		//3. Если не 1 и не 2, то добавим полученный ответ в список "ненужных", при необходимости обработать, или выгрузить в лог (включить режим отладки).
		
		КомандаОбрабатываемогоОтвета = СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ",ИдентификаторСобытия,Сбис3СобытиеОтвет.type,Сбис3СобытиеОтвет.data));
		Если Не КомандаОбрабатываемогоОтвета = Неопределено Тогда
			//Пришёл ответ на занятый поток
			КомандаОбрабатываемогоОтвета.ВремяПолучения = ВремяПолученияСобытий;
			ОтветОбработан = СБИСПлагин_ВызватьСобытие(Кэш, Сбис3СобытиеОтвет.data, КомандаОбрабатываемогоОтвета, Сбис3СобытиеОтвет.Type);
		КонецЕсли;
		
		//Если команда ожидается как ответ, подготовим результат
		КомандаНаВозврат = Неопределено;
		Если Не Сбис3КомандыОжидаются = Неопределено Тогда
			КомандаНаВозврат = Сбис3КомандыОжидаются.Получить(ИдентификаторСобытия);
		КонецЕсли;
		Если КомандаНаВозврат = Неопределено Тогда
			Если Не ОтветОбработан Тогда
				СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторСобытия, Сбис3СобытиеОтвет);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		КомандаНаВозврат.Вставить("Ответ", Сбис3СобытиеОтвет);
		КомандаНаВозврат.ВремяПолучения = ВремяПолученияСобытий;
		Результат.Вставить(ИдентификаторСобытия, КомандаНаВозврат);
		Сбис3КомандыОжидаются.Удалить(ИдентификаторСобытия);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

//Занимает поток
&НаКлиенте
Процедура СБИСПлагин_ЗанятьПоток(Кэш, ИдентификаторПотока, Сбис3Команда) Экспорт
	Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных = Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных - 1;
	Кэш.СБИС.ДанныеИнтеграции.Плагин.Потоки.Вставить(ИдентификаторПотока, СБИС3Команда);
	Если Кэш.Парам.РежимОтладки Тогда
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", "CALL", Сбис3Команда.Модуль, Сбис3Команда.Метод, Сбис3Команда.ВремяВызова, Сбис3Команда.Идентификатор, Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(Сбис3Команда.Параметры));
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;

	//Сообщить(Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных);
КонецПроцедуры

//Освобождает ожидаемый поток, возвращает завершенную команду потока 
&НаКлиенте
Функция СБИСПлагин_ОсвободитьПоток(Кэш, СбисОписаниеСобытия) Экспорт
	ИдентификаторСобытия = СбисОписаниеСобытия.Идентификатор;
	КомандаВыполнена = Кэш.СБИС.ДанныеИнтеграции.Плагин.Потоки.Получить(ИдентификаторСобытия);
	Если Не КомандаВыполнена = Неопределено Тогда
		Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных = Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных + 1;
		Кэш.СБИС.ДанныеИнтеграции.Плагин.Потоки.Удалить(ИдентификаторСобытия);
		Если Кэш.Парам.РежимОтладки Тогда
			СбисТипОтвета = "MESSAGE";
			СбисТекстОтвета = "";
			Если СбисОписаниеСобытия.Свойство("Тип") Тогда
				СбисТипОтвета = ВРег(СбисОписаниеСобытия.Тип);
			КонецЕсли;	
			Если СбисОписаниеСобытия.Свойство("Ответ") Тогда
				СбисТекстОтвета = Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(СбисОписаниеСобытия.Ответ);
			КонецЕсли;
			лОтладочныеДанные = Новый Структура("Тип, Модуль, Вызов, Время, Идентификатор, Сообщение", СбисТипОтвета, КомандаВыполнена.Модуль, КомандаВыполнена.Метод, ТекущаяДата(), КомандаВыполнена.Идентификатор, СбисТекстОтвета);
			ДанныеВЛог = Новый Массив;
			ДанныеВЛог.Добавить(лОтладочныеДанные);
			Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
		КонецЕсли;
	КонецЕсли;
	//Сообщить(Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных);
	Возврат КомандаВыполнена;
КонецФункции

//Вызывает метод подписки на событие Event
//Параметры: 
//Кэш - Кэш главного окна, 
//Сбис3СобытиеОтвет - описание полученного события
//ДопПараметры - дополнительные параметры вызова, которые передаются в обработчик события.
//РезультатСобытия - в переменную помещается результат вызова события по подписке, если функция что-то возвращает
&НаКлиенте
Функция СБИСПлагин_ВызватьСобытиеПоПодписке(Кэш, Сбис3СобытиеОтвет, ДопПараметры=Неопределено, РезультатСобытия=Неопределено, Отказ=Ложь)
	СбисПараметрыПодписки = Кэш.СБИС.ДанныеИнтеграции.Плагин.Подписки.Получить(Сбис3СобытиеОтвет.queryID);
	Результат = Ложь;
	Если Не СбисПараметрыПодписки = Неопределено Тогда
		ИмяФункцииПодписки = Неопределено;
		Если Не СбисПараметрыПодписки.Свойство("Функция", ИмяФункцииПодписки) Тогда
			//Для события QueryID = его тип, если не указана функция вызова
			ИмяФункцииПодписки = Сбис3СобытиеОтвет.queryID;
		КонецЕсли;
		ПараметрыСобытия = Новый Структура("Основные, Дополнительные", СбисПараметрыПодписки.Параметры, ДопПараметры);
		ВызовПодписки = Новый Структура("Модуль, Функция, Параметры", ЭтаФорма, ИмяФункцииПодписки, ПараметрыСобытия);
		Если СбисПараметрыПодписки.Свойство("Модуль") Тогда
			ВызовПодписки.Модуль = СбисПараметрыПодписки.Модуль;
		КонецЕсли;
		Попытка
			СБИСПлагин_ВызватьФункциюСобытия(Кэш, Сбис3СобытиеОтвет, ВызовПодписки);
		Исключение
			Отказ = Истина;
			РезультатСобытия = Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ВызватьСобытиеПоПодписке",,,,Новый Структура("data", Сбис3СобытиеОтвет));
		КонецПопытки;
		Результат = Истина;
	КонецЕсли;
	Если Кэш.Парам.РежимОтладки Тогда
		СбисТекстОтвета = Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(Сбис3СобытиеОтвет);
		лОтладочныеДанные = Новый Структура("Тип, Модуль, Время, Идентификатор, Сообщение, Вызов", "EVENT", "Events", ТекущаяДата(), Сбис3СобытиеОтвет.queryID, СбисТекстОтвета, "Unknown");
		Если Результат Тогда
			лОтладочныеДанные.Вызов = ИмяФункцииПодписки;
		КонецЕсли;
		ДанныеВЛог = Новый Массив;
		ДанныеВЛог.Добавить(лОтладочныеДанные);
		Если Отказ Тогда
			//Если пришёл результат от подписки на событие, то его тоже выгрузим в лог
			СбисТекстОтвета = Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(РезультатСобытия);
			лОтладочныеДанные = Новый Структура("Тип, Модуль, Время, Идентификатор, Сообщение, Вызов", "E_ERROR", Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя, ТекущаяДата(), Сбис3СобытиеОтвет.queryID, СбисТекстОтвета, ИмяФункцииПодписки);
			ДанныеВЛог.Добавить(лОтладочныеДанные);
		КонецЕсли;
		Кэш.ОбщиеФункции.сбисСохранитьОтладочныеДанные(Кэш, Новый Структура("Log", ДанныеВЛог));
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция получает ID модуля плагина для вызова его методов.
&НаКлиенте
Функция СБИСПлагин_GetModule(Кэш, ИмяМодуля, Отказ)
	//Проверим наличие подключенного модуля.
	Попытка
		РезультатЗапроса = Кэш.СБИС.ДанныеИнтеграции.Объекты.Плагин.GetModule(ИмяМодуля);
	Исключение
		Отказ = Истина;//Если падает метод COM, значит его нет в модуле и это старый плагин
		Возврат Новый Структура("code, message, details", 762, "Версия системы не поддерживается", "Обновите СБИС плагин.");
	КонецПопытки;
	
	//Проверим, что модуль получен
	Если РезультатЗапроса = "" Тогда
		СБИСПлагин_ЧтениеОтветовИВызовСобытий(Кэш, Неопределено, Новый Структура, Отказ);
		Отказ	= Истина;
		//Смотрим вернувшиеся ошибки и обрабатываем в порядке приоритета:
		//1. Ошибка 756 о завершении работы плагина
		//2. Ошибка 775 о отсутствии запущенного плагина
		//3. Последняя ошибка в списке, которая должна относиться к GetModule()
		СтруктураОшибки = Неопределено;
		КлючиОчистить = Новый Массив;
		Для Каждого КлючИЗначениеОтвет Из Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы Цикл
			Для Каждого ЗначениеСобытия Из КлючИЗначениеОтвет.Значение Цикл
				ЗначениеОтвет = ЗначениеСобытия.Ответ;
				Если ЗначениеОтвет.Type = "Error" Тогда
					СтруктураОшибки = ЗначениеОтвет.data;
					Если СтруктураОшибки.code = 756 Тогда
						КлючиОчистить.Добавить(КлючИЗначениеОтвет.Ключ);
						Прервать;
					ИначеЕсли   СтруктураОшибки.code = 775 Тогда
						КлючиОчистить.Добавить(КлючИЗначениеОтвет.Ключ);
						СтруктураОшибки.details = "Не удалось получить расширение " + ИмяМодуля + ".";
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого КлючОчистить Из КлючиОчистить Цикл 
			Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы.Удалить(КлючОчистить);
		КонецЦикла;
		Если Не ЗначениеЗаполнено(СтруктураОшибки) Тогда
			СтруктураОшибки = Новый Структура("code, message, details", 775, "Не получен ответ от плагина", "Не удалось получить расширение " + ИмяМодуля + ".");
		КонецЕсли;
		Возврат СтруктураОшибки;
	КонецЕсли;
	Если Не Отказ Тогда
		Кэш.СБИС.ДанныеИнтеграции.Объекты.Вставить(ИмяМодуля, РезультатЗапроса);
	КонецЕсли;
	Возврат РезультатЗапроса;
	
КонецФункции

//Делает вызов события
&НаКлиенте
Процедура СБИСПлагин_ВызватьФункциюСобытия(Кэш, РезультатВызова=Неопределено, СобытиеВыполнить)
	Перем СбисМодуль, СбисФункция;
	Если Не СобытиеВыполнить.Свойство("Модуль", СбисМодуль) Тогда
		СбисМодуль = ЭтаФорма;
	КонецЕсли;
	Если Не СобытиеВыполнить.Свойство("Функция", СбисФункция) Тогда
		СбисФункция = "СБИСПлагин_ПереадресацияПоРезультату";
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Выполнить("СбисМодуль." + СбисФункция + "(РезультатВызова, СобытиеВыполнить.Параметры)");
	#Иначе
		СбисОписаниеОповещения = Новый ОписаниеОповещения(СбисФункция, СбисМодуль, СобытиеВыполнить.Параметры);
		ВыполнитьОбработкуОповещения(СбисОписаниеОповещения, РезультатВызова);
	#КонецЕсли
	
КонецПроцедуры

//Функция переадресует обработку ответа соотствующей функции, если такая есть
&НаКлиенте
Функция СБИСПлагин_ПереадресацияПоРезультату(РезультатВызова, ПараметрыОбработки) Экспорт
	ОбрабатываемаяКоманда = ПараметрыОбработки.Команда;
	Кэш = ПараметрыОбработки.Кэш;
	КлючСобытия = ОбрабатываемаяКоманда.Метод + "_" + ПараметрыОбработки.Тип;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(КлючСобытия, "ExtSDK");
	Если фрм = Ложь Тогда
		СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ОбрабатываемаяКоманда.Идентификатор, РезультатВызова);
	Иначе
		СБИСПлагин_ВызватьФункциюСобытия(Кэш, РезультатВызова, Новый Структура("Модуль, Функция, Параметры", фрм, КлючСобытия, ПараметрыОбработки));
	КонецЕсли;
КонецФункции

//////// Отправка ////////////////

//Отправляет сформированные пакеты документов	
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	Если Не МассивПакетов.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отправка_ОбработатьВКэшеПодготовленные(Кэш);
	Отправка_ОбработатьВКэшеПереотправляемые(Кэш);
	
	//Затем отправляем наши пакеты
	Для Каждого СоставПакета Из МассивПакетов Цикл
		Отправка_ДокументВСвободныйПоток(Кэш, Новый Структура("СоставПакета,СтатусПакета", СоставПакета, "Подготовка"), Новый Структура("ДобавлятьВОчередь", Истина));
	КонецЦикла;
	
КонецФункции

//Точка входа завершения отправки
&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Ожидание ответов", Кэш.ГлавноеОкно);
	Отправка_Завершение(Кэш);
	Кэш.ГлавноеОкно.сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
КонецПроцедуры

//Подсчет времени на отправку.
&НаКлиенте
Процедура Отправка_ВремяОтправки(Кэш, ИдентификаторОтправки) Экспорт
	ДетализацияОтправки = Кэш.РезультатОтправки.ДетализацияОтправки.Получить(ИдентификаторОтправки);
	Если ДетализацияОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДатКнц = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш);
	ДетализацияОтправки.ВремяВыполнения = (ДатКнц - ДетализацияОтправки.ДатНач)/1000;
	Кэш.РезультатОтправки.ВремяОтправки = Кэш.РезультатОтправки.ВремяОтправки + ДетализацияОтправки.ВремяВыполнения;
КонецПроцедуры

//Отправляет в подготовленные пакеты пока есть свободные потоки
&НаКлиенте
Процедура Отправка_ОбработатьВКэшеПодготовленные(Кэш, ОжидатьСвободныеПотоки=Истина)
	Если Не	Кэш.РезультатОтправки.Свойство("ПодготовленныеКОтправке") Тогда
		Кэш.РезультатОтправки.Вставить("ПодготовленныеКОтправке", Новый Соответствие);
		Возврат;
	КонецЕсли;
	ПакетыОтправлены = Новый Массив;
	ОтправляемыеПакеты = Кэш.РезультатОтправки.ПодготовленныеКОтправке;
	Для Каждого КлючИЗначениеПодготовлен Из Кэш.РезультатОтправки.ПодготовленныеКОтправке Цикл
		Если 		ОжидатьСвободныеПотоки
			И	Не	Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных Тогда
			Прервать;
		ИначеЕсли Не	(	КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Готов"
						Или	КлючИЗначениеПодготовлен.Значение.СтатусПакета = "Подготовка") Тогда
			Продолжить;
		КонецЕсли;
		Отправка_ДокументВСвободныйПоток(Кэш, КлючИЗначениеПодготовлен.Значение, Новый Структура("ДобавлятьВОчередь", Ложь));
		ПакетыОтправлены.Добавить(КлючИЗначениеПодготовлен.Ключ);
	КонецЦикла;
	Для Каждого ПакетОтправлен Из ПакетыОтправлены Цикл
		//Отправка должна проставить статус отправлен, иначе могло выйти так, что в процессе необходимо выполнить дополнительные действия и пакет пока не был отправлен
		Если Кэш.РезультатОтправки.ПодготовленныеКОтправке.Получить(ПакетОтправлен).СтатусПакета = "Отправлен" Тогда
			Кэш.РезультатОтправки.ПодготовленныеКОтправке.Удалить(ПакетОтправлен);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Отправляет в пакеты, упавшие с нефатальными ошибками
&НаКлиенте
Процедура Отправка_ОбработатьВКэшеПереотправляемые(Кэш, ОжидатьСвободныеПотоки=Истина)
	Если Не	Кэш.РезультатОтправки.Свойство("ПакетыДляПереотправки") Тогда
		Возврат;
	КонецЕсли;
	ОтправляемыеПакеты = Кэш.РезультатОтправки.ПакетыДляПереотправки;
	Пока	ОтправляемыеПакеты.Количество()
		И	(	Не	ОжидатьСвободныеПотоки
			Или		Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных) Цикл
		Отправка_ДокументВСвободныйПоток(Кэш, Новый Структура("СоставПакета,СтатусПакета", ОтправляемыеПакеты[0],"Подготовка"), Новый Структура("ДобавлятьВОчередь", Ложь));
		ОтправляемыеПакеты.Удалить(0);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Отправка_ОбработатьОтветыОтПлагина(Кэш)
	//Кэш = МестныйКэш;
	ДатаНачалаОбработки = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш);
	СБИСПлагин_ОбработатьОтветы_Асинхронно(Кэш);
	//При вызове через файллоадер есть небольшой шанс того, что событие о закачке придёт раньше, чем оформится подписка.
	//Проверим наличие таких событий и вызовем их получение повторно.
	КлючиОбработаны = Новый Массив;
	Для Каждого КлючИЗначениеЗапросОтправлен Из Кэш.СБИС.ДанныеИнтеграции.Плагин.Потоки Цикл
		ОтветПОлученРаньшеПодписки = Кэш.СБИС.ДанныеИнтеграции.Плагин.НеизвестныеОтветы.Получить(КлючИЗначениеЗапросОтправлен.Ключ);
		Если ОтветПОлученРаньшеПодписки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОтветОжидаетОбработки Из ОтветПОлученРаньшеПодписки Цикл
			Если СБИСПлагин_ВызватьСобытиеПоПодписке(Кэш, ОтветОжидаетОбработки.Ответ, Новый Структура("ПовторныйВызов", Истина)) Тогда
				КлючиОбработаны.Добавить(КлючИЗначениеЗапросОтправлен.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СБИСПлагин_ОчиститьНевостребованныеОтветы();
	//Запишем время, что ушло на обработку ответа от плагина.
	ДатаКонцаОбработки = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш);
	Кэш.РезультатОтправки.ВремяОжиданияОтвета = Кэш.РезультатОтправки.ВремяОжиданияОтвета + (ДатаКонцаОбработки - ДатаНачалаОбработки) / 1000;
КонецПроцедуры
	
&НаКлиенте
Процедура Отправка_ОбработатьОшибкуОтправки(Кэш, Сбис3КомандаОтправки, СтруктураОшибки)
	ИдентификаторОтправки = Сбис3КомандаОтправки.Идентификатор;
	Если	СтруктураОшибки.details = "Необходимо аутентифицироваться для выполнения запросов к серверу"
		Или	СтруктураОшибки.details = "Недопустимый URI: Невозможно определить формат URI."
		Или Лев(СтруктураОшибки.details, 18) = "Ошибка авторизации" Тогда
		Если	Кэш.РезультатОтправки.Свойство("ВремяПоследнейАвторизации")
			И	Сбис3КомандаОтправки.ВремяВызова <= Кэш.РезультатОтправки.ВремяПоследнейАвторизации Тогда   
			// если уже переавторизовались, но получаем более ранние ответы с ошибкой авторизации
			Кэш.РезультатОтправки.ПакетыДляПереотправки.Добавить(Кэш.РезультатОтправки.СформированныеПакеты.Получить(ИдентификаторОтправки));
			Кэш.РезультатОтправки.КоличествоПереотправок = Кэш.РезультатОтправки.КоличествоПереотправок + 1;
			Возврат;
		ИначеЕсли	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат) 
				Или (Не	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль) Тогда
			// переавторизуемся
			формаАвторизации = сбисПолучитьФорму("ФормаАвторизация");
			УспешнаяАвторизация = формаАвторизации.Авторизоваться(Кэш);
			Если УспешнаяАвторизация = Истина Тогда
				Кэш.РезультатОтправки.Вставить("ВремяПоследнейАвторизации", ТекущаяДата());
				Если Не Кэш.РезультатОтправки.Свойство("ПакетыДляПереотправки") Тогда
					Кэш.РезультатОтправки.Вставить("ПакетыДляПереотправки", Новый Массив);
					Кэш.РезультатОтправки.Вставить("КоличествоПереотправок", 0);
				КонецЕсли;
				Кэш.РезультатОтправки.ПакетыДляПереотправки.Добавить(Кэш.РезультатОтправки.СформированныеПакеты.Получить(ИдентификаторОтправки));
				Кэш.РезультатОтправки.КоличествоПереотправок = Кэш.РезультатОтправки.КоличествоПереотправок+1;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли   СтруктураОшибки.code = 775
			Или (		СтруктураОшибки.Свойство("dump")
				И	Не	СтруктураОшибки.dump = Неопределено
				И		СтруктураОшибки.dump.Свойство("response")
				И		СтруктураОшибки.dump.response.Свойство("data")
				И		СтруктураОшибки.dump.response.data.Свойство("classid")
				И		Лев(Врег(СтруктураОшибки.dump.response.data.classid),28)="{00000000-0000-0000-0000-1AA") Тогда // нефатальная ошибка
		Если Не Кэш.РезультатОтправки.Свойство("НефатальныеОшибкиПодряд") Тогда
			Кэш.РезультатОтправки.Вставить("НефатальныеОшибкиПодряд", 0);
		КонецЕсли;
		Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = Кэш.РезультатОтправки.НефатальныеОшибкиПодряд + 1;
		Если Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 5 Тогда
			Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", "Повторите попытку позже. Получен ряд нефатальных ошибок: " + СтруктураОшибки.message + ?(СтруктураОшибки.Свойство("details") И СтруктураОшибки.message<>СтруктураОшибки.details, " ("+СтруктураОшибки.details+")", ""));
		КонецЕсли;
	ИначеЕсли Кэш.РезультатОтправки.Свойство("НефатальныеОшибкиПодряд") Тогда
		Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 0;
	КонецЕсли;
	Кэш.РезультатОтправки.НаЗаписьСтатусов.Ошибки.Вставить(ИдентификаторОтправки, СтруктураОшибки);

КонецПроцедуры

//Обрабатываем событие отправки на завершение FileLoader
&НаКлиенте
Функция Отправка_UploadToSbisDiskCompleteEvent(РезультатВызова, ПараметрыВызова) Экспорт
	Кэш = ПараметрыВызова.Кэш;
	//ИдентификаторПакета = ПараметрыВызова.РезультатПодготовки.СоставПакета.Идентификатор;
	РезультатПодготовки = ПараметрыВызова.РезультатПодготовки;	
	Если РезультатПодготовки.Отказ Тогда 
		//Что-то упало и уже обработано. В любом случае, дальше проверять нет смысла.
		Возврат Неопределено;
	КонецЕсли;
	ГотовКОтправке = Истина;
	Для Каждого ВложениеПакета Из РезультатПодготовки.ДокументОтправить.Вложение Цикл
		//Проверим пакет в отправке на предмет остальных запросов Future. Если есть, то ещё не готово, полученное почистим
		Если Не ВложениеПакета.Файл.Свойство("Future") Тогда
			Продолжить;
		КонецЕсли;
		Если РезультатВызова.data.UploadGuid = ВложениеПакета.Файл.Future Тогда
			ВложениеПакета.Файл.Удалить("Future");
			ВложениеПакета.Файл.Вставить("Ссылка", РезультатВызова.data.UploadId);
			Продолжить;
		КонецЕсли;
		ГотовКОтправке = Ложь;
	КонецЦикла;
	Если ГотовКОтправке Тогда
		РезультатПодготовки.СтатусПакета = "Готов";
	КонецЕсли;
КонецФункции

//Обрабатываем событие отправки на ошибку FileLoader
&НаКлиенте
Функция Отправка_UploadToSbisDiskFatalErrorEvent(РезультатВызова, ПараметрыВызова) Экспорт
	Кэш = ПараметрыВызова.Кэш;
	//ИдентификаторПакета = ПараметрыВызова.ИдентификаторПакета;
	
	РезультатПодготовки	= ПараметрыВызова.РезультатПодготовки;	
	ИдентификаторПакета	= РезультатПодготовки.СоставПакета.Идентификатор;
	СбисИсключение		= Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_Вызов");
	
	РезультатПодготовки.Ошибки.Добавить(СбисИсключение);			
	Если РезультатПодготовки.Отказ Тогда                                
		//При отправке пакета была другая ошибка
		Возврат Неопределено;
	КонецЕсли;
	РезультатПодготовки.Отказ = Истина;
	Если Кэш.РезультатОтправки.ПодготовленныеКОтправке.Получить(ИдентификаторПакета) = Неопределено Тогда
		//Нет подготовленного к отправке, значит ещё находимся в процессе подготовки пакета. Обработаем ошибку в общем порядке подготовки в Отправка_Вызов.
		Возврат Неопределено;
	КонецЕсли;	
	Кэш.РезультатОтправки.ПодготовленныеКОтправке.Удалить(ИдентификаторПакета);
	
	Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, ПараметрыВызова.Команда.Идентификатор, РезультатПодготовки.СоставПакета);
	Отправка_ОбработатьОшибкуОтправки(Кэш, ПараметрыВызова.Команда, СбисИсключение);
	
КонецФункции

&НаКлиенте
Функция Отправка_UploadToSbisDisk_AfterCall(РезультатВызова, ПараметрыВызова) Экспорт
	//После вызова аплоада ставим пакету статус не готов, для ожидания ответа от сбисдиска
	ПараметрыВызова.РезультатПодготовки.СтатусПакета = "ОжиданиеОтветов";
КонецФункции

//Отправляет пакет в свободный поток или добавляет в очередь
&НаКлиенте
Процедура Отправка_ДокументВСвободныйПоток(Кэш, ДанныеОтправки, ДопПараметры)
	Если Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных Тогда
		//Есть свободный поток, сразу отправляем его в путь
	ИначеЕсли	ДопПараметры.ДобавлятьВОчередь//Есть место в кэше для подготовленных, добавим в очередь
			И	Кэш.РезультатОтправки.ПодготовленныеКОтправке.Количество() < Кэш.СБИС.ПараметрыИнтеграции.Потоки_МаксимальноеКоличество Тогда
		ИдПакета = Неопределено;
		//Если у пакета нет ИД, то извлечем его из пользовательского, либо составим новый и добавим в пакет, чтобы при подготовке он был обработан
		Если Не ДанныеОтправки.СоставПакета.Свойство("Идентификатор", ИдПакета) Тогда
			ИдПакета = Отправка_ИдентификаторСоставаПакета(Кэш, ДанныеОтправки.СоставПакета);
			ДанныеОтправки.СоставПакета.Вставить("ВременныйИдентификатор", ИдПакета);
		КонецЕсли;
	
		Кэш.РезультатОтправки.ПодготовленныеКОтправке.Вставить(ИдПакета, ДанныеОтправки);
		Возврат;
	Иначе//Очередь заполнена, ждём, пока освободятся потоки. Пока идёт ожидание, записываем статусы по полученным ответам
		Пока Не Кэш.СБИС.ПараметрыИнтеграции.Потоки_КоличествоСвободных Цикл 
			Отправка_ОбработатьОтветыОтПлагина(Кэш);
			Отправка_ЗаписатьСтатусыПоДокументам(Кэш);
		КонецЦикла;	
	КонецЕсли;
	Кэш.Интеграция.Отправка_Вызов(Кэш, ДанныеОтправки, ДопПараметры);
КонецПроцедуры

//Записываем статусы из полученных ответов
&НаКлиенте
Процедура Отправка_ЗаписатьСтатусыПоДокументам(Кэш) Экспорт
	//Кэш = МестныйКэш;
	Если Не Кэш.РезультатОтправки.Свойство("НаЗаписьСтатусов") Тогда
		Возврат;
	КонецЕсли;
		
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	// << alo 
	Если Кэш.Парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьПараметрыДокументовСБИС");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	// alo >>
	
	ИндексыДляУдаления = Новый СписокЗначений;
	ДанныеПоСтатусам = Новый Массив;
	Для СчетчикПоСтатусам = 0 По Кэш.РезультатОтправки.ДанныеПоСтатусам.Количество()-1 Цикл
		ЭлементДанныхСтатусов = Кэш.РезультатОтправки.ДанныеПоСтатусам[СчетчикПоСтатусам]; 
		//Получаем ответ, либо ошибку и пишем в статус
		СообщениеОтправки	= Кэш.РезультатОтправки.НаЗаписьСтатусов.Ответы.Получить(ЭлементДанныхСтатусов.Идентификатор);
		Если		СообщениеОтправки = Неопределено Тогда
			СообщениеОтправки = Кэш.РезультатОтправки.НаЗаписьСтатусов.Ошибки.Получить(ЭлементДанныхСтатусов.Идентификатор);
			Если СообщениеОтправки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ДокументСБИС_Статус = "Ошибка: " + СообщениеОтправки.message;
			Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультат(Кэш, СообщениеОтправки, ЭлементДанныхСтатусов);
		ИначеЕсли	СообщениеОтправки.Свойство("Состояние") Тогда
			Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
			ДокументСБИС_Статус = СообщениеОтправки.Состояние["Название"];
		Иначе
			ДокументСБИС_Статус = "Ошибка: В ответе отсутствует состояние документа.";
			СбисСтруктураОшибки = Кэш.ОбщиеФункции.СбисИсключение(, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_ЗаписатьСтатусыПоДокументам",700,,"В ответе отсутствует состояние документа",Новый Структура("Ответ", СообщениеОтправки));
			Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультат(Кэш, СбисСтруктураОшибки, ЭлементДанныхСтатусов);
		КонецЕсли;
		Для Каждого Стр Из ЭлементДанныхСтатусов.Статусы Цикл
			СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", Стр.СтруктураСвойств.ДокументСБИС_Ид, Стр.СтруктураСвойств.ДокументСБИС_ИдВложения, ДокументСБИС_Статус);
			//KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK-->
			СтатусРегламент = ?(Стр.Свойство("Регламент"),Стр.Регламент,"");
			ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С,Регламент",СтруктураСвойств, Стр.Документ1С,СтатусРегламент));
			//<--KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK
		КонецЦикла;
		ИндексыДляУдаления.Добавить(СчетчикПоСтатусам);
		Кэш.РезультатОтправки.ПолученоОтветов = Кэш.РезультатОтправки.ПолученоОтветов + 1;
	КонецЦикла;
	
	Кэш.РезультатОтправки.НаЗаписьСтатусов.Ошибки.Очистить();
	Кэш.РезультатОтправки.НаЗаписьСтатусов.Ответы.Очистить();
	
	Если Не ДанныеПоСтатусам.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНач = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш);
	фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек);
	// << alo 
	Если Кэш.Парам.СостояниеЭД Тогда
		фрмЭД.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек);
	КонецЕсли;	// alo >>
	//Точка входа после отправки партии пакетов документов с данными по статусам.
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисОбработатьСписокОтправленных","РаботаСДокументами1С","", Кэш);
	Если Не фрм = Ложь Тогда
		//Данные по детализации статусов и списка номенклатуры смотреть в кэше.
		Контекст = Новый Структура("ДанныеПоСтатусам", ДанныеПоСтатусам);//Структура для возможности расширения, если понадобится добавить что-то ещё.
		фрм.сбисОбработатьСписокОтправленных(Кэш, Контекст);
	КонецЕсли;
	//
	ДатаКнц = Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(Кэш);
	Кэш.РезультатОтправки.ВремяЗаписиСтатусов = Кэш.РезультатОтправки.ВремяЗаписиСтатусов+(ДатаКнц-ДатаНач)/1000;
	
	//Очищаем записанные статусы
	ИндексыДляУдаления.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Для Каждого Элемент Из ИндексыДляУдаления Цикл
		Кэш.РезультатОтправки.ДанныеПоСтатусам.Удалить(Элемент.Значение);		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, ИдентификаторВызова, СоставПакета)
	//KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK-->
	МассивСтатусРегламент = Новый Массив;
	Если  Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
		И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
			МассивСтатусРегламент =  Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<--KES 0507511151 ver 2 Статусы в разрезе регламентов ExtSDK

	Статусы = Новый Массив;
	//KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK-->
	СтатусРегламент = "";
	Если СоставПакета.Свойство("Регламент") 
		И СоставПакета.Регламент.Свойство("Название") 
		И НЕ МассивСтатусРегламент.Найти(СоставПакета.Регламент.Название)=Неопределено Тогда
		СтатусРегламент = СоставПакета.Регламент.Название; 
	КонецЕсли;
	//<-- KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Документы1С") Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Документ1С Из Вложение.Документы1С Цикл
			СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,);
			//KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK-->
			Статусы.Добавить(Новый Структура("СтруктураСвойств, Документ1С, Регламент", СтруктураСвойств, Документ1С.Значение, СтатусРегламент));
			//<-- KES 050751151 ver 2 Статусы в разрезе регламентов ExtSDK
		КонецЦикла;
	КонецЦикла;
	
	ОсновнойДокумент1С = Неопределено;
	Если	СоставПакета.Вложение.Количество()
		И	СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
		ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
	КонецЕсли;
	Кэш.РезультатОтправки.ДанныеПоСтатусам.Добавить(Новый Структура("Идентификатор, ОсновнойДокумент1С, Статусы", ИдентификаторВызова, ОсновнойДокумент1С, Статусы));
КонецПроцедуры
	
&НаКлиенте
Функция Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыПодготовки, ДопПараметры, Отказ) Экспорт
	Перем СбисШифрование;
	Если Не ДопПараметры.Свойство("Шифрование", СбисШифрование) Тогда
		СбисШифрование = Ложь;
	КонецЕсли;
	СоставПакета= ПараметрыПодготовки.СоставПакета;
	document	= Новый Структура;
	ПараметрыПодготовки.ДокументОтправить = document;
	ПараметрыПодготовки.СтатусПакета = "Готов";//Сразу проставим статус, так как попали в функцию. В случае, если это не так, статус изменится (Например, в случае отправки вложения файл лоадером)
	
	//РезультатПодготовки = Новый Структура("СоставПакета, ДокументОтправить, Ошибки, Готов, Отказ", СоставПакета, document, Новый Массив, Истина, Отказ);
	Если СоставПакета.Свойство("Дата") И ЗначениеЗаполнено(СоставПакета.Дата) Тогда
		document.Вставить("Дата",СоставПакета.Дата);	
	КонецЕсли;
	Если СоставПакета.Свойство("Номер") И ЗначениеЗаполнено(СоставПакета.Номер) Тогда
		document.Вставить("Номер",СоставПакета.Номер);	
	КонецЕсли;
	//Для зашифрованных документов нет суммы
	Если СбисШифрование Тогда
		document.Вставить("Шифрование", Новый Структура("Зашифрован", "Да"));
	ИначеЕсли	СоставПакета.Свойство("Сумма")
			И	ЗначениеЗаполнено(СоставПакета.Сумма) Тогда
		document.Вставить("Сумма",СоставПакета.Сумма);	
	КонецЕсли;
	ИдПакета = Отправка_ИдентификаторСоставаПакета(Кэш, СоставПакета);
	
	attachmentList = Новый Массив;
	document.Вставить("Вложение",		attachmentList );
	document.Вставить("Тип",			СоставПакета.Тип);
	Если СоставПакета.Свойство("Подтип") и ЗначениеЗаполнено(СоставПакета.Подтип) Тогда
		document.Вставить( "Подтип",СоставПакета.Подтип);
	КонецЕсли;
	document.Вставить("Идентификатор",	ИдПакета); 
	
	СоставПакета.Вставить("Идентификатор", ИдПакета);
	//Обработка вложений
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		ИдВложения = Строка(Новый УникальныйИдентификатор());
		Вложение.Вставить("Идентификатор", ИдВложения);
		
		file		= Новый Структура;
		attachment	= Новый Структура("Идентификатор,Файл",ИдВложения,file);
		attachmentList.Добавить(attachment);
		Если СбисШифрование Тогда
			Если Кэш.Парам.ШифроватьВыборочно Тогда
				Если Вложение.Свойство("Шифрование") И Вложение.Шифрование = Истина Тогда
					attachment.Вставить("Шифрование", "Да" );
				Иначе
					attachment.Вставить("Шифрование", "Нет" );
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Вложение.Свойство("Зашифрован") Тогда   
			// может быть в случае пересылки зашифрованных пакетов
			attachment.Вставить("Зашифрован", Вложение.Зашифрован);
		КонецЕсли;
		СбисПараметрыВложения = Новый Структура("Файл,Вложение", file, Вложение);
		Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
			file.Вставить("Имя", Вложение.ИмяФайла); 
			Кэш.Интеграция.СБИСПлагин_ОбработатьВнешнийФайл(Кэш, СбисПараметрыВложения, ПараметрыПодготовки);
		ИначеЕсли ТипЗнч(СбисПараметрыВложения.Вложение.XMLДокумента) = Тип("Соответствие") Тогда	
			file.Вставить("Подстановка", СбисПараметрыВложения.Вложение.XMLДокумента); 
		Иначе  // сформирован xml
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
			file.Вставить("Имя", ИмяФайла); 
			Кэш.Интеграция.СБИСПлагин_ОбработатьXMLФайл(Кэш, СбисПараметрыВложения, ПараметрыПодготовки);
		КонецЕсли;
		Если ПараметрыПодготовки.Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Если Вложение.Свойство("Подпись") Тогда //d.ch
			ЭЦП = Новый Массив;
			Для Каждого Запись из Вложение.Подпись Цикл
				ЗаписьЭЦП = Новый Структура;
				Если Запись.Свойство("Направление") Тогда
					ЗаписьЭЦП.Вставить("Направление",Запись.Направление);
				КонецЕсли;
				ФайлЭЦП = Новый Структура;
				ФайлЭЦП.Вставить( "Имя", Запись.Файл.Имя ); 
				ФайлЭЦП.Вставить( "ДвоичныеДанные",сбисФайлСКлиентаВBASE64(Запись.Файл.ПолноеИмяФайла)); 
				ЗаписьЭЦП.Вставить("Файл",ФайлЭЦП);
				ЭЦП.Добавить(ЗаписьЭЦП);
			КонецЦикла;
			attachment.Вставить( "Подпись", ЭЦП );
		КонецЕсли;
		Если СбисШифрование Тогда
			Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
				attachment.Вставить( "Тип",  Вложение.Тип);
				attachment.Вставить( "Подтип",  Вложение.ПодТип);
				attachment.Вставить( "ВерсияФормата",  Вложение.ВерсияФормата);
				Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
					attachment.Вставить( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
				КонецЕсли;
			КонецЕсли;
			Если Вложение.Свойство("Название") и ЗначениеЗаполнено(Вложение.Название) Тогда
				// для зашифрованных документов убираем сумму из названия
				ПозСуммы = Найти(Вложение.Название, "на сумму");
				Если ПозСуммы>0 Тогда
					Вложение.Название = Лев(Вложение.Название, ПозСуммы-1);
				КонецЕсли;
				attachment.Вставить("Название",  Вложение.Название);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
		redaction = Новый Структура;
		redaction.Вставить("ИдентификаторИС", СоставПакета.ПользовательскийИдентификатор);
		document.Вставить( "Редакция", redaction);
	КонецЕсли;
	Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
		document.Вставить( "Примечание", СоставПакета.Примечание);
	КонецЕсли;
	
	org = Новый Структура; 
	Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
		СвФЛ = Новый Структура;
		СвФЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
		Если СоставПакета.НашаОрганизация.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.НашаОрганизация.СвФЛ.КодФилиала) Тогда
			СвФЛ.Вставить( "КодФилиала", СоставПакета.НашаОрганизация.СвФЛ.КодФилиала );	
		КонецЕсли;
		org.Вставить( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Новый Структура;
		СвЮЛ.Вставить( "ИНН", СоставПакета.НашаОрганизация.СвЮЛ.ИНН ); 
		СвЮЛ.Вставить( "КПП", СоставПакета.НашаОрганизация.СвЮЛ.КПП );
		Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Вставить( "КодФилиала", СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала );	
		КонецЕсли;
		Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодСтраны") Тогда
			СвЮЛ.Вставить( "КодСтраны", СоставПакета.НашаОрганизация.СвЮЛ.КодСтраны );	
		КонецЕсли;
		org.Вставить( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	document.Вставить( "НашаОрганизация", org );
	
	Если СоставПакета.Свойство("Контрагент") Тогда
		kontr = Новый Структура; 
		Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
			СвФЛ = Новый Структура;
			Если СоставПакета.Контрагент.Свойство("Параметр") Тогда
				Для Каждого Параметр из СоставПакета.Контрагент.Параметр Цикл
					Если Параметр.Имя = "ЧастноеЛицо" Тогда
						СвФЛ.Вставить("ЧастноеЛицо", Параметр.Значение);
					КонецЕсли;
					Если Параметр.Имя = "СНИЛС" Тогда
						СвФЛ.Вставить("СНИЛС", Параметр.Значение);						
					КонецЕсли;     					
				КонецЦикла;
			КонецЕсли;  
			Если СоставПакета.Контрагент.СвФЛ.Свойство("ИНН") Тогда  
				СвФЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН );
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
				СвФЛ.Вставить( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
				СвФЛ.Вставить( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
				СвФЛ.Вставить( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвФЛ.КодФилиала) Тогда
				СвФЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвФЛ.КодФилиала );	
			КонецЕсли;

			kontr.Вставить( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = Новый Структура;
			СвЮЛ.Вставить( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("КПП") Тогда	// << bav
				СвЮЛ.Вставить( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
			КонецЕсли;
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодСтраны") Тогда
				СвЮЛ.Вставить( "КодСтраны", СоставПакета.Контрагент.СвЮЛ.КодСтраны );	
			КонецЕсли; // bav >>
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвЮЛ.КодФилиала) Тогда
				СвЮЛ.Вставить( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
			КонецЕсли;
			Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
				СвЮЛ.Вставить( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
			КонецЕсли;
			kontr.Вставить( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
			Подразделение = Новый Структура;
			Подразделение.Вставить( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
			kontr.Вставить( "Подразделение", Подразделение );
		КонецЕсли;	
		Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
			Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
				kontr.Вставить( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
			КонецЕсли;
			Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
				kontr.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
			КонецЕсли;
		КонецЕсли;
		document.Вставить( "Контрагент", kontr );
	КонецЕсли;
	
	Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
		otv = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Ответственный Цикл
			otv.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Ответственный", otv ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
		podrazdel = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Подразделение Цикл
			podrazdel.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Подразделение", podrazdel ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
		regl = Новый Структура;
		Для Каждого Элемент Из СоставПакета.Регламент Цикл
			regl.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
		document.Вставить( "Регламент", regl ); 	
	КонецЕсли;
	Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
		osnovania = Новый Массив;
		Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
			osn = Новый Структура;
			Если ДокОсн.Свойство("ВидСвязи") Тогда
				osn.Вставить( "ВидСвязи", ДокОсн.ВидСвязи );	
			КонецЕсли;
			doc = Новый Структура;
			Для Каждого Элемент Из ДокОсн Цикл
				Если Элемент.Ключ<>"ВидСвязи" Тогда
					doc.Вставить( Элемент.Ключ, Элемент.Значение );	
				КонецЕсли;
			КонецЦикла;
			osn.Вставить( "Документ", doc );
			osnovania.Добавить(osn);
		КонецЦикла;
		document.Вставить( "ДокументОснование", osnovania ); 				
	КонецЕсли;
	Если	СоставПакета.Свойство("НеЗапускатьВДокументооборот")
		И	СоставПакета.НеЗапускатьВДокументооборот = Истина Тогда
		document.Вставить("НеЗапускатьВДокументооборот", "Да");
	КонецЕсли;
	Если	СоставПакета.Свойство("ДопПоля") Тогда // alo ДопПоля
		DopPolya = Новый Массив;
		Для Каждого Поле Из СоставПакета.ДопПоля Цикл 
			DopPolya.Добавить(Поле.Ключ);
		КонецЦикла;
		document.Вставить( "ДопПоля", DopPolya );
	КонецЕсли;
	Если	СоставПакета.Свойство("Провести")	// alo Провести
		И	( СоставПакета.Провести = Истина или СоставПакета.Провести = "Да") Тогда
		document.Вставить("Провести", "Да");
	КонецЕсли;
	
	Возврат ПараметрыПодготовки;
КонецФункции

&НаКлиенте
Функция Отправка_ИдентификаторСоставаПакета(Кэш, СоставПакета) Экспорт
	Перем ИдПакета;
	Если СоставПакета.Свойство("ВременныйИдентификатор", ИдПакета) Тогда
	ИначеЕсли СоставПакета.Свойство("ПользовательскийИдентификатор", ИдПакета) Тогда
		ИдПакета = Сред(ИдПакета,Найти(ИдПакета,":")+1);
	Иначе
		ИдПакета = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	Возврат ИдПакета;
КонецФункции

//Готовит пакет к отправке, формиует события-обработчики, делает вызов
//ПараметрыОтправки - СоставПакета, ДокументОтправить
&НаКлиенте
Процедура Отправка_Вызов(Кэш, ПараметрыОтправки, ДопПараметры) Экспорт
	Отказ = Ложь;
	ПараметрыВыполнить = Новый Структура("СоставПакета, СтатусПакета, Отказ, Ошибки, ДокументОтправить", ПараметрыОтправки.СоставПакета, ПараметрыОтправки.СтатусПакета, Ложь, Новый Массив);
	Сбис3Команда = СБИСПлагин_Команда(Кэш, "WriteDocumentEx2",,,Отказ);
	Если Отказ Тогда
		//Упал метод генерации queryID, прерываем отправку.
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Сбис3Команда);
		Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", Сбис3Команда.details);
		Возврат;
	КонецЕсли;
	Если Не ПараметрыОтправки.Свойство("ДокументОтправить", ПараметрыВыполнить.ДокументОтправить) Тогда
		//Переадресация на форму интеграции для КриптоExtSDK
		Результат = Кэш.Интеграция.Отправка_ПодготовитьСтруктуруПакета(Кэш, ПараметрыВыполнить, Новый Структура, Отказ);
		Если Результат.Отказ Тогда
			ОшибкаПодготовки = Результат.Ошибки[0];//Пока завязка на первую ошибку
			//Чтобы ошибка подготовки пакета попала в итоговый результат
			Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, Сбис3Команда.Идентификатор, ПараметрыОтправки.СоставПакета);
			Отправка_ОбработатьОшибкуОтправки(Кэш, Сбис3Команда, Кэш.ОбщиеФункции.СбисИсключение(ОшибкаПодготовки,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_Вызов"));
			Возврат;
		КонецЕсли;
		//Счетчик по обработанным документам
		Кэш.РезультатОтправки.ПорНомер = Кэш.РезультатОтправки.ПорНомер + 1;
	КонецЕсли;
	Если ПараметрыВыполнить.СтатусПакета = "Готов" Тогда
		Сбис3Команда.ВремяОжиданияОтвета = Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета_Отправка;
		Сбис3Команда.Параметры = Новый Структура("document_in, prepare", ПараметрыВыполнить.ДокументОтправить, Истина);
		
		ПараметрыСобытий = Новый Структура("Кэш, СоставПакета", Кэш, ПараметрыОтправки.СоставПакета);
		Сбис3Команда.События.Вставить("Error",			Новый Структура("Функция, Параметры",	"WriteDocumentEx_Error",		ПараметрыСобытий));
		Сбис3Команда.События.Вставить("Message",		Новый Структура("Функция, Параметры",	"WriteDocumentEx_Message",		ПараметрыСобытий));
		Сбис3Команда.События.Вставить("НеПолученОтвет",	Новый Структура("Функция, Параметры",	"WriteDocumentEx_Error",		ПараметрыСобытий));
		Сбис3Команда.События.Вставить("Before_Call",	Новый Структура("Функция, Параметры",	"WriteDocumentEx_Before_Call",	ПараметрыСобытий));
		Сбис3Команда.События.Вставить("After_Call",		Новый Структура("Функция, Параметры",	"WriteDocumentEx_After_Call",	ПараметрыСобытий));
				
		Результат = СБИСПлагин_ОтправитьКоманду_Асинхронно(Кэш, Сбис3Команда, ДопПараметры, Отказ);
		ПараметрыОтправки.СтатусПакета = "Отправлен";
		Если Отказ Тогда
			Сбис3Команда.Ответ = Кэш.ОбщиеФункции.СбисИсключение(Результат.Ответ,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".Отправка_Вызов");
			Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, Сбис3Команда.Идентификатор, ПараметрыОтправки.СоставПакета);
			Отправка_ОбработатьОшибкуОтправки(Кэш, Сбис3Команда, Сбис3Команда.Ответ);
		КонецЕсли;
	Иначе
		//Добавим пакет в очередь, пока не будет проставлена пометка Готов
		Кэш.РезультатОтправки.ПодготовленныеКОтправке.Вставить(ПараметрыВыполнить.СоставПакета.Идентификатор, ПараметрыВыполнить);
	КонецЕсли;
	
КонецПроцедуры

//Завершает отправку ВСЕХ пакетов - доотправляет накопленные в кэше, отправляет статистику на БЛ
&НаКлиенте
Процедура Отправка_Завершение(Кэш);
	//Доотправляем всё накопленное
	Если Не Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
		//Минимум 1 проход должен быть
		Отправка_ОбработатьОтветыОтПлагина(Кэш);
		Отправка_ОбработатьВКэшеПодготовленные(Кэш, Ложь);
		Отправка_ОбработатьВКэшеПереотправляемые(Кэш, Ложь);
		Отправка_ЗаписатьСтатусыПоДокументам(Кэш);
	КонецЕсли;

	Если Не Кэш.РезультатОтправки.Свойство("КоличествоПереотправок") Тогда
		Кэш.РезультатОтправки.Вставить("КоличествоПереотправок", 0);
	КонецЕсли;
	
	//Пока всё не обработается/отвалится с ошибкой
	Пока Кэш.РезультатОтправки.ПолученоОтветов < Кэш.РезультатОтправки.ПорНомер - Кэш.РезультатОтправки.КоличествоПереотправок Цикл
		Отправка_ОбработатьОтветыОтПлагина(Кэш);
		Отправка_ОбработатьВКэшеПодготовленные(Кэш, Ложь);
		Отправка_ОбработатьВКэшеПереотправляемые(Кэш, Ложь);
		Отправка_ЗаписатьСтатусыПоДокументам(Кэш);
	КонецЦикла;
	
	Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие", "Отправка"),Ложь);
КонецПроцедуры

////////////Обертки///////////////

&НаКлиенте
Функция СБИСПлагин_ИнформацияОСлужебныхЭтапах(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadServiceStagesInfo", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ИнформацияОСлужебныхЭтапах");
	КонецЕсли;
	Возврат Результат
КонецФункции

//Обработка внешнего файла в FileLoader. 
//ДанныеФайла - параметры обрабатываемого файла. Файл - структура в списке вложений. Вложение - обрабатываемое вложение состава пакета
//ПараметрыПодготовки - параметры обрабатываемого пакета документов.
&НаКлиенте
Процедура СБИСПлагин_ОбработатьВнешнийФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	ДанныеФайла.Файл.Вставить("Future", Неопределено);
	ОшибкаОтправкиФайла = Ложь;
	//Отдаём по ссылке РезультатПодготовки как параметр, куда положим ссылку в случае завершения заливки и получения события раньше, чем успеем обработать весь пакет.
	СбисПараметрыСобытия = Новый Структура("Кэш, РезультатПодготовки", Кэш, ПараметрыПодготовки);
	СбисОбработчикиСобытий = Новый Структура;
	СбисОбработчикиСобытий.Вставить("After_Call",						Новый Структура("Функция, Параметры", "Отправка_UploadToSbisDisk_AfterCall",		СбисПараметрыСобытия));
	СбисОбработчикиСобытий.Вставить("UploadToSbisDiskCompleteEvent",	Новый Структура("Функция, Параметры", "Отправка_UploadToSbisDiskCompleteEvent",		СбисПараметрыСобытия));
	СбисОбработчикиСобытий.Вставить("UploadToSbisDiskCompleteEvent",	Новый Структура("Функция, Параметры", "Отправка_UploadToSbisDiskCompleteEvent",		СбисПараметрыСобытия));
	СбисОбработчикиСобытий.Вставить("UploadToSbisDiskFatalErrorEvent",	Новый Структура("Функция, Параметры", "Отправка_UploadToSbisDiskFatalErrorEvent",	СбисПараметрыСобытия));
	СбисОбработчикиСобытий.Вставить("НеПолученОтвет",					Новый Структура("Функция, Параметры", "Отправка_UploadToSbisDiskFatalErrorEvent",	СбисПараметрыСобытия));
	
	РезультатОтправки = ОтправитьФайлНаСбисДиск(Кэш, ДанныеФайла.Вложение.ПолноеИмяФайла, Новый Структура("ВремяОжиданияОтвета, События", Кэш.СБИС.ПараметрыИнтеграции.ВремяОжиданияОтвета_Отправка, СбисОбработчикиСобытий), ОшибкаОтправкиФайла);
	Если ОшибкаОтправкиФайла Тогда
		ПараметрыПодготовки.Отказ = Истина;
		ПараметрыПодготовки.Ошибки.Добавить(РезультатОтправки);
		Возврат;
	КонецЕсли;
	ДанныеФайла.Файл.Future = РезультатОтправки;
КонецПроцедуры

//Обработка XML файла при отправке. 
//ДанныеФайла - параметры обрабатываемого файла. Файл - структура в списке вложений. Вложение - обрабатываемое вложение состава пакета
//ПараметрыПодготовки - параметры обрабатываемого пакета документов.
&НаКлиенте
Процедура СБИСПлагин_ОбработатьXMLФайл(Кэш, ДанныеФайла, ПараметрыПодготовки) Экспорт
	ДанныеФайла.Файл.Вставить("ДвоичныеДанные", сбисСтрокаВBASE64(ДанныеФайла.Вложение.XMLДокумента)); 
КонецПроцедуры
	
&НаКлиенте
Функция СБИСПлагин_ПодготовитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "PrepareAction", document_in, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПодготовитьДействие");
	КонецЕсли;
	Возврат Результат
КонецФункции	

&НаКлиенте
Функция СБИСПлагин_ПрочитатьДокумент(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocument", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПрочитатьДокумент");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ПрочитатьДокументКакHTML(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocumentAsHTML", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ПрочитатьДокументКакHTML");
	КонецЕсли;
	Возврат Результат
КонецФункции	

&НаКлиенте
Функция СБИСПлагин_ИмпортНоменклатурыИзCML(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ImportNomenclatureFromCML", param, ДопПараметры, Отказ); 
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ИмпортНоменклатурыИзCML");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_РасшифроватьФайл(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "DecryptFile2", param, ДопПараметры, Отказ); 
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_РасшифроватьФайл");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ВыполнитьДействие(Кэш, document_in, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ExecuteAction2", Новый Структура("document_in", document_in), ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ВыполнитьДействие");
	КонецЕсли;
	Возврат Результат	
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ЗаписатьСотрудника(Кэш, param, ДопПараметры, Отказ) Экспорт
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Параметр", param);
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "LoadEmployee", ПараметрыКоманды, ДопПараметры,Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЗаписатьСотрудника");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ЗаписатьВложение(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, "WriteAttachment", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ЗаписатьВложение");
	КонецЕсли;
	Возврат Результат
КонецФункции

&НаКлиенте
Функция СБИСПлагин_ОбработкаСлужебныхЭтапов(Кэш, param, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ProcessServiceStagesEx", param, ДопПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(Результат,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_ОбработкаСлужебныхЭтапов");
	КонецЕсли;
	Возврат Результат
КонецФункции
	
&НаКлиенте
Функция СБИСПлагин_СписокДокументов(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocuments", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".ReadDocuments");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокИзменений(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadChanges", filter, ДопПараметры,Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_СписокИзменений");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокНашихОрганизаций(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadOurOrganizations", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_СписокНашихОрганизаций");
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция СБИСПлагин_СписокДокументовПоСобытиям(Кэш, filter, ДопПараметры, Отказ) Экспорт
	Результат = СбисОтправитьИОбработатьКоманду(Кэш, "ReadDocumentsByEvents", filter, ДопПараметры, Отказ);
	Если Отказ Тогда
		Результат = Кэш.ОбщиеФункции.СбисИсключение(Результат, Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".СБИСПлагин_СписокДокументовПоСобытиям");
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////
/////////////Асинхронные События////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Процедура WriteDocumentEx_Before_Call(РезультатВызова, ПараметрыВызова) Экспорт
	ПараметрыВызова.Кэш.РезультатОтправки.ДетализацияОтправки.Вставить(ПараметрыВызова.Команда.Идентификатор, Новый Структура("ДатНач, ВремяНачала, ВремяВыполнения",ПараметрыВызова.Кэш.ОбщиеФункции.СбисТекущаяДатаВМиллисекундах(ПараметрыВызова.Кэш), ТекущаяДата()));
КонецПроцедуры	
	
&НаКлиенте
Процедура WriteDocumentEx_After_Call(РезультатВызова, ПараметрыВызова) Экспорт
	Если ПараметрыВызова.Отказ Тогда
		//Тут ошибка. 
		Возврат;
	КонецЕсли;
	//Если всё ок, то результатом вызова будет QueryID	
	Кэш = ПараметрыВызова.Кэш;
	Отправка_ДобавитьСтатусВРезультатПоПакету(Кэш, РезультатВызова, ПараметрыВызова.СоставПакета);
	Кэш.РезультатОтправки.СформированныеПакеты.Вставить(РезультатВызова, ПараметрыВызова.СоставПакета); // складываем сюда пакеты, чтобы можно было переотправить. После получения ответов - чистим, чтобы не переполнилась память
КонецПроцедуры

//Обработка события успешной отправки пакета
&НаКлиенте
Процедура WriteDocumentEx_Message(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Кэш;
	КомандаВызова = ПараметрыОбработки.Команда;
	ИдентификаторОтправки = КомандаВызова.Идентификатор;
	
	Если Кэш.РезультатОтправки.Свойство("НефатальныеОшибкиПодряд") Тогда
		Кэш.РезультатОтправки.НефатальныеОшибкиПодряд = 0;
	КонецЕсли;
	
	Кэш.РезультатОтправки.НаЗаписьСтатусов.Ответы.Вставить(ИдентификаторОтправки, РезультатВызова);
	Кэш.РезультатОтправки.СформированныеПакеты.Удалить(ИдентификаторОтправки);
	
	Отправка_ВремяОтправки(Кэш, ИдентификаторОтправки);
КонецПроцедуры

//Обработка события ошибки отправки
&НаКлиенте
Процедура WriteDocumentEx_Error(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш				= ПараметрыОбработки.Кэш;
	КомандаВызова	= ПараметрыОбработки.Команда;
	
	Отправка_ОбработатьОшибкуОтправки(Кэш, КомандаВызова, Кэш.ОбщиеФункции.СбисИсключение(РезультатВызова,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".WriteDocumentEx2_Error"));
	Отправка_ВремяОтправки(Кэш, КомандаВызова.Идентификатор);
КонецПроцедуры

//Обработчик подписки события сбисДиска ошибка
&НаКлиенте
Процедура UploadToSbisDiskFatalErrorEvent(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	ИдентификаторОтправки = РезультатВызова.data.data.UploadGuid;
	КомандаОтправки = СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Тип,Ответ", ИдентификаторОтправки,"ERROR",РезультатВызова));
	//Возможно, просрочена отправка, или пришло раньше, чем ожидали.
	Если КомандаОтправки = Неопределено Тогда
		Если	(		ПараметрыОбработки.Дополнительные = Неопределено
				Или Не	ПараметрыОбработки.Дополнительные.ПовторныйВызов) Тогда
			//Это первый раз, когда ловится событие. Добавим в необработанные. Иначе - это повторный вызов вероятно пропущенных событий для снятого потока
			СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторОтправки, РезультатВызова);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	ИсключениеОтПлагина = Кэш.ОбщиеФункции.СбисИсключение(,"UploadToSbisDiskFatalErrorEvent", 400, РезультатВызова.data.data.Message, РезультатВызова.data.data.Message, РезультатВызова.data);
	//TODO40 сделать эту ошибкой нефатальной после завершения синхронизации авторизации в плагине
	Если РезультатВызова.data.data.Свойство("StatusCode") Тогда
		Если		РезультатВызова.data.data.StatusCode = 401 Тогда
			ИсключениеОтПлагина.details = "Авторизуйтесь в СБИС Плагине и попробуйте повторить операцию.";
		ИначеЕсли	РезультатВызова.data.data.Message = "" Тогда
			ИсключениеОтПлагина = Кэш.ОбщиеФункции.СбисИсключение(,"UploadToSbisDiskFatalErrorEvent",400,,"Неизвестная ошибка событие СБИС плагина.",РезультатВызова.data);
		КонецЕсли;
	КонецЕсли;
	СБИСПлагин_ВызватьСобытие(Кэш, ИсключениеОтПлагина, КомандаОтправки, "UploadToSbisDiskFatalErrorEvent");	
КонецПроцедуры	

//Обработчик подписки события сбисДиска успешное завершение закачки
&НаКлиенте
Процедура UploadToSbisDiskCompleteEvent(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	ИдентификаторОтправки = РезультатВызова.data.data.UploadGuid;
	КомандаОтправки = СБИСПлагин_ОсвободитьПоток(Кэш, Новый Структура("Идентификатор,Ответ", ИдентификаторОтправки,РезультатВызова));
	//Возможно, просрочена отправка, или пришло раньше, чем ожидали. Добавим в список ожидающих подготовки
	Если КомандаОтправки = Неопределено Тогда
		Если	(		ПараметрыОбработки.Дополнительные = Неопределено
				Или Не	ПараметрыОбработки.Дополнительные.ПовторныйВызов) Тогда
			//Это первый раз, когда ловится событие. Добавим в необработанные. Иначе - это повторный вызов вероятно пропущенных событий для снятого потока
			СБИСПлагин_ДобавитьНеобработанныйОтвет(Кэш, ИдентификаторОтправки, РезультатВызова);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	//Зовём событие команды Отправка_UploadToSbisDiskCompleteEvent
	СБИСПлагин_ВызватьСобытие(Кэш, РезультатВызова.data, КомандаОтправки, "UploadToSbisDiskCompleteEvent");
КонецПроцедуры

//Обработчик подписки события сбисДиска успешное завершение закачки кусочка файла
&НаКлиенте
Процедура UploadedChunkEvent(РезультатВызова, ПараметрыОбработки) Экспорт
	//Сообщить(РезультатВызова.data.data.uploadName + " " + РезультатВызова.data.data.uploadPercent);
	//Чтобы событие не считалось неизвестным. Пока нет необходимости что-то делать ещё с этим.
КонецПроцедуры

//Обработка события разрыва соединения с плагином
&НаКлиенте
Процедура Disconnected(РезультатВызова, ПараметрыОбработки) Экспорт
	Кэш = ПараметрыОбработки.Основные.Кэш;
	Кэш.СБИС.ОбменВключен = Ложь;
	Если Кэш.Свойство("РезультатОтправки") Тогда
		Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", РезультатВызова.data.details);
	КонецЕсли;
	Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатВызова.data);
	//Сообщить("Disconnect");
КонецПроцедуры

////////////////////////////////////////////////////
////////////////////Конвертеры//////////////////////
////////////////////////////////////////////////////

//Разбор сообщения от плагина
&НаКлиенте
Функция XmlSerializer_Decode(Кэш, СтрокаXML, Отказ)
	Node = Новый ЧтениеXML();
	Node.УстановитьСтроку(СтрокаXML);
	Если Не Node.Прочитать() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Попытка
		Результат = XmlSerializer_DecodeNode(Node, Новый Структура("Тип,Путь",Node.Имя,"Ответ"));
	Исключение
		Отказ = Истина;
		Результат = Кэш.ОбщиеФункции.СбисИсключение(,  Кэш.СБИС.ПараметрыИнтеграции.ИнтеграцияИмя + ".XmlSerializer_Decode", 773,,ИнформацияОбОшибке().Описание,Новый Структура("message", СтрокаXML));
	КонецПопытки;
	Node.Закрыть();
	Node = Неопределено;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция XmlSerializer_DecodeNode(Node, Parent)
	ThisElement = Новый Структура("Тип,Путь", Node.Имя);
	Если		ThisElement.Тип = "array" Тогда//decode_array
		Результат = Новый Массив;
		СбисИндекс = 0;
		Пока XmlSerializer_ReadSubNode(Node, ThisElement) Цикл
			ThisElement.Путь = Parent.Путь + "[" + СбисИндекс + "]";
			Результат.Добавить(XmlSerializer_DecodeNode(Node, ThisElement));
			СбисИндекс = СбисИндекс + 1;
		КонецЦикла;
	ИначеЕсли	ThisElement.Тип = "object" Тогда//decode_object
		Результат = Новый Структура;
		Пока XmlSerializer_ReadSubNode(Node, ThisElement) Цикл
			Node_key = Node.ПолучитьАтрибут("name");
			Если Node_key = Неопределено Тогда
				ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": отсутствует атрибут ""name"" с описанием ключа узла.");
			КонецЕсли;
			ThisElement.Путь = Parent.Путь + "." + Node_key;
			РезультатСериализации = XmlSerializer_DecodeNode(Node, ThisElement);
			Попытка
				Результат.Вставить(Node_key, РезультатСериализации);
			Исключение
				//Возможно, когда-нибудь, в следующей жизни будет нормальный овтет, который  мы сможем разобрать всегда.
				//Пропускаем некорректные ключи
				//ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": некорректное значение " + Node_key + " в ключе ""name"".");
			КонецПопытки;
		КонецЦикла;
	Иначе //Простые типы (значения узлов)
		XmlSerializer_ReadSubNode(Node, ThisElement);
		Если		ThisElement.Тип = "str" Тогда//decode_str
			Результат = Node.Значение;
			Если	Сред(Результат,3,1) = "."
				И	Сред(Результат,6,1) = "." Тогда
				//Переопределим значение как дату, если это действительно она
				Если		СтрДлина(Результат) = 10 Тогда
					Попытка
						Результат = Дата(Сред(Результат,7,4), Сред(Результат,4,2), Лев(Результат, 2));
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				ИначеЕсли	СтрДлина(Результат) = 19 Тогда 
					Попытка
						Результат = Дата(Сред(Результат,7,4), Сред(Результат,4,2), Лев(Результат, 2), Сред(Результат,12, 2), Сред(Результат,15, 2), Сред(Результат,18, 2))
					Исключение
						//В случае исключения, ничего не делаем. Это не дата, значение не меняется
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли	ThisElement.Тип = "null" Тогда//decode_null
			Результат = Неопределено;
		ИначеЕсли	ThisElement.Тип = "bool" Тогда//decode_bool
			Попытка
				Результат = Булево(Node.Значение);
			Исключение
				Попытка
					Результат = Булево(Число(Node.Значение));
				Исключение
					ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": ошибка преобразования к типу булево " + Node.Значение + "!");
				КонецПопытки;
			КонецПопытки;
		ИначеЕсли	ThisElement.Тип = "num"
				Или	ThisElement.Тип = "number" Тогда//decode_num
			Попытка
				Результат = Число(Node.Значение);
			Исключение
				ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": ошибка преобразования к типу число " + Node.Значение + "!");
			КонецПопытки;
		Иначе
			ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": неизвестный тип ответа " + ThisElement.Тип + "!");
		КонецЕсли;
		Если Не Node.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			//Если узел сразу закрывает значение, то не делаем ReadNext
			XmlSerializer_ReadSubNode(Node, ThisElement);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция XmlSerializer_ReadSubNode(Node, Parent)
	Если Node.Прочитать() Тогда
		Если	Node.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Если Node.Имя = Parent.Тип Тогда//Закрывается родитель, закончилась выборка для родительского элемента
				Возврат Ложь;
			Иначе
				ВызватьИсключение("Неверный формат ответа по пути " + Parent.Путь + ": узел " + Node.Имя + " не закывает родительский " + Parent.Тип + "!");
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции
