&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем ЕстьИзменения Экспорт;
&НаКлиенте
Перем ПоследнееИзменение Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Функция сбисСообщитьОбОшибке(ИнформацияОПакете = "") Экспорт
	Ошибка = ПолучитьСообщениеОбОшибке(Ложь);
	Если Не МестныйКэш.ТихийРежим Тогда
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			Попытка
				ЭтотОбъект="";
			Исключение
			КонецПопытки;
			Сообщить(ИнформацияОПакете + Ошибка.ПолныйТекст);
		Иначе
			фрм =ЭтотОбъект.ПолучитьФорму("ФормаОшибка");
			фрм.ТекстОшибки = Ошибка.ТекстОшибки;
			фрм.ИнформацияОбОшибке = ИнформацияОПакете + Ошибка.ИнформацияОбОшибке;
			фрм.ОткрытьМодально(60);
		КонецЕсли;
	КонецЕсли;
	Возврат Ошибка.ТекстОшибки;
КонецФункции

//------------------------------------------------------

//////////////////// Функции SDK //////////////////////
&НаКлиенте
Функция ВключитьЛогирование(Кэш, КаталогЛоговИмя, Уровень) Экспорт 	
	// Включает/отключает логирование	
	Если Не Кэш.СБИС.ОбменВключен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МестныйКэш = Кэш;
	Попытка
		КаталогЛогов = Новый Файл(КаталогЛоговИмя);
		Если Не КаталогЛогов.Существует() Тогда
			СоздатьКаталог(КаталогЛоговИмя);
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	SimpleObject =  Кэш.Docflow.CreateSimpleObject();
	Если Уровень<>0 Тогда
		SimpleObject.Write("Папка", КаталогЛоговИмя);
	КонецЕсли;
	SimpleObject.Write("Уровень", Уровень);
	SbisLog = Новый COMОбъект("Sbis.Log");
	Результат = SbisLog.WriteLogInfo(SimpleObject);
	Если Результат = 0 Тогда
		Сообщить(SbisLog.ReadLastError());	
		Сообщить("Для изменения каталога снимите галку ""Вести протоколирование"", перезапустите 1C Предприятие, включите протоколирование и укажите новый каталог.");	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт 	
	// Закрывает сессию	
	Кэш.СБИС.Авторизован = Ложь;
	Возврат Кэш.Docflow.TerminateSession();
КонецФункции	
&НаКлиенте
Функция СформироватьНастройкиПодключения(Кэш, ИдентификаторСессии = "", ВремяОжидания = 60000) Экспорт
	// Устанавливает в SDK настройки подключения		
	СтрокаВерсии = "1C" + СтрЗаменить(Лев(Кэш.ПараметрыСистемы.Клиент.ВерсияПриложения, 3), ".", "");
	СтрокаВерсии = СтрокаВерсии + "/" + Кэш.ПараметрыСистемы.Обработка.Версия; 	
	ConnectionInfo = Кэш.Docflow.CreateSimpleObject();
	ConnectionInfo.Write("АдресСервера", Кэш.СБИС.АдресСервера);
	ConnectionInfo.Write("ИнформацияОПриложении",	СтрокаВерсии);
	ConnectionInfo.Write("ТаймаутСервера",	ВремяОжидания);
	Если Кэш.Парам.ТипПрокси = "Вручную" Тогда
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
		ConnectionInfo.Write("АдресПроксиСервера", Кэш.Парам.ПроксиСервер+":"+МестныйКэш.Парам.ПроксиПорт);
		ConnectionInfo.Write("ЛогинПроксиСервера", Кэш.Парам.ПроксиЛогин);
		ConnectionInfo.Write("ПарольПроксиСервера", Кэш.Парам.ПроксиПароль);
		
	ИначеЕсли Кэш.Парам.ТипПрокси = "Автоматически" Тогда 
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Да");
		
	ИначеЕсли Кэш.Парам.ТипПрокси = "НеИспользовать" Тогда 
		ConnectionInfo.Write("ОпределятьПроксиАвтоматически", "Нет");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		ConnectionInfo.Write("ИдентификаторСессии", ИдентификаторСессии);	
	КонецЕсли;
	
	Кэш.Docflow.WriteConnectionInfo(ConnectionInfo);
КонецФункции
&НаКлиенте
Функция сбисУстановитьВремяОжидания(Кэш, ВремяОжидания) Экспорт
	СформироватьНастройкиПодключения(Кэш, Кэш.Парам.ИдентификаторСессии, ВремяОжидания*1000);
КонецФункции
&НаКлиенте
Функция ПолучитьИдентификаторСессии(Кэш) Экспорт
	// получает идентификатор текущей сессии	
	ConnectionInfo = Кэш.Docflow.ReadConnectionInfo();
	ИдентификаторСессии = ConnectionInfo.Read("ИдентификаторСессии");
	Возврат ИдентификаторСессии;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш,ТекстОшибки) Экспорт
	// Получает список сертификатов для авторизации	
	МестныйКэш = Кэш;
	СформироватьНастройкиПодключения(Кэш);
	СписокСертификатов = Новый СписокЗначений();
	
	Object = Кэш.docflow.ReadCertificatesForAuth(МестныйКэш.Docflow.CreateSimpleObject());
	Если Object=Неопределено Тогда
		ТекстОшибки = ПолучитьСообщениеОбОшибке();
		Возврат СписокСертификатов;
	КонецЕсли;
	ObjectList = Object.ReadObjectList("Сертификат");
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.count;
		Для сч=0 По Размер-1 Цикл
			Сертификат = СериализоватьObjectВСтруктуру(ObjectList.at(сч));
			Если Сертификат.Аутентификация.Зарегистрирован = "Да" Тогда
				Если Сертификат.Свойство("ДействителенПо") Тогда
					Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
						ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
					Иначе
						ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
					КонецЕсли;
				КонецЕсли;
				СписокСертификатов.Добавить(Сертификат,Кэш.ОбщиеФункции.СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")","")
				+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","")
				+?(Сертификат.Свойство("ДействителенПо"),(", действителен до "+Формат(ДействителенПо,"ДЛФ=DD")),""));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСертификатов(Кэш, filter=Неопределено) Экспорт
	// Получает список доступных сертификатов	
	МестныйКэш = Кэш;
	СписокСертификатов = Новый СписокЗначений();
	
	Если filter=Неопределено Тогда
		filter = МестныйКэш.Docflow.CreateSimpleObject();
	КонецЕсли;
	Object = Кэш.docflow.ReadCertificates(filter);
	Если Object=Неопределено Тогда
		Возврат СписокСертификатов;
	КонецЕсли;
	ObjectList = Object.ReadObjectList("Сертификат");
	Если ObjectList<>Неопределено Тогда
		Размер = ObjectList.count();
		Для сч=0 По Размер-1 Цикл
			Сертификат = СериализоватьObjectВСтруктуру(ObjectList.at(сч));
			Если ТипЗнч(Сертификат.ДействителенПо)=Тип("Дата") Тогда
				ДействителенПо = Дата(Год(Сертификат.ДействителенПо), Месяц(Сертификат.ДействителенПо), День(Сертификат.ДействителенПо));
			Иначе
				ДействителенПо = Дата(Сред(Сертификат.ДействителенПо,7,4), Сред(Сертификат.ДействителенПо,4,2), Лев(Сертификат.ДействителенПо, 2));
			КонецЕсли;
			Если ДействителенПо>=ТекущаяДата() Тогда
				СписокСертификатов.Добавить(Сертификат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСертификатов;
КонецФункции
&НаКлиенте
функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	СписокСертификатовДляАктивации = Новый СписокЗначений;;
	СписокСертификатов = ПолучитьСписокСертификатов(Кэш);
	Для Каждого ИНН Из СписокИНН Цикл
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.ИНН = ИНН.Значение Тогда
				Если Сертификат.Ключ.Тип = "Серверный" и Сертификат.Ключ.Активирован = "Нет" Тогда
					СписокСертификатовДляАктивации.Добавить(Сертификат);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
	Возврат СписокСертификатовДляАктивации;
КонецФункции
&НаКлиенте
Функция ПолучитьКодАктивацииСертификата(Кэш, Сертификат) Экспорт
	certificate = Кэш.Docflow.CreateSimpleObject();
	certificate.Write("Отпечаток", Сертификат.Отпечаток);
	Object = Кэш.docflow.AcquireCertificateActivation(certificate);
КонецФункции
&НаКлиенте
функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	Для Каждого Элемент Из СписокСертификатов Цикл
		Сертификат = Элемент.Значение;
		certificate = Кэш.Docflow.CreateSimpleObject();
		certificate.Write("Отпечаток", Сертификат.Отпечаток);
		certificate.Write("КодАктивации", Сертификат.КодАктивации);
		Object = Кэш.docflow.ActivateCertificate(certificate);
		Если Object = 0 Тогда //почему неопределено
			сбисСообщитьОбОшибке();
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции
&НаКлиенте
функция сбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Текст",	"Загрузка сотрудников в СБИС дступна только при способе обмена ExtSDK, ExtSDK2 или API. "+Символы.ПС+
											"Изменить способ обмена можно на вкладке ""Настройки"".");
	сбисПолучитьФорму("ФормаПредупреждения").Показать(Кэш, ПараметрыСообщения);
	Отказ = Истина;
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	// Получает информацию о текущем пользователе	
	Результат = Кэш.Docflow.ReadCurrentUserInfo();	
	Если Результат = Неопределено Тогда //почему неопределено
		Возврат "";
	КонецЕсли;
	Результат = СериализоватьObjectВСтруктуру(Результат);
	Фамилия = "";
	Имя = "";
	Отчество = "";
	Результат.Пользователь.Свойство("Фамилия", Фамилия);
	Результат.Пользователь.Свойство("Имя", Имя);
	Результат.Пользователь.Свойство("Отчество", Отчество);
	Возврат Фамилия+" "+Имя+" "+Отчество;
КонецФункции
&НаКлиенте
Функция ПолучитьСообщениеОбОшибке(Кратко = Истина) Экспорт
	// Получает последнюю ошибку SDK	
	Ошибка = Новый Структура();
	Error = МестныйКэш.Docflow.ReadLastErrorEx();
	Попытка
		Ошибка.Вставить("ТекстОшибки", строка(Error.Read("Описание")));
		Ошибка.Вставить("ИнформацияОбОшибке", строка(Error.Read("ОписаниеРасширенное")));
	Исключение
		Ошибка.Вставить("ТекстОшибки", "");
		Ошибка.Вставить("ИнформацияОбОшибке", "");
	КонецПопытки;
	Ошибка.Вставить("ПолныйТекст",Ошибка.ТекстОшибки+?(Ошибка.ТекстОшибки<>Ошибка.ИнформацияОбОшибке," ("+Ошибка.ИнформацияОбОшибке+")","" ));
	Если(Кратко)Тогда
		Возврат Ошибка.ТекстОшибки;
	КонецЕсли;
	Возврат Ошибка;
КонецФункции
&НаКлиенте
Функция сбисСессияДействительна(Кэш) Экспорт
	Результат=Кэш.Docflow.CheckSession();
	Возврат Результат;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	// Получает список документов реализации с online.sbis.ru 	
	СтруктураДляОбновленияФормы = Новый Структура;
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Результат = Кэш.docflow.ReadDocuments( filter ); 
	
	
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		сбисСообщитьОбОшибке();
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	ГлавноеОкно.ФильтрЕстьЕще = Результат.ReadObject("Навигация").Read("ЕстьЕще")="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.ReadObject("Навигация").Read("Страница"))+1;
	Выборка = Результат.ReadObjectList("Документ");
	МассивДокументов = Новый Массив;	
	
	Размер = Выборка.count;
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		Запись = Выборка.at(сч);
		оДокумент = СериализоватьObjectВСтруктуру(Запись);
		
		НоваяСтр = Новый Структура("Проведен", -1);   // alo Меркурий 
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Статус", Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("Контрагент", оДокумент.Контрагент.Название);
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Вставить("НашаОрганизация", оДокумент.НашаОрганизация.Название);
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//  << alo Меркурий
		если счВложений =0 и Кэш.Парам.Меркурий тогда
			МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, ""));
		конецесли; //  alo Меркурий >>
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		//  << alo_ТекущийЭтап
		если оДокумент.свойство("Этап") И оДокумент.Этап.количество()>0 тогда
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Этап[0].Название);
		иначе
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Состояние.Название);
		конецесли;
		//  alo_ТекущийЭтап >>
		
		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		МассивДокументов.Добавить(НоваяСтр)
	КонецЦикла;
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("ТипРеестра", ТипРеестра));
	
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	СтруктураДляОбновленияФормы = Новый Структура;
	Результат = Кэш.docflow.ReadDocumentsByEvents( filter ); 
	
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		сбисСообщитьОбОшибке();
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	ГлавноеОкно.ФильтрЕстьЕще = Результат.ReadObject("Навигация").Read("ЕстьЕще")="Да";
	ГлавноеОкно.ФильтрСтраница = Число(Результат.ReadObject("Навигация").Read("Страница"))+1;
	Выборка = Результат.ReadObjectList("Реестр");
	МассивДокументов = Новый Массив;	
	Размер = Выборка.count;
	МассивИдентификаторов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно, Мин(100,Окр((сч+1)*100/Размер)));
		
		Запись = Выборка.at(сч);
		оДокумент = СериализоватьObjectВСтруктуру(Запись);
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("Статус", Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		//НоваяСтр.Вставить("Примечание", оДокумент.Состояние.Примечание);
		НоваяСтр.Вставить("Дата", оДокумент.ДатаВремя);
		оДокумент = оДокумент.Документ;
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.НашаОрганизация = оДокумент.НашаОрганизация.Название;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//  << alo Меркурий
		если счВложений =0 и Кэш.Парам.Меркурий тогда
			МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, ""));
		конецесли; //  alo Меркурий >>
		Вложения = Вложения + ?(оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		//  << alo_ТекущийЭтап
		если оДокумент.свойство("Этап") И оДокумент.Этап.количество()>0 тогда
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Этап[0].Название);
		иначе
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Состояние.Название);
		конецесли;
		//  alo_ТекущийЭтап >>

		Если оДокумент.Свойство("Подразделение") Тогда
			НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		НоваяСтр.Вставить("Проведен", -1);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции

&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш) Экспорт
	// Получает список документов определенного типа с online.sbis.ru	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных с " + Кэш.СБИС.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	Возврат сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно); 
КонецФункции
&НаКлиенте
Функция сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, ГлавноеОкно) Экспорт	
	// Получает список документов определенного типа с online.sbis.ru
	СтруктураДляОбновленияФормы = Новый Структура();
	
	Результат = Кэш.docflow.ReadDocuments( filter ); 
	
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		сбисСообщитьОбОшибке();
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	Выборка = Результат.ReadObjectList("Документ");
	Размер = Выборка.count;
	Навигация = СериализоватьObjectВСтруктуру(Результат.ReadObject("Навигация")); 	
	Если Навигация.Свойство("ЕстьЕще") Тогда
		ГлавноеОкно.ФильтрЕстьЕще = Навигация.ЕстьЕще="Да";
	Иначе
		ГлавноеОкно.ФильтрЕстьЕще = Ложь;
	КонецЕсли;
	Если Навигация.Свойство("Страница") Тогда
		ГлавноеОкно.ФильтрСтраница = Число(Навигация.Страница)+1;
	Иначе
		ГлавноеОкно.ФильтрСтраница = 1;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	Для сч=0 По Размер-1 Цикл
		
		Запись = Выборка.at(сч);
		оДокумент = СериализоватьObjectВСтруктуру(Запись);
		
		НоваяСтр = Новый Структура("Контрагент,Организация,Лицо2,Срок");// alo СтатусГос
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Проведен", -1);
		НоваяСтр.Вставить("Статус", Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));
		НоваяСтр.Вставить("Дата", оДокумент.Дата);
		НоваяСтр.Вставить("Номер", оДокумент.Номер);
		НоваяСтр.Вставить("Сумма", ?(оДокумент.Свойство("Сумма"),оДокумент.Сумма,0));
		Если оДокумент.Свойство("Контрагент") Тогда
			Попытка
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвЮЛ.Название);
			Исключение
				оДокумент.Контрагент.Вставить("Название", оДокумент.Контрагент.СвФЛ.Фамилия + " " + оДокумент.Контрагент.СвФЛ.Имя + " " + оДокумент.Контрагент.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Контрагент = оДокумент.Контрагент.Название;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация") Тогда
			Попытка
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвЮЛ.Название);
			Исключение
				оДокумент.НашаОрганизация.Вставить("Название", оДокумент.НашаОрганизация.СвФЛ.Фамилия + " " + оДокумент.НашаОрганизация.СвФЛ.Имя + " " + оДокумент.НашаОрганизация.СвФЛ.Отчество);
			КонецПопытки;
			НоваяСтр.Организация = оДокумент.НашаОрганизация.Название; // alo СтатусГос
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("Участники") и оДокумент.Участники.Свойство("Лицо2") Тогда
			Попытка
				НоваяСтр.Лицо2 = оДокумент.Участники.Лицо2.СвЮЛ.Название;
			Исключение
				НоваяСтр.Лицо2 = оДокумент.Участники.Лицо2.СвФЛ.Фамилия + " " + оДокумент.Участники.Лицо2.СвФЛ.Имя + " " + оДокумент.Участники.Лицо2.СвФЛ.Отчество;
			КонецПопытки;
		КонецЕсли;
		Если оДокумент.Свойство("Расширение") и оДокумент.Расширение.Свойство("СрокПоставки") Тогда
			НоваяСтр.Срок = оДокумент.Расширение.СрокПоставки;
		КонецЕсли;
		
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		//  << alo_ТекущийЭтап
		если оДокумент.свойство("Этап") И оДокумент.Этап.количество()>0 тогда
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Этап[0].Название);
		иначе
			НоваяСтр.Вставить("ТекущийЭтап", оДокумент.Состояние.Название);
		конецесли;
		//  alo_ТекущийЭтап >>

		НоваяСтр.Вставить("Склад", ?(оДокумент.Свойство("Подразделение"),оДокумент.Подразделение.Название,""));
		НоваяСтр.Вставить("Комментарий", ?(оДокумент.Свойство("Примечание"),оДокумент.Примечание,""));
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если Размер>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдПакетаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы;
КонецФункции
&НаКлиенте
функция ПрочитатьДокумент(Кэш,ИдДок,ДопПараметры=Неопределено,Отказ=Ложь) экспорт
	// Получает структуру документа СБИС	
	МестныйКэш = Кэш;
	document = Кэш.Docflow.CreateSimpleObject(); 
	document.Write( "Идентификатор", ИдДок ); 
	
	Если Не	ДопПараметры = Неопределено
		И	ДопПараметры.Свойство("Этап") Тогда
		document.WriteObject("Этап", СериализоватьСтруктуруВObject(ДопПараметры.Этап, Кэш));
	КонецЕсли;
	
	РезультатЧтения = Кэш.docflow.ReadDocument(document);
	Если РезультатЧтения = Неопределено Тогда//Метод не отработал, смотрим ошибку
		Отказ = Истина;
		Если ДопПараметры = Неопределено Тогда//Старый вызов, не ожидаем возврат ошибки
			сбисСообщитьОбОшибке();
			Возврат Ложь;
		Иначе
			checkparam = Неопределено;
			Ошибка = сбисПолучитьСтруктуруОшибки(Кэш);
			Если Не ДопПараметры.Свойство("СообщатьПриОшибке", checkparam)
				Или	checkparam Тогда
				Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Ошибка);
			КонецЕсли;
			Если 	ДопПараметры.Свойство("ВернутьОшибку", checkparam)
				И	checkparam Тогда
				Возврат Ошибка; 
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат СериализоватьObjectВСтруктуру(РезультатЧтения);
КонецФункции
&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	Результат = СохранитьВложениеПоСсылкеВФайл(Кэш, Ссылка, ИмяФайла);
	Если Результат = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстДок = Новый ЧтениеТекста(ИмяФайла);
	СтрокаТекст = СтрЗаменить(НРег(ТекстДок.ПрочитатьСтроку()),"'","""");
	СтрокаКодировка = Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех;
	//Проверим кодировки для принудительного чтения.	
	Для Каждого КодировкаДляЧтения Из Кэш.КэшЗначенийИни.КодировкиЧтенияФайлов.Определять Цикл
		Если Найти(СтрокаТекст, "encoding=""" + КодировкаДляЧтения + """") Тогда
			СтрокаКодировка = КодировкаДляЧтения;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//Переоткрываем файл в найденной кодировке
	ТекстДок.Открыть(ИмяФайла,СтрокаКодировка);
	РезультатТекст = ТекстДок.Прочитать();
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
	Попытка
		Если Лев(РезультатТекст,4)="%PDF" Тогда // для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
			Возврат "";
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат РезультатТекст;
КонецФункции
&НаКлиенте
функция ПолучитьДанныеЗашифрованногоФайла(Кэш,Ссылка) экспорт
	// Получает данные файла вложения	
	Сообщить("Для работы с зашифрованными документами выберите способ обмена ""extSDK"" на вкладке Настройки.");
	Возврат "";
КонецФункции
&НаКлиенте
функция ПроверитьПодписиВложения(Кэш,Вложение) экспорт
	// Расшифровывает данные файла вложения	
	Возврат Истина;
КонецФункции
&НаКлиенте
функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла) экспорт //d.ch
	Результат = Кэш.docflow.LoadDataFromURItoFile(Ссылка,ИмяФайла);
	Если Результат = 0 Тогда//получили ошибку при записи. Метод возвращает число.
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции
//&НаСервереБезКонтекста
//Функция ИмяРегистраСвойствОбъектов()
//	Если Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов")<>Неопределено Тогда
//		Возврат "ЗначенияСвойствОбъектов";
//	ИначеЕсли Метаданные.РегистрыСведений.Найти("ДополнительныеСведения")<>Неопределено Тогда
//		Возврат "ДополнительныеСведения";
//	Иначе
//		// ??? где храним статусы
//	КонецЕсли
//КонецФункции
&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) экспорт
	// Получает html по идентификаторам пакета и вложения
	// Используется при просмотре документов из реестров СБИС
	Если Вложение.Свойство("Зашифрован") и Вложение.Зашифрован = "Да" тогда
		Возврат "<HTML><BODY scroll=no>Документ зашифрован.</br>Для работы с зашифрованными документами выберите способ обмена ""extSDK"" на вкладке Настройки.</BODY></HTML>";
	КонецЕсли;
	ext_document = Кэш.Docflow.CreateSimpleObject(); 
	ext_document.Write( "Идентификатор", Вложение.Идентификатор ); 
	ext_document.Write( "СсылкаНаHTML", Вложение.СсылкаНаHTML );
	document = Кэш.Docflow.CreateSimpleObject(); 
	document.Write( "Идентификатор", ИдДок ); 
	document.WriteObject( "Вложение", ext_document ); 
	html = Кэш.docflow.ReadDocumentAsHTML( document );
	Если html = Неопределено Тогда //почему неопределено
		Возврат "";
	КонецЕсли;
	
	html = СериализоватьObjectВСтруктуру(html);
	html_text = html.HTML;
	Возврат html_text;
КонецФункции
// << alo Меркурий
&НаКлиенте
функция СБИСЗаписатьВложения(Кэш,СоставПакета, Вложение) экспорт
	если СоставПакета.свойство("Идентификатор") и значениеЗаполнено(СоставПакета.Идентификатор) тогда
		StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
		Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
			Имя= Вложение.ИмяФайла;
			ДвоичныеДанные= StreamHelper.FileToBase64(Вложение.ПолноеИмяФайла); 
		Иначе  // сформирован xml
			если Вложение.свойство("СтруктураФайла") тогда
				Имя= Вложение.СтруктураФайла.Файл.Имя+".xml";
			иначе
				Имя= Вложение.Файл.Имя+".xml";
			конецесли;
			если Вложение.свойство("XMLДокумента") тогда
				ДвоичныеДанные= StreamHelper.StringToBase64(Вложение.XMLДокумента);
			иначе
				ДвоичныеДанные="";
			конецесли
		КонецЕсли;
		если ЗначениеЗаполнено(ДвоичныеДанные) тогда
			document = Кэш.Docflow.CreateSimpleObject();
			document.Write( "Идентификатор", СоставПакета.Идентификатор ); 
			attachmentList = Кэш.Docflow.CreateSimpleObjectList();
			attachment = Кэш.Docflow.CreateSimpleObject();
			file = Кэш.Docflow.CreateSimpleObject();
			file.Write( "Имя", Имя);
			file.Write( "ДвоичныеДанные", ДвоичныеДанные);
			attachment.WriteObject( "Файл", file );
			если не( Вложение.свойство("Идентификатор") и ЗначениеЗаполнено(Вложение.Идентификатор)) тогда
				ИдВложения = строка(Новый УникальныйИдентификатор());
				Вложение.Вставить("Идентификатор", ИдВложения);
			конецесли;
			attachment.Write( "Идентификатор",  Вложение.Идентификатор);
			attachmentList.Add( attachment );
			document.WriteObjectList( "Вложение", attachmentList );
			
			Результат = Кэш.docflow.WriteAttachment( document ); 
			Если Результат = Неопределено Тогда //почему неопределено
				//сбисСпрятатьСостояние(ГлавноеОкно);
				сбисСообщитьОбОшибке();
				Возврат Ложь;
			КонецЕсли;
			Возврат истина;
		иначе
			Сообщить("Нет файла для записи");
			Возврат Ложь;
		конецесли;
	иначе
		Сообщить("Не указан документ для записи");
		Возврат Ложь;
	конецесли;
КонецФункции		// alo Меркурий >>
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, Вложение) экспорт
	// Получает html по xml	
	// Используется при просмотре документов из реестров продаж (1С)
	МестныйКэш = Кэш;
	param = Кэш.Docflow.CreateSimpleObject(); 
	Если ТипЗнч(Вложение) = Тип("Структура") Тогда
		param.Write( "XML", Вложение.XMLДокумента); 
	Иначе   // для совместимости с внешними функциями (СформироватьРасхождение)
		param.Write( "XML", Вложение);
	КонецЕсли;
	html = Кэш.docflow.GenerateHTMLFromXML( param );
	Если html=Неопределено Тогда
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	html = СериализоватьObjectВСтруктуру(html);
	html_text = html.HTML;
	Возврат html_text;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	document_out = МестныйКэш.Docflow.CreateSimpleObject();
	document_out.Write( "Идентификатор", Идентификатор );
	
	// Прочитаем пакет   
	СоставПакета = ПрочитатьДокумент(Кэш,Идентификатор);
	Если СоставПакета = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
		action = Неопределено;
		Комментарий="";
		Если ИмяКоманды = "Отклонить" Тогда
			Если НЕ ВвестиСтроку(Комментарий,"Причина отклонения",,Истина) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;	
		
		//Ищем действие соответсвующее команде
		Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
			Если Действие.Название = ИмяКоманды Тогда
				Возврат сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисВыполнитьКомандуОтклонить(Комментарий, ДополнительныеПараметры) Экспорт
	// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
	
	Кэш = ДополнительныеПараметры.Кэш;
	Если НЕ ЗначениеЗаполнено(Комментарий) Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Новый Структура("code, message, details", 780, "Не заполнено обязательное поле", "Для выполнения операции, необходимо указать комментарий!"), Новый Структура());
		Возврат Ложь;
	КонецЕсли;
	
	СоставПакета = ДополнительныеПараметры.СоставПакета;
	ПредставлениеПакета = ДополнительныеПараметры.ПредставлениеПакета;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	ГлавноеОкно = ДополнительныеПараметры.ГлавноеОкно;
	
	//Ищем действие соответсвующее команде
	Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
		Если Действие.Название = ИмяКоманды Тогда
			ДействиеВыполнено = сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, ПредставлениеПакета);
		КонецЕсли;
	КонецЦикла;
	
	ГлавноеОкно.ОбновитьКонтент();
КонецФункции
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, СоставПакета, Этап, Действие, Комментарий, ПредставлениеПакета) Экспорт
	// Выполняет указанное действие по документу СБИС
	МестныйКэш = Кэш;
	Если (НЕ Действие.Свойство("Сертификат") или  Действие.Сертификат.Количество()=0) и (Действие.ТребуетПодписания = "Да") Тогда
		Сообщить("Отсутствует сертификат ЭЦП для утверждения/отклонения пакета документов "+ПредставлениеПакета);
		Возврат Ложь;
	КонецЕсли;
	ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета);
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Вложение.Свойство("Зашифрован") и Вложение.Зашифрован = "Да" Тогда
			Сообщить("Для корректной обработки зашифрованных документов выберите способ обмена ""extSDK"" на вкладке Настройки.");
			Возврат Ложь;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	// Назначение действие на этап
	action = Кэш.Docflow.CreateSimpleObject();
	action.Write("Название", Действие.Название);
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 Тогда
		certificate = СериализоватьСтруктуруВObject(Действие.Сертификат[0],Кэш);
		action.WriteObject("Сертификат", certificate);
	КонецЕсли;
	Если Комментарий<>"" Тогда
		action.Write("Комментарий", Комментарий);
	КонецЕсли;	
	
	
	// Назначение этапа
	stage = Кэш.Docflow.CreateSimpleObject();
	stage.Write("Название", Этап.Название);
	stage.Write("Идентификатор",Этап.Идентификатор); 
	stage.WriteObject("Действие", action);
	
	
	document_in = Кэш.Docflow.CreateSimpleObject();
	document_in.WriteObject( "Этап", stage );
	document_in.Write( "Идентификатор", СоставПакета.Идентификатор );	
	
	// Подготовка этапа
	prepared_document = Кэш.docflow.PrepareAction(document_in);
	Если prepared_document  = Неопределено Тогда
		сбисСообщитьОбОшибке();
		Возврат Ложь
	КонецЕсли;
	
	attachmentListPrepared = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Вложение");     // вложения из ПодготовитьДействие
	Если attachmentListPrepared = Неопределено Тогда
		attachmentListPrepared = Кэш.Docflow.CreateSimpleObjectList();
	КонецЕсли;
	
	//UAA формирование титулов
	//Пока тут заглушка на проброску результата подготовки, так как COM. При необходимости, доработать.
	//сбисПараметрыТитулов = Новый Структура("РезультатПодготовки", prepared_document);
	сбисПараметрыТитулов = Новый Структура;
	ОшибкаФормирования = Ложь;
	РезультатФормирования = Кэш.ОбщиеФункции.сбисСформироватьТитулы(Кэш, СоставПакета, Действие, сбисПараметрыТитулов, ОшибкаФормирования);
	Если ОшибкаФормирования Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатФормирования);
		Возврат Ложь;
	КонецЕсли;
	
	Размер = attachmentListPrepared.count;
	attachmentList = Кэш.Docflow.CreateSimpleObjectList();  // вложения, которые будем передавать в ВыполнитьДействие
	Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, то надо передать все вложения в ExecuteAction для подписания
		Для сч=0 По Размер-1 Цикл
			Запись = attachmentListPrepared.at(сч);
			attachment = Кэш.Docflow.CreateSimpleObject();
			attachment.Write( "Идентификатор",  Запись.Read("Идентификатор"));
			file = Кэш.Docflow.CreateSimpleObject();
			file.Write( "Имя", Запись.ReadObject("Файл").Read("Имя") );
			file.Write( "Хеш", Запись.ReadObject("Файл").Read("Хеш") ); 
			attachment.WriteObject( "Файл", file );
			attachmentList.Add( attachment );
		КонецЦикла;	
	КонецЕсли;
	
	// ищем подтверждение заказа, чтобы проставить подтверждению, сформированному в 1С, тот же идентификатор
	
	ИдПодтвЗаказа = "";
	НомПодтвЗаказа = 0;
	Для сч=0 По Размер-1 Цикл
		Запись = attachmentListPrepared.at(сч);
		Если Запись.Read("Тип") = "ПодтверждениеЗаказа" Тогда
			ИдПодтвЗаказа = Запись.Read("Идентификатор");
			НомПодтвЗаказа = сч;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Идентификатор") Тогда
			attachment = Кэш.Docflow.CreateSimpleObject();
			file = Кэш.Docflow.CreateSimpleObject();
			ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".xml";
			file.Write( "Имя", ИмяФайла ); 
			file.Write( "ДвоичныеДанные", StreamHelper.StringToBase64(Вложение.XMLДокумента) ); 
			attachment.WriteObject( "Файл", file );
			Если (Вложение.Название="Подтверждение заказа" и ЗначениеЗаполнено(ИдПодтвЗаказа) ) Тогда 
				ИдВложения = ИдПодтвЗаказа; 
				Если Действие.Свойство("Сертификат") и Действие.Сертификат.Количество()>0 и Действие.Сертификат[0].Ключ.Тип = "Клиентский" и Действие.ТребуетПодписания = "Да" Тогда  // если ключ клиентский, значит подтверждение, сформированное онлайном, нужно удалить из списка вложений и добавить наше подтверждение
					attachmentList.Delete(НомПодтвЗаказа);
				КонецЕсли;
			Иначе 
				ИдВложения = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			attachment.Write( "Идентификатор",  ИдВложения);
			attachmentList.Add( attachment );
		КонецЕсли;
	КонецЦикла;
	
	
	prepared_stage = prepared_document.ReadObjectList("Этап").at(0);
	prepared_action = prepared_document.ReadObjectList("Этап").at(0).ReadObjectList("Действие").at(0);
	prepared_certificates = prepared_action.ReadObjectList("Сертификат");
	certificates = Кэш.Docflow.CreateSimpleObjectList();
	КолСерт = 0;
	Если prepared_certificates<>Неопределено Тогда
		КолСерт = prepared_certificates.count;
		Для сч=0 По КолСерт-1 Цикл
			certificate = Кэш.Docflow.CreateSimpleObject();
			certificate.Write( "Отпечаток", prepared_certificates.at(сч).Read("Отпечаток") );
			certificatekey = Кэш.Docflow.CreateSimpleObject();
			certificatekey.Write( "Тип", prepared_certificates.at(сч).ReadObject("Ключ").Read("Тип") );
			certificate.WriteObject( "Ключ", certificatekey );
			certificates.Add( certificate );
		КонецЦикла;
	КонецЕсли;
	action = Кэш.Docflow.CreateSimpleObject();
	action.Write("Комментарий", prepared_action.Read("Комментарий"));
	action.Write("Название", prepared_action.Read("Название"));
	action.Write("Идентификатор", prepared_action.Read("Идентификатор"));
	Если ЗначениеЗаполнено(КолСерт) Тогда
		action.WriteObjectList("Сертификат", certificates);
	КонецЕсли;
	action.Write("ТребуетПодписания", prepared_action.Read("ТребуетПодписания"));
	stage = Кэш.Docflow.CreateSimpleObject();
	stage.WriteObject("Действие", action);
	stage.WriteObjectList("Вложение", attachmentList);
	stage.Write("Идентификатор", prepared_stage.Read("Идентификатор"));
	stage.Write("Название", prepared_stage.Read("Название"));
	Если Этап.Свойство("Исполнитель") Тогда//Добавлено, так как у документов может быть этап, связанный с исполнителем не только при работе через extSDK
		Исполнитель = Кэш.Docflow.CreateSimpleObject();
		Для Каждого КлючИЗначение Из Этап.Исполнитель Цикл
			Исполнитель.Write(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		stage.WriteObject("Исполнитель", Исполнитель);
	КонецЕсли;
	document_in = Кэш.Docflow.CreateSimpleObject();
	document_in.Write( "Идентификатор", prepared_document.Read("Идентификатор") );
	prepared_redact = prepared_document.ReadObjectList("Редакция");
	redactions = Кэш.Docflow.CreateSimpleObjectList();
	КолРедакций = prepared_redact.count;
	Для сч=0 По КолРедакций-1 Цикл
		redaction = Кэш.Docflow.CreateSimpleObject();
		redaction.Write( "Идентификатор", prepared_redact.at(сч).Read("Идентификатор") );
		redactions.Add( redaction );
	КонецЦикла;
	document_in.WriteObjectList( "Редакция", redactions );
	document_in.WriteObject( "Этап", stage );
	
	// Завершение этапа
	completed_document = Кэш.docflow.ExecuteAction(document_in);
	Если completed_document  = Неопределено Тогда 
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
// Переводит документ повторно на ранее выполненный этап
&НаКлиенте
Функция сбисПовторитьЭтап(Кэш, ИдДок, ЭтапНазвание, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыПоПакету(Кэш, СоставПакета) Экспорт
	// Обрабатывает служебные по одному пакету
	МестныйКэш = Кэш;
	param   = МестныйКэш.Docflow.CreateSimpleObject();
	param.Write("ИдентификаторДокумента",СоставПакета.Идентификатор);
	ИнформацияПоНеобработанным = МестныйКэш.Docflow.ReadServiceStagesInfo(param);
	Если ИнформацияПоНеобработанным = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке();
	КонецЕсли;
	ИнформацияПоНеобработанным = СериализоватьObjectВСтруктуру(ИнформацияПоНеобработанным);
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		Результат = МестныйКэш.Docflow.ProcessServiceStagesEx(param);
		Если Результат = Неопределено Тогда //почему неопределено
			сбисСообщитьОбОшибке();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Интеллектуальная функция выполнить команду пока не умеет прикладывать вложения, поэтому пользуемся неинтеллектуальной
//&НаКлиенте
//Функция сбисВыполнитьКоманду(Кэш, СоставПакета,ИмяКоманды, ПредставлениеПакета) Экспорт
//// Выполняет указанную команду по документу СБИС (утверждение/отклонение)	
//	МестныйКэш = Кэш;	
//	Если СоставПакета.Свойство("Этап") и (СоставПакета.Этап[0].Название  = "Утверждение" или СоставПакета.Этап[0].Название  = "Утвердить") Тогда
//		action = Неопределено;
//		Комментарий="";
//		Если ИмяКоманды = "Отклонить" Тогда
//			Если НЕ ВвестиСтроку(Комментарий,"Причина отклонения",,Истина) Тогда
//				   Возврат Ложь;
//			КонецЕсли;
//		КонецЕсли;	
//		// Назначение действие на этап
//		action = МестныйКэш.Docflow.CreateSimpleObject();
//		//action.Write("Название", Действие.Название);
//		action.Write("Название", ИмяКоманды);
//		//action.WriteObject("Сертификат", certificate);
//		Если Комментарий<>"" Тогда
//			action.Write("Комментарий", Комментарий);
//		КонецЕсли;	
//		
//		// Назначение этапа
//		stage = МестныйКэш.Docflow.CreateSimpleObject();
//		stage.Write("Название", "Утверждение");
//		stage.Write("Идентификатор",СоставПакета.Этап[0].Идентификатор); 
//		stage.WriteObject("Действие", action);
//		
//		document_in = МестныйКэш.Docflow.CreateSimpleObject();
//		document_in.WriteObject( "Этап", stage );
//		document_in.Write( "Идентификатор", СоставПакета.Идентификатор );	
//		
//		Результат = Кэш.docflow.ExecuteActionEx(document_in);
//		Если Результат  = Неопределено Тогда
//			сбисСообщитьОбОшибке(ПредставлениеПакета);
//			Возврат Ложь
//		КонецЕсли;
//	КонецЕсли;	
//	Возврат Истина;
//КонецФункции	
&НаКлиенте
Функция ПолучитьИнформациюОКонтрагенте(Кэш, СтруктураКонтрагента) Экспорт
	// Получает Информацию о контрагенте с онлайна
	kontr = Кэш.Docflow.CreateSimpleObject(); 
	Если СтруктураКонтрагента.Свойство("СвФЛ") Тогда
		СвФЛ = Кэш.Docflow.CreateSimpleObject();
		СвФЛ.Write( "ИНН", СтруктураКонтрагента.СвФЛ.ИНН ); 
		kontr.WriteObject( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = Кэш.Docflow.CreateSimpleObject();
		СвЮЛ.Write( "ИНН", СтруктураКонтрагента.СвЮЛ.ИНН ); 
		СвЮЛ.Write( "КПП", СтруктураКонтрагента.СвЮЛ.КПП );
		Если СтруктураКонтрагента.СвЮЛ.Свойство("КодФилиала") Тогда
			СвЮЛ.Write( "КодФилиала", СтруктураКонтрагента.СвЮЛ.КодФилиала );
		КонецЕсли;
		kontr.WriteObject( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	Результат = Кэш.docflow.ReadContragentInfo( kontr );
	Если Результат = Неопределено Тогда //почему неопределено
		//сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	оКонтрагент = СериализоватьObjectВСтруктуру(Результат);
	Возврат оКонтрагент;
КонецФункции
&НаКлиенте
Функция ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН) Экспорт
	// Получает список организаций, присутствующих одновременно в кабинете СБИС и в базе 1С, у которых есть необработанные служебные документы
	МестныйКэш = Кэш;
	ЕстьЕще = Истина;
	ТекущаяСтраница = 0;
	МассивОрганизаций = Новый Массив;
	Пока ЕстьЕще Цикл
		filter  = МестныйКэш.Docflow.CreateSimpleObject();
		navigation = МестныйКэш.Docflow.CreateSimpleObject();
		navigation.Write( "Страница", ТекущаяСтраница);
		filter.WriteObject( "Навигация", navigation );
		Результат = Кэш.Docflow.ReadOurOrganizations(filter); // Получаем список наших организаций
		Если Результат = Неопределено Тогда //почему неопределено
			сбисСообщитьОбОшибке();
			Возврат МассивОрганизаций;
		КонецЕсли;
		Выборка = Результат.ReadObjectList("НашаОрганизация");
		Размер = Выборка.count;
		СтруктураОрганизаций = Новый Структура;
		Для сч=0 По Размер-1 Цикл
			Запись = Выборка.at(сч);
			оОрганизация = СериализоватьObjectВСтруктуру(Запись);	
			Организация1С = Ложь;
			Организация1С = МестныйКэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(МестныйКэш.Ини.Конфигурация, оОрганизация);
			Если Организация1С<>Ложь Тогда
				оОрганизация.Вставить("com", Запись);
				оОрганизация.Вставить("Название", строка(Организация1С));
				
				МассивОрганизаций.Добавить(оОрганизация);
				// добавляем ИНН в список для активации серверных ключей
				Если оОрганизация.Свойство("СвФЛ") Тогда
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
						СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
					КонецЕсли;
				Иначе
					Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
						СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		ТекущаяСтраница = ТекущаяСтраница + 1;
		ЕстьЕще = Результат.ReadObject("Навигация").Read("ЕстьЕще")="Да";
	КонецЦикла;
	Возврат МассивОрганизаций;
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
	// Получает список организаций с необработанными этапами и запускает для них обработку служебных документов
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Обработка служебных документов",ГлавноеОкно);
	СписокИНН = Новый СписокЗначений;
	МассивОрганизаций = ПолучитьСписокНашихОрганизаций(Кэш, СписокИНН);
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Для Каждого Элемент Из СписокСертификатов Цикл
			Сертификат = Элемент.Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			КонецЕсли;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ПараметрыВвода = Новый Структура("СертификатИмя", Кэш.ОбщиеФункции.СформироватьЗаголовокСертификатаДляФормыВвода(Кэш, Сертификат));
			КодАктивации = ФормаВводаПинкода.Показать(ПараметрыВвода);
			Если	Не	ЗначениеЗаполнено(КодАктивации)
				Или		КодАктивации.ПинКод = "" Тогда
				Сообщить("Не активирован сертификат для подписания документов.");
				Возврат Ложь;	
			КонецЕсли;
			Сертификат.Вставить("КодАктивации", КодАктивации.ПинКод);
		КонецЦикла;
		Если Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;	
	Для Каждого оОрганизация из МассивОрганизаций Цикл
		ИзвещенияОбработаны = ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация);
	КонецЦикла;	
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции
&НаКлиенте
Функция ОбработатьСлужебныеДокументыОрганизации(Кэш, оОрганизация)
	// Обрабатывает служебные документы организации	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	param   = МестныйКэш.Docflow.CreateSimpleObject();
	Орг = СериализоватьObjectВСтруктуру(оОрганизация.com);
	org = МестныйКэш.Docflow.CreateSimpleObject(); 
	Если Орг.Свойство("СвФЛ") Тогда
		СвФЛ = МестныйКэш.Docflow.CreateSimpleObject();
		СвФЛ.Write( "ИНН", Орг.СвФЛ.ИНН); 
		org.WriteObject( "СвФЛ", СвФЛ );	
	Иначе
		СвЮЛ = МестныйКэш.Docflow.CreateSimpleObject();
		СвЮЛ.Write( "ИНН", Орг.СвЮЛ.ИНН ); 
		СвЮЛ.Write( "КПП", Орг.СвЮЛ.КПП );
		Если Орг.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(Орг.СвЮЛ.КодФилиала) Тогда
			СвЮЛ.Write( "КодФилиала", Орг.СвЮЛ.КодФилиала );	
		КонецЕсли;
		org.WriteObject( "СвЮЛ", СвЮЛ );
	КонецЕсли;
	param.WriteObject("НашаОрганизация",org);
	сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно);
	ИнформацияПоНеобработанным = МестныйКэш.Docflow.ReadServiceStagesInfo(param);
	Если ИнформацияПоНеобработанным = Неопределено Тогда //почему неопределено
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	ИнформацияПоНеобработанным = СериализоватьObjectВСтруктуру(ИнформацияПоНеобработанным);
	Всего = Число(ИнформацияПоНеобработанным.ЧислоНеобработанныхЭтапов);
	
	Если Всего>0 Тогда
		ЕстьНеобработанныеИзвещения = "Да";
		Обработано = 0;
		ПодключитьОбработчикОжидания("сбисПрерываниеПользователем",0.1,Истина);
		Пока ЕстьНеобработанныеИзвещения = "Да" Цикл
			Результат = МестныйКэш.Docflow.ProcessServiceStagesEx(param);
			Если Результат = Неопределено Тогда //почему неопределено
				сбисСпрятатьСостояние(ГлавноеОкно);
				сбисСообщитьОбОшибке();
				Возврат Ложь;
			КонецЕсли;
			Результат = СериализоватьObjectВСтруктуру(Результат);
			ЕстьНеобработанныеИзвещения = Результат.ЕстьНеобработанныеЭтапы;
			Обработано = Обработано + Число(Результат.ОбработаноЭтапов);
			
			сбисПоказатьСостояние("Обработка служебных документов "+оОрганизация.Название,ГлавноеОкно,Мин(100,Окр(Обработано*100/Всего)), "(прервать -  Ctrl+Break)");
			
			Если Обработано=0 и ЕстьНеобработанныеИзвещения = "Да" Тогда     // Необработанные есть, но обработать по какой-то причине не можем
				Прервать;
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		ОтключитьОбработчикОжидания("сбисПрерываниеПользователем");
		сбисСпрятатьСостояние(ГлавноеОкно);
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов, РезультатОтправки=Неопределено) Экспорт
	// Отправляет сформированные пакеты документов	
	КоличествоПакетов = МассивПакетов.Количество();
	Если КоличествоПакетов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	МассивСтатусРегламент = Новый Массив;
	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	// << alo 
	Если Кэш.парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьПараметрыДокументовСБИС");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	// alo >>
	сбисПоказатьСостояние("Отправка документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	ВсегоОтправлено = 0;
	ВсегоОшибок = 0;
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	documenty = Кэш.Docflow.CreateSimpleObjectList();
	
	//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ)--> 42
	Если  Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
		И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
			МассивСтатусРегламент =  Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ)

	Для СчетчикПакетов=0 По КоличествоПакетов-1 Цикл
		СоставПакета = МассивПакетов[СчетчикПакетов];
		document = Кэш.Docflow.CreateSimpleObject();
		Если СоставПакета.Свойство("Дата") и ЗначениеЗаполнено(СоставПакета.Дата) Тогда
			document.Write( "Дата",СоставПакета.Дата);	
		КонецЕсли;
		Если СоставПакета.Свойство("Номер") и ЗначениеЗаполнено(СоставПакета.Номер) Тогда
			document.Write( "Номер",СоставПакета.Номер);	
		КонецЕсли;
		Если СоставПакета.Свойство("Сумма") и ЗначениеЗаполнено(СоставПакета.Сумма) Тогда
			document.Write( "Сумма",СоставПакета.Сумма);	
		КонецЕсли;
		attachmentList = Кэш.Docflow.CreateSimpleObjectList();
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			attachment = Кэш.Docflow.CreateSimpleObject();
			Если Вложение.Свойство("Зашифрован") Тогда   // может быть в случае пересылки зашифрованных пакетов
				attachment.Write( "Зашифрован", Вложение.Зашифрован);
			КонецЕсли;
			file = Кэш.Docflow.CreateSimpleObject();
			Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
				file.Write( "Имя", Вложение.ИмяФайла ); 
				file.Write( "ДвоичныеДанные", StreamHelper.FileToBase64(Вложение.ПолноеИмяФайла) ); 
			Иначе  // сформирован xml
				ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
				file.Write( "Имя", ИмяФайла ); 
				file.Write( "ДвоичныеДанные", StreamHelper.StringToBase64(Вложение.XMLДокумента) ); 
			КонецЕсли;
			
			Если Вложение.Свойство("Подпись") Тогда //d.ch
				ЭЦП = Кэш.Docflow.CreateSimpleObjectList();
				Для Каждого Запись из Вложение.Подпись Цикл
					ЗаписьЭЦП = Кэш.Docflow.CreateSimpleObject();
					Если Запись.Свойство("Направление") Тогда
						ЗаписьЭЦП.Write("Направление",Запись.Направление);
					КонецЕсли;
					ФайлЭЦП = Кэш.Docflow.CreateSimpleObject();
					ФайлЭЦП.Write( "Имя", Запись.Файл.Имя ); 
					ФайлЭЦП.Write( "ДвоичныеДанные",StreamHelper.FileToBase64(Запись.Файл.ПолноеИмяФайла)); 
					ЗаписьЭЦП.WriteObject("Файл",ФайлЭЦП);
					ЭЦП.Add(ЗаписьЭЦП);
				КонецЦикла;
				attachment.WriteObjectList( "Подпись", ЭЦП );
			КонецЕсли;
			
			attachment.WriteObject( "Файл", file );
			ИдВложения = строка(Новый УникальныйИдентификатор());
			Вложение.Вставить("Идентификатор", ИдВложения);
			attachment.Write( "Идентификатор",  ИдВложения);
			// Пока не указываем, т.к. онлайн в этом случае не формирует красивые названия вложений
			//Если Вложение.Свойство("Тип") и ЗначениеЗаполнено(Вложение.Тип) и Вложение.Свойство("ПодТип") и ЗначениеЗаполнено(Вложение.ПодТип) и Вложение.Свойство("ВерсияФормата") и ЗначениеЗаполнено(Вложение.ВерсияФормата) Тогда
			//	attachment.Write( "Тип",  Вложение.Тип);
			//	attachment.Write( "Подтип",  Вложение.ПодТип);
			//	attachment.Write( "ВерсияФормата",  Вложение.ВерсияФормата);
			//	Если Вложение.Свойство("ПодВерсияФормата") и ЗначениеЗаполнено(Вложение.ПодВерсияФормата) Тогда
			//		attachment.Write( "ПодверсияФормата",  Вложение.ПодВерсияФормата);
			//	КонецЕсли;
			//КонецЕсли;
			attachmentList.Add( attachment );
		КонецЦикла;
		document.Write( "Тип",СоставПакета.Тип);	
		Если СоставПакета.Свойство("Подтип") и ЗначениеЗаполнено(СоставПакета.Подтип) Тогда
			document.Write( "Подтип",СоставПакета.Подтип);
		КонецЕсли;
		Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
			ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
		Иначе
			ИдПакета = строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		СоставПакета.Вставить("Идентификатор", ИдПакета);
		document.Write( "Идентификатор", ИдПакета ); 
		Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
			redaction = Кэш.Docflow.CreateSimpleObject();
			redaction.Write("ИдентификаторИС", СоставПакета.ПользовательскийИдентификатор);
			document.WriteObject( "Редакция", redaction);
		КонецЕсли;
		Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
			document.Write( "Примечание", СоставПакета.Примечание);
		КонецЕсли;
		document.WriteObjectList( "Вложение", attachmentList );
		
		org = Кэш.Docflow.CreateSimpleObject(); 
		Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
			СвФЛ = Кэш.Docflow.CreateSimpleObject();
			СвФЛ.Write( "ИНН", СоставПакета.НашаОрганизация.СвФЛ.ИНН); 
			Если СоставПакета.НашаОрганизация.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.НашаОрганизация.СвФЛ.КодФилиала) Тогда
				СвФЛ.Write( "КодФилиала", СоставПакета.НашаОрганизация.СвФЛ.КодФилиала );	
			КонецЕсли;
			org.WriteObject( "СвФЛ", СвФЛ );
		Иначе
			СвЮЛ = Кэш.Docflow.CreateSimpleObject();
			СвЮЛ.Write( "ИНН", СоставПакета.НашаОрганизация.СвЮЛ.ИНН ); 
			СвЮЛ.Write( "КПП", СоставПакета.НашаОрганизация.СвЮЛ.КПП );
			Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала) Тогда
				СвЮЛ.Write( "КодФилиала", СоставПакета.НашаОрганизация.СвЮЛ.КодФилиала );	
			КонецЕсли;
			Если СоставПакета.НашаОрганизация.СвЮЛ.Свойство("КодСтраны") Тогда
				СвЮЛ.Write( "КодСтраны", СоставПакета.НашаОрганизация.СвЮЛ.КодСтраны );	
			КонецЕсли;
			org.WriteObject( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		document.WriteObject( "НашаОрганизация", org );
		
		Если СоставПакета.Свойство("Контрагент") Тогда
			kontr = Кэш.Docflow.CreateSimpleObject(); 
			Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
				СвФЛ = Кэш.Docflow.CreateSimpleObject();
				Если СоставПакета.Контрагент.Свойство("Параметр") Тогда
					Для Каждого Параметр из СоставПакета.Контрагент.Параметр Цикл
						Если Параметр.Имя = "ЧастноеЛицо" Тогда
							СвФЛ.Write( "ЧастноеЛицо", Параметр.Значение);
						КонецЕсли;
						Если Параметр.Имя = "СНИЛС" Тогда
							СвФЛ.Write("СНИЛС", Параметр.Значение);
						КонецЕсли;     					
					КонецЦикла;
				КонецЕсли;
				Если СоставПакета.Контрагент.СвФЛ.Свойство("ИНН") Тогда
					СвФЛ.Write( "ИНН", СоставПакета.Контрагент.СвФЛ.ИНН ); 
				КонецЕсли; 
				Если СоставПакета.Контрагент.СвФЛ.Свойство("Фамилия") Тогда
					СвФЛ.Write( "Фамилия", СоставПакета.Контрагент.СвФЛ.Фамилия );	
				КонецЕсли;
				Если СоставПакета.Контрагент.СвФЛ.Свойство("Имя") Тогда
					СвФЛ.Write( "Имя", СоставПакета.Контрагент.СвФЛ.Имя );	
				КонецЕсли;
				Если СоставПакета.Контрагент.СвФЛ.Свойство("Отчество") Тогда
					СвФЛ.Write( "Отчество", СоставПакета.Контрагент.СвФЛ.Отчество );	
				КонецЕсли;
				Если СоставПакета.Контрагент.СвФЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвФЛ.КодФилиала) Тогда
					СвФЛ.Write( "КодФилиала", СоставПакета.Контрагент.СвФЛ.КодФилиала );	
				КонецЕсли;
				kontr.WriteObject( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = Кэш.Docflow.CreateSimpleObject();
				СвЮЛ.Write( "ИНН", СоставПакета.Контрагент.СвЮЛ.ИНН ); 
				Если СоставПакета.Контрагент.СвЮЛ.Свойство("КПП") Тогда // << bav
					СвЮЛ.Write( "КПП", СоставПакета.Контрагент.СвЮЛ.КПП );
				КонецЕсли;
				Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодСтраны") Тогда
					СвЮЛ.Write( "КодСтраны", СоставПакета.Контрагент.СвЮЛ.КодСтраны );	
				КонецЕсли; // bav >>
				Если СоставПакета.Контрагент.СвЮЛ.Свойство("КодФилиала") и ЗначениеЗаполнено(СоставПакета.Контрагент.СвЮЛ.КодФилиала) Тогда
					СвЮЛ.Write( "КодФилиала", СоставПакета.Контрагент.СвЮЛ.КодФилиала );	
				КонецЕсли;
				Если СоставПакета.Контрагент.СвЮЛ.Свойство("Название") Тогда
					СвЮЛ.Write( "Название", СоставПакета.Контрагент.СвЮЛ.Название );	
				КонецЕсли;
				kontr.WriteObject( "СвЮЛ", СвЮЛ );
			КонецЕсли;
			Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Свойство("Идентификатор") Тогда
				Подразделение = Кэш.Docflow.CreateSimpleObject();
				Подразделение.Write( "Идентификатор", СоставПакета.Контрагент.Подразделение.Идентификатор); 
				kontr.WriteObject( "Подразделение", Подразделение );
			КонецЕсли;
			Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
				Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
					kontr.Write( "Телефон", СоставПакета.Контрагент.Контакт.Телефон );
				КонецЕсли;
				Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
					kontr.Write( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
				КонецЕсли;
			КонецЕсли;
			document.WriteObject( "Контрагент", kontr );
		КонецЕсли;
		
		Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
			otv = Кэш.Docflow.CreateSimpleObject();
			Для Каждого Элемент Из СоставПакета.Ответственный Цикл
				otv.Write( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.WriteObject( "Ответственный", otv );	
		КонецЕсли;
		Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
			podrazdel = Кэш.Docflow.CreateSimpleObject();
			Для Каждого Элемент Из СоставПакета.Подразделение Цикл
				podrazdel.Write( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.WriteObject( "Подразделение", podrazdel ); 	
		КонецЕсли;
		Если СоставПакета.Свойство("Регламент") и СоставПакета.Регламент.Количество()>0 Тогда
			regl = Кэш.Docflow.CreateSimpleObject();
			Для Каждого Элемент Из СоставПакета.Регламент Цикл
				regl.Write( Элемент.Ключ, Элемент.Значение );	
			КонецЦикла;
			document.WriteObject( "Регламент", regl ); 	
		КонецЕсли;
		Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
			osnovania = Кэш.Docflow.CreateSimpleObjectList();
			Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
				osn = Кэш.Docflow.CreateSimpleObject();
				Если ДокОсн.Свойство("ВидСвязи") Тогда
					osn.Write( "ВидСвязи", ДокОсн.ВидСвязи );	
				КонецЕсли;
				doc = Кэш.Docflow.CreateSimpleObject();
				Для Каждого Элемент Из ДокОсн Цикл
					Если Элемент.Ключ<>"ВидСвязи" Тогда
						doc.Write( Элемент.Ключ, СокрЛП(Элемент.Значение ));
					КонецЕсли;
				КонецЦикла;
				osn.WriteObject( "Документ", doc );
				osnovania.Add(osn);
			КонецЦикла;
			document.WriteObjectList( "ДокументОснование", osnovania ); 				
		КонецЕсли;
		documenty.Add(document);
	КонецЦикла;	
	
	param = Кэш.Docflow.CreateSimpleObject();
	param.WriteObjectList( "Документ", documenty );
	Если МассивПакетов[0].Свойство("НеЗапускатьВДокументооборот") и МассивПакетов[0].НеЗапускатьВДокументооборот = Истина Тогда
		param.Write( "НеЗапускатьВДокументооборот", "Да" );
	КонецЕсли;
	Если Кэш.Ини.Конфигурация.Свойство("ЧислоПотоковОтправки") Тогда
		param.Write( "ЧислоПотоков", СтрЗаменить(Кэш.Ини.Конфигурация.ЧислоПотоковОтправки.Значение,"'","") );	
	Иначе
		param.Write( "ЧислоПотоков", "10" );
	КонецЕсли;
	ДатаНач = ТекущаяДата();
	Результат = Кэш.docflow.WriteDocumentsEx(param);	
	ДатаКнц = ТекущаяДата();
	Кэш.РезультатОтправки.ВремяОтправки = Кэш.РезультатОтправки.ВремяОтправки+(ДатаКнц-ДатаНач);
	Если Результат = Неопределено Тогда //почему неопределено
		сбисСпрятатьСостояние(ГлавноеОкно);
		ТекстОшибки = сбисСообщитьОбОшибке();
		ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
		Если ЭлементСписка=Неопределено Тогда
			Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, КоличествоПакетов-ВсегоОтправлено-ВсегоОшибок);
		Иначе
			ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+КоличествоПакетов-ВсегоОтправлено-ВсегоОшибок;
		КонецЕсли;
		Если НЕ Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
			Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ТекстОшибки);
		КонецЕсли;
		сбисСпрятатьСостояние(ГлавноеОкно);
		Возврат Ложь;
	КонецЕсли;
	// Обрабатываем результат отправки - проставляем статусы
	Результат = СериализоватьObjectВСтруктуру(Результат);
	ДанныеПоСтатусам = Новый Массив;
	сч = 0;
	Для Каждого Элемент Из Результат.Реестр Цикл
		СоставПакета = МассивПакетов[сч];
		
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ)--> 43
		СтатусРегламент = "";
		Если СоставПакета.Свойство("Регламент") 
			И СоставПакета.Регламент.Свойство("Название") 
			И НЕ МассивСтатусРегламент.Найти(СоставПакета.Регламент.Название)=Неопределено Тогда
				СтатусРегламент = СоставПакета.Регламент.Название; 
		КонецЕсли;
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ)

		Если Элемент.Свойство("Документ") Тогда
			СоставПакета.Вставить("Отправлен", Истина);
			ВсегоОтправлено = ВсегоОтправлено + 1;
			Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
			ТекстСообщения = "";
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("Документы1С") Тогда
					Для Каждого Документ1С Из Вложение.Документы1С Цикл
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,Элемент.Документ.Состояние.Название);
						//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ)--> 44
						ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С,Регламент",СтруктураСвойств, Документ1С.Значение,СтатусРегламент));
						//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ) 
						ТекстСообщения = ТекстСообщения+", "+строка(Документ1С.Значение);	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = "Отправлен пакет документов: "+Сред(ТекстСообщения, 3);
			//Сообщить(ТекстСообщения);	
		КонецЕсли;
		Если Элемент.Свойство("Ошибка") Тогда
			// если истекла сессия, то переавторизуемся и переотправим партию документов
			Если Элемент.Ошибка.Описание = "Необходимо аутентифицироваться для выполнения запросов к серверу" или Лев(Элемент.Ошибка.Описание, 18) = "Ошибка авторизации" Тогда
				Если (Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьСертификат) или (НЕ Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьПароль) Тогда
					формаАвторизации = сбисПолучитьФорму("ФормаАвторизация");
					УспешнаяАвторизация = формаАвторизации.Авторизоваться(Кэш);
					Если УспешнаяАвторизация = Истина Тогда
						Кэш.РезультатОтправки.Вставить("ПереотправитьПартию", Истина);
						Прервать; // ошибки не записываем, так как будем переотправлять неотправленные
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ВсегоОшибок = ВсегоОшибок + 1;
			Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
			ТекстОшибки = Элемент.Ошибка.Описание;
			ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
			Если ЭлементСписка=Неопределено Тогда
				Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
			Иначе
				ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
			КонецЕсли;
			Если СоставПакета.Вложение.Количество()>0 и СоставПакета.Вложение[0].Свойство("Документы1С") Тогда
				ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
			Иначе
				ОсновнойДокумент1С = Неопределено;
			КонецЕсли;
			//AU изменена структура в детализации ошибок для возможности проброса дампа в сервис статистики
			ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
			Если ЭлементСоответствия=Неопределено Тогда
				ЭлементСоответствия = Новый Массив;
				Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
			КонецЕсли;
			СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С,Сообщение,СтруктураОшибки", ОсновнойДокумент1С, Элемент.Ошибка.ОписаниеРасширенное, Новый Структура("message,details,code", ТекстОшибки, Элемент.Ошибка.ОписаниеРасширенное, 100));
			ЭлементСоответствия.Добавить(СтрокаВСоответствие);
			ТекстСообщения = "";
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("Документы1С") Тогда
					Для Каждого Документ1С Из Вложение.Документы1С Цикл
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,"Ошибка: "+Лев(ТекстОшибки, 230));
						
						//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ)--> 45
						ДанныеПоСтатусамСтруктура = Новый Структура("СтруктураСвойств, Документ1С, Регламент",СтруктураСвойств, Документ1С.Значение,СтатусРегламент);
						//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ДОКУМЕНТОВ)

						Кэш.РезультатОтправки.ДанныеПоСтатусам.Добавить(ДанныеПоСтатусамСтруктура);
						ДанныеПоСтатусам.Добавить(ДанныеПоСтатусамСтруктура);
						ТекстСообщения = ТекстСообщения+", "+строка(Документ1С.Значение);	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = "Пакет документов не отправлен: "+Сред(ТекстСообщения, 3)+". "+ТекстОшибки;
			//Сообщить(ТекстСообщения);
			Если Лев(Элемент.Ошибка.Описание, 14) = "Ошибка WinHTTP" и НЕ Кэш.РезультатОтправки.Свойство("ПрерватьОтправку") Тогда
				Кэш.РезультатОтправки.Вставить("ПрерватьОтправку", ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;
	фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	// << alo 
	если Кэш.парам.СостояниеЭД тогда
		фрмЭД.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек);
	конецесли;	// alo >>
	
	//AU точка входа после отправки партии пакетов документов с данными по статусам.
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисОбработатьСписокОтправленных","РаботаСДокументами1С","", Кэш);
	Если Не фрм = Ложь Тогда
		//Данные по детализации статусов и списка номенклатуры смотреть в кэше.
		Контекст = Новый Структура("ДанныеПоСтатусам", ДанныеПоСтатусам);//Структура для возможности расширения, если понадобится добавить что-то ещё.
		фрм.сбисОбработатьСписокОтправленных(Кэш, Контекст);
	КонецЕсли;
	//
	сбисСпрятатьСостояние(ГлавноеОкно);
	
КонецФункции
&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
	Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие", "Отправка"),Ложь);
КонецПроцедуры
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш) Экспорт
	// Получает статусы документов сбис
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("СбисЗаписатьИзмененияПоДокументам1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	// << alo 
	Если Кэш.парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьИзмененияПоДокументам1С");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	// alo >>
	фрмПольз = ГлавноеОкно.сбисНайтиФормуФункции("ОбработатьСписокИзменений","РаботаСДокументами1С","",Кэш);
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	
	СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);
	Если (Не ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов)) 
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) и СтруктураНастроек.ДатКнцЧтенияСтатусов>=СтруктураНастроек.ДатНачЧтенияСтатусов)
		или (ЗначениеЗаполнено(СтруктураНастроек.ДатНачЧтенияСтатусов) и сбисТекущаяДата(Кэш)-СтруктураНастроек.ДатНачЧтенияСтатусов>30) Тогда
		Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов) Тогда
			СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов = НачалоДня(ТекущаяДата());
		КонецЕсли;
		filter = Кэш.Docflow.CreateSimpleObject(); 
		filter.Write( "ПолныйСертификатЭП", "Нет");
		Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) Тогда
			filter.Write( "ИдентификаторСобытия", СтруктураНастроек.ИдентификаторПоследнегоСобытия);	
		Иначе
			filter.Write( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") ); 
		КонецЕсли;
		
		navigation = Кэш.Docflow.CreateSimpleObject(); 
		navigation.Write( "РазмерСтраницы", 100 ); 
		filter.WriteObject( "Навигация", navigation );
		//navigation.Write( "ВернутьРазмерСписка", "Да" );
		сч = 0;
		счДок = 0;
		оДокумент = Новый Структура;
		ЕстьИзменения = Ложь;
		ЕстьЕще = Истина;
		ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
		Пока ЕстьЕще Цикл
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, Новый Структура("ДатНачЧтенияСтатусов", сбисТекущаяДата(Кэш)), Кэш.Парам.ИдентификаторНастроек);
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			МассивДокументов = Новый Массив;
			Если сч>0 Тогда
				Если оДокумент.Свойство("Событие") Тогда
					КоличествоСобытий = оДокумент.Событие.Количество();
					filter.Write( "ИдентификаторСобытия", оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
					filter.Remove( "ДатаВремяС");
				Иначе
					Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), Кэш.Парам.ИдентификаторНастроек);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			Результат = Кэш.Docflow.ReadChanges(filter);
			Если Результат = Неопределено Тогда //почему неопределено
				Если ЗначениеЗаполнено(СтруктураНастроек.ИдентификаторПоследнегоСобытия) и сч = 0 Тогда  // если событие на онлайне удалили, то пытаемся по дате запросить
					filter = Кэш.Docflow.CreateSimpleObject();
					filter.Write( "ПолныйСертификатЭП", "Нет");
					filter.Write( "ДатаВремяС", Формат(СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""") );
					filter.WriteObject( "Навигация", navigation );
					Результат = Кэш.Docflow.ReadChanges(filter);
					Если Результат = Неопределено Тогда
						сбисСпрятатьСостояние(ГлавноеОкно);
						сбисСообщитьОбОшибке();
						Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), Кэш.Парам.ИдентификаторНастроек);
						Возврат Ложь;
					КонецЕсли;	
				Иначе	
					сбисСпрятатьСостояние(ГлавноеОкно);
					сбисСообщитьОбОшибке();
					Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), Кэш.Парам.ИдентификаторНастроек);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			сч = сч + 1;
			СписокИзменений = СериализоватьObjectВСтруктуру(Результат);
			ЕстьЕще = СписокИзменений.Навигация.ЕстьЕще="Да";
			Для Каждого оДокумент Из СписокИзменений.Документ Цикл
				счДок = счДок + 1;
				ЕстьИзменения = Истина;
				сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
				МассивДокументов.Добавить(оДокумент);
				Если Кэш.ИспользоватьОбработчикиСобытий = Истина Тогда
					ИмяОбработчика = СтрЗаменить("сбис"+оДокумент.Регламент.Название+"_"+оДокумент.Событие[0].Название, " ", "_");
					фрмОбработчика = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяОбработчика,"РаботаСДокументами1С","",Кэш);
					Если фрмОбработчика <> Ложь Тогда
						Контекст = Новый структура("Док, Кэш", оДокумент, Кэш);
						Результат=вычислить("фрмОбработчика."+ИмяОбработчика+"(Контекст)");
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			сбисПоказатьСостояние("Обновление статусов отправленных документов "+строка(счДок), ГлавноеОкно,, "(прервать -  Ctrl+Break)");
			ПоследнееИзменение = оДокумент;
			//сбисПоказатьСостояние("Запись статусов в регистр сведений", ГлавноеОкно);
			фрм.СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, Новый Структура);
			//фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
			// << alo 
			если кэш.парам.СостояниеЭД тогда
				фрмЭД.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
			конецесли; // alo >>
			Если фрмПольз<>Ложь Тогда
				фрмПольз.ОбработатьСписокИзменений(МассивДокументов, Кэш);	
			КонецЕсли;
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(Кэш)), Кэш.Парам.ИдентификаторНастроек);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;	
		Если ЕстьИзменения и оДокумент.Свойство("Событие") Тогда
			КоличествоСобытий = оДокумент.Событие.Количество();
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", оДокумент.Событие[КоличествоСобытий-1].ДатаВремя,оДокумент.Событие[КоличествоСобытий-1].Идентификатор);
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, СтруктураНастроек, Кэш.Парам.ИдентификаторНастроек);
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = оДокумент.Событие[КоличествоСобытий-1].ДатаВремя;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия = оДокумент.Событие[КоличествоСобытий-1].Идентификатор;
		КонецЕсли;
	Иначе
		Сообщить("Обновление статусов уже выполняется по запросу другого пользователя.");
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции
&НаКлиенте
функция ОтправитьКаталогТоваров(Кэш,КаталогТоваров) экспорт
	// Получает структуру документа СБИС	
	МестныйКэш = Кэш;
	StreamHelper = Новый COMОбъект("SBIS.StreamHelper");
	param = Кэш.Docflow.CreateSimpleObject();
	
	// предварительно сохраняем в файл, чтобы указать нужную кодировку
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(КаталогТоваров);
	ИмяВрФ = КаталогВременныхФайлов()+"sbisTemp.xml";
	ТекстДок.Записать(ИмяВрФ, "UTF-16");
	ТекстXMLBase64 = StreamHelper.FileToBase64(ИмяВрФ);  
	Попытка 
		УдалитьФайлы(ИмяВрФ); 
	Исключение 
	КонецПопытки;
	
	param.Write( "Файл", ТекстXMLBase64 ); 
	Результат = Кэш.docflow.ImportNomenclatureFromCML( param );
	Если Результат = Неопределено Тогда 
		сбисСообщитьОбОшибке();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK2"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK2"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции

//////////////// Вспомогательные функции/////////////////////
&НаКлиенте
Функция Включить(Кэш, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	// Добавляет SDK в Кэш
	МестныйКэш = Кэш;
	// Убираем подключение из макета. Теперь нужно устанавливать sdk вручную.
	//ПодключитьSBISDocflow();
	Кэш.СБИС = Кэш.ГлавноеОкно.СформироватьСтруктуруКэшСБИС(Кэш.СБИС);
	Попытка
		Кэш.Вставить("Docflow",Новый COMОбъект("SBIS.Docflow"));
		ВерсияSDK = Кэш.Docflow.ReadVersion();
		Кэш.СБИС.ПараметрыИнтеграции.Версия = ВерсияSDK;
		ТребуемаяВерсия = ТребуемаяВерсияКомпоненты();
		Если Кэш.ОбщиеФункции.ЭтоНоваяВерсия(ТребуемаяВерсия, ВерсияSDK) Тогда
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
			ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
			ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована новая версия ActiveX компоненты СБИС SDK."+Символы.ПС+
													"Необходима версия компоненты не ниже "+ТребуемаяВерсия+Символы.ПС+
													"Текущая версия "+ВерсияSDK+Символы.ПС+
													"Для корректной работы установите компоненту и перезапустите 1С.");
			сбисПолучитьФорму("ФормаПредупреждения").Показать(Кэш, ПараметрыСообщения);
			Возврат "Не зарегистрирована новая версия ActiveX компоненты SBIS.Docflow";	
		КонецЕсли;
		Если    ЗначениеЗаполнено(ДопПараметры)
			И	ДопПараметры.Свойство("ВремяОжиданияОтвета") Тогда
			сбисУстановитьВремяОжидания(Кэш, ДопПараметры.ВремяОжиданияОтвета);
		КонецЕсли;
		Кэш.СБИС.ОбменВключен = Истина;
		Возврат Истина;
	Исключение
		Кэш.СБИС.ОбменВключен = Ложь;
		Ошибка = ОписаниеОшибки();
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("АдресСсылка", "https://sbis.ru/help/integration/sdk/");
		ПараметрыСообщения.Вставить("ТекстСсылка", "Скачать СБИС SDK");
		ПараметрыСообщения.Вставить("Текст",	"Не зарегистрирована ActiveX компонента СБИС SDK."+Символы.ПС+
												"Для корректной работы необходимо установить компоненту и перезапустить 1С.");

		сбисПолучитьФорму("ФормаПредупреждения").Показать(Кэш, ПараметрыСообщения);
		Возврат "Не зарегистрирована ActiveX компонента SBIS.Docflow";
	КонецПопытки;
КонецФункции
&НаКлиенте
Функция Завершить(Кэш, ДопонительныеПараметры, Отказ) Экспорт
	Возврат Истина;
КонецФункции
&НаКлиенте
функция ТребуемаяВерсияКомпоненты() экспорт
	// Повышаем версию компоненты при обновлении SDK	
	Возврат "1.2.4.0";
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(ГлавноеОкно, ДопПараметры) Экспорт
	// Формирует структуру фильтра для списочных методов SDK	
	filter = МестныйКэш.Docflow.CreateSimpleObject();
	
	filter.Write( "ДопПоля", "Этап,Лицо2");
	
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаНач) Тогда
		filter.Write( "ДатаС", Формат(ГлавноеОкно.ФильтрДатаНач,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрДатаКнц) Тогда
		filter.Write( "ДатаПо", Формат(ГлавноеОкно.ФильтрДатаКнц,"ДФ=""дд.ММ.гггг""") ); 
	КонецЕсли;
	Если ГлавноеОкно.СписокСостояний.Количество()>0 и ГлавноеОкно.ФильтрСостояние<>ГлавноеОкно.СписокСостояний.НайтиПоИдентификатору(0).Значение Тогда
		filter.Write( "Состояние", ГлавноеОкно.ФильтрСостояние ); 
	КонецЕсли;
	Если ГлавноеОкно.ФильтрТипыДокументов.Количество()>0 тогда
		списокТипДок="";//"ЭДОНакл,Договор,СчФктр"
		для каждого типДок из ГлавноеОкно.ФильтрТипыДокументов цикл
			списокТипДок=списокТипДок+типДок.Значение+",";
		конеццикла;
		filter.Write( "ТипВложения", лев(списокТипДок,СтрДлина (списокТипДок)-1)); 
	КонецЕсли;
	Если ГлавноеОкно.ФильтрТипыДокументов.Количество()>0 тогда
		списокТипДок="";//"ЭДОНакл,Договор,СчФктр"
		для каждого типДок из ГлавноеОкно.ФильтрТипыДокументов цикл
			списокТипДок=списокТипДок+типДок.Значение+",";
		конеццикла;
		filter.Write( "ТипВложения", лев(списокТипДок,СтрДлина (списокТипДок)-1)); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрОрганизация) Тогда
		org = МестныйКэш.Docflow.CreateSimpleObject(); 
		ИННОрг = СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН"));
		Если СтрДлина(ИННОрг) = 12 Тогда
			СвФЛ = МестныйКэш.Docflow.CreateSimpleObject();
			СвФЛ.Write( "ИНН", ИННОрг ); 
			org.WriteObject( "СвФЛ", СвФЛ );	
		Иначе
			СвЮЛ = МестныйКэш.Docflow.CreateSimpleObject();
			СвЮЛ.Write( "ИНН", ИННОрг ); 
			СвЮЛ.Write( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "КПП") );
			org.WriteObject( "СвЮЛ", СвЮЛ );
		КонецЕсли;
		filter.WriteObject( "НашаОрганизация", org ); 
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрКонтрагент) Тогда
		kontr = МестныйКэш.Docflow.CreateSimpleObject(); 
		ИННКонтр = СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН"));
		Если ЗначениеЗаполнено(ИННКонтр) Тогда // если выбрана папка контрагентов, то ИНН получается NaN
			Если СтрДлина(ИННКонтр) = 12 Тогда
				СвФЛ = МестныйКэш.Docflow.CreateSimpleObject();
				СвФЛ.Write( "ИНН", ИННКонтр ); 
				kontr.WriteObject( "СвФЛ", СвФЛ );	
			Иначе
				СвЮЛ = МестныйКэш.Docflow.CreateSimpleObject();
				СвЮЛ.Write( "ИНН", ИННКонтр ); 
				СвЮЛ.Write( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "КПП") );
				kontr.WriteObject( "СвЮЛ", СвЮЛ );
			КонецЕсли;
			Если ГлавноеОкно.ФильтрКонтрагентСФилиалами Тогда
				kontr.Write( "ДопПоля", "СФилиалами" );
			КонецЕсли;
			filter.WriteObject( "Контрагент", kontr );
		КонецЕсли;
	КонецЕсли;
	//a.v. matyakin
	Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрМаска) Тогда
		filter.Write( "Маска",ГлавноеОкно.ФильтрМаска); 
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Элемент Из ДопПараметры Цикл
			filter.Write( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
	КонецЕсли;
	
	navigation = МестныйКэш.Docflow.CreateSimpleObject(); 
	navigation.Write( "РазмерСтраницы", ГлавноеОкно.ЗаписейНаСтранице ); 
	navigation.Write( "Страница", ГлавноеОкно.ФильтрСтраница-1 ); 
	filter.WriteObject( "Навигация", navigation );
	
	Возврат filter;	
КонецФункции	
&НаКлиенте
Функция СериализоватьСтруктуруВObject(Структура,Кэш) Экспорт
	// сериализует  com-объект в структуру	
	Object = Кэш.Docflow.CreateSimpleObject();
	Для Каждого Элемент Из Структура Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ObjectList = Кэш.Docflow.CreateSimpleObjectList(); 
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ObjectList.add(СериализоватьСтруктуруВObject(ЭлементМассива,Кэш));	
			КонецЦикла;
			Object.WriteObjectList(Элемент.Ключ, ObjectList);	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Object.WriteObject(Элемент.Ключ, СериализоватьСтруктуруВObject(Элемент.Значение,Кэш));
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			Object.Write(Элемент.Ключ,формат(Элемент.Значение, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'"));
		Иначе
			Object.Write(Элемент.Ключ,Элемент.Значение);
		КонецЕсли;
	КонецЦикла;	
	Возврат Object;
КонецФункции
// статусы документов
//&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита)
	// Получает значение реквизита объекта 1С	
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
	// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название) Экспорт
	// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Процедура сбисПрерываниеПользователем()
	// Прячет состояние при прерывании отправки, обработки служебных, обработки статусов	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
	// Сохраняем параметры запроса статусов, если выполнение было прервано пользователем
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	Если ЕстьИзменения и ПоследнееИзменение.Свойство("Событие") Тогда
		КоличествоСобытий = ПоследнееИзменение.Событие.Количество();
		СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя,ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор);
		МестныйКэш.ФормаНастроек.СохранитьПараметрыСБИС(МестныйКэш, СтруктураНастроек, МестныйКэш.Парам.ИдентификаторНастроек);
		ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов = ПоследнееИзменение.Событие[КоличествоСобытий-1].ДатаВремя;
		ГлавноеОкно.ИдентификаторПоследнегоСобытия = ПоследнееИзменение.Событие[КоличествоСобытий-1].Идентификатор;
	КонецЕсли;
	МестныйКэш.ФормаНастроек.СохранитьПараметрыСБИС(МестныйКэш, Новый Структура("ДатКнцЧтенияСтатусов", сбисТекущаяДата(МестныйКэш)), МестныйКэш.Парам.ИдентификаторНастроек);
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
Функция сбисТекущаяДата(Кэш) Экспорт
	// получает текущую дату-время на сервере СБИС	
	Результат = Кэш.Docflow.ReadServerVersionInformation();	
	Если Результат = Неопределено Тогда //почему неопределено
		Возврат ТекущаяДата();
	КонецЕсли;
	Результат = СериализоватьObjectВСтруктуру(Результат);
	Возврат Результат.ВнешнийИнтерфейс.ДатаВремяЗапроса;
КонецФункции
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) экспорт
	// Получает текущую дату в миллисекундах с начала 1970г
	Возврат 0;
КонецФункции
Функция сбисСохранитьНастройки(СтруктураНастроек) Экспорт
	// Сохраняет параметры запроса статусов в настройках пользователя СБИС	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Элемент Из СтруктураНастроек Цикл 
		Попытка
			ХранилищеОбщихНастроек.Сохранить(Элемент.Ключ,,Элемент.Значение,,"СБИС");
		Исключение
			ХранилищеОбщихНастроек.Сохранить(Элемент.Ключ,,Элемент.Значение);
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецФункции
Функция сбисПолучитьНастройки(СтруктураНастроек) Экспорт
	// Получает параметры запроса статусов из настроек пользователя СБИС	
	УстановитьПривилегированныйРежим(Истина); 
	Для Каждого Элемент Из СтруктураНастроек Цикл 
		Попытка
			СтруктураНастроек[Элемент.Ключ] = ХранилищеОбщихНастроек.Загрузить(Элемент.Ключ,,,"СБИС");
		Исключение
			СтруктураНастроек[Элемент.Ключ] = ХранилищеОбщихНастроек.Загрузить(Элемент.Ключ);
		КонецПопытки;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СтруктураНастроек;
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
	// Если более часа не проверяли статусы, то выводим красное предупреждение	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);
	Если Не ЗначениеЗаполнено(СтруктураНастроек.ДатКнцЧтенияСтатусов) или Кэш.ВИ.сбисТекущаяДата(Кэш)-СтруктураНастроек.ДатКнцЧтенияСтатусов > 3600 Тогда
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Истина;
	Иначе
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ДоступныСерверныеНастройки() Экспорт
	
	Возврат	Ложь;
	
КонецФункции

////////////////////////////////////////////////////
//////////////////Автообновление////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисПолучитьПараметрыАктуальнойВерсии(Кэш, ПараметрыОбновления, Отказ) Экспорт
	
	Возврат сбисСохранитьВФайлПоСсылке(Кэш, ПараметрыОбновления, Отказ);
	
КонецФункции

&НаКлиенте
Функция сбисСохранитьВФайлПоСсылке(Кэш, сбисПараметрыФайла, Отказ) Экспорт
	
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	ПараметрыМетода		= Новый Структура("uri_in, filename_in", ,сбисПараметрыФайла.ИмяФайла);
	Если Не сбисПараметрыФайла.Свойство("URLПолный", ПараметрыМетода.uri_in) Тогда
		ПараметрыМетода.uri_in = сбисПараметрыФайла.Протокол + "://" + сбисПараметрыФайла.Сервер + сбисПараметрыФайла.URL;
	КонецЕсли;
	сбисРезультатЧтения = сбисОтправитьИОбработатьКоманду(Кэш, "LoadDataFromURIToFile", ПараметрыМетода, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(сбисРезультатЧтения, "SDK2.сбисСохранитьВФайлПоСсылке", 700, "Неизвестная ошибка подключения", сбисРезультатЧтения.details);
	КонецЕсли;
	Возврат Истина;	
	
КонецФункции

////////////////////////////////////////////////////
////////////////////Авторизация/////////////////////
////////////////////////////////////////////////////

//Авторизуется на online.sbis.ru по логину/паролю	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,Отказ=Ложь) Экспорт 	
	МестныйКэш	= Кэш;
	ДопПараметры= Новый Структура("СообщатьПриОшибке, ВернутьОшибку, МетодВалидации", Ложь, Истина, "ConfirmAuth");
	СформироватьНастройкиПодключения(Кэш);
	ПараметрыРезультат = Новый Структура(	"Метод,			ДополнительныеПараметры", 
											"Authenticate",	ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", Кэш.Docflow.Authenticate(Логин, Пароль));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

//Авторизуется на online.sbis.ru по сертификату		
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,Отказ=Ложь) Экспорт
	МестныйКэш	= Кэш;
	сбисПараметрыВызова = Новый Структура("Отпечаток", Сертификат);
	
	ДопПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, МетодВалидации, ПараметрВалидации", Ложь, Истина, "ConfirmAuthByCertificate", сбисПараметрыВызова);
	СформироватьНастройкиПодключения(Кэш);
	ПараметрыРезультат	= Новый Структура(	"Метод,						ДополнительныеПараметры", 
											"AuthenticateByCertificate",ДопПараметры);
	ПараметрыРезультат.Вставить("Результат", Кэш.Docflow.AuthenticateByCertificate(СериализоватьСтруктуруВObject(сбисПараметрыВызова, Кэш)));
	Возврат сбисРезультатАвторизации(Кэш, ПараметрыРезультат, Отказ);
КонецФункции

//Функция обрабатывает результат авторизации
&НаКлиенте
Функция сбисРезультатАвторизации(Кэш, ПараметрыРезультата, Отказ) Экспорт
	РезультатАвторизации = ПараметрыРезультата.Результат;
	Если РезультатАвторизации = 0 Тогда
		Отказ = Истина;
		РезультатАвторизации = сбисПолучитьСтруктуруОшибки(Кэш);
	КонецЕсли;
	Если Не Отказ Тогда
		Кэш.СБИС.Авторизован = Истина;
		Возврат ПолучитьИдентификаторСессии(Кэш);
	КонецЕсли;

	Если РезультатАвторизации.message = "Требуется подтверждение действия" Тогда
		//Ставим код для подтверждения действия, так как SDK его не возвращает.
		РезультатАвторизации.code = 303;
		addInfo = Новый Структура;
		addInfo.Вставить("МетодВалидации",	ПараметрыРезультата.ДополнительныеПараметры.МетодВалидации);
		Если ПараметрыРезультата.ДополнительныеПараметры.Свойство("ПараметрВалидации") Тогда
			addInfo.Вставить("ПараметрВалидации",	ПараметрыРезультата.ДополнительныеПараметры.ПараметрВалидации);
		КонецЕсли;
		РезультатАвторизации.Вставить("data", Новый Структура("addinfo", addinfo));
	КонецЕсли;
	Возврат РезультатАвторизации;
КонецФункции

//Подтверждаем авторизацию на online.sbis.ru по коду		
&НаКлиенте
Функция ПодтвердитьАвторизацию(Кэш, ПараметрыВвода, ПараметрыПодтверждения, Отказ) Экспорт
	ДопПараметрыЗапроса	= Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Истина);
	Парам = Новый Структура("ПинКод", ПараметрыВвода.ПинКод);
	Если ПараметрыПодтверждения.Свойство("ПараметрВалидации") Тогда
		Парам.Вставить("Метод", ПараметрыПодтверждения.ПараметрВалидации);
	КонецЕсли;
	Результат = сбисОтправитьИОбработатьКоманду(Кэш, ПараметрыПодтверждения.МетодВалидации, Парам, ДопПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат Результат;
	Иначе
		Кэш.СБИС.Авторизован = Истина;
	КонецЕсли;
	Возврат ПолучитьИдентификаторСессии(Кэш);
КонецФункции

//Заглушка отправки кода СМС
&НаКлиенте
Функция ОтправитьКодАвторизации(Кэш, ПараметрыПодтверждения, Отказ) Экспорт
	//Для SDK отправка СМС зашита в методы авторизации.
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////
//////////////////Статистика вызов//////////////////
////////////////////////////////////////////////////

//Отправляет собщение о статистике на online
&НаКлиенте
Функция сбисОтправитьСообщениеСтатистики(Кэш, СообщениеСтатистики, Отказ) Экспорт
	сбисДополнительныеПараметрыКоманды = Новый Структура("ВернутьОшибку, ЗначениеОшибки", Истина, Неопределено);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "WriteStat", Новый Структура("message", СообщениеСтатистики), сбисДополнительныеПараметрыКоманды, Отказ);
КонецФункции

//Отправляет собщение о ошибке на online
&НаКлиенте
Функция сбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ) Экспорт
	сбисДополнительныеПараметрыКоманды = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЗначениеОшибки", Ложь, Истина, Неопределено);
	Возврат сбисОтправитьИОбработатьКоманду(Кэш, "WriteError", Новый Структура("error", СообщениеОбОшибке), сбисДополнительныеПараметрыКоманды, Отказ);
КонецФункции

////////////////////////////////////////////////////
/////////////////////Системные//////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисВключенРезервныйДомен(Кэш, АдресСервера) Экспорт
	Возврат Ложь;
КонецФункции

//Выполняет указанный метод и возвращает результат, либо генерирует и сообщает ошибку.
//ПараметрыМетода			- структура, на ключи не смотрим, сделано для совместимости с extSDK, API.
//Дополнительные параметры	- структура, для управления выводом и возвратом результата в случае ошибок. 
//	Возможные значения: СообщатьПриОшибке(Истина),ВернутьОшибку(Ложь) 
//Отказ - булево, определяет наличие ошибок в процессе выполнения метода и что вернулось в качестве результата. Если Истина, то структура ошибки с полями "code, message, details"
&НаКлиенте
Функция сбисОтправитьИОбработатьКоманду(Кэш, Метод, ПараметрыМетода=Неопределено, ДопПараметры, Отказ) Экспорт
	Перем сбисРезультат;
	сбисСтрокаАргументы	= "";
	сбисМассивАргументов= Новый Массив;
	сбисПараметрыВызова	= Новый Структура("Метод, Параметры", Метод, ПараметрыМетода);	
	Если Не ПараметрыМетода = Неопределено Тогда
		сбисСчетчик = 0;
		Для Каждого КлючИЗначение Из ПараметрыМетода Цикл
			Попытка
				сбисМассивАргументов.Добавить(ПреобразоватьЗначениеВCOM(Кэш, КлючИЗначение.Значение, Ложь).Object);
			Исключение
				Отказ = Истина;
				сбисРезультат = Кэш.ОбщиеФункции.сбисИсключение(, "SDK2.ПреобразоватьЗначениеВCOM", 700, "Неизвестная ошибка подключения", сбисТекстИсключенияПриКонвертации("Струкутра", ИнформацияОбОшибке().Описание, КлючИЗначение.Ключ, Истина));
				Прервать;
			КонецПопытки;
			сбисСтрокаАргументы = сбисСтрокаАргументы + ",сбисМассивАргументов[" + сбисСчетчик + "]";
			сбисСчетчик = сбисСчетчик + 1;
		КонецЦикла;
		сбисСтрокаАргументы = Сред(сбисСтрокаАргументы, 2);
	КонецЕсли;
	//Выполняем метод если все успешно преобразовано
	Если Не Отказ Тогда
		Попытка
			сбисРезультат = Вычислить("Кэш.Docflow." + Метод + "(" + сбисСтрокаАргументы + ")");
		Исключение
			Отказ = Истина;
			сбисРезультат = Кэш.ОбщиеФункции.сбисИсключение(, "SDK2.сбисОтправитьИОбработатьКоманду", 700, "Неизвестная ошибка подключения", ОписаниеОшибки()); 
		КонецПопытки;
	КонецЕсли;
	Возврат сбисОбработатьОтвет(Кэш, сбисПараметрыВызова, сбисРезультат, ДопПараметры, Отказ);
	
КонецФункции

&НаКлиенте
Функция сбисОбработатьОтвет(Кэш, сбисПараметрыВызова, сбисРезультат, сбисДополнительныеПараметры, Отказ)
	Перем checkparam, message_result, сбисПроверкаНаОшибку; 
	
	Если Не сбисДополнительныеПараметры.Свойство("ЗначениеОшибки", сбисПроверкаНаОшибку) Тогда
		//В большинстве случаев для SDK неудачей является 0.
		сбисПроверкаНаОшибку = 0;			
	КонецЕсли;
	
	Если Отказ Тогда//Уже где-то отвалилось с ошибкой.
		message_result = сбисРезультат;
	ИначеЕсли сбисРезультат = сбисПроверкаНаОшибку Тогда//Смотрим ошибку от SDK
		Отказ = Истина;
		message_result = Кэш.ОбщиеФункции.сбисИсключение(сбисПолучитьСтруктуруОшибки(Кэш), сбисПараметрыВызова.Метод);
	Иначе
		message_result = сбисПрочитатьОтвет(Кэш, сбисРезультат, Отказ);
	КонецЕсли;
					
	Если Отказ Тогда
		Ошибка = message_result;
		Если Не сбисДополнительныеПараметры.Свойство("СообщатьПриОшибке", checkparam)
			Или	checkparam Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Ошибка);
		КонецЕсли;
		Если 	сбисДополнительныеПараметры.Свойство("ВернутьОшибку", checkparam)
			И	checkparam Тогда
			Возврат Ошибка; 
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат	message_result;	
	
КонецФункции

&НаКлиенте
Функция сбисПрочитатьОтвет(Кэш, сбисРезультат, Отказ)	
	Попытка
		Результат = ПреобразоватьComВЗначение(сбисРезультат,Отказ);
	Исключение
		Отказ = Истина;
		Результат = Кэш.ОбщиеФункции.сбисИсключение(, "SDK2.ПреобразоватьComВЗначение", 766, "Ошибка при конвертации", сбисТекстИсключенияПриКонвертации("Структура", ИнформацияОбОшибке().Описание, "SimpleObject", Истина));
	КонецПопытки;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПреобразоватьComВЗначение(сбисРезультат, Отказ, сбисТип=Неопределено)
	РезультатКовертации = Неопределено;
	//Первый заход, смотрим что в ответе.	
	Если сбисТип = Неопределено Тогда
		Если сбисРезультат = Неопределено Тогда
			РезультатКовертации = сбисРезультат;			
		ИначеЕсли ТипЗнч(сбисРезультат) = Тип("COMОбъект") Тогда
			РезультатКовертации = ПреобразоватьComВЗначение(сбисРезультат, Отказ, "объект");
		ИначеЕсли ТипЗнч(сбисРезультат) = Тип("Строка") Тогда
			РезультатКовертации = ПреобразоватьComВЗначение(сбисРезультат, Отказ, "строка");
		Иначе
			РезультатКовертации = сбисРезультат;
		КонецЕсли;
	ИначеЕсли сбисТип = "строка" Тогда
		РезультатКовертации = сбисРезультат;
		Если	Сред(РезультатКовертации,3,1) = "."
			И	Сред(РезультатКовертации,6,1) = "." Тогда//Возможно, это дата
			//Переопределим значение как дату, если это действительно она
			Если		СтрДлина(РезультатКовертации) = 10 Тогда
				Попытка
					РезультатКовертации = Дата(Сред(РезультатКовертации,7,4), Сред(РезультатКовертации,4,2), Лев(РезультатКовертации, 2));
				Исключение
					//В случае исключения, ничего не делаем. Это не дата, значение не меняется
				КонецПопытки;
			ИначеЕсли	СтрДлина(РезультатКовертации) = 19 Тогда 
				Попытка
					РезультатКовертации = Дата(Сред(РезультатКовертации,7,4), Сред(РезультатКовертации,4,2), Лев(РезультатКовертации, 2), Сред(РезультатКовертации,12, 2), Сред(РезультатКовертации,15, 2), Сред(РезультатКовертации,18, 2))
				Исключение
					//В случае исключения, ничего не делаем. Это не дата, значение не меняется
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли сбисТип = "объект" Тогда
		Попытка
			ComКлючиОбъекта	= сбисРезультат.keys;
		Исключение
			ОписаниеОшибки = "У объекта отсутствует описание ключей.";
			ВызватьИсключение сбисТекстИсключенияПриКонвертации("Структура", ОписаниеОшибки, "");
		КонецПопытки;
		РезультатКовертации = Новый Структура();
		Для Каждого ИмяОбъекта Из ComКлючиОбъекта Цикл
			ТипПреобразовать = сбисРезультат.TypeOf(ИмяОбъекта);
			Если		ТипПреобразовать = "строка" Тогда
				ЗначениеПреобразовать = сбисРезультат.Read(ИмяОбъекта);
			ИначеЕсли	ТипПреобразовать = "объект" Тогда
				ЗначениеПреобразовать = сбисРезультат.ReadObject(ИмяОбъекта);
			ИначеЕсли	ТипПреобразовать = "массив объектов" Тогда
				ЗначениеПреобразовать = сбисРезультат.ReadObjectList(ИмяОбъекта);
			Иначе
				ВызватьИсключение сбисТекстИсключенияПриКонвертации("Структура", "Неизвестный тип ответа " + ТипПреобразовать + ". Обратитесь в техническую поддержку.", ИмяОбъекта);
			КонецЕсли;
			Попытка
				РезультатКовертации.Вставить(ИмяОбъекта, ПреобразоватьComВЗначение(ЗначениеПреобразовать, Отказ, ТипПреобразовать));
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке().Описание;
				ВызватьИсключение сбисТекстИсключенияПриКонвертации("Структура", ОписаниеОшибки, ИмяОбъекта);
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли сбисТип = "массив объектов" Тогда
		РезультатКовертации = Новый Массив();
		Для сч = 0 По сбисРезультат.count - 1 Цикл
			Попытка
				РезультатКовертации.Добавить(ПреобразоватьComВЗначение(сбисРезультат.at(сч), Отказ, "объект"));
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке().Описание;
				ВызватьИсключение сбисТекстИсключенияПриКонвертации("Массив", ОписаниеОшибки, "[" + сч + "]");
			КонецПопытки;
		КонецЦикла;	
	КонецЕсли;		
	Возврат РезультатКовертации;
		
КонецФункции

//Cериализует произвольный объект 1С в аналогичную стркутуру SDK
//Поддерживаемые типы: массив, структура, дата. Все прочие приводятся к строке.
&НаКлиенте
Функция ПреобразоватьЗначениеВCOM(Кэш, ЗначениеПреобразовать, ВерхнийУровень=Истина)
	Результат = Новый Структура("Type, Object", "Строка");
	Если ТипЗнч(ЗначениеПреобразовать) = Тип("Массив") Тогда
		Результат.Object = Кэш.Docflow.CreateSimpleObjectList(); 
		Результат.Type = "Массив";
		Для сбисИндексМассива = 0 По ЗначениеПреобразовать.Количество() - 1 Цикл
			Попытка
				ЭлементДобавить = ПреобразоватьЗначениеВCOM(Кэш, ЗначениеПреобразовать[сбисИндексМассива], Ложь);
				Результат.Object.Add(ЭлементДобавить.Object);	
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке().Описание;
				ВызватьИсключение сбисТекстИсключенияПриКонвертации(Результат.Type, ОписаниеОшибки, "[" + сбисИндексМассива + "]", ВерхнийУровень);
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеПреобразовать) = Тип("Структура") Тогда
		Результат.Object = Кэш.Docflow.CreateSimpleObject(); 
		Результат.Type = "Структура";
		Для Каждого КлючИЗначение Из ЗначениеПреобразовать Цикл
			сбисЗначениеCOM = ПреобразоватьЗначениеВCOM(Кэш, КлючИЗначение.Значение, Ложь);
			Попытка
				Если сбисЗначениеCOM.Type = "Массив" Тогда
					Результат.Object.WriteObjectList(КлючИЗначение.Ключ, сбисЗначениеCOM.Object);		
				ИначеЕсли сбисЗначениеCOM.Type = "Структура" Тогда
					Результат.Object.WriteObject(КлючИЗначение.Ключ, сбисЗначениеCOM.Object);
				Иначе
					Результат.Object.Write(КлючИЗначение.Ключ, сбисЗначениеCOM.Object);
				КонецЕсли;
			Исключение
				ОписаниеОшибки = ИнформацияОбОшибке().Описание;
				ВызватьИсключение сбисТекстИсключенияПриКонвертации(Результат.Type, ОписаниеОшибки, КлючИЗначение.Ключ, ВерхнийУровень);
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ЗначениеПреобразовать) = Тип("Дата") Тогда
		Результат.Object = Формат(ЗначениеПреобразовать, "ДФ='дд.ММ.гггг ЧЧ.мм.сс'");
	ИначеЕсли ТипЗнч(ЗначениеПреобразовать) = Тип("Число") Тогда
		Результат.Object = Формат(ЗначениеПреобразовать, "ЧГ=0");
	Иначе
		Результат.Object = Строка(ЗначениеПреобразовать);
	КонецЕсли;
	Возврат Результат;	
КонецФункции

//Фунция вызывает исключение с генерацией пути до элемента
&НаКлиенте
Функция сбисТекстИсключенияПриКонвертации(сбисТип="", сбисТекстОшибки, сбисОписаниеПути, ВерхнийУровень=Ложь)
	сбисИндексВОшибке = Найти(сбисТекстОшибки, "%Заменить%");
	Если сбисИндексВОшибке Тогда
		ЗначениеПосле = Сред(сбисТекстОшибки, сбисИндексВОшибке + 10, 1);
		Если	Не ЗначениеПосле = "["
			И	Не ЗначениеПосле = "."
			И	Не ПустаяСтрока(сбисОписаниеПути) Тогда
			сбисОписаниеПути = сбисОписаниеПути + ".";
		КонецЕсли;
		Возврат СтрЗаменить(сбисТекстОшибки, "%Заменить%", ?(ВерхнийУровень, " ", "%Заменить%") + сбисОписаниеПути);
	КонецЕсли;
	сбисОшибка = "значения";
	Если		сбисТип = "Массив"		Тогда
		сбисСтрока = "элемента массива";
	ИначеЕсли	сбисТип = "Структура"	Тогда
		сбисСтрока = "узла";
	КонецЕсли;
	Возврат "Ошибка конвертации " + сбисСтрока + ?(ВерхнийУровень, " ", "%Заменить%") + сбисОписаниеПути + ". Детально: " + сбисТекстОшибки;
		
КонецФункции

//Cериализует SimpleObject SDK в структуру 1С
&НаКлиенте
Функция СериализоватьObjectВСтруктуру(Object) Экспорт
	Попытка
		ComКлючиОбъекта	= Object.keys;
	Исключение
		Сообщить("Ошибка при работе с SimpleObject. У объекта отсутствует описание ключей. Детально: " + ИнформацияОбОшибке().Причина);
		Возврат Неопределено;
	КонецПопытки;
	сбисСтруктура	= Новый Структура();
	Для Каждого ИмяОбъекта Из ComКлючиОбъекта Цикл
		Тип = Object.TypeOf(ИмяОбъекта);	
		Если Тип = "строка" Тогда
			Строка = Object.Read(ИмяОбъекта);
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и (СтрДлина(Строка)=10 или СтрДлина(Строка)=19) Тогда //видимо это дата
				Попытка
					Если СтрДлина(Строка)=10 Тогда
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
					Иначе
						Строка = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2))
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			сбисСтруктура.Вставить(ИмяОбъекта,Строка);
		ИначеЕсли Тип = "объект" Тогда
			сбисСтруктура.Вставить(ИмяОбъекта,СериализоватьObjectВСтруктуру(Object.ReadObject(ИмяОбъекта)));
		ИначеЕсли Тип = "массив объектов" Тогда
			сбисСтруктура.Вставить(ИмяОбъекта,Новый Массив());
			ObjectList = Object.ReadObjectList(ИмяОбъекта);
			ObjectListCount = ObjectList.count;
			Для сч = 0 По ObjectListCount - 1 Цикл
				сбисСтруктура[ИмяОбъекта].Добавить(СериализоватьObjectВСтруктуру(ObjectList.at(сч)));
			КонецЦикла;	
		Иначе
			Сообщить("Обратитесь в техподдержку. Появился новый тип Object "+Тип);
		КонецЕсли;		
	КонецЦикла;
	Возврат сбисСтруктура;		
КонецФункции
	
//Получает последнюю ошибку SDK в стандартной структуре ошибок для всех способов обмена.	
&НаКлиенте
Функция сбисПолучитьСтруктуруОшибки(Кэш) Экспорт
	Ошибка = Новый Структура("code,message,details");
	Error = Кэш.Docflow.ReadLastErrorEx();
	Попытка
		Ошибка.message	= Error.Read("Описание");
		Ошибка.details	= Error.Read("ОписаниеРасширенное");
		Ошибка.code		= Error.Read("Код");
	Исключение
		Ошибка.message	= "Неизвестная ошибка системы";
		Ошибка.details	= ОписаниеОшибки();
		Ошибка.code		= 100;
	КонецПопытки;
	Попытка
		Ошибка.code		= Число(Ошибка.code);
	Исключение
		Ошибка.code		= 100;
	КонецПопытки;

	Возврат Ошибка;
КонецФункции
