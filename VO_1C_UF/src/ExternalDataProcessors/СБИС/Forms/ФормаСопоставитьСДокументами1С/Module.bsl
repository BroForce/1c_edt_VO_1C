&НаКлиенте
Перем МестныйКэш Экспорт;

////////////////////////////////////////////////////////////////////////////////
// Служебные функции

&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы[ИмяЭлемента];
	КонецЕсли;
	Возврат Форма.ЭлементыФормы[ИмяЭлемента];
КонецФункции

&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции

&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = ТекстСостояния;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Открытие формы, формирование списка документов для сопоставления

// Формирование коллекции документов на форме
&НаКлиенте
Функция Показать(Кэш, СписокОтмеченныхДокументов) Экспорт
	
	ЗакрытьФормуФильтра();
	
	// Функция открывает окно сопоставления документов и заполняет все реквизиты на форме	
	МестныйКэш = Кэш;
	ОтметитьВсе = Ложь;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	СопоставлениеПоСумме = ГлавноеОкно.СопоставлениеПоСумме;
	СуммаДельта = 0;
	СуммаДокументовСБИС=0;
	СписокДокументовДляСопоставления = ПодготовитьСписокДокументовКСопоставлению(Кэш, СписокОтмеченныхДокументов);
	Всего = СписокДокументовДляСопоставления.Количество();
	сч = 0;
	ТаблицаСопоставленияДокументов.Очистить();
	Для Каждого Строка из СписокДокументовДляСопоставления Цикл
		сч = сч + 1;
		сбисПоказатьСостояние("Ищем подходящие документы",ГлавноеОкно,Мин(100,Окр(сч*100/Всего)));
		Документ1С = Неопределено;
		ЭтоДубль = сбисЭтоДубльВложения(ТаблицаСопоставленияДокументов,Строка); //d.ch
		Если ЭтоДубль Тогда   // для дублей не ищем подходящие документы
			СписокПодходящихДокументов = Новый СписокЗначений;
		Иначе
			СписокПодходящихДокументов=Кэш.ОбщиеФункции.НайтиПодходящиеДокументы(Кэш, Строка);
		КонецЕсли;
		
		//если уже есть документ 1С то его добавляем в строку, иначе ищем подходящие
		СопоставлениеСохранено = Ложь;
		Если Строка.Документы1С <>Неопределено и ЗначениеЗаполнено(Строка.Документы1С) Тогда
			Документ1С = Строка.Документы1С[0].Значение;
			КолВоДокументов = 1;
			СопоставлениеСохранено = Истина;
		Иначе	
			КолВоДокументов = СписокПодходящихДокументов.Количество();
			
			Если КолВоДокументов=1 Тогда
				Документ1С = СписокПодходящихДокументов[0].Значение;
			КонецЕсли;
		КонецЕсли;
				
		НоваяСтрока = ТаблицаСопоставленияДокументов.Добавить();
		НоваяСтрока.СписокПодходящихДокументов = СписокПодходящихДокументов;
		Если Документ1С<>Неопределено Тогда 
			НоваяСтрока.Документ1С = Документ1С;
		КонецЕсли;
		НоваяСтрока.РанееСопоставленныеДокументы1С = Строка.РанееСопоставленныеДокументы1С;
		НоваяСтрока.СоставПакета     = Новый СписокЗначений;
		НоваяСтрока.Организация      = Строка.СоставПакета.НашаОрганизация.Название;
		НоваяСтрока.Контрагент       = Строка.СоставПакета.Контрагент.Название;
		НоваяСтрока.Сумма            = Строка.Сумма;
		НоваяСтрока.Номер            = Строка.Номер;
		НоваяСтрока.ДатаДокумента    = Строка.Дата;
		НоваяСтрока.Статус           = Строка.Статус; 		 
		НоваяСтрока.Найдено          = КолВоДокументов;
		
		НоваяСтрока.СопоставлениеСохранено = СопоставлениеСохранено;
		
		Если КолВоДокументов = 1 Тогда
			
			НоваяСтрока.СопоставлениеОпределено = Истина;
			
			Если СопоставлениеСохранено = Истина Тогда
				//синяя иконка документа
				НоваяСтрока.НайденоКартинка = 1;
			Иначе
				//серая иконка документа
				НоваяСтрока.НайденоКартинка = 3;
			КонецЕсли;
		ИначеЕсли КолВоДокументов > 1 Тогда
			//восклицательный знак
			НоваяСтрока.НайденоКартинка = 2;
			НоваяСтрока.СопоставлениеОпределено = Ложь;
		Иначе
			//пусто
			НоваяСтрока.НайденоКартинка = 0;
			НоваяСтрока.СопоставлениеОпределено = Ложь;
		КонецЕсли;
		
		НоваяСтрока.СоставПакета.Добавить(Строка.СоставПакета);
		НоваяСтрока.ДокументСБИСНазвание = Строка.НазваниеСБИС;
		НоваяСтрока.Типы1С = Строка.Типы1С;
		НоваяСтрока.ТипСБИС = Строка.ТипСБИС;
		НоваяСтрока.ИдСБИС = Строка.СоставПакета.Идентификатор;
		НоваяСтрока.ИдВложения = Строка.ИдВложения;
		НоваяСтрока.Состояние = Строка.СоставПакета.Состояние.Название;
		НоваяСтрока.Отмечен = Ложь;
		
		НоваяСтрока.ТипВерсияВложения   = Строка.ТипВерсияВложения; //d.ch
		НоваяСтрока.ОрганизацияИНН = ?(Строка.НашаОрганизация.Свойство("СвЮЛ"),Строка.НашаОрганизация.СвЮЛ.ИНН,?(Строка.НашаОрганизация.Свойство("СвФЛ"),Строка.НашаОрганизация.СвФЛ.ИНН,""));
		НоваяСтрока.ОрганизацияКПП = ?(Строка.НашаОрганизация.Свойство("СвЮЛ"),Строка.НашаОрганизация.СвЮЛ.КПП,"");
		НоваяСтрока.КонтрагентИНН = ?(Строка.Контрагент.Свойство("СвЮЛ"),Строка.Контрагент.СвЮЛ.ИНН,?(Строка.Контрагент.Свойство("СвФЛ"),Строка.Контрагент.СвФЛ.ИНН,"")) ;
		НоваяСтрока.КонтрагентКПП = ?(Строка.Контрагент.Свойство("СвЮЛ"),Строка.Контрагент.СвЮЛ.КПП,"");
		НоваяСтрока.Дубль = ЭтоДубль;
		//чтобы обновлять первоначальную копию при наложении фильтров
		НоваяСтрока.ИдентификаторСтроки = сч;//НоваяСтрока.ПолучитьИдентификатор();
		РассчитатьДельтуИСуммуДокумента1С(НоваяСтрока);
		
	КонецЦикла;
	ВсегоДокументов = сч;
	
	сбисСпрятатьСостояние(ГлавноеОкно);
	
	Если ТаблицаСопоставленияДокументов.Количество()>0 Тогда
		ЗаполнитьКопиюТаблицыСопоставления(МестныйКэш.ПараметрыСистемы);
		ФильтрСопоставленияПоУмолчанию();
		ЭтаФорма.Открыть();
	Иначе
		Сообщить("Среди отмеченных документов нет подходящих для сопоставления.");
	КонецЕсли;
	
КонецФункции

//требуется из-за применения фильтра
&НаСервере
Функция ЗаполнитьКопиюТаблицыСопоставления(СбисПараметрыСистемы)
	Если СбисПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ТаблицаСопоставленияДокументовКопия.Загрузить(ТаблицаСопоставленияДокументов.Выгрузить());
	Иначе
		ТаблицаСопоставленияДокументовКопия = ТаблицаСопоставленияДокументов.Скопировать();
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция сбисЭтоДубльВложения(ТаблицаСопоставленияДокументов,СтрокаДокумента)
	Если ТаблицаСопоставленияДокументов.Количество()=0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ОтборДляПоискаДублей = Новый Структура;
	ОтборДляПоискаДублей.Вставить("Номер",СтрокаДокумента.Номер);
	ОтборДляПоискаДублей.Вставить("ДатаДокумента",СтрокаДокумента.Дата);
	ОтборДляПоискаДублей.Вставить("ТипВерсияВложения",СтрокаДокумента.ТипВерсияВложения);
	ОтборДляПоискаДублей.Вставить("ОрганизацияИНН",?(СтрокаДокумента.НашаОрганизация.Свойство("СвЮЛ"),СтрокаДокумента.НашаОрганизация.СвЮЛ.ИНН,?(СтрокаДокумента.НашаОрганизация.Свойство("СвФЛ"),СтрокаДокумента.НашаОрганизация.СвФЛ.ИНН,"")));
	ОтборДляПоискаДублей.Вставить("ОрганизацияКПП",?(СтрокаДокумента.НашаОрганизация.Свойство("СвЮЛ"),СтрокаДокумента.НашаОрганизация.СвЮЛ.КПП,""));
	ОтборДляПоискаДублей.Вставить("КонтрагентИНН",?(СтрокаДокумента.Контрагент.Свойство("СвЮЛ"),СтрокаДокумента.Контрагент.СвЮЛ.ИНН,?(СтрокаДокумента.Контрагент.Свойство("СвФЛ"),СтрокаДокумента.Контрагент.СвФЛ.ИНН,"")));
	ОтборДляПоискаДублей.Вставить("КонтрагентКПП",?(СтрокаДокумента.Контрагент.Свойство("СвЮЛ"),СтрокаДокумента.Контрагент.СвЮЛ.КПП,""));
	
	НайденныеСтроки  =  ТаблицаСопоставленияДокументов.НайтиСтроки(ОтборДляПоискаДублей);
	Возврат ?(НайденныеСтроки.Количество()>0,Истина,Ложь);
КонецФункции

//не используется, возможно в дальнейшем потребуется выводить на форме итогов текстовые подписи, не стала удалять
&НаКлиенте
Функция ОпределитьОкончание(Значение, Корень, Окончание1, Окончание2, Окончание3)
	// Функция определяет окончание в нужном падеже для надписей с количеством документов	
	Если Число(Прав(Значение,2))>=10 и Число(Прав(Значение,2))<20 Тогда
		Возврат Корень+Окончание3;		
	ИначеЕсли Прав(Значение, 1)="1" Тогда 
		Возврат Корень+Окончание1;	
	ИначеЕсли Прав(Значение, 1)="2" или Прав(Значение, 1)="3" или Прав(Значение, 1)="4" Тогда 
		Возврат Корень+Окончание2;	
	Иначе
		Возврат Корень+Окончание3;	
	КонецЕсли;
КонецФункции

// Массив документов с данными, необходимыми для сопоставления
&НаКлиенте
Функция ПодготовитьСписокДокументовКСопоставлению(Кэш, СписокОтмеченныхДокументов) Экспорт
	
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрмСтатусы = ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	СписокДокументовДляСопоставления = Новый Массив(); //документ1С,guidсбис,дата,номер,сумма,тип1С,Контрагент,Огранизация,Сумма1С,название документа СБИС
	Всего = СписокОтмеченныхДокументов.Количество();
	сч = 0;
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл
		сч = сч + 1;
		сбисПоказатьСостояние("Формируем список документов для сопоставления",ГлавноеОкно,Мин(100,Окр(сч*100/Всего)));
		Если Строка.Значение.СоставПакета[0].Значение.Свойство("Вложение") Тогда
			Для Каждого Вложение Из Строка.Значение.СоставПакета[0].Значение.Вложение Цикл
				РеквизитыДляПоиска = Новый Структура();
				ТипВерсияВложения = ОпределитьТипВложения(Вложение);//временно пока нет типа , возвращает тип версию вложения ЭдоНакл_3_02 
				Если ЗначениеЗаполнено(ТипВерсияВложения) Тогда
					Ини = Кэш.ОбщиеФункции.сбисОпределитьИниДляЗагрузки(Кэш, Вложение, ТипВерсияВложения);
					Если Ини <> Неопределено Тогда
					Если Не Вложение.Свойство("Документы1С") Тогда // реестры документов отдельных типов (например, акт сверки)
						ДанныеДокумента1С = фрмСтатусы.НайтиДокументы1СПоИдВложенияСБИС(Строка.Значение.СоставПакета[0].Значение.Идентификатор, Вложение.Идентификатор, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
						Вложение.Вставить("Документы1С", Новый СписокЗначений);
						Если ЗначениеЗаполнено(ДанныеДокумента1С) Тогда
							Вложение.Документы1С=ДанныеДокумента1С.Ссылки;
						КонецЕсли;
					КонецЕсли;
					фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьРеквизитыДокумента","Файл_"+ТипВерсияВложения,"Файл_Шаблон",Кэш);
						фрм.ПолучитьРеквизитыДокумента(Кэш,Ини,РеквизитыДляПоиска,Вложение,Строка.Значение);
					КонецЕсли;
				КонецЕсли;
				Если РеквизитыДляПоиска.Количество() Тогда
					РеквизитыДляПоиска.Вставить("ТипВерсияВложения", ТипВерсияВложения);
					РеквизитыДляПоиска.Вставить("Ини", Ини);
					СписокДокументовДляСопоставления.Добавить(РеквизитыДляПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// << alo Меркурий
		Если Кэш.Парам.Меркурий Тогда 
			фрмРеквизиты = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьРеквизитыДокумента","Файл_Шаблон","",Кэш);
			Для Каждого КэшИни Из Кэш.Ини Цикл
				Ини= Кэш.ФормаНастроек.Ини(Кэш, КэшИни.Ключ);
				Если Ини.Свойство("мДокумент") и Ини.Свойство("РеестрСБИС_Тип") Тогда // все инишки на загрузку
					МассивТипов = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрСБИС_Тип",Ини,Кэш),",");
					для каждого СБИС_Тип из МассивТипов цикл
						если СБИС_Тип=кэш.текущий.ТипДок тогда // соответсвует по типу пакета
							ЕстьРеестр=ложь;//если нет такого документа для сопоставления, то добавить
							для каждого ТипСопоставления из СписокДокументовДляСопоставления цикл
								если ТипСопоставления.ТипСБИС = СБИС_Тип тогда 	//если нет такого документа для сопоставления, то добавить
									ЕстьРеестр=истина;
									прервать;
								конецесли
							КонецЦикла;
							Если не ЕстьРеестр тогда
								РеквизитыДляПоиска = Новый Структура("ТипВерсияВложения", "");
								фрмРеквизиты.ПолучитьРеквизитыДокумента(Кэш,Ини,РеквизитыДляПоиска,неопределено,Строка.Значение);
								РеквизитыДляПоиска.Вставить("Ини", Ини);
								РеквизитыДляПоиска.Вставить("НазваниеСБИС", Строка.Значение.СоставПакета[0].Значение.Название);
								Если не ЗначениеЗаполнено(РеквизитыДляПоиска.Документы1С) тогда
									ДанныеДокумента1С = фрмСтатусы.НайтиДокументы1СПоИдВложенияСБИС(Строка.Значение.СоставПакета[0].Значение.Идентификатор, "", Кэш.Ини, ГлавноеОкно.КаталогНастроек);
									Если ЗначениеЗаполнено(ДанныеДокумента1С) Тогда
										РеквизитыДляПоиска.Документы1С=ДанныеДокумента1С.Ссылки;
									КонецЕсли;
								Конецесли;
								СписокДокументовДляСопоставления.Добавить(РеквизитыДляПоиска);
							иначе // добавим допустимые типы 1с
								Для Каждого РазделДокумента Из Ини.мДокумент Цикл
									Если РазделДокумента.Значение.Свойство("Документ") Тогда
										тип1С=Сред(РазделДокумента.Значение.Документ.Значение, Найти(РазделДокумента.Значение.Документ.Значение,".")+1);
										для каждого ТипСопоставления из СписокДокументовДляСопоставления цикл
											если ТипСопоставления.типы1С.найтиПоЗначению(тип1С)=неопределено тогда
												ТипСопоставления.типы1С.добавить(тип1С);
											конецесли;
										конеццикла;
									КонецЕсли;
								КонецЦикла;
							конецесли;
						конецесли
					конеццикла
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли; // alo Меркурий >>
	КонецЦикла;	
	сбисСпрятатьСостояние(ГлавноеОкно);
	Возврат	 СписокДокументовДляСопоставления;
	
КонецФункции

// Функция возвращает тип и версию вложения	
&НаКлиенте
Функция ОпределитьТипВложения(Вложение)
	
	Если	Вложение.Свойство("Тип")	Тогда
		Возврат Вложение.Тип + "_3_01";
	Иначе//aa.uferov раскоментировал для задач. Отсутствует поле типа для вложений. 
		Если		СтрЧислоВхождений(нрег(Вложение.Название), "накладная") Тогда
			Возврат "ЭДОНакл_3_01";
		ИначеЕсли	СтрЧислоВхождений(нрег(Вложение.Название), "фактура")
				И	СтрЧислоВхождений(нрег(Вложение.Название), "счет")	Тогда
			Возврат "СчФктр_3_01";
		ИначеЕсли	СтрЧислоВхождений(нрег(Вложение.Название), "акт №") Тогда
			Возврат "АктВр_3_01";
		ИначеЕсли	СтрЧислоВхождений(нрег(Вложение.Название), "счет на")
				Или	СтрЧислоВхождений(нрег(Вложение.Название), "заказ")	Тогда
			Возврат "Заказ_3_01";	
		КонецЕсли;
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Расчет данных в колонках Дельта и Сумма
&НаКлиенте
Процедура РассчитатьДельтуИСуммуДокумента1С(СтрокаТаблицыДокументов)
	
	Если СтрокаТаблицыДокументов.СопоставлениеОпределено = Ложь
		Тогда Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицыДокументов.Документ1С) Тогда
		ИниЗагрузки = МестныйКэш.ОбщиеФункции.сбисИниЗагрузкиПоДокументу1С(МестныйКэш, СтрокаТаблицыДокументов.Документ1С);
		ИмяРеквизитаСуммы = МестныйКэш.ОбщиеФункции.сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки);
		СуммаДокумента1С = РассчитатьСуммуДокумента1С(СтрокаТаблицыДокументов.Документ1С, ИмяРеквизитаСуммы);
	Иначе
		СуммаДокумента1С = 0;
	КонецЕсли;
	
	ДельтаСтроки = Число(СтрокаТаблицыДокументов.Сумма) - СуммаДокумента1С;
	ДельтаСтроки = ?(ДельтаСтроки<0,-ДельтаСтроки,ДельтаСтроки);
	СтрокаТаблицыДокументов.СуммаДокумента1С = СуммаДокумента1С; 
	СтрокаТаблицыДокументов.Дельта = ДельтаСтроки;//?(НЕ СтрокаТаблицыДокументов.Документ1С.Пустая(),ДельтаСтроки,0);
	//записать в признак "Есть расхождения" , если дельта не укладывается в допустимую погрешность
	Если ДельтаСтроки > ?( МестныйКэш.ГлавноеОкно.СопоставлениеПоСумме < 0, -МестныйКэш.ГлавноеОкно.СопоставлениеПоСумме, МестныйКэш.ГлавноеОкно.СопоставлениеПоСумме ) Тогда
		СтрокаТаблицыДокументов.ЕстьРасхождение = Истина;
	Иначе
		СтрокаТаблицыДокументов.ЕстьРасхождение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуДокумента1С(Документ1С, ИмяРеквизитаСуммы)
	
	Попытка
		Возврат Документ1С[ИмяРеквизитаСуммы];
	Исключение
		Возврат 0;
	КонецПопытки;	
	
КонецФункции	

//Только обычные формы
&НаКлиенте
Процедура ТаблицаСопоставленияДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
// Оформление таблицы сопоставляемых документов	
	//ОформлениеСтроки.Ячейки.Найдено.ОтображатьТекст = Ложь;
	
	ОформлениеСтроки.Ячейки.Найдено.ОтображатьКартинку = Истина;
	Если Число(ДанныеСтроки.Найдено)>1 Тогда
		ОформлениеСтроки.Ячейки.Найдено.ИндексКартинки = 2;
	Иначе	
		ОформлениеСтроки.Ячейки.Найдено.ИндексКартинки = Число(ДанныеСтроки.НайденоКартинка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ1С) Тогда
		ОформлениеСтроки.Ячейки.Документ1С.Текст = МестныйКэш.ОбщиеФункции.СформироватьНазваниеВходящегоДокумента1С(ДанныеСтроки.Документ1С);
	КонецЕсли;
	Если ДанныеСтроки.Дубль Тогда
		ЦветДубля = Новый Цвет (255,110,110);
		ОформлениеСтроки.ЦветФона = ЦветДубля;
	КонецЕсли;	
	//ОформлениеСтроки.Ячейки.ДокументСБИС.Текст = ДанныеСтроки.ДокументСБИС[0].Представление;
	фрм = ЭтотОбъект.ПолучитьФорму("Таблица_РеестрДокументов");
	фрм.ТаблДокПриВыводеСтроки(МестныйКэш, Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики управления списком, итоги

// Итоги по кнопке "Сумма
&НаКлиенте
Процедура РезультатыСопоставления(Команда)
	
	СтруктураПараметров = РасчетКонтрольныхСумм();
	СтруктураПараметров.Вставить("СохранитьРезультат",Ложь);
	ФормаРезультатыСопоставления = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаРезультатыСопоставления"); 
	ФормаРезультатыСопоставления.Показать(МестныйКэш, СтруктураПараметров);

КонецПроцедуры

//для формы по кнопке "Сумма" в панели управления
&НаСервере
Функция РасчетКонтрольныхСумм()
	
	Итоги = Новый Структура();
	СуммаДокументовСБИС = 0;
	СуммаДокументов1С   = 0;
	Дельта				= 0;
	ОднозначноСопоставлено = 0;
	НеоднозначноСопоставлено = 0;
	НеНайденоПодходящих = 0;
	
	МассивОтмеченных = ТаблицаСопоставленияДокументов.НайтиСтроки(Новый Структура("Отмечен", Истина));
	Если МассивОтмеченных.Количество() = 0 Тогда
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ТаблицаСопоставленияДокументовБезДублей = ТаблицаСопоставленияДокументов.Выгрузить(Новый Структура("Дубль", Ложь));  //d.ch	
		Иначе	
			ТаблицаСопоставленияДокументовБезДублей = ТаблицаСопоставленияДокументов.Скопировать(Новый Структура("Дубль", Ложь));  //d.ch
		КонецЕсли;	
		
		СуммаДокументовСБИС = ТаблицаСопоставленияДокументовБезДублей.Итог("Сумма");
		СуммаДокументов1С = ТаблицаСопоставленияДокументовБезДублей.Итог("СуммаДокумента1С");
		
		ОднозначноСопоставлено = ТаблицаСопоставленияДокументовБезДублей.НайтиСтроки(Новый Структура("СопоставлениеОпределено",Истина)).Количество();
		//по восклицательному знаку
		НеоднозначноСопоставлено = ТаблицаСопоставленияДокументовБезДублей.НайтиСтроки(Новый Структура("НайденоКартинка",2)).Количество();
		//по пустой картинке
		НеНайденоПодходящих = ТаблицаСопоставленияДокументовБезДублей.НайтиСтроки(Новый Структура("НайденоКартинка",0)).Количество();
	Иначе
		Для Каждого ДокументСтрока из ТаблицаСопоставленияДокументов Цикл
			Если ДокументСтрока.Отмечен Тогда
				СуммаДокументовСБИС = СуммаДокументовСБИС + ДокументСтрока.Сумма;
				СуммаДокументов1С   = СуммаДокументов1С   + ДокументСтрока.СуммаДокумента1С;
				ОднозначноСопоставлено = ОднозначноСопоставлено + ?(ДокументСтрока.СопоставлениеОпределено=Истина,1,0);
				//по восклицательному знаку
				НеоднозначноСопоставлено = НеоднозначноСопоставлено + ?(ДокументСтрока.НайденоКартинка=2,1,0);
				//по пустой картинке
				НеНайденоПодходящих = НеНайденоПодходящих + ?(ДокументСтрока.НайденоКартинка=0,1,0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Дельта = СуммаДокументовСБИС - СуммаДокументов1С;
	Дельта = ?(Дельта<0,-Дельта,Дельта);
	Итоги.Вставить( "Дельта",Дельта );
	Итоги.Вставить( "СуммаДокументов1С",СуммаДокументов1С );
	Итоги.Вставить( "СуммаДокументовСБИС",СуммаДокументовСБИС );
	
	Итоги.Вставить( "ОднозначноСопоставлено", ОднозначноСопоставлено );
	Итоги.Вставить( "НеоднозначноСопоставлено", НеоднозначноСопоставлено );
	Итоги.Вставить( "НеНайденоПодходящих", НеНайденоПодходящих );

	Возврат Итоги;
	
КонецФункции

//дельта больше допустимой погрешности
&НаКлиенте
Процедура ОтметитьСРасхождениями(Команда)
	
	МассивВложений = ТаблицаСопоставленияДокументов.НайтиСтроки(Новый Структура("ЕстьРасхождение",Истина));
	Для Каждого Вложение Из МассивВложений Цикл
		Вложение.Отмечен = Истина;
	КонецЦикла;
	МассивВложений = ТаблицаСопоставленияДокументов.НайтиСтроки(Новый Структура("ЕстьРасхождение",Ложь));
	Для Каждого Вложение Из МассивВложений Цикл
		Вложение.Отмечен = Ложь;
	КонецЦикла;
	
КонецПроцедуры

//дельта отсутствует или меньше допустимой погрешности
&НаКлиенте
Процедура ОтметитьБезРасхождений(Команда)
	МассивВложений = ТаблицаСопоставленияДокументов.НайтиСтроки(Новый Структура("ЕстьРасхождение",Ложь));
	Для Каждого Вложение Из МассивВложений Цикл
		Вложение.Отмечен = Истина;
	КонецЦикла;
	МассивВложений = ТаблицаСопоставленияДокументов.НайтиСтроки(Новый Структура("ЕстьРасхождение",Истина));
	Для Каждого Вложение Из МассивВложений Цикл
		Вложение.Отмечен = Ложь;
	КонецЦикла;
КонецПроцедуры

//снять все отметки
&НаКлиенте
Процедура УдалитьОтметки(Команда)
	Для Каждого ДокументСтрока из ТаблицаСопоставленияДокументов Цикл
		ДокументСтрока.Отмечен = Ложь;
	КонецЦикла;
КонецПроцедуры

//только для сохраненных сопоставлений (синяя иконка)
&НаКлиенте
Процедура ОтметитьСопоставленныеНажатие(Команда)
	Для Каждого ДокументСтрока из ТаблицаСопоставленияДокументов Цикл
		//Если ДокументСтрока.СопоставлениеОпределено = Истина Тогда
		Если ДокументСтрока.СопоставлениеСохранено = Истина Тогда
			ДокументСтрока.Отмечен = Истина;
		Иначе
			ДокументСтрока.Отмечен = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеПриИзменении(Элемент)
	// Процедура отмечает/снимает отметку со списка документов	
	Для Каждого ДокументСтрока из ТаблицаСопоставленияДокументов Цикл
		ДокументСтрока.Отмечен = ?(ДокументСтрока.Дубль,ДокументСтрока.Отмечен,ОтметитьВсе);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДокументовДокумент1СОтметитьВсеПриИзменении(Элемент)
	ОтметитьВсе = НЕ ОтметитьВсе;
	ОтметитьВсеПриИзменении(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выбор сопоставленного документа

//Выбор документа для сопоставления
&НаКлиенте
Процедура ТаблицаСопоставленияДокументовДокумент1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьОграничениеТипа(Элемент);
	
	Попытка
		Если Элемент.ОграничениеТипа.Типы().Количество() = 1 Тогда
			СтандартнаяОбработка = Ложь;
			ТипДокумента = Элемент.ОграничениеТипа.Типы()[0];
			ИмяДокумента = ОпределитьИмяДокумента(ТипДокумента);
			оДокумент = сбисЭлементФормы(ЭтаФорма,"ТаблицаСопоставленияДокументов").ТекущиеДанные.СоставПакета[0].Значение;
			ОтборКонтрагент = МестныйКэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(МестныйКэш.Ини.Конфигурация,оДокумент.Контрагент);
			Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
				ЗначениеОтбора = Новый Структура();
				Если ОтборКонтрагент<>Ложь Тогда
					ЗначениеОтбора.Вставить("Контрагент",ОтборКонтрагент);
				КонецЕсли;
				ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
				формаВыбора = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаВыбора",ПараметрыВыбора,Элемент);
			Иначе
				ФормаВыбора = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаВыбора",,Элемент);
				Если ОтборКонтрагент<>Ложь Тогда
					ФормаВыбора.Отбор.Контрагент.Установить(ОтборКонтрагент, Истина);
				КонецЕсли;
			КонецЕсли;
			формаВыбора.Открыть();
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		СтандартнаяОбработка = Истина;
	КонецПопытки
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьИмяДокумента(ТипДокумента)
	Возврат Метаданные.НайтиПоТипу(ТипДокумента).Имя
КонецФункции

// Процедура устанавливает ограничения типов документов 1С, которые можно выбрать для сопоставления	
&НаКлиенте
Процедура УстановитьОграничениеТипа(Элемент)
	МассивТипов = Новый Массив;
	Если сбисЭлементФормы(ЭтаФорма,"ТаблицаСопоставленияДокументов").ТекущиеДанные<>Неопределено Тогда
		Для Каждого Тип1С Из сбисЭлементФормы(ЭтаФорма,"ТаблицаСопоставленияДокументов").ТекущиеДанные.Типы1С Цикл
			Если Тип1С.Значение<>"''" Тогда
				МассивТипов.Добавить(Тип("ДокументСсылка."+Тип1С.Значение));
			КонецЕсли;
		КонецЦикла;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
КонецПроцедуры

// При открытии на просмотр СФ, после закрытия формы документа значение исчезает из таблицы, т.к. при закрытии
// формы СФ вызывается ОповеститьОВыборе, при этом в ВыбранноеЗначение лежит структура, а не ссылка на документ
// Чтобы документ не исчезал, пришлось написать обработку выбора
&НаКлиенте
Процедура ТаблицаСопоставленияДокументовДокумент1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Тип") Тогда
		Попытка
			СтандартнаяОбработка = Ложь;
			ИмяДокумента = ОпределитьИмяДокумента(ВыбранноеЗначение);
			
			оДокумент = сбисЭлементФормы(ЭтаФорма,"ТаблицаСопоставленияДокументов").ТекущиеДанные.СоставПакета[0].Значение;
			ОтборКонтрагент = МестныйКэш.ОбщиеФункции.НайтиКонтрагентаИзДокументаСБИС(МестныйКэш.Ини.Конфигурация,оДокумент.Контрагент);
			Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
				ЗначениеОтбора = Новый Структура();
				Если ОтборКонтрагент<>Ложь Тогда
					ЗначениеОтбора.Вставить("Контрагент",ОтборКонтрагент);
				КонецЕсли;
				ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
				формаВыбора = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаВыбора",ПараметрыВыбора,Элемент);
			Иначе
				ФормаВыбора = ПолучитьФорму("Документ."+ИмяДокумента+".ФормаВыбора",,Элемент);
				Если ОтборКонтрагент<>Ложь Тогда
					ФормаВыбора.Отбор.Контрагент.Установить(ОтборКонтрагент, Истина);
				КонецЕсли;
			КонецЕсли;
			формаВыбора.Открыть();
		Исключение
			Ошибка = ОписаниеОшибки();
			СтандартнаяОбработка = Истина;
		КонецПопытки	
	КонецЕсли;
КонецПроцедуры

// после выбора докумета 1С необходимо пересчитать сумму и дельту, проставить новую картинку, обновить копию
&НаКлиенте
Функция сбисПослеСопоставленияДокумента(Результат, ПараметрыПослеСопоставления=Неопределено) Экспорт
	
	Если Результат<>Ложь и Результат<>Неопределено Тогда
		ЭлементТаблицаСопоставленияДокументов = сбисЭлементФормы(ЭтаФорма,"ТаблицаСопоставленияДокументов"); 
		ЭлементТаблицаСопоставленияДокументов.ТекущиеДанные.Документ1С = Результат;
		ЭлементТаблицаСопоставленияДокументов.ТекущиеДанные.СопоставлениеОпределено = Истина;
		ЭлементТаблицаСопоставленияДокументов.ТекущиеДанные.НайденоКартинка = 3;
		РассчитатьДельтуИСуммуДокумента1С(ЭлементТаблицаСопоставленияДокументов.ТекущиеДанные);
		ОбновитьЗначенияВКопииТаблицыСопоставления(ЭлементТаблицаСопоставленияДокументов.ТекущиеДанные);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаСопоставленияДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	сбисТекущийДанные = Элемент.ТекущиеДанные;
	Если Колонка.Имя = "ТаблицаСопоставленияДокументовДокументСБИС" Тогда
		МестныйКэш.ГлавноеОкно.ОткрытьДокументОнлайнПоПакету(сбисТекущийДанные.СоставПакета[0].Значение, МестныйКэш);
	ИначеЕсли Колонка.Имя<>"ТаблицаСопоставленияДокументовОтмечен" Тогда
		ФормаСопоставленияДокументов = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаСопоставитьСДокументом1С",,,ЭтаФорма);
		оДок = Новый Структура("Типы1С, Документ1С, ТипСБИС, ДокументСБИСНазвание, СписокПодходящихДокументов");
		ЗаполнитьЗначенияСвойств(оДок, сбисТекущийДанные);						
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			сбисПослеСопоставленияДокумента(ФормаСопоставленияДокументов.Показать(МестныйКэш, оДок, Ложь));
		#Иначе
			ФормаСопоставленияДокументов.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеСопоставленияДокумента",ЭтаФорма);
			ФормаСопоставленияДокументов.Показать(МестныйКэш, оДок, Ложь);
		#КонецЕсли
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДокументовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ1С) И Элемент.ТекущиеДанные.СопоставлениеСохранено = Ложь Тогда
		
		Элемент.ТекущиеДанные.НайденоКартинка = 3;
		Элемент.ТекущиеДанные.СопоставлениеОпределено = Истина;
		РассчитатьДельтуИСуммуДокумента1С(Элемент.ТекущиеДанные);
		ОбновитьЗначенияВКопииТаблицыСопоставления(Элемент.ТекущиеДанные);
		
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Сохранить результат сопоставления

&НаКлиенте
Процедура СохранитьНажатие(Элемент)
	// Процедура сохраняет установленные сопоставления	
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	МассивСтатусРегламент = Новый Массив;
	
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС",МестныйКэш.ФормаРаботыСоСтатусами,"",МестныйКэш);
	фрмУдПар = ГлавноеОкно.сбисНайтиФормуФункции("УдалитьПараметрыДокументаСБИС",МестныйКэш.ФормаРаботыСоСтатусами,"",МестныйКэш);
	Если МестныйКэш.парам.СостояниеЭД тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ДублироватьСостояние");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");

		фрмЭД = МестныйКэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(МестныйКэш, ПараметрыПоиска);
		
		ПараметрыПоиска.Вставить("ИмяФункции",	"УдалитьПараметрыДокументаСБИС");
		фрмУдПарЭД = МестныйКэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(МестныйКэш, ПараметрыПоиска);
	КонецЕсли;
	
	фрмКлиент = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисЗаписатьСопоставленныйДокумент", "РаботаСДокументами1С","",МестныйКэш);
	
	//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)-->  5 +
	Если МестныйКэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
       И (МестныйКэш.Парам.СпособОбмена = 0 ИЛИ МестныйКэш.Парам.СпособОбмена = 3)
	   И МестныйКэш.Ини.Конфигурация.Свойство("СтатусРегламент") Тогда	
		   МассивСтатусРегламент = МестныйКэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(МестныйКэш.Ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)

	
	Для Каждого Строка из ТаблицаСопоставленияДокументов Цикл
		Если Строка.Документ1С<>Неопределено и Не Строка.Документ1С.Пустая() Тогда
			
			//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)-->  6
			Префикс = "";
			СтрокаСоставПакета =  Строка.СоставПакета[0].Значение;
			Если НРЕГ(СтрокаСоставПакета.Направление) = "исходящий" 
				И СтрокаСоставПакета.Свойство("Регламент") 
				И СтрокаСоставПакета.Регламент.Свойство("Название") 
				И НЕ МассивСтатусРегламент.Найти(СтрокаСоставПакета.Регламент.Название)=Неопределено Тогда
				Префикс = СтрокаСоставПакета.Регламент.Название;	
			КонецЕсли;
			//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)
			
			//KES 1178720202 -->
			СопоставлятьДокумент = Истина;
			Если ЗначениеЗаполнено(Строка.Типы1С) Тогда
				ТипДокумента = Строка.Типы1С[0].Значение;
				фрмДопРасчеты = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ДопРасчетыПриСопоставлении","Документ_"+ТипДокумента,"Документ_Шаблон",МестныйКэш);
				//не обсчитанный СоставПакета, при необходимости плучить полный в клиентской функции
				Если фрмДопРасчеты<>Ложь Тогда
					ОтменитьСопоставление = фрмДопРасчеты.ДопРасчетыПриСопоставлении(Строка.Документ1С, Новый Структура("СоставПакета,Кэш",Строка.СоставПакета[0].Значение,МестныйКэш));
		        КонецЕсли;
			КонецЕсли;
			Если СопоставлятьДокумент = Ложь Тогда
				Продолжить;
			КонецЕсли;
			//KES 1178720202 <--
			
			СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", Строка.ИдСБИС,Строка.ИдВложения,Строка.Состояние);
			фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Строка.Документ1С, МестныйКэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
			
			//синий документ
			Строка.НайденоКартинка = 1; 
			Строка.СопоставлениеСохранено = Истина; 
			Строка.СопоставлениеОпределено = Истина;
			Строка.Найдено = 1;
			
			Если МестныйКэш.парам.СостояниеЭД тогда
				СоставПакета=новый структура("Состояние",новый структура());
				СоставПакета.Состояние.вставить("Название",Строка.Состояние);
				СоставПакета.вставить("Идентификатор", 	Строка.ИдСБИС);
				фрмЭД.ДублироватьСостояние(СоставПакета, Строка.Документ1С);
			конецесли;
			Если ЗначениеЗаполнено(Строка.РанееСопоставленныеДокументы1С) Тогда
				Для Каждого РанееСопоставленныйДокумент1С Из Строка.РанееСопоставленныеДокументы1С Цикл
					ПредыдущийДокумент1С = РанееСопоставленныйДокумент1С.Значение;
					Если ПредыдущийДокумент1С<>Строка.Документ1С Тогда // если раньше было сопоставление с другим документом, удаляем его
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус");
						
						//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) -->   7 +
						фрмУдПар.УдалитьПараметрыДокументаСБИСПарам(СтруктураСвойств, ПредыдущийДокумент1С, МестныйКэш.Ини, ГлавноеОкно.КаталогНастроек, Новый Структура("Регламент",Префикс));
						//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)
						
						если МестныйКэш.парам.СостояниеЭД тогда
							фрмУдПарЭД.УдалитьПараметрыДокументаСБИС(СтруктураСвойств, ПредыдущийДокумент1С, МестныйКэш.Ини, ГлавноеОкно.КаталогНастроек);
						конецесли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			РассчитатьДельтуИСуммуДокумента1С(Строка);
			ОбновитьЗначенияВКопииТаблицыСопоставления(Строка);
			
			Если фрмКлиент <> Ложь Тогда
				фрмКлиент.сбисЗаписатьСопоставленныйДокумент(Строка, МестныйКэш);
			КонецЕсли;
			//Строка.ДокументСБИС[0].Значение.Документ1С = Строка.Документ1С;
		Иначе
			Строка.НайденоКартинка = 0; 
			Строка.Найдено = 0;
			Строка.СопоставлениеСохранено = Ложь; 
			Строка.СопоставлениеОпределено = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ФильтрСопоставленияОчистить();

	МестныйКэш.ГлавноеОкно.ОбновитьКонтент();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЗначенияВКопииТаблицыСопоставления(Строка)
	
	СтрокаКопии = ТаблицаСопоставленияДокументовКопия.НайтиСтроки(Новый Структура("ИдентификаторСтроки",Строка.ИдентификаторСтроки));
	СтрокаКопии[0].НайденоКартинка = Строка.НайденоКартинка;
	СтрокаКопии[0].Дельта = Строка.Дельта;
	СтрокаКопии[0].СуммаДокумента1С = Строка.СуммаДокумента1С;
	СтрокаКопии[0].Документ1С = Строка.Документ1С;
	СтрокаКопии[0].СопоставлениеСохранено = Строка.СопоставлениеСохранено;
	СтрокаКопии[0].СопоставлениеОпределено = Строка.СопоставлениеОпределено;
	СтрокаКопии[0].ЕстьРасхождение = Строка.ЕстьРасхождение;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерактивная кнопка

//Выбор действия из переходов ближайшего этапа первого из выделенных пакетов
&НаКлиенте
Процедура ВыполнитьДействиеНажатие(Команда)
	
	//получить этап с переходами с первого отмеченного документа
	ТекущийИдПакета = "";
	Для Каждого ДокументСтрока из ТаблицаСопоставленияДокументов Цикл
		Если ДокументСтрока.Отмечен = Истина Тогда
			ТекущийИдПакета = ДокументСтрока.ИдСБИС;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//нет отмеченных документов. получить с текущего элемента (с выделения)
	Если ТекущийИдПакета = "" Тогда
		Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда	
			ТекущийПакет = ЭтаФорма.ТаблицаСопоставленияДокументов.НайтиПоИдентификатору(ЭтаФорма.Элементы.ТаблицаСопоставленияДокументов.ТекущаяСтрока);
		Иначе
			ТекущийПакет = ЭтаФорма.ЭлементыФормы.ТаблицаСопоставленияДокументов.ТекущаяСтрока; 
		КонецЕсли;
		Если НЕ ТекущийПакет = Неопределено Тогда
			ТекущийИдПакета = ТекущийПакет.ИдСБИС;
		КонецЕсли;
	КонецЕсли;

	Если  ТекущийИдПакета = "" Тогда
		Сообщить("Отсутствуют пакеты для обработки");	
		Возврат;
	КонецЕсли;
	
	СоставПакета = МестныйКэш.Интеграция.ПрочитатьДокумент(МестныйКэш,ТекущийИдПакета);	
	Список = Новый СписокЗначений;
	сч = 0;
	
	Если НЕ (СоставПакета.Свойство("Этап") И СоставПакета.Этап.Количество() > 0) Тогда
		Сообщить("Отсутствуют этапы для перехода");
		Возврат;
	КонецЕсли;
	
	Для Каждого Действие Из СоставПакета.Этап[0].Действие Цикл
		Если Найти(НРег(Действие.Название),"переназначить") Тогда
			Продолжить;
		КонецЕсли;
		Список.Добавить(Действие.Название);
		сч = сч+1;
	КонецЦикла;
	
	//только этап "Переназначить"
	Если сч = 0 Тогда
		Сообщить("Отсутствуют этапы для перехода");
		Возврат;
	КонецЕсли;
	
	ПараметрыДляОбработкиДействия = Новый Структура;
	ПараметрыДляОбработкиДействия.Вставить("Этап",СоставПакета.Этап[0]);
	ПараметрыДляОбработкиДействия.Вставить("Переходы",СоставПакета.Этап[0].Действие);

	//через оповещение для обработки выбора из меню
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатЗакрытия = ВыбратьИзМеню(Список,ЭлементыФормы.ВыполнитьДействие); 
		ВыполнитьДействиеНажатиеЗавершение(РезультатЗакрытия, ПараметрыДляОбработкиДействия);
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ВыполнитьДействиеНажатиеЗавершение",ЭтотОбъект,ПараметрыДляОбработкиДействия); 
		ПоказатьВыборИзМеню(Оповещение,Список,Элементы.ВыполнитьДействие); 
	#КонецЕсли
	
КонецПроцедуры

//Для всех выделенных документов применить (или попытаться) указанное действие
&НаКлиенте
Процедура ВыполнитьДействиеНажатиеЗавершение(РезультатЗакрытия, ПараметрыДляОбработкиДействия)  Экспорт
	
	//нажали мимо выпадающего списка
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мПакеты = ПолучитьПакетыДляОбработки(МестныйКэш.ПараметрыСистемы);
	
	//недостаточно названия перехода
	ВыбранныйПереход = Неопределено;
	Для Каждого Переход из ПараметрыДляОбработкиДействия.Переходы Цикл
		Если РезультатЗакрытия.Значение = Переход.Название Тогда 
			ВыбранныйПереход = Переход;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	//защита от невозможной ситуации, т.к. результат закрытия всегда есть в массиве доступных переходов
	Если ВыбранныйПереход = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//общая функция после выбора результата на любой интерактивной кнопке
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеВыбораПерехода", "РаботаСДокументами1С","",МестныйКэш);
	СписокПакетов = Новый СписокЗначений;
	СписокИНН = Новый СписокЗначений;

	флагПервыйПакет = 1;
	Для Каждого Пакет из мПакеты Цикл
		
		//для открытия "ФормаПереходы" при необходимости
		Если флагПервыйПакет = 1 Тогда
			ПервыйПакет = Пакет;
		КонецЕсли;
		
		СписокПакетов.Добавить(Пакет);
		
		ИННОрг = ?(Пакет.НашаОрганизация.Свойство("СвФЛ"),Пакет.НашаОрганизация.СвФЛ.ИНН,Пакет.НашаОрганизация.СвЮЛ.ИНН);
		Если СписокИНН.НайтиПоЗначению("ИННОрг") = Неопределено Тогда
			СписокИНН.Добавить(ИННОрг);
		КонецЕсли;
		флагПервыйПакет = 0;
	КонецЦикла;
	
	ПараметрыПослеВыбораПерехода = Новый Структура;
	ПараметрыПослеВыбораПерехода.Вставить("СписокПакетов",СписокПакетов);
	ПараметрыПослеВыбораПерехода.Вставить("СписокИНН",СписокИНН);
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		//Функция с этой формы, которая будет выполнена для обработки результата
		ПараметрыПослеВыбораПерехода.Вставить("ОповещениеРезультатДействия", Новый ОписаниеОповещения("ОбработатьРезультатДействия",ЭтаФорма,Новый Структура));
	#КонецЕсли	
	
	//KES 03.05.2019 переделываю работу с открытием формы на более универсальную на основе обработки 35
	//////стандартная форма для указания исполнителя/комментария на основании первого пакета. 
	////Если ВыбранныйПереход.ТребуетКомментария = "Да"
	////ИЛИ (ВыбранныйПереход.Свойство("ТребуетИсполнителя") И ВыбранныйПереход.ТребуетИсполнителя = "Да") Тогда                                             
	////	//Результат может содержать Действие, Исполнитель, Комментарий
	////	ФормаПереходы = сбисПолучитьФорму("ФормаПереходы");
	////	Результат = ФормаПереходы.Показать(МестныйКэш, ПервыйПакет, ВыбранныйПереход);
	////	фрм.сбисПослеВыбораПерехода(Новый Структура("Действие,Комментарий",Результат.Действие, Результат.Комментарий), ПараметрыПослеВыбораПерехода);
	////Иначе
	////	фрм.сбисПослеВыбораПерехода(Новый Структура("Действие,Комментарий",ВыбранныйПереход, ""), ПараметрыПослеВыбораПерехода);
	////КонецЕсли;
	
	Если ВыбранныйПереход.ТребуетКомментария = "Да"
	ИЛИ (ВыбранныйПереход.Свойство("ТребуетИсполнителя") И ВыбранныйПереход.ТребуетИсполнителя = "Да") Тогда  
		РезультатДействия = ОткрытьФормуПереходов(ВыбранныйПереход,ПервыйПакет,фрм,ПараметрыПослеВыбораПерехода);
	Иначе
		//не требует перехода
		РезультатДействия = фрм.сбисПослеВыбораПерехода(Новый Структура("Действие,Комментарий",ВыбранныйПереход, ""), ПараметрыПослеВыбораПерехода);
	КонецЕсли;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОбработатьРезультатДействия(РезультатДействия,Неопределено);
	#КонецЕсли
		
КонецПроцедуры 

//Форма переходов
&НаКлиенте
Функция ОткрытьФормуПереходов(ВыбранноеДействие,СоставПакета,фрмПослеВыбораПерехода,ПараметрыПослеВыбораПерехода)
	
	//KES 03.05.2019 не могу воспользоваться новой функцией "ВыбратьДействиеСПакетом", т.к. передаются свои параметры
	ПараметрыПереходов = Новый Структура("СоставПакета, Конфигурация, ВыбранноеДействие", СоставПакета, МестныйКэш.Ини.Конфигурация,ВыбранноеДействие);
	ФормаПереходов = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПереходы");
	Если ФормаПереходов = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	ФормаПереходов.МестныйКэш = МестныйКэш;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПерехода = ФормаПереходов.сбисВыбратьДействие(МестныйКэш, ПараметрыПереходов);
		Если НЕ( ТипЗнч(РезультатПерехода) = Тип("Структура") И РезультатПерехода.Свойство("Действие") ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат фрмПослеВыбораПерехода.сбисПослеВыбораПерехода(Новый Структура("Действие,Комментарий",РезультатПерехода.Действие, РезультатПерехода.Комментарий), ПараметрыПослеВыбораПерехода);
	#Иначе
		ФормаПереходов.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеВыбораПерехода",фрмПослеВыбораПерехода,ПараметрыПослеВыбораПерехода);
		ФормаПереходов.сбисВыбратьДействие(МестныйКэш, ПараметрыПереходов);
	#КонецЕсли

КонецФункции

//Пакеты по выделенным документам
&НаСервере
Функция  ПолучитьПакетыДляОбработки(ПараметрыПолучения) 
	
	//чтобы в ТЗ было только одно вхождение пакета, по которому стоит хотя бы одна отметка
	ОтборОтмечен = Новый Структура("Отмечен,Дубль",Истина,Ложь);
	Если ПараметрыПолучения.Клиент.УправляемоеПриложение Тогда
		Копия = ДанныеФормыВЗначение(ТаблицаСопоставленияДокументов, Тип("ТаблицаЗначений")).Скопировать(ОтборОтмечен);
	Иначе
		Копия = ТаблицаСопоставленияДокументов.Скопировать(ОтборОтмечен);
	КонецЕсли;
	Копия.Свернуть("ИдСБИС");
	
	//Если ничего не отмечено - отработать по текущей записи
	Если Копия.Количество() = 0 Тогда
		Если ПараметрыПолучения.Клиент.УправляемоеПриложение Тогда	
			ТекущаяЗапись = ТаблицаСопоставленияДокументов.НайтиПоИдентификатору(ЭтаФорма.Элементы.ТаблицаСопоставленияДокументов.ТекущаяСтрока);
		Иначе
			ТекущаяЗапись = ЭтаФорма.ЭлементыФормы.ТаблицаСопоставленияДокументов.ТекущаяСтрока;
		КонецЕсли;
		Для Каждого ДокументСтрока из ТаблицаСопоставленияДокументов Цикл
			Если ТекущаяЗапись.ИдСБИС = ДокументСтрока.ИдСБИС Тогда
				ДокументСтрока.Отмечен = Истина;
			КонецЕсли;
		КонецЦикла;
		СоставПакета = Новый Массив;
		СоставПакета.Добавить(ТекущаяЗапись.СоставПакета[0].Значение);
		Возврат СоставПакета;	
		
	КонецЕсли;
	
	//Если отметки есть - сфорировать массив уникальных пакетов и отметить все недостающие вложения
	мСписокПакетов = Новый Массив;
	Для Каждого СтрокаКопии Из Копия Цикл
		
		мВложенияПакета = ТаблицаСопоставленияДокументов.НайтиСтроки(Новый Структура("ИдСБИС",СтрокаКопии.ИдСБИС));
		Для счВложение = 0 По мВложенияПакета.Количество() - 1 Цикл
			Если счВложение = 0 Тогда
				мСписокПакетов.Добавить(мВложенияПакета[счВложение].СоставПакета[0].Значение);
			КонецЕсли;
			мВложенияПакета[счВложение].Отмечен = Истина;
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат мСписокПакетов;


КонецФункции	

//После выполнения действия
&НаКлиенте
Функция ОбработатьРезультатДействия(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ( ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Строки") ) Тогда
		Возврат Неопределено;
	КонецЕсли;

	//вычитать актуальное состояние
	фрмКартинки = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисИндексКартинкиПоСтатусуЭД", "РаботаСДокументами1С","",МестныйКэш);
	Для Каждого Выполнено Из Результат.Строки.Выполнено Цикл
		СоставПакета = МестныйКэш.Интеграция.ПрочитатьДокумент(МестныйКэш,Выполнено.Ключ); 
		Отбор = Новый Структура("ИдСБИС",Выполнено.Ключ);
		мСтрокиКоллекцииНовыйСтатус = ТаблицаСопоставленияДокументов.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаКоллекции Из мСтрокиКоллекцииНовыйСтатус Цикл
	 		СтрокаКоллекции.Статус =  фрмКартинки.сбисИндексКартинкиПоСтатусуЭД(СоставПакета.Состояние.Название);
			СтрокаКопии = ТаблицаСопоставленияДокументовКопия.НайтиСтроки(Новый Структура("ИдентификаторСтроки",СтрокаКоллекции.ИдентификаторСтроки));
			СтрокаКопии[0].Статус = СтрокаКоллекции.Статус;
			
			//для выполненного действия этап точно был
			СтрокаКоллекции.СоставПакета[0].Значение.Удалить("Этап");
			СтрокаКопии[0].СоставПакета[0].Значение.Удалить("Этап");
			//на случай, если подряд будем переводить по цепочке этапов
			Если СоставПакета.Свойство("Этап") Тогда
				СтрокаКоллекции.СоставПакета[0].Значение.Вставить("Этап",СоставПакета.Этап);
				СтрокаКопии[0].СоставПакета[0].Значение.Вставить("Этап",СоставПакета.Этап);
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;   
	
	МестныйКэш.ГлавноеОкно.ОбновитьКонтент();
	
КонецФункции		

////////////////////////////////////////////////////////////////////////////////
// Фильтр (без возможности заплатки)

// Закрывает панель фильтра, Только ОФ	
&НаКлиенте
Процедура ЗакрытьФормуФильтра(Команда=Неопределено)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыФормы.ПанельУстановкиФильтра.Видимость = Ложь;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФильтра(Команда=Неопределено)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыФормы.ПанельУстановкиФильтра.Видимость = Истина;
		Если ЭлементыФормы.ФильтрДельта.СписокВыбора.Количество() = 0 Тогда
			//ЭлементыФормы.ФильтрДельта.СписокВыбора.Добавить(0, "   ");
			ЭлементыФормы.ФильтрДельта.СписокВыбора.Добавить(1, "С расхождением");
			ЭлементыФормы.ФильтрДельта.СписокВыбора.Добавить(2, "Без расхождения");
		КонецЕсли;
		
		Если ЭлементыФормы.ФильтрСтатусСопоставления.СписокВыбора.Количество() = 0 Тогда
			//ЭлементыФормы.ФильтрСопоставление.СписокВыбора.Добавить(0, "   ");
			ЭлементыФормы.ФильтрСтатусСопоставления.СписокВыбора.Добавить(1, "Сопоставление не сохранено");
			ЭлементыФормы.ФильтрСтатусСопоставления.СписокВыбора.Добавить(2, "Сопоставление сохранено");
			ЭлементыФормы.ФильтрСтатусСопоставления.СписокВыбора.Добавить(3, "Сопоставление не найдено");
		КонецЕсли;
	#Иначе
		фрм = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаФильтрСопоставления");
		ОткрытьФорму(фрм.ИмяФормы,,ЭтаФорма,,,,Новый ОписаниеОповещения("сбисПрименитьФильтрСопоставления",ЭтаФорма));
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура сбисПрименитьФильтрСопоставления(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	
	Если ФильтрДельта = 1 Тогда
		Отбор.Вставить("ЕстьРасхождение",Истина);
	ИначеЕсли ФильтрДельта = 2 Тогда
		Отбор.Вставить("ЕстьРасхождение",Ложь);
	КонецЕсли;
	
	Если ФильтрСтатусСопоставления = 1 Тогда //сопоставление не сохранено
		Отбор.Вставить("СопоставлениеСохранено",Ложь);
	ИначеЕсли ФильтрСтатусСопоставления = 2 Тогда //сопоставление сохранено
		Отбор.Вставить("СопоставлениеСохранено",Истина);
	ИначеЕсли ФильтрСтатусСопоставления = 3 Тогда //сопоставление не найдено
		Отбор.Вставить("СопоставлениеОпределено",Ложь);
	КонецЕсли;
	
	ЭлементОчистить = сбисЭлементФормы(ЭтаФорма,"КнопкаОчиститьФильтр");
	Если Отбор.Количество() > 0 Тогда
		ЭлементОчистить.Видимость = "Истина";
	Иначе
		ЭлементОчистить.Видимость = "Ложь";
	КонецЕсли;

	СобратьПредставлениеФильтра();  
	ПрименитьФильтрНаСервере(Отбор, МестныйКэш.ПараметрыСистемы);
	ЗакрытьФормуФильтра();
КонецПроцедуры

&НаСервере
Процедура ПрименитьФильтрНаСервере(Отбор, ПараметрыФильтра)
	
	//ищем всегда по первоначальной копии, вариант синтаксиса: Скопировать(<ПараметрыОтбора>) 
	ТаблицаСопоставленияДокументов.Очистить(); 
	Если ПараметрыФильтра.Клиент.УправляемоеПриложение Тогда
		ТаблицаСопоставленияДокументовОтбор = ТаблицаСопоставленияДокументовКопия.Выгрузить(Отбор);
		ЭтаФорма.ТаблицаСопоставленияДокументов.Загрузить(ТаблицаСопоставленияДокументовОтбор)
	ИначеЕсли Отбор.Количество() Тогда
		ТаблицаСопоставленияДокументов = ТаблицаСопоставленияДокументовКопия.Скопировать(Отбор);
	Иначе
		ТаблицаСопоставленияДокументов = ТаблицаСопоставленияДокументовКопия.Скопировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСопоставленияПоУмолчанию()
	ФильтрДельта = 0;
	ФильтрСтатусСопоставления = 1;
	ЭлементОчистить = сбисЭлементФормы(ЭтаФорма,"КнопкаОчиститьФильтр");
	ЭлементОчистить.Видимость = "Истина";
	СобратьПредставлениеФильтра();
	сбисПрименитьФильтрСопоставления(Истина, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСопоставленияОчистить()
	
	ЭлементОчистить = сбисЭлементФормы(ЭтаФорма,"КнопкаОчиститьФильтр");
	ЭлементОчистить.Видимость = "Ложь";
	
	ФильтрДельта = 0;
	ФильтрСтатусСопоставления = 0;
	ПанельФильтрСопоставленияОчистить();
	СобратьПредставлениеФильтра();
	сбисПрименитьФильтрСопоставления(Истина, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСопоставленияСбросСтатуса()
	ФильтрСтатусСопоставления = 0;
	СобратьПредставлениеФильтра();
	сбисПрименитьФильтрСопоставления(Истина, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПанельФильтрСопоставленияОчистить()
	ФильтрДельта = 0;
	ФильтрСтатусСопоставления = 0;
КонецПроцедуры

&НаКлиенте
Процедура СобратьПредставлениеФильтра()
	ПредставлениеФильтра="";
	Если ФильтрДельта = 1 Тогда
		ПредставлениеФильтра = "с расхождениями";
	ИначеЕсли ФильтрДельта = 2 Тогда 
		ПредставлениеФильтра = "без расхождений";
	КонецЕсли;
	 	
	Если ФильтрСтатусСопоставления = 1 Тогда //сопоставление не сохранено
		ПредставлениеФильтра = ?(ПредставлениеФильтра="","",ПредставлениеФильтра+", ")+ "сопоставление не сохранено";
	ИначеЕсли ФильтрСтатусСопоставления = 2 Тогда //сопоставление сохранено
		ПредставлениеФильтра = ?(ПредставлениеФильтра="","",ПредставлениеФильтра+", ") + "сопоставление сохранено";
	ИначеЕсли ФильтрСтатусСопоставления = 3 Тогда //сопоставление не определено
		ПредставлениеФильтра = ?(ПредставлениеФильтра="","",ПредставлениеФильтра+", ") + "сопоставление не найдено";
	КонецЕсли;
	
	Если ПредставлениеФильтра = "" Тогда
		 ПредставлениеФильтра = "Нужно отобрать?";
	КонецЕсли;
	ЭлементТекущееЗначениеФильтра = сбисЭлементФормы(ЭтаФорма,"ТекущееЗначениеФильтра");
	ЭлементТекущееЗначениеФильтра.Заголовок = ПредставлениеФильтра;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	// Вставить содержимое обработчика.
	ТекущаяСтрока = сбисЭлементФормы(ЭтаФорма, "ТаблицаСопоставленияДокументов").ТекущиеДанные;
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон", МестныйКэш);	
	фрм.ПоказатьДокумент(МестныйКэш, ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент1С(Команда)
	// Вставить содержимое обработчика.
	сбисДокументОткрыть = сбисЭлементФормы(ЭтаФорма, "ТаблицаСопоставленияДокументов").ТекущиеДанные.Документ1С;
	Если Не ЗначениеЗаполнено(сбисДокументОткрыть) Тогда
		Сообщить("Нет связанного документа 1С");
		Возврат;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ОткрытьЗначение(сбисДокументОткрыть);
	#Иначе
		ПоказатьЗначение(,сбисДокументОткрыть);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда)
	// Вставить содержимое обработчика.
	ТекущаяСтрока = сбисЭлементФормы(ЭтаФорма, "ТаблицаСопоставленияДокументов").ТекущиеДанные;
	Если ТекущаяСтрока<>Неопределено Тогда
		фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ОткрытьДокументОнлайнПоПакету","ФормаГлавноеОкно","",МестныйКэш);
		фрм.ОткрытьДокументОнлайнПоПакету(ТекущаяСтрока.СоставПакета[0].Значение, МестныйКэш);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДиск(Команда)
	мПакеты = ПолучитьПакетыДляОбработки(МестныйКэш.ПараметрыСистемы);
	МестныйКэш.ОбщиеФункции.СохранитьПакетыНаДиск(МестныйКэш, мПакеты);
КонецПроцедуры


