&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
	// Функция формирует структуру выгружаемого файла и добавляет его в состав пакета
	Попытка	
		Контекст.Вставить("ТаблДок",Новый Структура());
		Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.Вставить("СтрТабл",Новый Массив);
		Контекст.Вставить("ИтогСумма",0);
		Контекст.Вставить("ИтогСуммаБезНалога",0);
		Контекст.Вставить("ИтогСуммаНДС",0);
		Контекст.Вставить("ИтогКоличество",0);
		Контекст.Вставить("ИтогБрутто",0);
		Контекст.Вставить("ИтогНетто",0);
		Контекст.Вставить("ИтогКолМест",0);
		
		Контекст.Вставить("ПредИтогСумма",0);
		Контекст.Вставить("ПредИтогСуммаБезНалога",0);
		Контекст.Вставить("ПредИтогСуммаНДС",0);
		Контекст.Вставить("НДСИсчисляетсяАгентом", Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина);
		НоменклатураКодКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначение("НоменклатураКодКонтрагента", Контекст.ФайлДанные,Кэш);  // надо сопоставить номенклатуру перед отправкой
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Контекст.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		
		ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст);
		Если Контекст.ТаблДок.СтрТабл.Количество() = 0 Тогда//нет такого документа
			Возврат Истина;
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мТаблДетал") Тогда
			Контекст.Вставить("ТаблДетал",Новый Структура());                 
			Контекст.ТаблДетал.Вставить("СтрТабл",Новый Массив);	
			ПолучитьДетализациюТабЧастиДокумента1С(Кэш,Контекст);
		КонецЕсли;
		
		ИтогТабл=Новый Структура;
		ИтогТабл.Вставить("Кол_во", Формат(Контекст.ИтогКоличество, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000"));
		ИтогТабл.Вставить("Сумма", Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		ИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
		ИтогТабл.Вставить("НДС",Новый Структура);
		ИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
		Если Контекст.ИтогКолМест>0 Тогда
			ИтогТабл.Вставить("Упаковка",Новый Структура);
			ИтогТабл.Упаковка.Вставить("КолМест",Формат(Контекст.ИтогКолМест, "ЧЦ=17; ЧДЦ=0; ЧРД=.; ЧГ=0; ЧН=0"));	
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("ЕдиницаИзмеренияВеса") Тогда
			ЕдиницаИзмеренияВеса = Контекст.ФайлДанные.ЕдиницаИзмеренияВеса;
			Если Контекст.ИтогБрутто > 0 Тогда
				ИтогТаблБрутто = Новый Структура;
				ИтогТаблБрутто.Вставить("Кол_во", Формат(Контекст.ИтогБрутто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогБрутто);
					ИтогТаблБрутто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблБрутто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Брутто", ИтогТаблБрутто);
			КонецЕсли;
			
			Если Контекст.ИтогНетто > 0 Тогда
				ИтогТаблНетто = Новый Структура;
				ИтогТаблНетто.Вставить("Кол_во", Формат(Контекст.ИтогНетто, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.00"));
				Если Контекст.ФайлДанные.Свойство("МассаИтогПрописью") Тогда
					Контекст.ФайлДанные.Вставить("МассаИтог", Контекст.ИтогНетто);
					ИтогТаблНетто.Вставить("Прописью", Кэш.ОбщиеФункции.РассчитатьЗначение("МассаИтогПрописью", Контекст.ФайлДанные,Кэш));
				Иначе	
					ИтогТаблНетто.Вставить("Прописью", ЧислоПрописью(Контекст.ИтогНетто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".");
				КонецЕсли;	
				ИтогТабл.Вставить("Нетто", ИтогТаблНетто);
			КонецЕсли;
		КонецЕсли;
		
		Если Контекст.Свойство("ЕстьПредыдущиеДанные") Тогда
			ПредИтогТабл=Новый Структура;
			ПредИтогТабл.Вставить("Сумма", Формат(Контекст.ПредИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ПредИтогТабл.Вставить("СуммаБезНал", Формат(Контекст.ПредИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
			ПредИтогТабл.Вставить("НДС",Новый Структура);
			ПредИтогТабл.НДС.Вставить("Сумма",Формат(Контекст.ПредИтогСуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ИтогТабл.Вставить("ПредИтогТабл",ПредИтогТабл);
		КонецЕсли;
		
		//Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
		
		
		Док  = Новый Структура;
		Док.Вставить("Файл",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Файл",Контекст.ФайлДанные,Док.Файл);
		Док.Файл.Вставить("Документ",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Документ",Контекст.ФайлДанные,Док.Файл.Документ);
		Док.Файл.Документ.Вставить("Основание",Новый Массив);
		
		Валюта =  Кэш.ОбщиеФункции.РассчитатьЗначение("Валюта_КодОКВ", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Валюта) Тогда
			Док.Файл.Документ.Вставить("Валюта",Новый Структура);
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Валюта",Контекст.ФайлДанные,Док.Файл.Документ.Валюта);
		КонецЕсли;
		
		Отправитель = "";
		Получатель = "";
		ОтправительРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Отправитель_Роль", Контекст.ФайлДанные, Кэш);
		ПолучательРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Получатель_Роль", Контекст.ФайлДанные, Кэш);
		Если Не ЗначениеЗаполнено(ОтправительРоль) Тогда
			ОтправительРоль = "Отправитель";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолучательРоль) Тогда
			ПолучательРоль = "Получатель";
		КонецЕсли;
		Если Контекст.ФайлДанные.Свойство("мСторона") Тогда
			Для Каждого Параметр Из Контекст.ФайлДанные.мСторона Цикл
				Если Параметр.Значение.Свойство("Роль") Тогда
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Роль",Параметр.Значение,Кэш);
				Иначе
					Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Сторона_Роль",Параметр.Значение,Кэш);
				КонецЕсли;
				Если Роль = ОтправительРоль Тогда
					Сертификат = Кэш.ОбщиеФункции.РассчитатьЗначение("Сертификат",Параметр.Значение,Кэш);
				КонецЕсли;
				Сторона = Кэш.ОбщиеФункции.ПолучитьСторону(Кэш,Параметр.Значение);     //?????
				Если Сторона<>Неопределено Тогда
					Док.Файл.Документ.Вставить(Роль,Сторона);
				КонецЕсли;
			КонецЦикла;
			Если Не Док.Файл.Документ.Свойство(ПолучательРоль) Тогда
				Сообщить("Не удалось определить ИНН получателя документа "+строка(Контекст.Документ));
				Возврат Ложь;
			КонецЕсли;
			Если Не Док.Файл.Документ.Свойство(ОтправительРоль) Тогда
				Сообщить("Не удалось определить ИНН отправителя документа "+строка(Контекст.Документ));
				Возврат Ложь;
			КонецЕсли;
			// Если Грузоотправитель и грузополучатель нужны, но они не попали в файл, то берем их с отправителя и получателя
			Если Не Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") или (Контекст.Свойство("ЗаполнятьГрузотпрГрузполуч") и Контекст.ЗаполнятьГрузотпрГрузполуч = Истина) Тогда
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузоотправитель") и Не Док.Файл.Документ.Свойство("Грузоотправитель") и Док.Файл.Документ.Свойство(ОтправительРоль) Тогда
					Док.Файл.Документ.Вставить("Грузоотправитель",Новый Структура);		
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузоотправитель,Док.Файл.Документ[ОтправительРоль]);
				КонецЕсли;
				Если Контекст.ФайлДанные.мСторона.Свойство("Грузополучатель") и Не Док.Файл.Документ.Свойство("Грузополучатель") и Док.Файл.Документ.Свойство(ПолучательРоль) Тогда
					Док.Файл.Документ.Вставить("Грузополучатель",Новый Структура);		
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Док.Файл.Документ.Грузополучатель,Док.Файл.Документ[ПолучательРоль]);
				КонецЕсли;
			КонецЕсли;
			Отправитель = Кэш.ОбщиеФункции.СбисСкопироватьОбъект(Док.Файл.Документ[ОтправительРоль]); 
			Получатель = Док.Файл.Документ[ПолучательРоль];
		КонецЕсли;
		Если Док.Файл.Свойство("Имя") Тогда
			Если Контекст.ФайлДанные.Свойство("мСторона") и Док.Файл.Документ[ПолучательРоль].Свойство("Идентификатор") и Док.Файл.Документ[ОтправительРоль].Свойство("Идентификатор") Тогда
				Док.Файл.Имя = Док.Файл.Имя + Док.Файл.Документ[ПолучательРоль].Идентификатор+"_"+Док.Файл.Документ[ОтправительРоль].Идентификатор;
			КонецЕсли;
			Док.Файл.Имя = Док.Файл.Имя+"_"+Формат(ТекущаяДата(),"ДФ=ггггММдд")+"_"+строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		
		Если Контекст.ФайлДанные.Свойство("мОснование") Тогда
			Для Каждого Параметр Из Контекст.ФайлДанные.мОснование Цикл
				Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
					Для Каждого Элемент Из Параметр.Значение Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент);
						Основание = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",Элемент,Основание);
						Док.Файл.Документ.Основание.Добавить(Основание);	
					КонецЦикла;
				Иначе
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Параметр.Значение);
					Основание = Новый Структура();
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",Контекст.ФайлДанные,Основание);
					Док.Файл.Документ.Основание.Добавить(Основание);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мПараметр") Тогда
			Док.Файл.Документ.Вставить("Параметр",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мПараметр Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				Параметр = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст.ФайлДанные,Параметр);
				Док.Файл.Документ.Параметр.Добавить(Параметр);
			КонецЦикла;
		КонецЕсли;
		
		ОтветственныйСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруОтветственного(Кэш,Контекст);
		ПодразделениеСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруПодразделения(Кэш,Контекст);
		РегламентСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруРегламента(Кэш,Контекст);
		ОснованияМассив = Кэш.ОбщиеФункции.ПолучитьМассивОснований(Кэш,Контекст);
		ДатаВложения = ?(Док.Файл.Документ.Свойство("Дата"), Док.Файл.Документ.Дата, "");
		НомерВложения = ?(Док.Файл.Документ.Свойство("Номер"), Док.Файл.Документ.Номер, "");
		Если Контекст.НДСИсчисляетсяАгентом Тогда
			СуммаВложения = Формат(Контекст.ИтогСуммаБезНалога, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		Иначе
			СуммаВложения = Формат(Контекст.ИтогСумма, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		КонецЕсли;
		НазваниеВложения = ?(Док.Файл.Документ.Свойство("Название"), Док.Файл.Документ.Название+" № "+НомерВложения+" от "+ДатаВложения+" на сумму "+СуммаВложения, "");
		Тип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", Контекст.ФайлДанные,Кэш);
		ПодТип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", Контекст.ФайлДанные,Кэш);
		ВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", Контекст.ФайлДанные,Кэш);
		ПодВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", Контекст.ФайлДанные,Кэш);
		Примечание = Кэш.ОбщиеФункции.РассчитатьЗначение("Примечание", Контекст.ФайлДанные,Кэш);
		Провести = Кэш.ОбщиеФункции.РассчитатьЗначение("Провести", Контекст.ФайлДанные,Кэш); // alo Провести
		
		Док.Файл.Документ.Вставить("ТаблДок", Контекст.ТаблДок);
		Если Контекст.Свойство("ТаблДетал") И Контекст.ТаблДетал.СтрТабл.Количество() > 0 Тогда
			Док.Файл.Документ.Вставить("ТаблДетал", Контекст.ТаблДетал);
		КонецЕсли;
		Вложение = Новый Структура("СтруктураДокумента,Отправитель,Получатель,Ответственный,Подразделение,Регламент,ДокументОснование, Документ1С, Название, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,Дата,Номер,Сумма", Док,Отправитель,Получатель,ОтветственныйСтруктура,ПодразделениеСтруктура,РегламентСтруктура,ОснованияМассив, Контекст.Документ, НазваниеВложения, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,ДатаВложения,НомерВложения,СуммаВложения);
		Если ЗначениеЗаполнено(НоменклатураКодКонтрагента) Тогда
			Вложение.Вставить("НоменклатураКодКонтрагента",НоменклатураКодКонтрагента);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Примечание) Тогда
			Вложение.Вставить("Примечание",Примечание);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Сертификат) Тогда
			Вложение.Вставить("Сертификат",Сертификат);	
		КонецЕсли;
		ДопПоля= Новый Структура;	// alo ДопПоля
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ДопПоля",Контекст.ФайлДанные,ДопПоля);
		Если ЗначениеЗаполнено(ДопПоля) Тогда
			Вложение.Вставить("ДопПоля",ДопПоля);
		Конецесли;
		Если ЗначениеЗаполнено(Провести) Тогда // alo Провести
			Вложение.Вставить("Провести",Провести);	
		КонецЕсли;
		Контекст.СоставПакета.Вложение.Добавить(Вложение);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияДокумента","Файл_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_Формат)+"_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_ВерсияФормата),"Файл_Шаблон", Кэш);
		Если фрм<>Ложь Тогда
			фрм.сбисПослеФормированияДокумента(Док, Кэш, Контекст);	
			Вложение.СтруктураДокумента = Док; // на случай, если Док поменялся в функции сбисПослеФормированияДокумента
		КонецЕсли;
		Возврат Истина;
		
	Исключение
		Если Кэш.Свойство("РезультатОтправки") Тогда
			Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
			Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
			Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультатОтправки(Кэш, "Документ не сформирован", ОписаниеОшибки(), Контекст.Документ, 726)
		КонецЕсли;
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
КонецФункции
//Функция формирует структуру табличной части файла	
&НаКлиенте
Функция ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст) Экспорт
	Перем СбисНДСИсчисляетсяАгентом;
	СуммаВключаетНДС=Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаВключаетНДС", Контекст.ФайлДанные,Кэш);
	КодыМаркировки = Кэш.ОбщиеФункции.РассчитатьЗначение("КодыМаркировки", Контекст.ФайлДанные,Кэш);
	ПредКодыМаркировки = Кэш.ОбщиеФункции.РассчитатьЗначение("ПредКодыМаркировки", Контекст.ФайлДанные,Кэш);
	Если Не Контекст.Свойство("НДСИсчисляетсяАгентом", СбисНДСИсчисляетсяАгентом) Тогда
		СбисНДСИсчисляетсяАгентом = Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина;
	КонецЕсли;
	УказанТипНоменклатуры = Ложь;
	КолТоваров = 0;
	// проверяем надо ли пересчитывать суммы в валюту учета
	Валюта = Кэш.ОбщиеФункции.РассчитатьЗначение("Валюта", Контекст.ФайлДанные,Кэш);
	ВалютаУчета = Кэш.ОбщиеФункции.РассчитатьЗначение("ВалютаУчета", Контекст.ФайлДанные,Кэш);
	Если ЗначениеЗаполнено(Валюта) и ЗначениеЗаполнено(ВалютаУчета) и Валюта<>ВалютаУчета Тогда
		ПересчитатьВВалютеУчета = Кэш.ОбщиеФункции.РассчитатьЗначение("ПересчитатьВВалютеУчета", Контекст.ФайлДанные,Кэш);
	Иначе
		ПересчитатьВВалютеУчета = Ложь;
	КонецЕсли;
	Если ПересчитатьВВалютеУчета=Истина Тогда
		ИтогСумма = Кэш.ОбщиеФункции.РассчитатьЗначение("ИтогСумма", Контекст.ФайлДанные,Кэш);
		СуммаДляПересчетаВключаетНДС = Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаДляПересчетаВключаетНДС", Контекст.ФайлДанные,Кэш);	
		Если Не ЗначениеЗаполнено(СуммаДляПересчетаВключаетНДС) Тогда
			СуммаДляПересчетаВключаетНДС = СуммаВключаетНДС;
		КонецЕсли;
		КурсВзаиморасчетов = Кэш.ОбщиеФункции.РассчитатьЗначение("КурсВзаиморасчетов", Контекст.ФайлДанные,Кэш);
		КратностьВзаиморасчетов = Кэш.ОбщиеФункции.РассчитатьЗначение("КратностьВзаиморасчетов", Контекст.ФайлДанные,Кэш);
		Если Контекст.ФайлДанные.Свойство("Валюта_КодОКВ") и Контекст.ФайлДанные.Свойство("ВалютаУчета_КодОКВ") Тогда
			Контекст.ФайлДанные.Валюта_КодОКВ = Контекст.ФайлДанные.ВалютаУчета_КодОКВ;
		КонецЕсли;
	КонецЕсли;
	
	сч=1;
	Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДок Цикл
		// Чтобы одна и та же табличная часть не попадала 2 раза в документ (в СФ, если по документу-основанию формируются дополнительные файлы)
		Если Контекст.Свойство("СписокТЧ") Тогда  
			Если Контекст.СписокТЧ.НайтиПоЗначению(Параметр.Ключ)<>Неопределено Тогда
				Продолжить;
			Иначе
				Контекст.СписокТЧ.Добавить(Параметр.Ключ);
			КонецЕсли;
		КонецЕсли;		
		
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда    // стандартная табличная часть
			ТабЧастьДокумента = Параметр.Значение;
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Структура") и Лев(Параметр.Значение.ТаблДок,1)<>"{" Тогда  // табличная часть из одной строки, которая заполняется прямо из реквизитов документа
			ТабЧастьДокумента = Новый Массив;
			ТабЧастьДокумента.Добавить(Параметр.Значение);
		Иначе   // табличная часть вычисляется с помощью функции
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
			ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
		КонецЕсли;
		
		Если ТипЗнч(ТабЧастьДокумента) = Тип("Массив") Тогда
			Для Каждого Стр Из ТабЧастьДокумента Цикл
				//Если Кэш.Парам.ОтправлятьНоменклатуруСДокументами = Истина и Кэш.Ини.Свойство("Номенклатура") Тогда
				//	Номенклатура = Кэш.ОбщиеФункции.РассчитатьЗначение("Номенклатура", Стр, Кэш);
				//	Если Кэш.СписокНоменклатуры.НайтиПоЗначению(Номенклатура) = Неопределено Тогда
				//		Кэш.СписокНоменклатуры.Добавить(Номенклатура);
				//	КонецЕсли;
				//КонецЕсли;
				ДобавлятьСтроку = ?(Стр.Свойство("ДобавлятьСтроку"),Стр.ДобавлятьСтроку,Истина);
				Стр.Вставить("РеквизитСопоставленияНоменклатуры", Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры);
				Стр.Вставить("СуммаВключаетНДС",СуммаВключаетНДС);
				Стр.Вставить("КодыМаркировки", КодыМаркировки);
				Стр.Вставить("ПредКодыМаркировки", ПредКодыМаркировки);
				НоваяСтрока = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);
				НоваяСтрока.Вставить("ПорНомер",Формат(сч, "ЧГ=0")); 
				СуммаНДС = Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаНДС", Стр, Кэш);
				Попытка
					СуммаНДС = Число(СуммаНДС);
				Исключение
					СуммаНДС = 0;
				КонецПопытки;
				Попытка
					НоваяСтрока.Сумма = Число(НоваяСтрока.Сумма);
				Исключение
					НоваяСтрока.Сумма = 0;
				КонецПопытки;
				НоваяСтрока.Вставить("СуммаБезНал",формат(НоваяСтрока.Сумма - ?(СуммаВключаетНДС, СуммаНДС, 0), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
				// d.ch 20.02.19 Для налоговой ставки "НДС исчисляется налоговым агентом" обнуляем сумму с учетом НДС
				Если СбисНДСИсчисляетсяАгентом Тогда
					НоваяСтрока.Сумма = "0.00";
				Иначе 
					НоваяСтрока.Сумма = формат(Число(НоваяСтрока.Сумма) + ?(СуммаВключаетНДС, 0, СуммаНДС), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если Стр.Свойство("СуммаАкциз") и ЗначениеЗаполнено(Стр.СуммаАкциз) Тогда
					НоваяСтрока.Вставить("Акциз",Новый Структура);
					НоваяСтрока.Акциз.Вставить("Сумма", Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаАкциз", Стр, Кэш));	
				КонецЕсли;
				НоваяСтрока.Вставить("НДС",Новый Структура);
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗначениеИТипСтавки","РаботаСДокументами1С","",Кэш);
				СтрСтавка = фрм.ЗначениеИТипСтавки(Стр.СтавкаНДС);
				НоваяСтрока.НДС.Вставить( "Сумма", формат(СуммаНДС, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
				НоваяСтрока.НДС.Вставить( "Ставка", СтрСтавка.Ставка);	
				НоваяСтрока.НДС.Вставить( "ТипСтавки", СтрСтавка.ТипСтавки);	
				
				Если Стр.Свойство("мПараметр") Тогда
					НоваяСтрока.Вставить("Параметр", Новый Массив);
					Для Каждого Элемент Из Стр.мПараметр Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент.Значение);
						Параметр = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Стр,Параметр);
						НоваяСтрока.Параметр.Добавить(Параметр);
					КонецЦикла;
				КонецЕсли;
				
				Если Стр.Свойство("НомСредИдентТов") Тогда
					НомСредИдентТов = Кэш.ОбщиеФункции.РассчитатьЗначение("НомСредИдентТов", Стр, Кэш);
					НоваяСтрока.Вставить("НомСредИдентТов", НомСредИдентТов);
				КонецЕсли;
				
				//KES МОТП ИСМП-->
				//перебрать все свойства строки и найти сложные узлы
				мСложныеУзлы = Новый Массив;
				Для Каждого Элемент Из Стр Цикл
					Если ТипЗнч(Элемент.Значение) = Тип("Структура") И НЕ Элемент.Ключ = "мПараметр" Тогда
						ОбработатьСложныйУзел(Элемент.Значение,Стр,НоваяСтрока,Кэш);
					КонецЕсли;
				КонецЦикла;
				//<--KES МОТП ИСМП
				
				Если Стр.Свойство("ПредСтрТабл") Тогда
					Если сч = 1 Тогда  
						Контекст.Вставить("ЕстьПредыдущиеДанные", Истина);
					КонецЕсли;
					//В строку должны быть заполнены все простые узлы заранее (которые добавляются кодом), чтобы при заполнении они выгружались в случае наличия составных узлов в ини
					ПредыдущиеДанные = Новый Структура("СуммаБезНал");
					
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ПредСтрТабл",Стр,ПредыдущиеДанные);
					СуммаНДСДо = Кэш.ОбщиеФункции.РассчитатьЗначение("СуммаНДСДо", Стр, Кэш);
					СуммаНДСДо = Число(СуммаНДСДо);
					ПредыдущиеДанные.СуммаБезНал = формат(Число(ПредыдущиеДанные.Сумма) - ?(СуммаВключаетНДС, СуммаНДСДо, 0), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					Если СбисНДСИсчисляетсяАгентом Тогда
						ПредыдущиеДанные.Сумма = "0.00";
					Иначе 
						ПредыдущиеДанные.Сумма = формат(Число(ПредыдущиеДанные.Сумма) + ?(СуммаВключаетНДС, 0, СуммаНДСДо), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					КонецЕсли;
					Если Стр.Свойство("СуммаАкцизДо") и ЗначениеЗаполнено(Стр.СуммаАкцизДо) Тогда
						ПредыдущиеДанные.Вставить("Акциз",Новый Структура);
						ПредыдущиеДанные.Акциз.Вставить( "Сумма", Стр.СуммаАкцизДо);	
					КонецЕсли;
					ПредыдущиеДанные.Вставить("НДС",Новый Структура);
					фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗначениеИТипСтавки","РаботаСДокументами1С","", Кэш);
					СтрСтавка = фрм.ЗначениеИТипСтавки(Стр.СтавкаНДСДо);
					ПредыдущиеДанные.НДС.Вставить( "Сумма", формат(СуммаНДСДо, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0; ЧО=1"));	
					ПредыдущиеДанные.НДС.Вставить( "Ставка", СтрСтавка.Ставка);	
					ПредыдущиеДанные.НДС.Вставить( "ТипСтавки", СтрСтавка.ТипСтавки);
					
					Если Стр.Свойство("ПредНомСредИдентТов") Тогда
						ПредНомСредИдентТов = Кэш.ОбщиеФункции.РассчитатьЗначение("ПредНомСредИдентТов", Стр, Кэш);
						ПредыдущиеДанные.Вставить("НомСредИдентТов", ПредНомСредИдентТов);
					КонецЕсли;
					
					НоваяСтрока.Вставить("ПредСтрТабл",ПредыдущиеДанные);
					Контекст.ПредИтогСумма       	= Контекст.ПредИтогСумма + ПредыдущиеДанные.Сумма;
					Контекст.ПредИтогСуммаБезНалога = Контекст.ПредИтогСуммаБезНалога + ПредыдущиеДанные.СуммаБезНал;
					Контекст.ПредИтогСуммаНДС    	= Контекст.ПредИтогСуммаНДС + СуммаНДСДо;
				КонецЕсли;				
				
				Если Стр.Свойство("Расхождения") Тогда
					НоваяСтрока.Вставить("Расхождения", Новый Массив);
					Для Каждого Элемент Из Стр.Расхождения Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент);
						Расхождение = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Расхождения",Стр,Расхождение);
						НоваяСтрока.Расхождения.Добавить(Расхождение);
					КонецЦикла;	
				КонецЕсли;
				
				// при необходимости пересчитываем в валюту учета
				Если ПересчитатьВВалютеУчета=Истина Тогда
					Если НЕ ЗначениеЗаполнено(ИтогСумма) Тогда   // есть готовые суммы по каждой строке и не надо распределять общую сумму по строкам
						CуммаДляПересчета = Кэш.ОбщиеФункции.РассчитатьЗначение("CуммаДляПересчета", Стр, Кэш); 
						CуммаНДСДляПересчета = Кэш.ОбщиеФункции.РассчитатьЗначение("CуммаНДСДляПересчета", Стр, Кэш); 
						Попытка
							СуммаВВалютеУчета = CуммаДляПересчета*КурсВзаиморасчетов/?(КратностьВзаиморасчетов=0,1,КратностьВзаиморасчетов);
							СуммаНДСВВалютеУчета = CуммаНДСДляПересчета*КурсВзаиморасчетов/?(КратностьВзаиморасчетов=0,1,КратностьВзаиморасчетов);
							СуммаНДС = СуммаНДСВВалютеУчета;
							НоваяСтрока.СуммаБезНал = формат(СуммаВВалютеУчета - ?(СуммаДляПересчетаВключаетНДС, СуммаНДСВВалютеУчета, 0), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
							НоваяСтрока.Сумма = формат(Число(СуммаВВалютеУчета) + ?(СуммаДляПересчетаВключаетНДС, 0, СуммаНДСВВалютеУчета), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
							НоваяСтрока.НДС.Сумма = формат(СуммаНДСВВалютеУчета, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
							НоваяСтрока.Вставить("Цена", формат(Число(НоваяСтрока.СуммаБезНал)/?(Число(НоваяСтрока.Кол_во)=0,1,Число(НоваяСтрока.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураУпаковка = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Упаковка",Стр,СтруктураУпаковка);
				Если СтруктураУпаковка.Количество()>0 Тогда
					НоваяСтрока.Вставить("Упаковка",СтруктураУпаковка);
				КонецЕсли;
				
				СтруктураБрутто = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Брутто",Стр,СтруктураБрутто);
				Если СтруктураБрутто.Количество()>0 Тогда
					НоваяСтрока.Вставить("Брутто",СтруктураБрутто);
				КонецЕсли;
				
				СтруктураНетто = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Нетто",Стр,СтруктураНетто);
				Если СтруктураНетто.Количество()>0 Тогда
					НоваяСтрока.Вставить("Нетто",СтруктураНетто);
				КонецЕсли;
				
				СтруктураХарактеристика = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Характеристика",Стр,СтруктураХарактеристика);
				Если СтруктураХарактеристика.Количество()>0 Тогда
					НоваяСтрока.Вставить("Характеристика",СтруктураХарактеристика);
				КонецЕсли;
				
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияСтроки","Файл_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_Формат)+"_"+Кэш.ОбщиеФункции.сбисЗаменитьНедопустимыеСимволы(Контекст.ФайлДанные.Файл_ВерсияФормата),"Файл_Шаблон", Кэш);
				Если фрм<>Ложь Тогда
					ДобавлятьСтроку = фрм.сбисПослеФормированияСтроки(НоваяСтрока, Кэш, Контекст, Стр);	
				КонецЕсли;
				Если ДобавлятьСтроку<>Ложь Тогда      // <>Ложь написано для совместимости со старыми функциями сбисПослеФормированияСтроки, которые могли ничего не возвращать
					
					Попытка
						Контекст.ИтогКоличество     = Контекст.ИтогКоличество + НоваяСтрока.Кол_во;
					Исключение
					КонецПопытки;
					Контекст.ИтогСумма       	= Контекст.ИтогСумма + НоваяСтрока.Сумма;
					Контекст.ИтогСуммаБезНалога = Контекст.ИтогСуммаБезНалога + НоваяСтрока.СуммаБезНал;
					Контекст.ИтогСуммаНДС    	= Контекст.ИтогСуммаНДС + СуммаНДС;
					Попытка
						Контекст.ИтогБрутто         = Контекст.ИтогБрутто + ?(НоваяСтрока.Брутто.Свойство("Кол_во"),НоваяСтрока.Брутто.Кол_во, 0);
					Исключение
					КонецПопытки;
					Попытка
						Контекст.ИтогНетто         = Контекст.ИтогНетто + ?(НоваяСтрока.Нетто.Свойство("Кол_во"),НоваяСтрока.Нетто.Кол_во, 0);
					Исключение
					КонецПопытки;
					Попытка
						Контекст.ИтогКолМест 	    = Контекст.ИтогКолМест + ?(НоваяСтрока.Упаковка.Свойство("КолМест"),НоваяСтрока.Упаковка.КолМест, 0);
					Исключение
					КонецПопытки;
					
					Контекст.ТаблДок.СтрТабл.Добавить(НоваяСтрока);
					сч=сч+1;
					Если НоваяСтрока.Свойство("Тип") Тогда
						УказанТипНоменклатуры = Истина;
						Если НоваяСтрока.Тип = "1" Тогда
							КолТоваров = КолТоваров+1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// При необходимости проверяем, вся ли номенклатура сопоставлена
				Если Контекст.Свойство("НоменклатураКодКонтрагента") и (Не НоваяСтрока.Свойство(Контекст.НоменклатураКодКонтрагента) или Не ЗначениеЗаполнено(НоваяСтрока[Контекст.НоменклатураКодКонтрагента]))  Тогда
					Контекст.СоставПакета.Вставить("Ошибка","Не вся номенклатура сопоставлена");	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если Контекст.ФайлДанные.Свойство("ЗаполнятьГрузотпрГрузполуч") Тогда
		Контекст.Вставить("ЗаполнятьГрузотпрГрузполуч", Контекст.ФайлДанные.ЗаполнятьГрузотпрГрузполуч);
	ИначеЕсли УказанТипНоменклатуры = Ложь или (УказанТипНоменклатуры и КолТоваров>0) Тогда
		Контекст.Вставить("ЗаполнятьГрузотпрГрузполуч", Истина);
	Иначе
		Контекст.Вставить("ЗаполнятьГрузотпрГрузполуч", Ложь);
	КонецЕсли;
	
	// при необходимости пересчитываем в валюту учета
	Если ПересчитатьВВалютеУчета=Истина Тогда
		Если ЗначениеЗаполнено(ИтогСумма) Тогда
			ПересчитатьТабличнуюЧастьВВалютеУчетаПоИтоговойСумме(Кэш, Контекст, ИтогСумма)
		КонецЕсли;
	КонецЕсли;
	
	
КонецФункции	
&НаКлиенте
Функция ПолучитьДетализациюТабЧастиДокумента1С(Кэш,Контекст) Экспорт
	Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДетал Цикл
		
		Если Контекст.Свойство("СписокТЧ") Тогда  
			Если Контекст.СписокТЧ.НайтиПоЗначению(Параметр.Ключ)<>Неопределено Тогда
				Продолжить;
			Иначе
				Контекст.СписокТЧ.Добавить(Параметр.Ключ);
			КонецЕсли;
		КонецЕсли;		
		
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда    // стандартная табличная часть
			ТабЧастьДокумента = Параметр.Значение;
		ИначеЕсли ТипЗнч(Параметр.Значение) = Тип("Структура") Тогда  // табличная часть из одной строки, которая заполняется прямо из реквизитов документа
			ТабЧастьДокумента = Новый Массив;
			ТабЧастьДокумента.Добавить(Параметр.Значение);
		Иначе   // табличная часть вычисляется с помощью функции
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
			ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
		КонецЕсли;
		
		Если ТипЗнч(ТабЧастьДокумента) = Тип("Массив") Тогда
			сч=0;
			Для Каждого Стр Из ТабЧастьДокумента Цикл
				сч=сч+1;
				НоваяСтрока = Новый Структура;
				//все значения ТаблДок_ внутри мТаблДетал
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);
				Если НЕ НоваяСтрока.Свойство("ПорНомер") Тогда
					НоваяСтрока.Вставить("ПорНомер",Строка(сч)); 
				КонецЕсли;
				//поддержка параметров
				Если Стр.Свойство("мПараметр") Тогда
					НоваяСтрока.Вставить("Параметр", Новый Массив);
					Для Каждого Элемент Из Стр.мПараметр Цикл
						Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент.Значение);
						Параметр = Новый Структура();
						Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Стр,Параметр);
						НоваяСтрока.Параметр.Добавить(Параметр);
					КонецЦикла;
				КонецЕсли;
				//поддержка характеристик
				СтруктураХарактеристика = Новый Структура;
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Характеристика",Стр,СтруктураХарактеристика);
				Если СтруктураХарактеристика.Количество()>0 Тогда
					НоваяСтрока.Вставить("Характеристика",СтруктураХарактеристика);
				КонецЕсли;
				
				ДобавлятьСтроку = ?(Стр.Свойство("ДобавлятьСтроку"),Стр.ДобавлятьСтроку,Истина);
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияСтрокиДетализации","Файл_"+Контекст.ФайлДанные.Файл_Формат+"_"+СтрЗаменить(Контекст.ФайлДанные.Файл_ВерсияФормата, ".", "_"),"Файл_Шаблон", Кэш);
				Если фрм<>Ложь Тогда
					ДобавлятьСтроку = фрм.сбисПослеФормированияСтроки_Детал(НоваяСтрока, Кэш, Контекст, Стр);	
				КонецЕсли;
				Если ДобавлятьСтроку<>Ложь Тогда
					Контекст.ТаблДетал.СтрТабл.Добавить(НоваяСтрока);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура ПересчитатьТабличнуюЧастьВВалютеУчетаПоИтоговойСумме(Кэш, Контекст, ИтогСумма)
	Перем СбисНДСИсчисляетсяАгентом;
	Если Не Контекст.Свойство("НДСИсчисляетсяАгентом", СбисНДСИсчисляетсяАгентом) Тогда
		СбисНДСИсчисляетсяАгентом = Кэш.ОбщиеФункции.РассчитатьЗначение("НДСИсчисляетсяАгентом", Контекст.ФайлДанные) = Истина;
	КонецЕсли;	
	Попытка
		Контекст.ИтогСумма	= ИтогСумма;
		ИтогСуммаБезНалога	= 0;
		ИтогСуммаНДС		= 0;
		КлючРаспределения	= "Сумма";
		Если СбисНДСИсчисляетсяАгентом Тогда
			КлючРаспределения	= "СуммаБезНал";
			Контекст.ИтогСумма	= 0;
		КонецЕсли;
			
		МассивРаспределения	= Новый Массив;
		Для Каждого СтрокаДокумента Из Контекст.ТаблДок.СтрТабл Цикл
			МассивРаспределения.Добавить(СтрокаДокумента[КлючРаспределения]);
		КонецЦикла;
		Кэш.ОбщиеФункции.сбисРаспределитьСуммуПоСтолбцу(МассивРаспределения, ИтогСумма, Контекст.ТаблДок.СтрТабл, КлючРаспределения);
		РасчетСуммыНДСПоСтавке = Кэш.ОбщиеФункции.РассчитатьЗначение("РасчетСуммыНДСПоСтавке", Контекст.ФайлДанные,Кэш);
		Для Каждого СтрокаДокумента Из Контекст.ТаблДок.СтрТабл Цикл
			Если РасчетСуммыНДСПоСтавке = Истина Тогда
				//Выделение суммы НДС, Расчет суммы без НДС
				Если Не СбисНДСИсчисляетсяАгентом Тогда
					ЗначениеСтавкиНДС = Кэш.ОбщиеФункции.сбисПолучитьСтавкуНДСЧисло(СтрокаДокумента.НДС.Ставка);
					СтрокаДокумента.НДС.Сумма = Формат(?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаДокумента.Сумма * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					СтрокаДокумента.СуммаБезНал = Формат(Число(СтрокаДокумента.Сумма) - Число(СтрокаДокумента.НДС.Сумма), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				СтрокаДокумента.Цена = формат(Число(СтрокаДокумента.СуммаБезНал)/?(Число(СтрокаДокумента.Кол_во)=0,1,Число(СтрокаДокумента.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
			Иначе
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаДокумента.СуммаБезНал);
				МассивРаспределения.Добавить(СтрокаДокумента.НДС.Сумма);
				МассивРаспределенныхСумм = Кэш.ОбщиеФункции.сбисРаспределитьПропорционально(Число(СтрокаДокумента.Сумма), МассивРаспределения);
				Если МассивРаспределенныхСумм <> Неопределено Тогда
					СтрокаДокумента.СуммаБезНал = Формат(МассивРаспределенныхСумм[0], "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					СтрокаДокумента.НДС.Сумма = Формат(МассивРаспределенныхСумм[1], "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
					СтрокаДокумента.Цена = формат(Число(СтрокаДокумента.СуммаБезНал)/?(Число(СтрокаДокумента.Кол_во)=0,1,Число(СтрокаДокумента.Кол_во)), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
			КонецЕсли;
			ИтогСуммаБезНалога = ИтогСуммаБезНалога + Число(СтрокаДокумента.СуммаБезНал);
			ИтогСуммаНДС = ИтогСуммаНДС + Число(СтрокаДокумента.НДС.Сумма);
		КонецЦикла;	
		
		Контекст.ИтогСуммаБезНалога = ИтогСуммаБезНалога;
		Контекст.ИтогСуммаНДС = ИтогСуммаНДС;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьРеквизитыДокумента(Кэш, Ини,РеквизитыДляПоиска,Вложение,Строка) Экспорт
	// Процедура получает реквизиты документа, необходимые для сопоставления
	//Если ((Кэш.Парам.РежимСопоставления = 1) и (Вложение.Тип = "АктВР" или Вложение.Тип = "ЭДОНакл")) или ((Кэш.Парам.РежимСопоставления = 2) и (Вложение.Тип = "СчФктр")) Тогда // сопоставляем накладные и акты
	//тип1С = Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Имя",Ини,Кэш);
	типы1С = Новый СписокЗначений;
	Если Ини.Свойство("мДокумент") Тогда
		Для Каждого РазделДокумента Из Ини.мДокумент Цикл
			Если РазделДокумента.Значение.Свойство("Документ") Тогда
				типы1С.Добавить(Сред(РазделДокумента.Значение.Документ.Значение, Найти(РазделДокумента.Значение.Документ.Значение,".")+1));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Номер = Сред(Вложение.Название, Найти(Вложение.Название, "№ ")+2);//парсим название.
	//Номер = Лев(Номер, Найти(Номер, " от ")-1);
	//Дата = Сред(Вложение.Название, Найти(Вложение.Название, " от ")+4, 10);
	//Если Найти(Дата, " ") Тогда
	//	Дата = Лев(Дата, Найти(Дата, " ")-1);
	//	Если СтрДлина(Дата) = 8 Тогда
	//		Дата = Лев(Дата, 6)+"20"+Прав(Дата, 2);
	//КонецЕсли;
	//КонецЕсли;
	//Дата = Дата(Сред(Дата,7,4), Сред(Дата,4,2), Лев(Дата, 2));
	// << alo Меркурий
	если Вложение= неопределено тогда
		Сумма = 0;
		Дата = "";
		Номер = "";
		Документы1С = Новый СписокЗначений;
		Название = "";
		Идентификатор = "";
	иначе
		Дата = Вложение.Дата;
		Номер= Вложение.Номер;
		Документы1С = Вложение.Документы1С;
		Название = Вложение.Название;
		Идентификатор=Вложение.Идентификатор;
		Сумма = Сред(Вложение.Название, Найти(Вложение.Название, "на сумму ")+9);
		Если Найти(Сумма, "р.")>0 Тогда
			Сумма = Лев(Сумма, Найти(Сумма, "р.")-1);
		ИначеЕсли Найти(Сумма, ",")>0 Тогда // если валюта не рубль
			Сумма = Лев(Сумма, Найти(Сумма, ",")-1);	
		КонецЕсли;
		Попытка 
			Сумма = Число(СтрЗаменить(Сумма," ",""));
		Исключение
			Сумма = 0;
		КонецПопытки;
	конецесли;
	Если РеквизитыДляПоиска.Свойство("Сумма") Тогда
		РеквизитыДляПоиска.Сумма = РеквизитыДляПоиска.Сумма + Сумма;
	иначе
		//Сумма1С = 0;
		//Если ЗначениеЗаполнено(Вложение.Документы1С) Тогда
		//	Попытка
		//		Сумма1С = Вложение.Документы1С[0].Значение.СуммаДокумента;
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		РеквизитыДляПоиска.Вставить("Статус", Строка.Статус);
		РеквизитыДляПоиска.Вставить("Дата", Дата);
		РеквизитыДляПоиска.Вставить("Номер", Номер);
		РеквизитыДляПоиска.Вставить("Сумма", Сумма);
		РеквизитыДляПоиска.Вставить("типы1С", типы1С);
		РеквизитыДляПоиска.Вставить("ТипСБИС", Строка.СоставПакета[0].Значение.Тип);
		РеквизитыДляПоиска.Вставить("Документы1С", Документы1С);
		РеквизитыДляПоиска.Вставить("РанееСопоставленныеДокументы1С", Документы1С);   // Нужен, чтобы в случае выбора другого документа, для предыдущего удалить идентификатор и статус
		//РеквизитыДляПоиска.Вставить("Сумма1С", Сумма1С);
		РеквизитыДляПоиска.Вставить("НазваниеСБИС", Название);
		РеквизитыДляПоиска.Вставить("СоставПакета", Строка.СоставПакета[0].Значение);
		РеквизитыДляПоиска.Вставить("Контрагент", Строка.СоставПакета[0].Значение.Контрагент);
		РеквизитыДляПоиска.Вставить("НашаОрганизация", Строка.СоставПакета[0].Значение.НашаОрганизация);
		РеквизитыДляПоиска.Вставить("ИдВложения", Идентификатор);		
		// alo Меркурий >>
	КонецЕсли;
КонецПроцедуры	
&НаКлиенте
Функция СформироватьРасхождение(ДанныеВложений, Кэш) Экспорт
	СтруктураФайлаКонтрагента = ДанныеВложений.СтруктураФайлаКонтрагента;
	СтруктураФайлаНаша = ДанныеВложений.ВложениеНаше.СтруктураДокумента;
	Док = СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша);
	ОшибкаПреобразования = Ложь;
	ШаблонXML = Кэш.ОбщиеФункции.СбисПреобразоватьДокументВXML(Док, Кэш.СовместимостьМетодов, ОшибкаПреобразования);
	Если ОшибкаПреобразования Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ШаблонXML);
		Возврат Неопределено;
	КонецЕсли;
	ДанныеВложений.ВложениеНаше.Вставить("XMLДокумента", ШаблонXML);
	ТекстHTML = Кэш.Интеграция.ПолучитьHTMLПоXML(Кэш, ДанныеВложений.ВложениеНаше);
	Вложение = Новый Структура("СтруктураФайла,XMLДокумента,Название,ТекстHTML, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата", Док, ШаблонXML, СтруктураФайлаНаша.Файл.Документ.Название,ТекстHTML, ДанныеВложений.ВложениеНаше.Тип, ДанныеВложений.ВложениеНаше.ПодТип, ДанныеВложений.ВложениеНаше.ВерсияФормата,ДанныеВложений.ВложениеНаше.ПодВерсияФормата);
	Возврат Вложение;
КонецФункции
Функция СформироватьРасхождениеНаСервере(СтруктураФайлаКонтрагента, СтруктураФайлаНаша) Экспорт
	Док  = Новый Структура;
	Док.Вставить("Файл",Новый Структура);
	Док.Файл.Вставить("Формат",СтруктураФайлаНаша.Файл.Формат);
	Док.Файл.Вставить("ВерсияФормата",СтруктураФайлаНаша.Файл.ВерсияФормата);
	Док.Файл.Вставить("Имя",СтруктураФайлаНаша.Файл.Имя);
	Если СтруктураФайлаНаша.Файл.Свойство("КодФормы") тогда
		Док.Файл.Вставить("КодФормы",СтруктураФайлаНаша.Файл.КодФормы);
	КонецЕсли;
	Док.Файл.Вставить("Документ",Новый Структура);
	Для Каждого Элемент Из СтруктураФайлаНаша.Файл.Документ Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Структура") и ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			Док.Файл.Документ.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	Док.Файл.Документ.Вставить("Основание",Новый Массив);
	Если (СтруктураФайлаКонтрагента.Файл.Формат = "Заказ") Тогда
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер,Название",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер,СтруктураФайлаКонтрагента.Файл.Формат));
	Иначе
		Док.Файл.Документ.Основание.Добавить(Новый Структура("Дата,Номер",СтруктураФайлаКонтрагента.Файл.Документ.Дата,СтруктураФайлаКонтрагента.Файл.Документ.Номер));
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Отправитель") Тогда
		Док.Файл.Документ.Вставить("Отправитель",СтруктураФайлаКонтрагента.Файл.Документ.Отправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Отправитель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Получатель") Тогда
		Док.Файл.Документ.Вставить("Получатель",СтруктураФайлаКонтрагента.Файл.Документ.Получатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Получатель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Грузоотправитель") Тогда
		Док.Файл.Документ.Вставить("Грузоотправитель",СтруктураФайлаКонтрагента.Файл.Документ.Грузоотправитель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Грузоотправитель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Грузополучатель") Тогда
		Док.Файл.Документ.Вставить("Грузополучатель",СтруктураФайлаКонтрагента.Файл.Документ.Грузополучатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Грузополучатель);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Поставщик") Тогда
		Док.Файл.Документ.Вставить("Поставщик",СтруктураФайлаКонтрагента.Файл.Документ.Поставщик);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Поставщик);
	КонецЕсли;
	Если СтруктураФайлаКонтрагента.Файл.Документ.Свойство("Покупатель") Тогда
		Док.Файл.Документ.Вставить("Покупатель",СтруктураФайлаКонтрагента.Файл.Документ.Покупатель);
		ПреобразоватьПараметрыВМассив(Док.Файл.Документ.Покупатель);
	КонецЕсли;
	
	Если СтруктураФайлаНаша.Файл.Документ.Свойство("Параметр") Тогда
		Док.Файл.Документ.Вставить("Параметр", СтруктураФайлаНаша.Файл.Документ.Параметр); 
	КонецЕсли;
	
	ТабЧастьНаша = МассивСтруктурВТаблицуЗначений(СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл);
	ТабЧастьНаша.Колонки.Добавить("ЕстьВФайлеКонтрагента", Новый ОписаниеТипов("Булево"));
	ЕстьПорНомерВФайлеКонтрагента = Ложь;
	Если СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0].Свойство("ПорНомерВФайлеКонтрагента") Тогда
		ЕстьПорНомерВФайлеКонтрагента = Истина;	
	КонецЕсли;
	
	ТабЧастьКонтрагента = Новый Соответствие;   // сворачиваем табличную часть по идентификатору строки
	Для Каждого СтрТабл Из СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.СтрТабл Цикл
		Если СтрТабл.Свойство("Идентификатор") и ЗначениеЗаполнено(СтрТабл.Идентификатор) И НЕ ЕстьПорНомерВФайлеКонтрагента Тогда
			СтрокаСоответствия = ТабЧастьКонтрагента.Получить(СтрТабл.Идентификатор);
			Если СтрокаСоответствия = Неопределено Тогда
				ТабЧастьКонтрагента.Вставить(СтрТабл.Идентификатор, СтрТабл);	
			Иначе
				Если СтрТабл.Свойство("Кол_во") и СтрокаСоответствия.Свойство("Кол_во") Тогда
					СтрокаСоответствия.Кол_во = Формат(Число(СтрокаСоответствия.Кол_во)+Число(СтрТабл.Кол_во),"ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
				КонецЕсли;
				Если СтрТабл.Свойство("СуммаБезНал") и СтрокаСоответствия.Свойство("СуммаБезНал") Тогда
					СтрокаСоответствия.СуммаБезНал = Формат(Число(СтрокаСоответствия.СуммаБезНал)+Число(СтрТабл.СуммаБезНал),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("Сумма") и СтрокаСоответствия.Свойство("Сумма") Тогда
					СтрокаСоответствия.Сумма = Формат(Число(СтрокаСоответствия.Сумма)+Число(СтрТабл.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				Если СтрТабл.Свойство("НДС") и СтрТабл.НДС.Свойство("Сумма") и СтрокаСоответствия.Свойство("НДС") и СтрокаСоответствия.НДС.Свойство("Сумма") Тогда
					СтрокаСоответствия.НДС.Сумма = Формат(Число(СтрокаСоответствия.НДС.Сумма)+Число(СтрТабл.НДС.Сумма),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			ТабЧастьКонтрагента.Вставить(Новый УникальныйИдентификатор, СтрТабл);	
		КонецЕсли;
	КонецЦикла;
	
	ИтогСумма = 0;
	ИтогКоличество = 0;
	ИтогСуммаБезНал = 0;
	ИтогНДС = 0;
	СтрОтклонения = Новый Массив;
	Для Каждого СтрокаСоответствия Из ТабЧастьКонтрагента Цикл
		СтрТабл = СтрокаСоответствия.Значение;
		НоваяСтрока = Новый Структура();
		Если СтрТабл.Свойство("КодПокупателя") Тогда
			НоваяСтрока.Вставить("КодПокупателя", СтрТабл.КодПокупателя);
		КонецЕсли;
		Если СтрТабл.Свойство("КодПоставщика") Тогда
			НоваяСтрока.Вставить("КодПоставщика", СтрТабл.КодПоставщика);
		КонецЕсли;
		Номенклатура = Неопределено;
		ОКЕИ = Неопределено;
		ХарактеристикаНоменклатуры = Неопределено;
		СтрТабл.Свойство("Номенклатура", Номенклатура);
		//СтрТабл.Свойство("ОКЕИ", ОКЕИ);
		СтрТабл.Свойство("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
		//Отбор = Новый Структура("Номенклатура, ОКЕИ", Номенклатура, ОКЕИ);
		Если ЕстьПорНомерВФайлеКонтрагента Тогда
			Отбор = Новый Структура("ПорНомерВФайлеКонтрагента", СтрТабл.ПорНомер);
		Иначе
			Отбор = Новый Структура("Номенклатура", Номенклатура);
			
			Если ТабЧастьНаша.Колонки.Найти("ХарактеристикаНоменклатуры")<>Неопределено Тогда
				Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
					Отбор.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);
				Иначе
					Отбор.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НайденныеСтроки = ТабЧастьНаша.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество()>0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.ЕстьВФайлеКонтрагента = Истина;
			Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0] Цикл
				Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
					НоваяСтрока.Вставить(Поле.Ключ, НайденнаяСтрока[Поле.Ключ]);
				КонецЕсли;
			КонецЦикла;
			Попытка
				ИтогСумма = ИтогСумма+НайденнаяСтрока.Сумма;
				ИтогКоличество = ИтогКоличество+НайденнаяСтрока.Кол_во;
				ИтогСуммаБезНал = ИтогСуммаБезНал+НайденнаяСтрока.СуммаБезНал;
				ИтогНДС = ИтогНДС+НайденнаяСтрока.НДС.Сумма;
			Исключение
			КонецПопытки;
		Иначе     // если удалили строки в загруженном документе
			НоваяСтрока.Вставить("Название", ?(СтрТабл.Свойство("Название"),СтрТабл.Название,""));
			НоваяСтрока.Вставить("Кол_во", "0");
			НоваяСтрока.Вставить("Цена", "0");
			НоваяСтрока.Вставить("СуммаБезНал", "0");
			НоваяСтрока.Вставить("Сумма", "0");
		КонецЕсли;
		ПредСтрТабл = Новый Структура;
		Для Каждого Поле Из СтрТабл Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ИмяТЧ" и Поле.Ключ<>"НомерСтрокиТЧ" Тогда   // эти поля добавляются в структуру файла при загрузке, при выгрузке расхождения они не нужны
				ПредСтрТабл.Вставить(Поле.Ключ, Поле.Значение);
			КонецЕсли;
		КонецЦикла;
		ПреобразоватьПараметрыВМассив(ПредСтрТабл);
		НоваяСтрока.Вставить("ПредСтрТабл", ПредСтрТабл);
		СтрОтклонения.Добавить(НоваяСтрока);
	КонецЦикла;
	// Если добавились строки, которых не было в файле контрагента
	НашиСтроки = ТабЧастьНаша.НайтиСтроки(Новый Структура("ЕстьВФайлеКонтрагента", Ложь)); 
	Для Каждого СтрТабл Из НашиСтроки Цикл
		НоваяСтрока = Новый Структура();
		Для Каждого Поле Из СтруктураФайлаНаша.Файл.Документ.ТаблДок.СтрТабл[0] Цикл
			Если Поле.Ключ<>"Номенклатура" и Поле.Ключ<>"ХарактеристикаНоменклатуры" и Поле.Ключ<>"ПорНомерВФайлеКонтрагента" Тогда
				НоваяСтрока.Вставить(Поле.Ключ, СтрТабл[Поле.Ключ]);
			КонецЕсли;
		КонецЦикла;
		СтрОтклонения.Добавить(НоваяСтрока);
		Попытка
			ИтогСумма = ИтогСумма+СтрТабл.Сумма;
			ИтогКоличество = ИтогКоличество+СтрТабл.Кол_во;
			ИтогСуммаБезНал = ИтогСуммаБезНал+СтрТабл.СуммаБезНал;
			ИтогНДС = ИтогНДС+СтрТабл.НДС.Сумма;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Док.Файл.Документ.Вставить("ТаблДок", Новый Структура);
	Док.Файл.Документ.ТаблДок.Вставить("ИтогТабл",Новый Массив);
	ИтогТабл = Новый Структура("Сумма,Кол_во,СуммаБезНал,НДС",ИтогСумма,ИтогКоличество,ИтогСуммаБезНал,Новый Структура("Сумма",ИтогНДС));
	Если СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.Свойство("ИтогТабл") Тогда
		ИтогТабл.Вставить("ПредИтогТабл", СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.ИтогТабл);
	КонецЕсли;
	Док.Файл.Документ.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
	Док.Файл.Документ.ТаблДок.Вставить("СтрТабл", СтрОтклонения);
	Возврат Док;
КонецФункции
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	// преобразует массив структур в таблицу значений	
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);
		Попытка
			СтрТ.ОКЕИ = СокрЛП(СтрТ.ОКЕИ);	
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат Результат;
КонецФункции
Функция ПреобразоватьПараметрыВМассив(СтруктураУчастника)
	Если СтруктураУчастника.Свойство("Параметр") и ТипЗнч(СтруктураУчастника.Параметр) = Тип("Структура") Тогда
		МассивПараметров = Новый Массив;
		Для Каждого Элемент Из СтруктураУчастника.Параметр Цикл
			СтруктураПараметра = Новый Структура("Имя, Значение", Элемент.Ключ, Элемент.Значение);
			Массивпараметров.Добавить(СтруктураПараметра);
		КонецЦикла;
		СтруктураУчастника.Вставить("Параметр", Массивпараметров);
	КонецЕсли;
КонецФункции
//KES МОТП ИСМП--->
&НаКлиенте
Функция ОбработатьСложныйУзел(СложныйУзел,СтараяСтрока,НоваяСтрока,Кэш)
	
	Для Каждого Элемент Из СложныйУзел Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			//перебрать массив
			Для Каждого ЭлементыУзла Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементыУзла) = Тип("Структура") Тогда
					ЗаполнитьСложныйУзел(ЭлементыУзла,Элемент.Ключ,СтараяСтрока,НоваяСтрока,Кэш)
				КонецЕсли;
			КонецЦикла;
			//Только в одном исключительном случае структуру превращаем в массив на данном этапе - НомСредИдентТов
			//Конструкция  <мНомСредИдентТов Имя="НомСредИдентТов"> <мКИЗ Имя="КИЗ"> без описания НомСредИдентТов!
		ИначеЕсли (Элемент.Ключ = "НомСредИдентТов" ИЛИ Элемент.Ключ = "КИЗ" ИЛИ Элемент.Ключ = "НомУпак")
			И ТипЗнч(Элемент.Значение)=Тип("Структура") Тогда 
			ЗаполнитьСложныйУзел(Элемент.Значение,Элемент.Ключ,СтараяСтрока,НоваяСтрока,Кэш);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Процедура ЗаполнитьСложныйУзел(СложныйУзелСтруктура,ИмяУзла,СтараяСтрока,НоваяСтрока,Кэш)
	
	СтруктураВложеннойСтроки = Новый Структура;
	Для Каждого ЭлементСтруктурыСтр Из СложныйУзелСтруктура Цикл
		
		Если НЕ НоваяСтрока.Свойство(ИмяУзла) Тогда
			НоваяСтрока.Вставить(ИмяУзла,Новый Массив);
		КонецЕсли;

		//ещё один вложенный сложный узел? Должен быть в ини после простых узлов
		Если ТипЗнч(ЭлементСтруктурыСтр.Значение)=Тип("Структура") Тогда
			ОбработатьСложныйУзел(ЭлементСтруктурыСтр.Значение,СтараяСтрока,СтруктураВложеннойСтроки,Кэш);
			Продолжить;
		КонецЕсли;
		
		//узел_атрибут (НомСредИдентТов_ИдентТрансУпак, КИЗ_Значение, НомУпак_Значение)
		Поз = Найти(ЭлементСтруктурыСтр.Ключ,"_");
		Если Поз = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураВложеннойСтроки.Вставить(Сред(ЭлементСтруктурыСтр.Ключ,Поз+1),Кэш.ОбщиеФункции.РассчитатьЗначение(ЭлементСтруктурыСтр.Ключ, СложныйУзелСтруктура, Кэш));
		
	КонецЦикла;
	Если НоваяСтрока.Свойство(ИмяУзла) Тогда
		НоваяСтрока[ИмяУзла].Добавить(СтруктураВложеннойСтроки);
	КонецЕсли;
	
КонецПроцедуры
//<--- KES МОТП ИСМП

//Генератор {
&НаКлиенте
Функция ПрименитьПодстановку(Кэш, Вложение, Отказ, МассоваяОтправка) Экспорт
	
	Отказ = Ложь;
	АльтернативнаяФормаФункции = "Файл_" + Вложение.Тип + "_" + СтрЗаменить(Вложение.ВерсияФормата, ".", "_");
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СформироватьПодстановку", "Файл_Шаблон", АльтернативнаяФормаФункции, Кэш);
	СтруктураВложения_5_01 = фрм.СформироватьПодстановку(Вложение, Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если МассоваяОтправка Тогда
		Возврат СтруктураВложения_5_01;	
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЕстьРезультат, СообщатьПриОшибке, ВернутьОшибку",
		Истина,
		Ложь,
		Истина);
		
	ПараметрыДокумента = Новый Структура("ВерсияФормата, ТипДокумента, ПодТип, ПодВерсияФормата");
	ПараметрыДокумента.ВерсияФормата 	= Вложение.ВерсияФормата;
	ПараметрыДокумента.ТипДокумента 	= Вложение.Тип;
	ПараметрыДокумента.ПодТип 			= Вложение.ПодТип;
	ПараметрыДокумента.ПодВерсияФормата = Вложение.ПодВерсияФормата;
	
	ШаблонXML = Кэш.Интеграция.СБИСПлагин_ФЭДСгенерировать(
		Кэш, 
		ПараметрыДокумента, 
		СтруктураВложения_5_01, 
		ДопПараметры,
		Отказ);
	
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(ШаблонXML, "Файл_Шаблон.ПрименитьПодстановку");	
	КонецЕсли;
	
	Возврат ШаблонXML;
	
КонецФункции
	
&НаКлиенте
Функция СформироватьПодстановку(Вложение, Отказ) Экспорт
	
	Генератор = Новый Соответствие;
	
	Заполнить_ДаннымиВложения(Генератор, Вложение);
	
	Возврат Генератор;
	
КонецФункции

&НаКлиенте
Процедура Заполнить_ДаннымиВложения(Генератор, Вложение)
	
	Заполнить_ОбщиеДанные(Генератор, Вложение);
	
	Отправитель = Новый Соответствие;
	Заполнить_Отправитель(Отправитель, Вложение);
	
	Грузоотправитель = Новый Соответствие;
	Заполнить_Грузоотправитель(Грузоотправитель, Вложение);
	
	ЗаполнитьПоСоответствию(Генератор, Отправитель);
	
	ОнЖе = Получить_Грузоотправитель_ОнЖе(Грузоотправитель, Отправитель);
	
	Если Врег(Вложение.Тип) = Врег("СчФктр") Тогда
		
		Если ОнЖе Тогда
			Генератор.Вставить("Грузоотправитель.ОнЖе", "он же");	
		Иначе
			ЗаполнитьПоСоответствию(Генератор, Грузоотправитель);	
		КонецЕсли;
		
	Иначе
		ЗаполнитьПоСоответствию(Генератор, Грузоотправитель);
	КонецЕсли;
	
	Заполнить_Получатель(Генератор, 		Вложение);
	Заполнить_Грузополучатель(Генератор, 	Вложение);
	Заполнить_Подписант(Генератор, 			Вложение);
	
	ИтогиСоответствие = Новый Соответствие;
	
	Заполнить_ТабличныеДанные(Генератор, 	Вложение, ИтогиСоответствие);
	Заполнить_Итоги(Генератор, 				Вложение, ИтогиСоответствие);
	Заполнить_Основание(Генератор, 			Вложение);
	Заполнить_ПРД(Генератор, 				Вложение);
	Заполнить_ИдГосКон(Генератор, 			Вложение);
	Заполнить_ДанныеПоОснованию(Генератор, 	Вложение);
	Заполнить_Параметры(Генератор, 			Вложение, ОнЖе);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСоответствию(Генератор, Источник)
	
	Для Каждого ТекСтрока ИЗ Источник Цикл
		Генератор.Вставить(ТекСтрока.Ключ, ТекСтрока.Значение);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ОбщиеДанные(Генератор, Вложение)
	
	Попытка
		ТекФайл = Вложение.СтруктураДокумента.Файл;
		ТекДокумент = ТекФайл.Документ;
	Исключение
		Возврат;
	КонецПопытки;
	
	Генератор.Вставить("ВремИнфПр", 	Формат(ТекущаяДата(), "ДФ=ЧЧ.мм.сс"));
	Генератор.Вставить("ВремИнфИсп", 	Формат(ТекущаяДата(), "ДФ=ЧЧ.мм.сс"));
	Генератор.Вставить("ДатаИнфПр", 	Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy"));
	
	Если Врег(Вложение.Тип) <> Врег("СчФктр") Тогда
		Генератор.Вставить("ПоФактХЖ", 	 Вложение.Название);
		Генератор.Вставить("НаимДокОпр", ТекДокумент.Название);
	КонецЕсли;
	
	Попытка
		Генератор.Вставить("СодОпер", 	Вложение.Регламент.Название);
	Исключение
		Генератор.Вставить("СодОпер", 	"");
	КонецПопытки;
	
	Генератор.Вставить("Дата", 			ТекДокумент.Дата);
	Генератор.Вставить("ИдФайл", 		ТекФайл.Имя);
	Генератор.Вставить("Номер", 		ТекДокумент.Номер);
	
	Заполнить_ОбщиеДанные_Исправления(Генератор, Вложение);
	
	Попытка
		УстановитьЗначениеПоКлючу(Генератор, "Функция", ТекДокумент, "Тип");
	Исключение
	КонецПопытки;
	
	Установить_КодОКВ(Генератор, ТекДокумент);
	
	Если Найти(Врег(Вложение.Тип),"СЧФ") <> 0 Тогда 
		Генератор.Вставить("ДефНомИспрСФ", 	"-");
		Генератор.Вставить("ДефДатаИспрСФ", "-");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Установить_КодОКВ(Генератор, ТекДокумент)
	
	Если ТекДокумент.Свойство("Валюта") Тогда
		УстановитьЗначениеПоКлючу(Генератор, "КодОКВ", ТекДокумент.Валюта, "КодОКВ");
	
	Иначе
		УстановитьЗначениеПоКлючу(Генератор, "КодОКВ", "643");
		УстановитьЗначениеПоКлючу(Генератор, "НаимОКВ", "Российский рубль");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ОбщиеДанные_Исправления(Генератор, Вложение)
	
	ТекДокумент = Вложение.СтруктураДокумента.Файл.Документ;
	
	Если НЕ ТекДокумент.Свойство("Исправление")
		ИЛИ НЕ ТекДокумент.Исправление Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Генератор.Вставить("ДефНомИспрСФ", 	"");
		Генератор.Вставить("НомИспрСФ", 	ТекДокумент.НомерИсправления);
		Генератор.Вставить("Номер", 		ТекДокумент.НомерИсходного);
	Исключение
	КонецПопытки;
	
	Попытка
		Генератор.Вставить("ДефДатаИспрСФ", "");
		Генератор.Вставить("ДатаИспрСФ",	ТекДокумент.Дата);
		Генератор.Вставить("Дата", 			ТекДокумент.ДатаИсходного);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_Грузоотправитель(Генератор, Вложение)
	
	ЗаполнитьПоИмениСтороны(Генератор, Вложение, "Грузоотправитель");
	
КонецПроцедуры

&НаКлиенте
Функция Получить_Грузоотправитель_ОнЖе(Грузоотправитель, Отправитель)
	
	Грузоотправитель_ИНН = ПолучитьРеквизитПоИмениСтороны(Грузоотправитель, "Грузоотправитель", "ИНН");
	Отправитель_ИНН = ПолучитьРеквизитПоИмениСтороны(Отправитель, "Отправитель", "ИНН");
	
	Грузоотправитель_КПП = ПолучитьРеквизитПоИмениСтороны(Грузоотправитель, "Грузоотправитель", "КПП");
	Отправитель_КПП = ПолучитьРеквизитПоИмениСтороны(Отправитель, "Отправитель", "КПП");
	
	Если (Грузоотправитель_ИНН = Отправитель_ИНН) И (Грузоотправитель_КПП = Отправитель_КПП) Тогда
		Возврат Истина
	КонецЕсли;
	
	Возврат Ложь;
		               
КонецФункции

&НаКлиенте
Функция ПолучитьРеквизитПоИмениСтороны(Генератор, ИмяСтороны, ИмяРеквизита)
	
	Сторона_Значение = Генератор.Получить(ИмяСтороны + ".СвЮл." + ИмяРеквизита);
	
	Если Сторона_Значение = Неопределено Тогда
		Сторона_Значение = Генератор.Получить(ИмяСтороны + ".СвФл." + ИмяРеквизита);
	КонецЕсли;
	
	Если Сторона_Значение = Неопределено Тогда
		Сторона_Значение = Генератор.Получить(ИмяСтороны + ".СвИп." + ИмяРеквизита);
	КонецЕсли;
	
	Возврат Сторона_Значение; 
	
КонецФункции

&НаКлиенте
Процедура Заполнить_Грузополучатель(Генератор, Вложение)
	
	ЗаполнитьПоИмениСтороны(Генератор, Вложение, "Грузополучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_Отправитель(Генератор, Вложение)
	
	ЗаполнитьПоИмениСтороны(Генератор, Вложение, "Отправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_Получатель(Генератор, Вложение)
	
	ЗаполнитьПоИмениСтороны(Генератор, Вложение, "Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_Основание(Генератор, Вложение)
	
	Попытка
		МассивПараметров = Вложение.СтруктураДокумента.Файл.Документ.Основание;
	Исключение
		Возврат;	
	КонецПопытки;
	
	ОснованиеМассив = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ МассивПараметров Цикл
		
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ (ТекСтрока.Свойство("Название") 
			И ТекСтрока.Свойство("Номер")
			И ТекСтрока.Свойство("Дата")) Тогда
			Продолжить;
			
		КонецЕсли;
		
		Если ТекСтрока.Название = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Название) Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Дата) И ТекСтрока.Название <> "Без документа-основания" Тогда
			Продолжить;	
		КонецЕсли; 
		
		Если ТекСтрока.Название = "ДокПодтвОтгр" 
			ИЛИ ТекСтрока.Название = "ИспрСчФ" 
			ИЛИ ТекСтрока.Название = "СчФ" 
			ИЛИ ТекСтрока.Название = "ПРД" Тогда
			Продолжить;	
		КонецЕсли;
		
		Основание = Новый Структура("Номер, Название, Дата");
		Основание.Название 	= ТекСтрока.Название;
		Основание.Номер 	= ТекСтрока.Номер;
		Основание.Дата 		= ТекСтрока.Дата;
		
		ОснованиеМассив.Добавить(Основание);
		
	КонецЦикла;
	
	Если ОснованиеМассив.Количество() = 0 Тогда
		Если Найти(Врег(Вложение.Тип),"СЧФ") <> 0 Тогда
			ОснованиеМассив.Добавить(Новый Структура("Название", "Без документа-основания"));
		Иначе
			ОснованиеМассив.Добавить(Новый Структура("Название", "-"));
		КонецЕсли;
	
	КонецЕсли;
	
	Генератор.Вставить("Основание", ОснованиеМассив);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ПРД(Генератор, Вложение)
	
	Если НЕ Вложение.СтруктураДокумента.Файл.Документ.Свойство("Основание") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Вложение.СтруктураДокумента.Файл.Документ.Основание) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	ПРД = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ Вложение.СтруктураДокумента.Файл.Документ.Основание Цикл
		
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Название") 
			И ТекСтрока.Свойство("Номер")
			И ТекСтрока.Свойство("Дата")
			И ТекСтрока.Название = "ПРД" Тогда
			
			ПРД.Добавить(Новый Структура("НомерПРД, ДатаПРД", ТекСтрока.Номер, ТекСтрока.Дата));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПРД.Количество() <> 0 тогда
		Генератор.Вставить("ПРД", ПРД);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ДанныеПоОснованию(Генератор, Вложение)
	
	Если НЕ Вложение.СтруктураДокумента.Файл.Документ.Свойство("Основание") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(Вложение.СтруктураДокумента.Файл.Документ.Основание) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока ИЗ Вложение.СтруктураДокумента.Файл.Документ.Основание Цикл
		
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ТекСтрока.Свойство("Название") 
			ИЛИ НЕ ТекСтрока.Свойство("Номер")
			ИЛИ НЕ ТекСтрока.Свойство("Дата") Тогда
			Продолжить;	
		КонецЕсли;
		
		
		Если ПустаяСтрока(ТекСтрока.Номер) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Номер = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Номер = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Название = "ДокПодтвОтгр" Тогда
			
			УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.ДатаДокОтгр",	ТекСтрока, "Дата");
			УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.НомДокОтгр", 	ТекСтрока, "Номер");
			УстановитьЗначениеПоКлючу(Генератор, "ДокПодтвОтгр.НаимДокОтгр", 	" ");
			
		КонецЕсли;
		
		Если ТекСтрока.Название = "ИсхСчФ" Тогда
			
			УстановитьЗначениеПоКлючу(Генератор, "СчФ.Дата",	ТекСтрока, "Дата");
			УстановитьЗначениеПоКлючу(Генератор, "СчФ.Номер", 	ТекСтрока, "Номер");
			
			Попытка
				УстановитьЗначениеПоКлючу(Генератор, "ПередатДокум", ТекСтрока.Номер + " от " + ТекСтрока.Дата);			
				
				ПередатДокумОсн = Новый Массив;
				ТекДанныеОснование = Новый Структура("Название, Номер, Дата");
				ЗаполнитьЗначенияСвойств(ТекДанныеОснование, ТекСтрока);
				ТекДанныеОснование.Название = " ";
				
				ПередатДокумОсн.Добавить(ТекДанныеОснование);
				
				УстановитьЗначениеПоКлючу(Генератор, "ПередатДокумОсн", ПередатДокумОсн);				
				
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		 //TODO ?
		//УстановитьЗначениеПоКлючу(Генератор, "НомКСФ", ТекСтрока, "Номер");
		//УстановитьЗначениеПоКлючу(Генератор, "ДатаКСФ", ТекСтрока, "Дата");
		
		Если ТекСтрока.Название = "ИспрСчФ" Тогда
			
			Генератор.Вставить("ДефНомИспрСФ", 	"");
			Генератор.Вставить("ДефДатаИспрСФ", "");
			УстановитьЗначениеПоКлючу(Генератор, "НомИспрСФ", ТекСтрока, "Номер");
			УстановитьЗначениеПоКлючу(Генератор, "ДатаИспрСФ", ТекСтрока, "Дата");
			
		КонецЕсли;
		
		Если ТекСтрока.Название = "ИсхСчФ" Тогда
			
			УстановитьЗначениеПоКлючу(Генератор, "Номер", ТекСтрока, "Номер");
			УстановитьЗначениеПоКлючу(Генератор, "Дата", ТекСтрока, "Дата");

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ИдГосКон(Генератор, Вложение)
	
	Попытка
		МассивПараметров = Вложение.СтруктураДокумента.Файл.Документ.Параметр;
	Исключение
		Попытка
			МассивПараметров = Вложение.СтруктураДокумента.Файл.Документ.СписокПараметр.Параметр;
		Исключение
			МассивПараметров = Новый Массив;
		КонецПопытки;
	КонецПопытки;
	
	Для Каждого ТекСтрока ИЗ МассивПараметров Цикл
		
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Имя") 
			И ТекСтрока.Свойство("Значение")
			И ТекСтрока.Имя = "ИдГосКон" Тогда
			
			Генератор.Вставить("СвСчФакт.ИдГосКон", ТекСтрока.Значение);	
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_Подписант(Генератор, Вложение)
	
	Подписант = "Подписант";

	Генератор.Вставить(Подписант + ".ОблПолн", "0");
	
	Если Вложение.Отправитель.Свойство("СвЮЛ") Тогда
		СтруктураЛица = Вложение.Отправитель.СвЮЛ;
		ЭтоИП = Ложь;
		
	ИначеЕсли Вложение.Отправитель.Свойство("СвФЛ") Тогда
		СтруктураЛица = Вложение.Отправитель.СвФЛ;
		ЭтоИП = Истина;
		
	ИначеЕсли Вложение.Отправитель.Свойство("СвИП") Тогда
		СтруктураЛица = Вложение.Отправитель.СвИП;
		ЭтоИП = Истина;
		
	Иначе
		Возврат;	
	КонецЕсли;
	
	Если ЭтоИП Тогда
		
		Подписант = Подписант + ".ИП.";
		
	    Генератор.Вставить(Подписант + "СвГосРегИП", "");
		Генератор.Вставить(Подписант + "ИННФЛ", СтруктураЛица.ИНН);
		
		ЗаполнитьФИО(Генератор, Подписант, СтруктураЛица);
		
	Иначе
		
		Подписант = Подписант + ".ЮЛ.";
		
		Генератор.Вставить(Подписант + "Должн", "");
		Генератор.Вставить(Подписант + "ИННЮЛ", СтруктураЛица.ИНН);
		
		ЗаполнитьФИО(Генератор, Подписант, Вложение.Ответственный);			
		
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура Заполнить_Итоги(Генератор, Вложение, ИтогиСоответствие)
	
	Попытка
		ИтогиДокумента	= Вложение.СтруктураДокумента.Файл.Документ.ТаблДок.ИтогТабл;
	Исключение
		Попытка
			ИтогиДокумента= Вложение.СтруктураДокумента.Файл.Документ.СписокСтрТабл.ИтогТабл;
		Исключение
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	Если ИтогиДокумента.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	СтруктураИтоги = ИтогиДокумента[0];
	
	Если Вложение.Тип = "УведомлОтгр" Тогда
		ИмяТабл = "ИтогТабл";
	Иначе
		ИмяТабл = "ПредИтогТабл";
	КонецЕсли;
	
	ЗаполнитьИтогиДляТаблицы(Генератор, ИмяТабл, СтруктураИтоги);
	
	Если СтруктураИтоги.Свойство("ПредИтогТабл") Тогда
		
		ЗаполнитьУвеличениеУменьшениеИтоги(ИтогиСоответствие, ИмяТабл, Генератор);

		Если Генератор.Получить("ПредИтогТабл.СуммаНДСУвел") = Неопределено Тогда
			Генератор.Вставить("ПредИтогТабл.БезНДСУвел", "Без НДС");
		Иначе
			Генератор.Вставить("ПредИтогТабл.БезНДСУвел", "");
		КонецЕсли;
		
		Если Генератор.Получить("ПредИтогТабл.СуммаНДСУм") = Неопределено Тогда
			Генератор.Вставить("ПредИтогТабл.БезНДСУм", "Без НДС");
		Иначе
			Генератор.Вставить("ПредИтогТабл.БезНДСУм", "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУвеличениеУменьшениеИтоги(ИтогиСоответствие, ИмяТабл, Генератор)
	
	Значение = ИтогиСоответствие.Получить("СтоимУвел");
	
	Если Значение <> Неопределено Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.СуммаБезНДСУвел", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;

	Значение = ИтогиСоответствие.Получить("СтоимУм");
	
	Если Значение <> Неопределено Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.СуммаБезНДСУм", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;
	
	Значение = ИтогиСоответствие.Получить("СуммаЦенУвел");
	
	Если Значение <> Неопределено Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.СуммаУвел", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;

	Значение = ИтогиСоответствие.Получить("СуммаЦенУм");
	
	Если Значение <> Неопределено Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.СуммаУм", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;
	
	Значение = ИтогиСоответствие.Получить("СуммаНДСУвел");
	
	Если Значение <> Неопределено Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.СуммаНДСУвел", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;

	Значение = ИтогиСоответствие.Получить("СуммаНДСУм");
	
	Если Значение <> Неопределено Тогда
		УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.СуммаНДСУм", Формат(Значение, "ЧРД=.; ЧН=0.00; ЧГ="));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтогиДляТаблицы(Генератор, ИмяТабл, СтруктураИтоги, Суффикс = "")
	
	УстановитьЗначениеПоКлючу(Генератор, ИмяТабл + ".Сумма", СтруктураИтоги, "Сумма");

	Попытка
		Генератор.Вставить(ИмяТабл + ".СуммаБезНДС", СтруктураИтоги.СуммаБезНал);
	Исключение
		Попытка
			Генератор.Вставить(ИмяТабл + ".СуммаБезНДС", СтруктураИтоги.СуммаБезНДС);
		Исключение
		КонецПопытки;
	КонецПопытки;
	
	Если ИмяТабл = "ПредИтогТабл" Тогда
		
		Генератор.Вставить(ИмяТабл + ".ДефСумма", "");
		
		Попытка
			Если СтруктураИтоги.НДС.Сумма = "0.00" Тогда
				Генератор.Вставить("ПредИтогТабл.БезНДС", "Без НДС");
				Генератор.Вставить("ПредИтогТабл.ДефНДС", "");
				
			Иначе
				Генератор.Вставить("ПредИтогТабл.СуммаНДС", СтруктураИтоги.НДС.Сумма);
				Генератор.Вставить("ПредИтогТабл.БезНДС", "");
				Генератор.Вставить("ПредИтогТабл.ДефНДС", "");

			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.Кол_во", СтруктураИтоги.Нетто, "Кол_во");
		Исключение
		КонецПопытки;
		
		Попытка
			УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.Упаковка.КолМест", СтруктураИтоги.Упаковка, "КолМест");
		Исключение
		КонецПопытки;
		
		Попытка
			УстановитьЗначениеПоКлючу(Генератор, "ПредИтогТабл.БруттоВс", СтруктураИтоги.Брутто, "Кол_во");
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_Параметры(Генератор, Вложение, ОнЖе)
	
	Попытка
		МассивПараметров = Вложение.СтруктураДокумента.Файл.Документ.Параметр;
	Исключение
		Попытка
			МассивПараметров = Вложение.СтруктураДокумента.Файл.Документ.СписокПараметр.Параметр;
		Исключение
			МассивПараметров = Новый Массив;
		КонецПопытки;
	КонецПопытки;
	
	ДобавитьСведенияGLN(Вложение, МассивПараметров, ОнЖе);
	
	МассивПараметров = ПолучитьМассивБезПустыхЗаписей(МассивПараметров);
		
	Если МассивПараметров.Количество() <> 0 Тогда
		Генератор.Вставить("Параметры", МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСведенияGLN(Вложение, МассивПараметров, ОнЖе)
	
	Если ОнЖе Тогда
		ДобавитьСведенияGLNПоИмениСтороны(Вложение, "Отправитель", МассивПараметров, "GLNГрузОтпр");
	Иначе
		ДобавитьСведенияGLNПоИмениСтороны(Вложение, "Грузоотправитель", МассивПараметров, "GLNГрузОтпр");
	КонецЕсли;
	
	ДобавитьСведенияGLNПоИмениСтороны(Вложение, "Грузополучатель", 	МассивПараметров, "GLNГрузПолуч");
	ДобавитьСведенияGLNПоИмениСтороны(Вложение, "Отправитель", 		МассивПараметров, "GLNПост");
	ДобавитьСведенияGLNПоИмениСтороны(Вложение, "Получатель", 		МассивПараметров, "GLNПокуп");

КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивБезПустыхЗаписей(МассивПараметров)
	
	МассивПараметровИсходящий = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ МассивПараметров Цикл
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ТекСтрока.Свойство("Имя") ИЛИ НЕ ТекСтрока.Свойство("Значение") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ТекСтрока.Значение = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Значение) Тогда
			Продолжить;	
		КонецЕсли;
		
		МассивПараметровИсходящий.Добавить(Новый Структура("Имя, Значение", ТекСтрока.Имя, ТекСтрока.Значение));
		
	КонецЦикла;
	
	Возврат МассивПараметровИсходящий;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСведенияGLNПоИмениСтороны(Вложение, ИмяСтороны, МассивПараметров, Ключ)
	
	GLN = "";
	
	Данные = ПолучитьДанныеСтороныПоИмени(Вложение, ИмяСтороны);
	
	Если Данные <> Неопределено Тогда
		Если Данные.Свойство("GLN") Тогда
			GLN = Данные.GLN;	
		КонецЕсли;
	КонецЕсли;
	
	МассивПараметров.Добавить(Новый Структура("Имя, Значение", Ключ, GLN));
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные(Генератор, Вложение, ИтогиСоответствие)
	
	ТабличныеДанные = Новый Массив;
	
	Попытка
		ТабличнаяЧастьДокумента = Вложение.СтруктураДокумента.Файл.Документ.ТаблДок.СтрТабл;
	
	Исключение
		Попытка
			ТабличнаяЧастьДокумента = Вложение.СтруктураДокумента.Файл.Документ.СписокСтрТабл.СтрТабл;
	
		Исключение
			Возврат;
		КонецПопытки;
		
	КонецПопытки;
	
	ТабличнаяЧастьДокумента = СформироватьРазностнуюТабличнуюЧастьТабличнаяЧастьДокумента(ТабличнаяЧастьДокумента);
	
	Для Каждого ТекСтрока ИЗ ТабличнаяЧастьДокумента Цикл
		
		ТекДанные = Новый Соответствие();
		Заполнить_ИскючительныеПоля(ТекДанные, ТекСтрока);
		Заполнить_ТабличныеДанные_Акциз(ТекСтрока, 				ТекДанные);
		Заполнить_ТабличныеДанные_СуммаНДС(ТекСтрока, 			ТекДанные); 
		Заполнить_ТабличныеДанные_ГТД(ТекСтрока,		 		ТекДанные);
		Заполнить_ТабличныеДанные_ЕдИзм(ТекСтрока, 				ТекДанные);
		Заполнить_ТабличныеДанные_СтранаПроизводства(ТекСтрока, ТекДанные); 
		Заполнить_ТабличныеДанные_НДСЗначение(ТекСтрока, 		ТекДанные, Вложение.Тип);
		Заполнить_ТабличныеДанные_ИнфПол(ТекСтрока, 			ТекДанные);
		Заполнить_ТабличныеДанные_НомСредИдентТов(ТекСтрока, 	ТекДанные);
		Заполнить_ТабличныеДанные_Упаковка(ТекСтрока, 			ТекДанные);
		Заполнить_ТабличныеДанные_Брутто(ТекСтрока, 			ТекДанные);
		Заполнить_ТабличныеДанные_RnptData(ТекСтрока, 			ТекДанные);
		
		УстановитьЗначениеПоКлючу(ТекДанные, "Артикул", 		ТекСтрока, "Артикул");
		УстановитьЗначениеПоКлючу(ТекДанные, "Количество", 		ТекСтрока, "Кол_во");		
		УстановитьЗначениеПоКлючу(ТекДанные, "Наименование", 	ТекСтрока, "Название");
		УстановитьЗначениеПоКлючу(ТекДанные, "НомНомер", 		ТекСтрока, "Артикул");
		УстановитьЗначениеПоКлючу(ТекДанные, "ПорНомер", 		ТекСтрока, "ПорНомер");
		УстановитьЗначениеПоКлючу(ТекДанные, "ЦенаБезНДС", 		ТекСтрока, "Цена");
		УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦенБезНДС", 	ТекСтрока, "СуммаБезНал");
		УстановитьЗначениеПоКлючу(ТекДанные, "СуммаЦен", 		ТекСтрока, "Сумма");
		
		Заполнить_ТабличныеДанные_Цена(ТекСтрока, ТекДанные);
		
		Если ТекСтрока.Свойство("ПредСтрТабл") Тогда
			Заполнить_ТабличныеДанные_До_УвеличениеУменьшение(ТекСтрока, ТекДанные, Вложение.Тип, ИтогиСоответствие);			
		КонецЕсли;
		
		ТабличныеДанные.Добавить(ТекДанные);
		
	КонецЦикла;
	
	Генератор.Вставить("ТабличныеДанные", ТабличныеДанные);
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьРазностнуюТабличнуюЧастьТабличнаяЧастьДокумента(ТабличнаяЧастьДокумента)
	
	РазностнаяТабличнаяЧасть = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ ТабличнаяЧастьДокумента Цикл
		Если ТекСтрока.Свойство("ПредСтрТабл") Тогда
			Если НЕ СтрокиТабличнойЧастиРавны(ТекСтрока, ТекСтрока.ПредСтрТабл) Тогда
				РазностнаяТабличнаяЧасть.Добавить(ТекСтрока);	
			КонецЕсли;
		Иначе
			РазностнаяТабличнаяЧасть.Добавить(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазностнаяТабличнаяЧасть;
	
КонецФункции

&НаКлиенте
Функция СтрокиТабличнойЧастиРавны(Строка1, Строка2)
	
	СтрокиРавны = Истина;
	
	Для Каждого ТекПоказатель ИЗ ПолучитьПоказателиСравнения() Цикл
		
		Попытка
			Если ПоказателиРавны(Строка1[ТекПоказатель], Строка2[ТекПоказатель]) Тогда
				Продолжить;	
			Иначе
				СтрокиРавны = Ложь;
				Прервать;
			КонецЕслИ;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СтрокиРавны;
	
КонецФункции

&НаКлиенте
Функция ПоказателиРавны(Показатель1, Показатель2)
	
	Если ТипЗнч(Показатель1) <> ТипЗнч(Показатель2) Тогда
		Возврат Ложь;	
	КонецЕсли;
	
	Если ТипЗнч(Показатель1) = Тип("Структура") Тогда
    	Возврат СтруктурыРавны(Показатель1, Показатель2);
	ИначеЕсли ТипЗнч(Показатель1) = Тип("Массив") Тогда
    	Возврат МассивыРавны(Показатель1, Показатель2);
	Иначе
		Возврат (Показатель1 = Показатель2);
	КонецЕсли;

КонецФункции	
	
&НаКлиенте
Функция ПолучитьПоказателиСравнения()
	
	ПоказателиСравнения = Новый Массив;
	ПоказателиСравнения.Добавить("Акциз");
	ПоказателиСравнения.Добавить("ЕдИзм");
	ПоказателиСравнения.Добавить("Кол_во");
	ПоказателиСравнения.Добавить("НДС");
	//ПоказателиСравнения.Добавить("НомСредИдентТов");
	ПоказателиСравнения.Добавить("ОКЕИ");
	ПоказателиСравнения.Добавить("Сумма");
	ПоказателиСравнения.Добавить("СуммаБезНал");
	ПоказателиСравнения.Добавить("Цена");
	
	Возврат ПоказателиСравнения;
	
КонецФункции
	
&НаКлиенте
Функция СтруктурыРавны (Структура1, Структура2)
	
	//без рекурсии
	//считаем состав полей одинаковым
	
	Для Каждого ТекПоле из Структура1 Цикл
		Если ТекПоле.Значение <> Структура2[ТекПоле.Ключ] Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

&НаКлиенте
Функция МассивыРавны(Массив1, Массив2)
	Возврат Ложь;	
КонецФункции

&НаКлиенте
Процедура Заполнить_ИскючительныеПоля(ТекДанные, ТекСтрока)
	
	ТекДанные.Вставить("ДефСуммаЦен", 				"");
	ТекДанные.Вставить("ДефНДС", 					"");
	ТекДанные.Вставить("ДефЕдКод", 					"");
	ТекДанные.Вставить("ДефКодСтраныПроизводства", 	"");
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_До_УвеличениеУменьшение(Источник, Приемник, Тип, ИтогиСоответствие)
	
	ТекСтрока = Источник.ПредСтрТабл;
	
	Заполнить_ТабличныеДанные_Акциз(ТекСтрока, Приемник, "До");
	Заполнить_ТабличныеДанные_ЕдИзм(ТекСтрока, Приемник, "До");
	Заполнить_ТабличныеДанные_НДСЗначение(ТекСтрока, Приемник, Тип, "До");
	Заполнить_ТабличныеДанные_СуммаНДС(ТекСтрока, Приемник, "До"); 
	
	УстановитьЗначениеПоКлючу(Приемник, "КоличествоДок", 	ТекСтрока, "Кол_во");
	УстановитьЗначениеПоКлючу(Приемник, "СуммаЦенДо", 		ТекСтрока, "Сумма");
	УстановитьЗначениеПоКлючу(Приемник, "СуммаЦенБезНДСДо", ТекСтрока, "СуммаБезНал");
	УстановитьЗначениеПоКлючу(Приемник, "ЦенаБезНДСДо", 	ТекСтрока, "Цена");
	
	РасчитатьУвеличениеУменьшение(Приемник, Источник, ИтогиСоответствие);
		
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьУвеличениеУменьшение(Приемник, Источник, ИтогиСоответствие)
	
	РасчитатьУвеличениеУменьшениеПоИмени(Приемник, "Акциз", "АкцизДо", Приемник, "Акциз", ИтогиСоответствие);
	РасчитатьУвеличениеУменьшениеПоИмени(Приемник, "СуммаЦен", "СуммаЦенДо", Приемник, "СуммаЦен", ИтогиСоответствие);
	РасчитатьУвеличениеУменьшениеПоИмени(Приемник, "СуммаНДС", "СуммаНДСДо", Приемник, "СуммаНДС", ИтогиСоответствие);
	РасчитатьУвеличениеУменьшениеПоИмени(Приемник, "СуммаЦенБезНДС", "СуммаЦенБезНДСДо", Приемник, "Стоим", ИтогиСоответствие);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьУвеличениеУменьшениеПоИмени(Источник, ИсточникИмя, ИсточникДоИмя, Приемник, ИмяРеквизита, ИтогиСоответствие)
	
	Попытка
		Значение = Источник.Получить(ИсточникИмя);
		Значение = Число(Значение);
	Исключение
		Значение = 0;
	КонецПопытки;
	
	Попытка
		ЗначениеДо = Источник.Получить(ИсточникДоИмя);
		ЗначениеДо = Число(ЗначениеДо);
	Исключение
		ЗначениеДо = 0;
	КонецПопытки;
	
	УстановитьУвеличениеУменьшение(Значение, ЗначениеДо, Приемник, ИмяРеквизита, ИтогиСоответствие);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначенияПоИсточникам(Источник, ИсточникДо, ИсточникИмя, ИсточникДоИмя)
	
	Результат = Новый Структура("Значение, ЗначениеДо");
	
	Попытка
		Значение = Источник[ИсточникИмя];
		Значение = Число(Значение);
	Исключение
		Значение = 0;
	КонецПопытки;
	
	Попытка
		ЗначениеДо = ИсточникДо[ИсточникДоИмя];
		ЗначениеДо = Число(ЗначениеДо);
	Исключение
		ЗначениеДо = 0;
	КонецПопытки;
	
	Результат.Значение = Значение;
	Результат.ЗначениеДо = ЗначениеДо;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьУвеличениеУменьшение(Значение, ЗначениеДо, Приемник, ИмяРеквизита, ИтогиСоответствие)
	
	Увеличение = 0;
	Уменьшение = 0;
	
	Изменение = ЗначениеДо - Значение;
	
	Если Изменение > 0 Тогда
		Уменьшение = Изменение;	
	ИначеЕсли Изменение < 0 Тогда
		Увеличение = -Изменение;	
	КонецЕсли;
	
	Если Увеличение <> 0 Тогда
		УстановитьЗначениеПоКлючу(Приемник, ИмяРеквизита + "Увел", Формат(Увеличение, "ЧРД=.; ЧН=0.00; ЧГ="));
		СумароватьУвеличенияУменьшения( ИмяРеквизита + "Увел", Увеличение, ИтогиСоответствие);

	КонецЕсли;
	
	Если Уменьшение <> 0 Тогда
		УстановитьЗначениеПоКлючу(Приемник, ИмяРеквизита + "Ум", Формат(Уменьшение, "ЧРД=.; ЧН=0.00; ЧГ="));
		СумароватьУвеличенияУменьшения( ИмяРеквизита + "Ум", Уменьшение, ИтогиСоответствие);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СумароватьУвеличенияУменьшения(ИмяРеквизита, Значение, ИтогиСоответствие)
	
	Сумма = ИтогиСоответствие.Получить(ИмяРеквизита);
	
	Если Сумма = Неопределено Тогда
		Сумма = Значение;		
	Иначе		
		Сумма = Сумма + Значение;
	КонецЕсли;
	
	ИтогиСоответствие.Вставить(ИмяРеквизита, Сумма);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_Акциз(Источник, Приемник, Суффикс = "")
	
	Если НЕ Источник.Свойство("Акциз") Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Если Источник.Акциз.Сумма = "без акциза" Тогда
			УстановитьЗначениеПоКлючу(Приемник, "БезАкциз" + Суффикс, "без акциза");
			
		Иначе
			УстановитьЗначениеПоКлючу(Приемник, "Акциз" + Суффикс, Источник.Акциз, "Сумма");
			УстановитьЗначениеПоКлючу(Приемник, "БезАкциз" + Суффикс, "");
			
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_СуммаНДС(Источник, Приемник, Суффикс = "")
	
	Если Источник.НДС.Свойство("Ставка") Тогда
		
		Если Источник.НДС.Ставка = "без НДС" Тогда
			УстановитьЗначениеПоКлючу(Приемник, "ДефНДС" + Суффикс, "");
			УстановитьЗначениеПоКлючу(Приемник, "БезНДС" + Суффикс, "Без НДС");
			
		Иначе
			УстановитьЗначениеПоКлючу(Приемник, "СуммаНДС" + Суффикс, Источник.НДС, "Сумма");
			УстановитьЗначениеПоКлючу(Приемник, "ДефНДС" + Суффикс, "");
			УстановитьЗначениеПоКлючу(Приемник, "БезНДС" + Суффикс, "");
			
		КонецЕсли;
		
	Иначе
		УстановитьЗначениеПоКлючу(Приемник, "СуммаНДС" + Суффикс, Источник.НДС, "Сумма");
		УстановитьЗначениеПоКлючу(Приемник, "ДефНДС" + Суффикс, "");
		УстановитьЗначениеПоКлючу(Приемник, "БезНДС" + Суффикс, "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_ГТД(Источник, Приемник)
	
	Попытка
		МассивПараметров = Источник.Параметр;	
	Исключение
		Попытка
			МассивПараметров = Источник.СписокПараметр.Параметр;
		Исключение
			Возврат;	
		КонецПопытки;
	КонецПопытки;
	
	Для Каждого ТекСтрока ИЗ МассивПараметров Цикл
		
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") ИЛИ ТекСтрока.Имя <> "НомерГТД" Тогда
			Продолжить;	
		КонецЕсли;
		
		УстановитьЗначениеПоКлючу(Приемник, "ГТД", СокрЛП(ТекСтрока.Значение));
		Прервать;
		
	КонецЦикла
		
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_ЕдИзм(Источник, Приемник, Суффикс = "")
	
	Попытка
		УстановитьЗначениеПоКлючу(Приемник, "ЕдИзм" + Суффикс, Источник, "ЕдИзм");
		УстановитьЗначениеПоКлючу(Приемник, "ЕдКод" + Суффикс, СокрЛП(Источник.ОКЕИ));
		
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_СтранаПроизводства(Источник, Приемник)
	
	Попытка
		КодСтраныПроизводства 	= Источник.Страна;
		СтранаПроизводства		= Источник.СтранаНаименование;
	Исключение
		Попытка
			КодСтраныПроизводства 	= Источник.Производитель.Код;
			СтранаПроизводства		= Источник.Производитель.Страна;
		Исключение
			Возврат;
		КонецПопытки;
	КонецПопытки;
	
	УстановитьЗначениеПоКлючу(Приемник, "КодСтраныПроизводства", 	КодСтраныПроизводства);
	УстановитьЗначениеПоКлючу(Приемник, "СтранаПроизводства", 		СтранаПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_НДСЗначение(Источник, Приемник, Тип, Суффикс = "")
	
	УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, "");
	
	// 1 - 0%
	// 2 - 10%
	// 3 - 18%
	// 4 - 10/110%
	// 5 - 18/118%
	// 6 - без НДС
	// 7 - НДС исчисляется налоговым агентом
	// 8 - 20%
	// 9 - 20/120
	
	Если Источник.НДС.Свойство("Ставка") Тогда
		
		Если Источник.НДС.Свойство("ТипСтавки") Тогда
			ТипСтавки = Источник.НДС.ТипСтавки;	
		Иначе
			ТипСтавки = "процент";
		КонецЕсли;
		
		Если ТипСтавки = "процент" Тогда
			
			Если Тип = "УведомлОтгр" Тогда
				УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, Источник.НДС.Ставка);	
			Иначе
				
				Если Источник.НДС.Ставка = "20" Тогда
					УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 8);
				ИначеЕсли Источник.НДС.Ставка = "18" Тогда
					УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 3);
				ИначеЕсли Источник.НДС.Ставка = "10" Тогда
					УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 2);
				ИначеЕсли Источник.НДС.Ставка = "0" Тогда
					УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 1);
				Иначе
					УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 6);
					УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, "Без НДС");

				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипСтавки = "дробь" Тогда
			
			Если Источник.НДС.Ставка = "20/120" Тогда
				УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 9);
			ИначеЕсли Источник.НДС.Ставка = "18/118" Тогда
				УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 5);
			ИначеЕсли Источник.НДС.Ставка = "10/110" Тогда
				УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 4);
			Иначе
				УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 6);
				УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, "Без НДС");
				
			КонецЕсли;
			
		Иначе
			УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, 6);
			УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, "Без НДС");
			
		КонецЕсли;
		
	Иначе
		
		Если Источник.НДС.Свойство("Сумма") Тогда
			Если Источник.НДС.Сумма = "0.00" Тогда
				УстановитьЗначениеПоКлючу(Приемник, "НДСЗначение" + Суффикс, "Без НДС");
				УстановитьЗначениеПоКлючу(Приемник, "НДСТип" + Суффикс, "Без НДС");

			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_ИнфПол(Источник, Приемник)
	
	Попытка
		МассивПараметров = Источник.Параметр;	
	Исключение
		Попытка
			МассивПараметров = Источник.СписокПараметр.Параметр;
		Исключение
			МассивПараметров = Новый Массив;	
		КонецПопытки;
	КонецПопытки;
	
	Для Каждого ТекСтрока ИЗ Источник Цикл
		Если ТекСтрока.Ключ <> "GTIN" Тогда
			Продолжить;		
		КонецЕсли;
		
		МассивПараметров.Добавить(Новый Структура("Имя, Значение", "GTIN", ТекСтрока.Значение));
		Прервать;
		
	КонецЦикла;
	
	МассивПараметров = ПолучитьМассивБезПустыхЗаписей(МассивПараметров);
		
	Если МассивПараметров.Количество() <> 0 Тогда
		УстановитьЗначениеПоКлючу(Приемник, "ИнфПол", МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_НомСредИдентТов(Источник, Приемник)
	
	Попытка
		НомСредИдентТов = Источник.НомСредИдентТов;	
	Исключение
		Возврат;	
	КонецПопытки;
	
	КИЗ = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ НомСредИдентТов Цикл
		
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ТекСтрока.Свойство("КИЗ") Тогда
			Продолжить;	
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.КИЗ) <> Тип("Массив") Тогда
			Продолжить;	
		КонецЕсли;
		
		Для Каждого ТекКИЗ ИЗ ТекСтрока.КИЗ Цикл
			КИЗ.Добавить(Новый Структура("Номер", ТекКИЗ.Значение));	
		КонецЦикла;
		
	КонецЦикла;
	
	Если КИЗ.Количество() <> 0 Тогда
		УстановитьЗначениеПоКлючу(Приемник, "НомСредИдентТов.КИЗ", КИЗ);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_RnptData(Источник, Приемник)
	
	Попытка
		СведПрослеж = Источник.СведПрослеж;	
	Исключение
		Возврат;	
	КонецПопытки;
	
	RnptData = Новый Массив;
	
	Для Каждого ТекСтрока ИЗ СведПрослеж Цикл
		
		Если ТипЗнч(ТекСтрока) <> Тип("Структура") Тогда
			Продолжить;	
		КонецЕсли;
		
		Марка = Новый Структура("MuCode, MuName, Rnpt, RnptQty",
			СокрЛП(ТекСтрока.ЕдИзмПрослеж),
			ТекСтрока.НаимЕдИзмПрослеж,
			СокрЛП(ТекСтрока.НомТовПрослеж),
			ТекСтрока.КолВЕдПрослеж);
			
		RnptData.Добавить(Марка);
		
	КонецЦикла;
	
	Если RnptData.Количество() <> 0 Тогда
		УстановитьЗначениеПоКлючу(Приемник, "RnptData", RnptData);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_Упаковка(Источник, Приемник)
	
	Если НЕ Источник.Свойство("Упаковка") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Вместимость", Источник.Упаковка, "Вместимость");	
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.КолМест", 	Источник.Упаковка, "КолМест");	
	УстановитьЗначениеПоКлючу(Приемник, "Упаковка.Название", 	Источник.Упаковка, "Название");	
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_Брутто(Источник, Приемник)
	
	Если НЕ Источник.Свойство("Брутто") Тогда
		Возврат;	
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Приемник, "Брутто", Источник.Брутто, "Кол_во");	
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить_ТабличныеДанные_Цена(Источник, Приемник)
	
	Если Источник.Сумма = Источник.СуммаБезНал Тогда
		УстановитьЗначениеПоКлючу(Приемник, "Цена", Источник.Цена);	
		Возврат; 	
	КонецЕсли;
	
	Попытка
		СуммаСНДС = ПреобразоватьВЧисло(Источник.Сумма);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если СуммаСНДС = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Количество = ПреобразоватьВЧисло(Источник.Кол_во);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Количество = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Попытка
		Цена = СуммаСНДС / Количество;	
	Исключение
		Возврат;
	КонецПопытки;
	
	УстановитьЗначениеПоКлючу(Приемник, "Цена", Формат(Цена, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ="));	
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьВЧисло(ЧислоСтрокой)
	
	Если ЧислоСтрокой = "0"
		ИЛИ ЧислоСтрокой = "0.00"
		ИЛИ ЧислоСтрокой = "0.0"
		ИЛИ ЧислоСтрокой = "0,0"
		ИЛИ ЧислоСтрокой = "0,00" Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Попытка
		Возврат  Число(ЧислоСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоИмениСтороны(Генератор, Вложение, ИмяСтороны)
	
	Данные = ПолучитьДанныеСтороныПоИмени(Вложение, ИмяСтороны);
	
	Если Данные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если ИмяСтороны = "Отправитель" Тогда
		Генератор.Вставить(ИмяСтороны + ".Название", Данные.Название);
	КонецЕсли;

	ЗаполнитьGLNПоИмениСтороны(Генератор, ИмяСтороны, Данные, Вложение);
	ЗаполнитьРегистрационныеДанныеЛица(Генератор, Данные, ИмяСтороны);

	Если Данные.Свойство("БанкРекв") Тогда
		ЗаполнитьБанковскиеРеквизиты(Генератор, ИмяСтороны + ".", Данные.БанкРекв);
	КонецЕсли;
	
	Если Данные.Свойство("Контакт") Тогда
		ЗаполнитьКонтактныеДанные(Генератор, ИмяСтороны + ".", Данные.Контакт);
	КонецЕсли;
	
	Если Данные.Адрес.Количество() <> 0 Тогда
		
		СтруктураАдреса = Данные.Адрес[0];
		
		СтруктураАдреса = ОпределитьСтруктуруАдреса(СтруктураАдреса);
		
		Если СтруктураАдреса.Свойство("АдрРФ") Тогда
			Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрГород",	"");
		    Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрДом",		"");
		    Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрИндекс",	"");
		    Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрКварт",	"");
		    Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрКодРегион","");
			Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрУлица",	"");
			Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрКорпус",	"");
			Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрНаселПункт",	"");
			Генератор.Вставить(ИмяСтороны + ".Адрес.АдрРФ.АдрРайон",		"");
			
			ЗаполнитьГенераторПоСтруктуре(Генератор, ИмяСтороны + ".Адрес.АдрРФ.Адр", СтруктураАдреса.АдрРФ);
			
		КонецЕсли;
		
		Если СтруктураАдреса.Свойство("АдрИно") Тогда
			Генератор.Вставить(ИмяСтороны + ".Адрес.АдрИно.АдрТекст",	"");
		    Генератор.Вставить(ИмяСтороны + ".Адрес.АдрИно.КодСтр",		"");
			
			ЗаполнитьГенераторПоСтруктуре(Генератор, ИмяСтороны + ".Адрес.АдрИно.", СтруктураАдреса.АдрИно);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьGLNПоИмениСтороны(Генератор, ИмяСтороны, Данные, Вложение)
	
	GLN = Неопределено;
	Данные.Свойство("GLN", GLN);
	
	Источник = Данные;
	
	Если GLN = Неопределено Тогда
		Если Вложение.Свойство(ИмяСтороны) Тогда
			Источник = Вложение[ИмяСтороны];
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗначениеПоКлючу(Генератор, ИмяСтороны + ".GLN", Источник, "GLN");
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьСтруктуруАдреса(СтруктураАдреса)
	
	Если НЕ СтруктураАдреса.Свойство("АдрРФ") Тогда 
		Если СтруктураАдреса.Свойство("Юридический") Тогда 
			Возврат СтруктураАдреса.Юридический;		
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтруктураАдреса.Свойство("АдрИно") Тогда 
		Если СтруктураАдреса.Свойство("Юридический") Тогда 
			Возврат СтруктураАдреса.Юридический;		
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьРегистрационныеДанныеЛица(Генератор, Данные, ИмяСтороны)
	
	Если Данные.Свойство("СвЮЛ") Тогда
		Генератор.Вставить(ИмяСтороны + ".СвЮл.Название", "");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ИНН",	  "");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.КПП",	  "");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ОКПО",	  "");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ДефИНН",   "");
		Генератор.Вставить(ИмяСтороны + ".СвЮл.ДефКПП",   "");
		
		ЗаполнитьГенераторПоСтруктуре(Генератор, ИмяСтороны + ".СвЮл.", Данные.СвЮЛ);
		
	ИначеЕсли Данные.Свойство("СвФЛ") Тогда
		Генератор.Вставить(ИмяСтороны + ".СвФл.ИНН", 	  "");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Фамилия",  "");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Имя", 	  "");
		Генератор.Вставить(ИмяСтороны + ".СвФл.Отчество", "");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ОКПО", 	  "");
		Генератор.Вставить(ИмяСтороны + ".СвФл.ДефИНН",   "");
		
		ЗаполнитьГенераторПоСтруктуре(Генератор, ИмяСтороны + ".СвФл.", Данные.СвФЛ);
		
	ИначеЕсли Данные.Свойство("СвИП") Тогда
		Генератор.Вставить(ИмяСтороны + ".СвИп.ИНН", 	  	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Фамилия", 	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Имя", 	  	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.Отчество", 	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.ОКПО", 	  	"");
		Генератор.Вставить(ИмяСтороны + ".СвИп.СвГосРегИП", "");
		
		ЗаполнитьГенераторПоСтруктуре(Генератор, ИмяСтороны + ".СвИп.", Данные.СвФЛ);
		
	ИначеЕсли Данные.Свойство("СвИн") Тогда
		Генератор.Вставить(ИмяСтороны + ".СвИн.Название", "");
		
		ЗаполнитьГенераторПоСтруктуре(Генератор, ИмяСтороны + ".СвИн.", Данные.СвИн);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГенераторПоСтруктуре(Генератор, ИмяРеквизита, СтруктураДанных)
	
	Для Каждого ТекРеквизит ИЗ СтруктураДанных Цикл
		
		Ключ = ИмяРеквизита + ТекРеквизит.Ключ;
		
		Если Генератор.Получить(Ключ) = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		Генератор.Вставить(Ключ, ТекРеквизит.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеСтороныПоИмени(Вложение, ИмяСтороны)
	
	Данные = ПолучитьЗначениеПоРазнымИсточникам(Вложение, ИмяСтороны);
	
	Если Данные = Неопределено Тогда
		Данные = ПолучитьЗначениеПоСинонимам(Вложение, ИмяСтороны);	
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеПоРазнымИсточникам(Вложение, КлючПоиска)
	
	Данные = Неопределено;
	
	Попытка
		Данные = Вложение.СтруктураДокумента.Файл.Документ[КлючПоиска];
	Исключение
		Попытка
			Данные = Вложение.СтруктураДокумента.Файл.Документ.Стороны[КлючПоиска];
		Исключение
			Возврат Неопределено;
		КонецПопытки
	КонецПопытки;
	
	Возврат Данные;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеПоСинонимам(Вложение, КлючПоиска)
	
	Данные = Неопределено;
	
	СловарьСинонимов = ПолучитьСловарьСинонимов();
	
	МассивКлючей = СловарьСинонимов.Получить(КлючПоиска);
	
	Если МассивКлючей = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого ТекКлюч ИЗ МассивКлючей Цикл
		
		Данные = ПолучитьЗначениеПоРазнымИсточникам(Вложение, ТекКлюч);
		
		Если Данные <> Неопределено Тогда
			Возврат Данные;	
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСловарьСинонимов()
	
	Синонимы = Новый Соответствие;
	
	Данные = Новый Массив;
	Данные.Добавить("Покупатель");
	Синонимы.Вставить("Получатель", Данные);
	
	Данные = Новый Массив;
	Данные.Добавить("Поставщик");
	Синонимы.Вставить("Отправитель", Данные);
	
	Данные = Новый Массив;
	Данные.Добавить("Отправитель");
	Данные.Добавить("Поставщик");
	Синонимы.Вставить("Грузоотправитель", Данные);
	
	Данные = Новый Массив;
	Данные.Добавить("Получатель");
	Данные.Добавить("Покупатель");
	Синонимы.Вставить("Грузополучатель", Данные);
	
	Возврат Синонимы;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьБанковскиеРеквизиты(Генератор, ИмяРеквизита, СтруктураБанкРекв)
	
	Генератор.Вставить(ИмяРеквизита + "НомерСчета", 	"");
	Генератор.Вставить(ИмяРеквизита + "БИК", 			"");
	Генератор.Вставить(ИмяРеквизита + "КорСчет", 		"");
	Генератор.Вставить(ИмяРеквизита + "НаимБанк", 		"");
	
	Если ЗначениеЗаполнено(СтруктураБанкРекв.РСчет) Тогда
				
		естьБИК 		= ЗначениеЗаполнено(СтруктураБанкРекв.БИК);
		естьНаимБанк 	= ЗначениеЗаполнено(СтруктураБанкРекв.НаимБанк);
		естьКСчет 		= ЗначениеЗаполнено(СтруктураБанкРекв.КСчет);
		
		Если естьБИК ИЛИ естьНаимБанк ИЛИ естьКСчет Тогда
			
			Генератор.Вставить(ИмяРеквизита + "НомерСчета", 	СтруктураБанкРекв.РСчет);
			Генератор.Вставить(ИмяРеквизита + "БИК", 			СтруктураБанкРекв.БИК);
			Генератор.Вставить(ИмяРеквизита + "КорСчет", 		СтруктураБанкРекв.КСчет);
			Генератор.Вставить(ИмяРеквизита + "НаимБанк", 		СтруктураБанкРекв.НаимБанк);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтактныеДанные(Генератор, ИмяРеквизита, Контакт)
	
	УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "Email", Контакт, 	"EMAIL");
	УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "Телефон", Контакт, "Телефон");
	УстановитьЗначениеПоКлючу(Генератор, ИмяРеквизита + "Телефон", Контакт, "Тлф");
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоИндивидуальныйПредприниматель(СтруктураЛица)
	
	Если НЕ СтруктураЛица.Свойство("КПП") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураЛица.КПП) И СтрДлина(СтруктураЛица.ИНН) = 12 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьФИО(Генератор, ИмяРеквизита, СтруктураФИО)
	
	Если СтруктураФИО.Свойство("Фамилия") Тогда
		Генератор.Вставить(ИмяРеквизита + "Фамилия", СтруктураФИО.Фамилия);
	КонецЕсли;
	
	Если СтруктураФИО.Свойство("Имя") Тогда
		Генератор.Вставить(ИмяРеквизита + "Имя", СтруктураФИО.Имя);
	КонецЕсли;
	
	Если СтруктураФИО.Свойство("Отчество") Тогда
		Генератор.Вставить(ИмяРеквизита + "Отчество", СтруктураФИО.Отчество);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПоКлючу(ДанныеСоответствия, Ключ, ИсточникДанных, КлючПоиска = Неопределено)
	
	Если КлючПоиска <> Неопределено Тогда
		
		Попытка
			Значение = ИсточникДанных[КлючПоиска];		
		Исключение
			Возврат;
		КонецПопытки;
		
	Иначе
		Значение = ИсточникДанных;
	КонецЕсли;
	
	ДанныеСоответствия.Вставить(Ключ, Значение);
	
КонецПроцедуры
//}