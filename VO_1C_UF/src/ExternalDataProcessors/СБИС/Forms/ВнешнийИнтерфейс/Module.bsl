&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции

// Функция выполняет инициализацию структуры Кэш обработки, получает настройки.
//Параметры
//	ДополнительныеПараметры:	необязательная структура. Может содержать поля, аналогичные Кэш.Парам При наличии, заменяет одноименные поля при запуске обработки.
//
//Возвращает
//	структура Кэш, в которой содержаться параметры для работы обработки.
//	строка ошибки запуска оработки
&НаКлиенте
Функция сбисИнициализировать(ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт 
	//функция сокращающая количество строк кода для клиента, чтобы не пришлось делать это по отдельности
	Кэш = сбисПодготовитьКэш(ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш;
	КонецЕсли;
	сбисПрочитатьНастройки(Кэш);
	//Записываем версию в данные реквизитов формы
	Если Кэш.ПараметрыСистемы.Обработка.НоваяВерсия Тогда
		Кэш.Парам.ПредВерсия = Кэш.ПараметрыСистемы.Обработка.Версия;
		ПараметрыЗаписи = Новый Структура("ВыполнитьВручную,Парам", Истина, Кэш.Парам);
		Кэш.ГлавноеОкно.сбисСохранитьЗначения(ПараметрыЗаписи);
	КонецЕсли;
	Возврат Кэш
КонецФункции

// Функция выполняет авторизацию на онлайне по сертификату, по логину/паролю, либо по сохраненному ранее идентификатору сессии.	
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	ПараметрыАвторизации:		структура с параметрами авторизации в сбис, аналогично Кэш.Парам. Дополнительный ключ ОписаниеОповещенияОЗакрытииФормыАвторизации для открытия формы авторизации на УФ. 		
//	ЗапускРоботом:				булево, означает необходимость вызова формы авторизации в случае, если по указанным параметрам не удалось авторизоваться. Если Истина, то форма не будет показываться.
//
//Возвращает
//	Истина			- если удалось авторизоваться.
//	Ложь			- если указанных параметров недостаточно для выполнения авторизации, либо авторизация была отменена. 
//					  так же ложь возвращается в случае авторизации по просроченному ИД сессии, без указания логина и сертификата или способа авторизации для получения нового ИД.
//	Строка			- текст ошибки авторизации получаемых при выполнении запроса к серверу.
//  Неопределено	- если не на толстом клиенте была показана форма авторизации и дальнейшее управление будет передано в функцию, указанную в переданном описании оповещения. Может быть только если в параметрах авторизации указали ключ "ОписаниеОповещенияОЗакрытииФормыАвторизации"
&НаКлиенте
Функция сбисАвторизация(Кэш, ПараметрыАвторизации, ЗапускРоботом = Истина) Экспорт
	ТекстОшибки			= "";
	УспешнаяАвторизация	= Ложь;
	//Если указан ИД сессии, то сперва проверим его свежесть.
	Если	ПараметрыАвторизации.Свойство("ИдентификаторСессии")
		И	ЗначениеЗаполнено(ПараметрыАвторизации.ИдентификаторСессии) Тогда
		Кэш.Интеграция.СформироватьНастройкиПодключения(Кэш, ПараметрыАвторизации.ИдентификаторСессии);
		Кэш.Парам.ИдентификаторСессии = ПараметрыАвторизации.ИдентификаторСессии;
		УспешнаяАвторизация = Кэш.Интеграция.сбисСессияДействительна(Кэш) = 1;
		Если УспешнаяАвторизация Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
		
	//Если запускает робот, то авторизуемся, предварительно проверив что правильно переданы параметры.
	Если ЗапускРоботом Тогда
		Отказ = Ложь;
		Если Не ПараметрыАвторизации.Свойство("ВходПоСертификату") Тогда
			Возврат Ложь;
		ИначеЕсли ПараметрыАвторизации.ВходПоСертификату Тогда
			Если	Не ПараметрыАвторизации.Свойство("Сертификат")
				Или	Не ЗначениеЗаполнено(ПараметрыАвторизации.Сертификат) Тогда
				Возврат Ложь;
			КонецЕсли;
			Результат = Кэш.Интеграция.АвторизоватьсяПоСертификату(Кэш,ПараметрыАвторизации.Сертификат,Отказ);
		Иначе
			Если	Не ПараметрыАвторизации.Свойство("Логин")
				Или Не ПараметрыАвторизации.Свойство("Пароль")
				Или	Не ЗначениеЗаполнено(ПараметрыАвторизации.Логин) Тогда
				Возврат Ложь;
			КонецЕсли;
			Результат = Кэш.Интеграция.АвторизоватьсяПоЛогинуПаролю(Кэш,ПараметрыАвторизации.Логин,ПараметрыАвторизации.Пароль,Отказ);
		КонецЕсли;
		Если Отказ Тогда
			ТекстОшибки	= Результат.message;
			Результат	= Ложь;
		КонецЕсли;
	Иначе//Иначе пробуем авторизоваться по имеющимся данным с использованием стандартных механизмов. 
		формаАвторизации = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаАвторизация",,,Кэш.ГлавноеОкно);
		Если	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат)
			Или	(НЕ	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль) Тогда
			УспешнаяАвторизация = формаАвторизации.Авторизоваться(Кэш);
		КонецЕсли;
		Если УспешнаяАвторизация = Истина Тогда
			Результат = Кэш.Парам.ИдентификаторСессии;//с учетом, что в функции авторизоваться в кэш записывается текущий идентификатор, можем взять его оттуда
		Иначе	
			//В случае неудачи открываем окно авторизации				
			//Возможные варианты результата от формы авторизации:
			//Неопределено, форма была закрыта без выполнения авторизации.
			//Строка ID сессии, авторизация выполнена успешно.
			//Строка "Ok" если работаем (переключили через настройку соединения формы авторизации) через каталог обмена, нажатие на кнопку авторизации было выполнено.    
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				//При запуске из-под толстого клиента открываем и смотрим результат.
				Результат = формаАвторизации.ОткрытьМодально();
				Если Результат = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			#Иначе
				//Для оставльных случаев ожидается передача описания оповещения для передачи управления и оценки результата авторизации после закрытия окна авторизации.
				Если ПараметрыАвторизации.Свойство("ОписаниеОповещенияОЗакрытииФормыАвторизации") Тогда
					формаАвторизации.ОписаниеОповещенияОЗакрытии = ПараметрыАвторизации.ОписаниеОповещенияОЗакрытииФормыАвторизации;
					формаАвторизации.Открыть();
					Возврат Неопределено;
				Иначе
					Результат = Ложь;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Ложь Тогда
		Кэш.Парам.ИдентификаторСессии = "";
		Возврат ТекстОшибки;
	КонецЕсли;
	Кэш.Парам.ИдентификаторСессии = Результат;
	Возврат Истина;
КонецФункции

// Функция загружает выбранные пакеты документов в 1С.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	МассивСтрок:				массив, содержащий структуры с описанием пакета. 
//								В структуре должено быть поле "СоставПакета", в котором должен быть список значений со структурами, содержащими поле "Идентификатор"(вложения). 
//								В качестве представления вложения в списке можно указать ини документа из Кэш.ини, для расчета по не стандартной настройке.
//	ДополнительныеПараметры:	необязательная структура. Возможно изменить раздел документа загрузки. Например, для загрузки исходящего документа необходимо передать в "Раздел" "АккордеонОтправленные22"
//
//Возвращает
//	Структура РезультатДействия, в которой содержится общее количество загруженных пакетов, не загруженных пакетов и ошибок, а так же детализация. 
&НаКлиенте
Функция сбисЗагрузитьПакетыВ1С(Кэш, МассивСтрок, ДополнительныеПараметры=Неопределено) Экспорт

	РезультатЗагрузки = Кэш.ОбщиеФункции.РезультатДействия_Получить(Кэш, Новый Структура("ПредставлениеОперации, ФормаВызова", "ЗагрузкаДокумента", "Документ_Шаблон"), Истина);

	Раздел = Неопределено;
	Если	Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		Или	Не ДополнительныеПараметры.Свойство("Раздел",Раздел) Тогда
		Раздел = "АккордеонПолученные11"
	КонецЕсли;
	Кэш.Текущий = Кэш.ГлавноеОкно.сбисСтруктураВыбранногоРаздела(Кэш, Раздел);
	
	Если Не МассивСтрок.Количество() Тогда
		Возврат РезультатЗагрузки;
	КонецЕсли;
		
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗагрузитьДокументыВ1С","Документ_Шаблон", "", Кэш);
	Возврат фрм.ЗагрузитьДокументыВ1С(Кэш, МассивСтрок,ДополнительныеПараметры);//Как результат возвращается объект РезультатДействия.
	 	
КонецФункции

// Функция получает с онлайн пакет документов по ИД пакета
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	ИдПакета:					строка, Идентификатор пакета документов
//	ДополнительныеПараметры:	не используются, оставлены на всякий случай
//
//Возвращает
//	Строка, текст ошибки при выполнении функции
//	Структура, пакет документов с добавленным актом расхождения во вложения
&НаКлиенте
Функция сбисПолучитьПакетДокументовПоИД(Кэш, ИдПакета, ДополнительныеПараметры = Неопределено) Экспорт
	
	СписокСтрок = Новый Структура("СоставПакета");
	СоставПакета = Новый СписокЗначений;
	СоставПакета.Добавить(Новый Структура("Идентификатор", ИдПакета));
	СписокСтрок.СоставПакета = СоставПакета;
	
	МассивПакетов = Кэш.ОбщиеФункции.ПодготовитьСтруктуруДокументаСбис(СписокСтрок, Кэш);
	Если ЗначениеЗаполнено(МассивПакетов) И ТипЗнч(МассивПакетов) = Тип("Массив") Тогда
		Пакет = МассивПакетов[0];
		ПолныйСоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(Пакет, Кэш);
		Возврат Кэш.ОбщиеФункции.ЗаполнитьРеквизитыОснованийПакета(ПолныйСоставПакета, Кэш);
	Иначе
		Возврат "Не удалось получить пакет документов по идентификатору";
	КонецЕсли;
КонецФункции

// Функция формирует Акт расхождения и возвращает пакет документов с доп. вложением акта
//Параметры
// Кэш:							структура, кэш обработки Sbis1C
// Документ1С:					ссылка на документ 1С
// ИдДокумента1С:				структура содержащая ИД пакета и документа (возвращается функцией сбисПолучитьИдентификаторыДокументов)
// ДополнительныеПараметры:		не используются, оставлены на всякий случай
//
//Возвращает
//	Строка, текст ошибки при выполнении функции
//	Структура, пакет документов с добавленным актом расхождения во вложения
&НаКлиенте
Функция сбисСформироватьРасхождение(Кэш, Документ1С, ИдПакета, ИДВложения, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Получаем пакет документов с онлайна
	ПакетДокументов = сбисПолучитьПакетДокументовПоИД(Кэш, ИдПакета);
	
	Если ТипЗнч(ПакетДокументов) = Тип("Строка") Тогда
		Возврат ПакетДокументов;
	КонецЕсли;
	// Ищем нужное вложение по ИД вложения
	Документ = Неопределено;
	Для Каждого Вложение Из ПакетДокументов.Вложение Цикл
		Если Вложение.Идентификатор = ИДВложения И Вложение.Свойство("СтруктураФайла") Тогда
			СтруктураФайлаКонтрагента = Вложение.СтруктураФайла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтруктураФайлаКонтрагента = Неопределено Тогда
		Возврат "В пакете документов не найдено вложение соответствующее документу 1С: "+ Документ1С + " ИдПакета:" + ИдПакета + " ИдВложения:" + ИДВложения;
	КонецЕсли;		
	
	// Дозаполняем пакет
	Результат = Кэш.ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(Кэш, ПакетДокументов, Вложение);
	Если Не Результат.МожемЗагрузитьВ1С Тогда
		Возврат Результат.Статус + ?(Результат.Свойство("ТекстОшибки"), Результат.ТекстОшибки,"") + 
			?(ЗначениеЗаполнено(Документ1С),", 1С - " + Документ1С, "") + ?(ПакетДокументов.Свойство("Название"), ", ЭД - " + ПакетДокументов.Название, "");
	КонецЕсли;						
	
	//Получаем структуру документа 1С
	ИмяДокумента = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
	ДокументОтклонения = Кэш.ОбщиеФункции.РассчитатьЗначение("ДокументОтклонения", Кэш.ФормаНастроек.Ини(Кэш, ИмяДокумента), Кэш);
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	Контекст.Вставить("Документ", Документ1С);
	Контекст.Вставить("ДокументДанные", Кэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(Кэш.ФормаНастроек.Ини(Кэш, ИмяДокумента), Документ1С, Кэш.КэшЗначенийИни, Кэш.Парам));  // alo Меркурий
	
	Если Не Контекст.ДокументДанные.Свойство("мФайл") Тогда
		Возврат "Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента;		
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент","Документ_"+ИмяДокумента,"Документ_Шаблон", Кэш);
	Если Не фрм.ПрочитатьДокумент(Кэш,Контекст) Тогда
		Возврат "Не удалось прочитать документ";
	КонецЕсли;
	Если Контекст.СоставПакета.Вложение.Количество() = 0 Тогда
		Возврат "Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента;	
	КонецЕсли;
	СтруктураФайлаНаша = Контекст.СоставПакета.Вложение[0].СтруктураДокумента;
	
	// Формируем расхождение
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СформироватьРасхождение","Файл_"+ДокументОтклонения,"Файл_Шаблон", Кэш);
	Попытка
		ВложениеРасхождение = фрм.СформироватьРасхождение(Новый Структура("СтруктураФайлаКонтрагента, ВложениеНаше", СтруктураФайлаКонтрагента, Контекст.СоставПакета.Вложение[0]), Кэш);
	Исключение
		// ветка для тех, у кого вынесено формирование расхождения во внешние функции
		ВложениеРасхождение = фрм.СформироватьРасхождение(СтруктураФайлаКонтрагента, СтруктураФайлаНаша, Кэш);
	КонецПопытки;
	ПакетДокументов.Вложение.Добавить(ВложениеРасхождение);
	Возврат ПакетДокументов;
КонецФункции

// Функция выполняет действие на онлайне над массивом подготовленных пакетов документов
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	МассивПакетов:				массив, содержит структуры пакетов документов
//	ИмяКоманды:					строка, название операции над пакетом
//	Комментарий:				строка, комменарий передаваемый при переходе на новый этап
//
//Возвращает
//	Структура, результат выполнения функции
&НаКлиенте
Функция сбисВыполнитьДействие(Кэш, МассивПакетов, ИмяКоманды, Комментарий) Экспорт
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Результат = Новый Структура("РезультатВыполнения", Новый массив);
	Для Каждого СоставПакета Из МассивПакетов Цикл
		НеНашлиДействие = Истина;
		Если СоставПакета.Свойство("Этап") И СоставПакета.Этап.Количество() > 0 И СоставПакета.Этап[0].Свойство("Действие") Тогда
			Для Каждого Действие из СоставПакета.Этап[0].Действие Цикл
				Если Действие.Название = ИмяКоманды Тогда
					НеНашлиДействие = Ложь;
					ДействиеВыполнено = Кэш.Интеграция.сбисВыполнитьДействие(Кэш, СоставПакета, СоставПакета.Этап[0], Действие, Комментарий, "");
					Результат.РезультатВыполнения.Добавить(Новый Структура("Ид, ДействиеВыполнено", СоставПакета.Идентификатор, ДействиеВыполнено));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если НеНашлиДействие Тогда
			Результат.РезультатВыполнения.Добавить(Новый Структура("Ид, ДействиеВыполнено", СоставПакета.Идентификатор, Ложь));
		КонецЕсли;			
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция выполняет команду на онлайне над массивом пакетов документов, предварительно вычитывая их.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	МассивИд:					массив, содержит идентификаторы пакетов документов к выполнению
//	ИмяКоманды:					строка, название операции над пакетами
//	ДополнительныеПараметры:	строка, комменарий передаваемый при переходе на новый этап
//
//Возвращает
//	Структура, результат выполнения функции
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, МассивИд, ИмяКоманды, ДополнительныеПараметры = Неопределено) Экспорт	
	// Применяет указанную команду к пакетам, идентификаторы которых содержатся в МассивИд
	// Нельзя выполнять команды, требующие ввода комментария
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисВыполнитьКоманду",Кэш.ИнтеграцияИмя,"",Кэш);
	Результат = Новый Структура("РезультатВыполнения", Новый массив);
	
	Для Каждого Идентификатор Из МассивИд Цикл
		КомандаВыполнена = фрм.сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, "");
		Результат.РезультатВыполнения.Добавить(Новый Структура("Ид, КомандаВыполнена", Идентификатор, КомандаВыполнена));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Функция получает список документов для обновления статусов документов.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	Фильтр:						структура. Может содержать поля, одноименные полям фильтра на главном окне. По заданному фильтру будут отбираться документы для сопоставления.
//	ДополнительныеПараметры:	необязательная структура. Возможно изменить раздел документа.
//
//Возвращает
//	Струкутра с полем "Таблица_РеестрДокументов" с массивом документов
//	Пустая структура при ошибке
&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш, Фильтр, ДополнительныеПараметры = Неопределено) Экспорт
	Раздел = Неопределено;
	Если	Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		Или	Не ДополнительныеПараметры.Свойство("Раздел",Раздел) Тогда
		Раздел = "АккордеонПолученные11";
	КонецЕсли;
	Кэш.Текущий = Кэш.ГлавноеОкно.сбисСтруктураВыбранногоРаздела(Кэш, Раздел);
	
	filter = Кэш.Интеграция.ПолучитьФильтр(Фильтр, Новый Структура("Тип", Кэш.Текущий.ТипДок));
	
	СписокДокументов = Кэш.Интеграция.сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, Кэш.ГлавноеОкно);
	Возврат СписокДокументов;
КонецФункции

// Функция читает указанный пакет документов
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	ДокументСБИС_Ид:			строка. Содержит идентификатор пакета документов для чтения.
//
//Возвращает
//	Струкутра СоставПакета
//	Ложь при ошибке
&НаКлиенте
Функция сбисПрочитатьДокумент(Кэш, ДокументСБИС_Ид) Экспорт
	СоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ДокументСБИС_Ид);
	Возврат СоставПакета;
КонецФункции

// Функция читает указанное вложение
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	СоставПакета:				структура, результат функции сбисПрочитатьДокумент.
//	Вложение:					структура, разбираемое вложение из элементов СоставПакета.Вложение					
//	ДополнительныеПараметры:	структура, 
//									ТекстHTML - булево. Необходимость получить HTML визуализацию документа.
//	ОшибкаРазбора:				булево, флаг ошибки. Если Истина, то результатом будет структура с полями code, message, details
//
//Возвращает
//	Структура разобранного вложения с данными для загрузки.
//	Структура ошибки code, message, details разбора при ошибках разбора.
//	Неопределено - в случае если вложение является служебным, либо не указано.
&НаКлиенте
Функция сбисПрочитатьВложение(Кэш, СоставПакета, Вложение, ДополнительныеПараметры, ОшибкаРазбора) Экспорт
	Если Не (	Вложение.Свойство("Служебный")
			Или	Вложение.Служебный = "Нет") Тогда
		//Служебные вложения не разбираем.
		Возврат Неопределено;
	КонецЕсли;
	Если	ДополнительныеПараметры.Свойство("ТекстHTML")
		И	ДополнительныеПараметры.ТекстHTML Тогда
		Вложение.Вставить("ТекстHTML", Кэш.Интеграция.ПолучитьHTMLВложения(Кэш, СоставПакета.Идентификатор, Вложение));
	КонецЕсли;
	ДанныеДляЗагрузки = Кэш.ОбщиеФункции.ПолучитьРазобранныеДанныеВложенияСбис(Кэш, СоставПакета, Вложение, ДополнительныеПараметры, ОшибкаРазбора);
	Если ОшибкаРазбора Тогда 
		Возврат ДанныеДляЗагрузки;
	КонецЕсли;
	Для Каждого КлючИЗначение Из ДанныеДляЗагрузки Цикл
		Вложение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Вложение;
КонецФункции

// Функция читает настройки пользователя, выполняет обновление настроек при изменении версии и проверку при изменении настроек
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	ДополнительныеПараметры:	резерв
//
//Возвращает
//	Истина, если ини прошли проверку и успешно установлены.
&НаКлиенте
Функция сбисПрочитатьНастройки(Кэш, ДополнительныеПараметры=Неопределено) Экспорт	
	//Чтение подготовленных настроек 
	Кэш.ГлавноеОкно.сбисПолучитьУстановитьНастройки(Кэш,Ложь);
	Возврат Кэш.ИниВПорядке;
КонецФункции

// Функция формирует структуру кэша обработки, включает обмен со СБИС.
//ДополнительныеПараметры:		необязательная структура, может содержать поля, аналогичные Кэш.Парам (функция сбисПолучитьПарам) При наличии заменяет одноименные поля в кэш.парам.
//                              пример изменения способа обмена: Новый Структура("СпособОбмена", 0); (sdk:0, каталог:1, API:3, extSDK:4, extSDK с шифрованием:5 extSDK2:6, extSDK2 с шифрованием: 7)
//Возвращает
//	Структуру кэш в случае успешного заполнения параметров и активации обмена. 
//	Строку ошибки включения обмена при неудаче
&НаКлиенте
Функция сбисПодготовитьКэш(ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт	
	ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	ПараметрыПередать	= Новый Структура("ТихийРежим", Истина);
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ПараметрыПередать.Вставить("Парам", ДополнительныеПараметры);
	КонецЕсли;
	РезультатПодготовки = ГлавноеОкно.ПослеОткрытияЗаполнитьКэш(ПараметрыПередать, Отказ);
	Если Отказ Тогда
		Возврат РезультатПодготовки.message + "(" + РезультатПодготовки.details + ")";
	КонецЕсли;
	Кэш			= РезультатПодготовки;
	ОбменВключен= Кэш.Интеграция.Включить(Кэш, ДополнительныеПараметры, Отказ);
	Если Не ОбменВключен = Истина Тогда   // если не удалось включить SDK или Плагин
		Отказ = Истина;
		Возврат ОбменВключен;
	КонецЕсли;
	
	Возврат Кэш;
КонецФункции

// Функция выполняет отправку документов
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	МассивСтрок:				список значений, содержащий структуры СоставПакета в качестве значения.
//								где СоставПакета - список значений, содержащий ссылки на документы 1С в качестве значения и наименование файла настройки для расчета документа в качестве представления для возможности точечной корректировки (если не указано, то определяется по типу документа).
//	ДополнительныеПараметры:	необязательная структура, может содержать поле ИниРеестра с имененем ТипДок для изменения настройки формирования для всех документов
//
//Возвращает
//	Истина, если ини прошли проверку и успешно установлены.
&НаКлиенте
Функция сбисОтправка(Кэш, МассивСтрок, ДополнительныеПараметры = Неопределено) Экспорт	
	фрм = сбисПолучитьФорму("Документ_Шаблон");
	Кэш.Текущий.Вставить("Форма",сбисПолучитьФорму("Раздел_Продажа_Шаблон"));
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") и ДополнительныеПараметры.Свойство("ИниРеестра") Тогда
		Кэш.Текущий.ТипДок = ДополнительныеПараметры.ИниРеестра;
	КонецЕсли;
	фрм.ОтправитьДокументы(Кэш,МассивСтрок);
	Возврат Кэш.РезультатОтправки;
КонецФункции

// Функция выполняет сопоставление с документами 1С.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	Фильтр:						структура. Может содержать поля, одноименные полям фильтра на главном окне. По заданному фильтру будут отбираться документы для сопоставления.
//	ДополнительныеПараметры:	Резерв
//Возвращает
//	Список значений с результатом сопоставления
&НаКлиенте
Функция сбисСопоставление(Кэш, Фильтр, ДополнительныеПараметры = Неопределено) Экспорт	
	// сопоставление документов
	//
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Кэш.Текущий.Раздел = "1";
	Результат = Новый Структура("СопоставленныеДокументы", Новый массив);
	СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);
	Если СтруктураНастроек.Свойство("ДатаПоследнегоСопоставленияДокументов") Тогда
		ГлавноеОкно.ФильтрДатаНач = СтруктураНастроек.ДатаПоследнегоСопоставленияДокументов;
	Иначе
		ГлавноеОкно.ФильтрДатаНач = НачалоДня(ТекущаяДата());
	КонецЕсли;
	ГлавноеОкно.ФильтрДатаКнц = ТекущаяДата();
	ГлавноеОкно.ЗаписейНаСтранице = 100;
	ГлавноеОкно.ФильтрЕстьЕще = Истина;
	
	// если передали фильтры извне, то берем переданные значения
	Для Каждого Элемент Из Фильтр Цикл
		ГлавноеОкно[Элемент.Ключ] = Элемент.Значение;
	КонецЦикла;
	
	сч = 0;
	фрмСопост = сбисПолучитьФорму("ФормаСопоставитьСДокументами1С");
	фрмСтатусы = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	// << alo 
	Если Кэш.парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ДублироватьСостояние");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	// alo >>
	СписокСопоставленныхДокументов1С = Новый СписокЗначений;
	
	Пока ГлавноеОкно.ФильтрЕстьЕще Цикл
		сч = сч+1;
		ГлавноеОкно.ФильтрСтраница = сч;
		filter = Кэш.Интеграция.ПолучитьФильтр(ГлавноеОкно, Новый Структура("ТипРеестра", "Входящие"));
 		СтруктураДляОбновленияФормы = Кэш.Интеграция.ПолучитьСписокСобытийПоФильтру(Кэш, filter, ГлавноеОкно);
		Если СтруктураДляОбновленияФормы.Количество()=0 Тогда
			Возврат "Ошибка при получении списка документов с online.sbis.ru";
		КонецЕсли;
		СписокСтрок = Новый СписокЗначений;
		СписокСтрок.ЗагрузитьЗначения(СтруктураДляОбновленияФормы.Таблица_РеестрСобытий);
		СписокДокументовДляСопоставления = фрмСопост.ПодготовитьСписокДокументовКСопоставлению(Кэш, СписокСтрок);
		Для Каждого Строка из СписокДокументовДляСопоставления Цикл
			Если Строка.Документы1С.Количество() = 0 Тогда // Документ еще не сопоставлен
				СписокПодходящихДокументов=Кэш.ОбщиеФункции.НайтиПодходящиеДокументы(Кэш, Строка);
				Если СписокПодходящихДокументов.Количество()=1 Тогда
					Документ1С = СписокПодходящихДокументов[0].Значение;
					Если СписокСопоставленныхДокументов1С.НайтиПоЗначению(Документ1С) = Неопределено Тогда
						СписокСопоставленныхДокументов1С.Добавить(Документ1С);
					Иначе   // документ 1С уже сопоставлен с более поздним документом СБИС
						Продолжить;
					КонецЕсли;
					//Попытка
					//	СуммаДокумента1С = Документ1С.СуммаДокумента;
					//Исключение
					//	СуммаДокумента1С = 0;
					//КонецПопытки;
					//Если Число(СуммаДокумента1С) = Число(Строка.Сумма) Тогда
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", Строка.СоставПакета.Идентификатор,Строка.ИдВложения,Строка.СоставПакета.Состояние.Название);
						фрмСтатусы.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Документ1С, Кэш.Ини.Конфигурация, Кэш.Парам.КаталогНастроек);
						// << alo
						если Кэш.парам.СостояниеЭД тогда
							фрмЭД.ДублироватьСостояние(Строка.СоставПакета, Документ1С);
						конецесли; // alo >>
						СтруктураСвойств.Вставить("Документ1С", Документ1С);
						Результат.СопоставленныеДокументы.Добавить(СтруктураСвойств);
						//сбисЗаписатьСтрокуВЛог("Сопоставлен документ "+строка(Документ1С), ГлавноеОкно.Кэш.Парам.КаталогЛогов);
						//Если ТипЗнч(Документ1С) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда   // если сопоставили накладную, утверждаем пакет
						//	фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисВыполнитьКоманду",Кэш.ИнтеграцияИмя,"",Кэш);
						//	Кэш.Вставить("ДатаУтверждения", ТекущаяДата());
						//	Если фрм.сбисВыполнитьКоманду(Кэш, Строка.СоставПакета,"Утвердить", Строка.СоставПакета.Название)=Истина Тогда
						//		сбисЗаписатьСтрокуВЛог("Утвержден документ "+Строка.СоставПакета.Название, ГлавноеОкно.Кэш.Парам.КаталогЛогов);	
						//	КонецЕсли;
						//КонецЕсли;
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураНастроек = Новый Структура("ДатаПоследнегоСопоставленияДокументов", Формат(ГлавноеОкно.ФильтрДатаКнц, "ДФ=""дд.ММ.гггг ЧЧ.мм.сс"""));
	Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, СтруктураНастроек, Кэш.Парам.ИдентификаторНастроек);

	Возврат Результат;
КонецФункции

// Функция выполняет обработку служебных документов.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	ДополнительныеПараметры:	Резерв
&НаКлиенте
Функция сбисОбработкаСлужебныхДокументов(Кэш, ДополнительныеПараметры = Неопределено) Экспорт	
	Кэш.Интеграция.ОбработкаСлужебныхДокументов(Кэш);
КонецФункции

// Функция выполняет обновление статусов документов.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	ДополнительныеПараметры:	Резерв
&НаКлиенте
Функция сбисОбновлениеСтатусов(Кэш, ДополнительныеПараметры = Неопределено) Экспорт	
	Кэш.Интеграция.ПолучитьСписокИзменений(Кэш);
КонецФункции

// Функция выполняет открытие электронного документа по ссылке документа в 1С.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//	ДополнительныеПараметры:	структура, содержит ссылку "Документ" на документ 1С, для которого необходимо найти и открыть соответствующий документ СБИС
//								номер "Раздел" документа - продажа "3", покупка - "4"
//
//Возвращает
//	Ложь, если не удалось открыть документ.
//	Истина, если документ был открыт
&НаКлиенте
Функция сбисОткрытьДокументПоИдентификатору(Кэш, ДополнительныеПараметры) Экспорт 
	//определяем раздел
	Кэш.Текущий.Раздел = ДополнительныеПараметры.Раздел;
	
	//получаем идентификатор документа
	фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции("ПолучитьИдДокументаДопСвойства", Кэш.ФормаРаботыСоСтатусами);
	Если фрм = Ложь Тогда
		//ИД документа СБИС, в допсвойствах этого объекта 1С нет, так что дальше не обрабатываем
		Сообщить("Не удалось определить функцию поиска свойства документа");
		
		ПараметрыЗаписи = Новый Структура("ВыполнитьВручную,Парам", Истина, Кэш.Парам);
		Кэш.ГлавноеОкно.сбисСохранитьЗначения(ПараметрыЗаписи);
		Возврат Ложь;
	КонецЕсли;	
	ДокументСБИС_Ид = фрм.ПолучитьИдДокументаДопСвойства(ДополнительныеПараметры.Документ, Новый Структура("Конфигурация", Кэш.Ини.Конфигурация));
	
	Если ДокументСБИС_Ид = Неопределено Тогда
		//ИД документа СБИС, в допсвойствах этого объекта 1С нет, так что дальше не обрабатываем
		Сообщить("У этого документа нет идентификатора СБИС, невозможно отобразить электронный документ");
		
		ПараметрыЗаписи = Новый Структура("ВыполнитьВручную,Парам", Истина, Кэш.Парам);
		Кэш.ГлавноеОкно.сбисСохранитьЗначения(ПараметрыЗаписи);
		Возврат Ложь;
	КонецЕсли;	
	
	//сперва авторизуемся. делаем это внутри чтобы не загружать клиента этой работой
	ПараметрыАвторизации = Новый Структура;
	ПараметрыАвторизации.Вставить("ИдентификаторСессии", Кэш.Парам.ИдентификаторСессии);
	ПараметрыАвторизации.Вставить("ВходПоСертификату", Кэш.Парам.ВходПоСертификату);
	ПараметрыАвторизации.Вставить("Сертификат", Кэш.Парам.Сертификат);
	ПараметрыАвторизации.Вставить("Логин", Кэш.Парам.Логин);
	ПараметрыАвторизации.Вставить("Пароль", Кэш.Парам.Пароль);
	
	УспешнаяАвторизация = сбисАвторизация(Кэш, ПараметрыАвторизации, Ложь);
	
	Если Не УспешнаяАвторизация Тогда 
		ПараметрыЗаписи = Новый Структура("ВыполнитьВручную,Парам", Истина, Кэш.Парам);
		Кэш.ГлавноеОкно.сбисСохранитьЗначения(ПараметрыЗаписи);
		Возврат Ложь;
	КонецЕсли;
	/////////////////////////////////////////////////////////////////////////////////
	
	СоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ДокументСБИС_Ид);
	
	Если Тип("Булево") = ТипЗнч(СоставПакета) И НЕ СоставПакета Тогда
		//Проверяем, если ИД в самом документе 1С есть, но на СБИСе по этому ИД документ в этом ЛК не найден, то далее не открываем
		ПараметрыЗаписи = Новый Структура("ВыполнитьВручную,Парам", Истина, Кэш.Парам);
		Кэш.ГлавноеОкно.сбисСохранитьЗначения(ПараметрыЗаписи);
		Возврат Ложь;
	КонецЕсли;
	
	РазделПолученные = сбисПолучитьФорму("Раздел_Полученные_Шаблон");
	СтрТабл = Новый Структура;
	СтрТабл.Вставить("ИдСБИС", ДокументСБИС_Ид);
	СтрТабл.Вставить("СоставПакета", Новый Структура());
	СтрТабл.СоставПакета.Вставить("СоставПакета", СоставПакета);
	РазделПолученные.ПоказатьДокумент(Кэш, СтрТабл);
	ПараметрыЗаписи = Новый Структура("ВыполнитьВручную,Парам", Истина, Кэш.Парам);
	Кэш.ГлавноеОкно.сбисСохранитьЗначения(ПараметрыЗаписи);
	Возврат Истина;
КонецФункции

// Функция массово получает идентификаторы электронных документов по ссылкам документов в 1С.
//Параметры
//	Кэш:						структура, кэш обработки Sbis1C
//  СписокСсылок:				список значений документов 1С, для которых необходимо найти соответствующие электронные документы
//	ДополнительныеПараметры:	структура, может содержать поле "ДополнительнаяИнформация" со списком доп. свойств, которые нужно получить помимо идетификатора документа
//
//Возвращает
//	Ложь, если не удалось открыть документ.
//	Неопределено, если документ был открыт
&НаКлиенте
Функция сбисПолучитьИдентификаторыДокументов(Кэш, СписокСсылок, ДополнительныеПараметры) Экспорт	
	
	ИмяФормыСтатус = Строка(Кэш.ФормаРаботыСоСтатусами);
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументовСБИС",ИмяФормыСтатус,"",Кэш);
	Если фрм = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	СписокИд = Неопределено;
	МассивСвойств = Новый Массив;
	МассивСвойств.Добавить("ДокументСБИС_Ид");
	Если ДополнительныеПараметры.Свойство("ДополнительнаяИнформация") Тогда
		Для Каждого ДопСвойство Из ДополнительныеПараметры.ДополнительнаяИнформация Цикл
			МассивСвойств.Добавить(ДопСвойство);
		КонецЦикла;
	КонецЕсли;
	
	Возврат фрм.ПрочитатьПараметрыДокументовСБИС(СписокСсылок,МассивСвойств,Кэш.Ини.Конфигурация, Новый Структура)	
	
КонецФункции

