////////////////////////////////////////////////////
//////////////Вызов методов Интеграции//////////////
////////////////////////////////////////////////////

//Записывает стуктуру СбисПараметров.
&НаКлиенте
Функция		ЗаписатьСБИСПараметрыСоединения(Кэш, СбисПараметры, Идентификатор, Отказ)
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеКОтправке = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(СбисПараметры);
	Для Каждого Элемент Из ДанныеКОтправке Цикл//Преобразование даты к строке в корректном формате
		СтрокаПроверки = Элемент.Значение;
		Если ТипЗнч(СтрокаПроверки)	= Тип("Дата")	Тогда
			ДанныеКОтправке.Вставить(Элемент.Ключ, Формат(СтрокаПроверки,"ДФ=""дд.ММ.гггг ЧЧ:мм:сс"""));
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗаписи = СтруктураНастроекИзДанныхConnectionConfig(Кэш, Неопределено, Отказ);
	ПараметрыЗаписи.Название = "Запись Сбис параметров";
	ПараметрыЗаписи.Идентификатор = Идентификатор;
	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять = Ложь;
	ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Пользовательские";
	ПараметрыЗаписи.Данные.Параметры = ДанныеКОтправке;
	
	РезультатЗаписи = ЗаписатьConnection(Кэш, ПараметрыЗаписи, Новый Структура("ТихийРежим, ТолькоСбисПараметры,Кэшировать", Истина,Истина,Ложь), Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
	КонецЕсли;
	
	Возврат	РезультатЗаписи;
	
КонецФункции

//Записывает выбранный вариант настроек в виде JSON на сервер.
&НаКлиенте
Функция		ЗаписатьConnection(Кэш, ПараметрыЗаписи, СбисДополнительныеПараметры, Отказ)
	
	ОбновитьИниНаСервере	= Неопределено;
	ЭтоНовоеСоединение		= Неопределено;
	ТипНастроек				= Неопределено;
	Статус					= Неопределено;
	СбисПараметры			= ПараметрыЗаписи.Данные.Параметры;
	
	Если Не ЗначениеЗаполнено(СбисПараметры) Тогда
		СбисПараметры = ПолучитьПараметрыСБИС(Кэш, "");
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура;
	Если	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
		И	СбисДополнительныеПараметры.ТолькоСбисПараметры
		Или	Не	(	(ПараметрыЗаписи.ПараметрыРаботы.Свойство("Статус", Статус) И Статус = "Удален")
				Или	(ПараметрыЗаписи.ПараметрыРаботы.Свойство("ТипНастроек", ТипНастроек) И ТипНастроек = "Стандартные")) Тогда
		ПараметрыОтправки.Вставить("id",		ПараметрыЗаписи.Идентификатор);
		ЭтоНовоеСоединение = Ложь;
	Иначе
		ЭтоНовоеСоединение = Истина;
		ПараметрыОтправки.Вставить("url",		Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(Кэш.ПараметрыСистемы.Конфигурация.URL));
		ПараметрыОтправки.Вставить("service",	Кэш.КэшНастроек.ПараметрыКонфигурации.service);//service для записи берем из параметров конфигурации системы, т.к. может отличаться для работы с конфигом и коннекшеном
		ПараметрыОтправки.Вставить("subsystem",	ПараметрыЗаписи.ПараметрыКонфигурации.subsystem);
		ПараметрыОтправки.Вставить("version",	Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыЗаписи.ПараметрыКонфигурации.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
		СбисПараметры.Вставить("Service4Config", Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
		СбисПараметры.Вставить("nameSubsystem",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(,ПараметрыЗаписи.ПараметрыКонфигурации.subsystem));
	КонецЕсли;
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("СообщатьПриОшибке") Тогда
		СбисДополнительныеПараметры.Вставить("СообщатьПриОшибке", Ложь);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ВернутьОшибку") Тогда
		СбисДополнительныеПараметры.Вставить("ВернутьОшибку", Истина);
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ЕстьОтвет") Тогда
		СбисДополнительныеПараметры.Вставить("ЕстьОтвет", Истина);
	КонецЕсли;
	ЕстьИниКЗаписи	= Булево(ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Количество());
	ФормированиеМеню=	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить
					И	ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять;
	
	ВыполнитьЗапись	= ЕстьИниКЗаписи Или ЭтоНовоеСоединение;
	//Если запись параметров, то не обрабатываем коннекшен, а только запишем параметры
	Если Не	(	СбисДополнительныеПараметры.Свойство("ТолькоСбисПараметры")
			И	СбисДополнительныеПараметры.ТолькоСбисПараметры) Тогда
		//Если это не запись сбиспараметров, то проверим необходимость обновить сбисменю. Если надо, то выполним запись 	
		ini_array = Новый Массив;
		//Необязательные параметры. Если есть, то передаём
		Если ПараметрыЗаписи.Свойство("Название") Тогда
			ПараметрыОтправки.Вставить("name_connection",	Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Название));
		КонецЕсли;
		Если	ПараметрыЗаписи.Свойство("ДатаИзмененияНастроек")
			И	ЗначениеЗаполнено(ПараметрыЗаписи.ДатаИзмененияНастроек) Тогда
			ПараметрыОтправки.Вставить("update_date",		Формат(ПараметрыЗаписи.ДатаИзмененияНастроек,"ДФ=""гггг-ММ-дд ЧЧ:мм:сс"""));
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.Свойство("Автообновление") Тогда
			ПараметрыОтправки.Вставить("auto_update ",		ПараметрыЗаписи.ПараметрыРаботы.Автообновление);
		КонецЕсли;
		//Если надо апдейтнуть меню по данным, то делаем только если сразу отправим на БЛ
		Если ФормированиеМеню Тогда
			ПараметрыЗаписи.Данные.Меню = СформироватьСбисМенюПодключения(Кэш, ПараметрыЗаписи, Отказ);
		КонецЕсли;
		//Конвертнём и добавим в параметры ини к обновлению на сервисе
		Если ЕстьИниКЗаписи Тогда
			ПараметрыЗапроса = Новый Структура
				("Идентификатор,				ПараметрыКонфигурации,					СбисМеню,						Искать",
				ПараметрыЗаписи.Идентификатор,	ПараметрыЗаписи.ПараметрыКонфигурации,	ПараметрыЗаписи.Данные.Меню,	Новый Структура("Включено", "01"));
			ДанныеСпискаИни		= СформироватьСписокИни(Кэш,ПараметрыЗапроса,Отказ);
			КонвертированныеИни	= Новый Структура;
			Для Каждого ИмяИниВО Из  ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				Если Не ПараметрыЗаписи.Данные.Ини.Свойство(ИмяИниВО) Тогда
					Отказ = Истина;
					Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗаписатьConnection", 785, "Ошибка во входящих данных", "Отсутствует файл настроек " + ИмяИниВО + " в данных к отправке!");
				КонецЕсли;
				КонвертированныеИни.Вставить(ИмяИниВО, ПараметрыЗаписи.Данные.Ини[ИмяИниВО]);
			КонецЦикла;
			КонвертированныеИни = ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(КонвертированныеИни);
			
			Для Каждого ИмяИниВО Из ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить Цикл
				ЗаписьИни			= СбисОписаниеИни(Кэш);
				ЗначениеИни			= КонвертированныеИни[ИмяИниВО];
				СписокКлючейОчистить= Новый Массив;
				Для Каждого КлючИЗначениеЗначениеИни Из ЗначениеИни Цикл
					Если Лев(КлючИЗначениеЗначениеИни.Ключ, 4) = "Сбис" Тогда
						СписокКлючейОчистить.Добавить(КлючИЗначениеЗначениеИни.Ключ);
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючОчистить Из СписокКлючейОчистить Цикл
					ЗначениеИни.Удалить(КлючОчистить);
				КонецЦикла;
				
				ИмяИниJson	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
				ЭлементКарты= ДанныеСпискаИни.Карта.НайтиПоЗначению(ИмяИниJson);
				ДанныеСписка= ДанныеСпискаИни.Данные[ДанныеСпискаИни.Карта.Индекс(ЭлементКарты)];
				ЗаполнитьЗначенияСвойств(ЗаписьИни, ДанныеСписка);
			
				ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ЗначениеИни);
				ini_array.Добавить(ЗаписьИни);
			КонецЦикла;
		КонецЕсли;
		//Добавим меню в список отправляемых ини
		Если ФормированиеМеню Тогда
			ЗаписьИни = СбисОписаниеИниМеню(Кэш);
			ЗаписьИни.data = Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(ПараметрыЗаписи.Данные.Меню);
			ini_array.Добавить(ЗаписьИни);
			ВыполнитьЗапись = Истина;
		КонецЕсли;
	КонецЕсли;
	//Добавим СбисПараметры в отправку		
	Если	(	(	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить
				И	ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять) 
			Или	ЭтоНовоеСоединение)
		И	СбисПараметры.Количество() Тогда
		ПараметрыОтправки.Вставить("json_connection", Кэш.РаботаСJSON.ПреобразоватьЗначениеВJSON(СбисПараметры));
		ВыполнитьЗапись = Истина;
	КонецЕсли;
	
	Если ВыполнитьЗапись Тогда
		ПараметрыОтправки = Новый Структура("props, ini", ПараметрыОтправки, ini_array);
		ТихийРежим = Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при записи промежуточных данных, вроде меню и параметров
		Если Не СбисДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
			ТихийРежим = Ложь;
		КонецЕсли;
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Запись настроек", Кэш.ГлавноеОкно);
		КонецЕсли;
		Результат = Кэш.Интеграция.ЗаписатьConnection(Кэш, ПараметрыОтправки, СбисДополнительныеПараметры, Отказ);
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	КонецЕсли;
	Если Не Отказ Тогда
		ПараметрыЗаписи.Идентификатор =	Результат;
		ПараметрыЗаписи.ПараметрыРаботы.ТипНастроек = "Пользовательские";
		ПараметрыЗаписи.ПараметрыРаботы.Статус		= "Активен";
		ПараметрыЗаписи.ПараметрыРаботы.СбисИни.СписокОтправить.Очистить();
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисПараметры.Обновить = Ложь;
		КонецЕсли;
		Если ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Отправлять Тогда
			ПараметрыЗаписи.ПараметрыРаботы.СбисМеню.Обновить = Ложь;
		КонецЕсли;
		Если СбисДополнительныеПараметры.Кэшировать Тогда
			Кэширование_Поместить_Настройки(Кэш, ПараметрыЗаписи, Отказ);
		КонецЕсли;
		//Здесь нужно для того, чтобы если в каталоге отключили узлы, то и в рабочих ини узлов быть не должно. После переполучения, ини очистятся в конверторе.
		Если ЕстьИниКЗаписи Тогда
			ОчиститьОтключенныеУзлы(ПараметрыЗаписи.Данные.Ини);
		КонецЕсли;
	КонецЕсли;

	Возврат	Результат;
	
КонецФункции

//Получает стуктуру СбисПараметров. 
&НаКлиенте
Функция		ПолучитьСБИСПараметрыСоединения(Кэш, Идентификатор, Отказ)
	
	Если Отказ Тогда
		Возврат Неопределено;
	//ИначеЕсли	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")
	//		И	Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор = Идентификатор Тогда
	//	Возврат Кэш.КэшНастроек.ВыбранныеНастройки.СбисПараметры;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id", Строка(Идентификатор));
	
	Результат = ВыполнитьПолучениеИни(Кэш, "ReadConnection", Новый Структура("props, ini", ПараметрыЗапроса, Неопределено), Новый Структура("СообщатьПриОшибке,ВернутьОшибку", Ложь,Истина), Отказ);
	Если Не Отказ Тогда
		Результат = СтруктураНастроекИзДанныхConnectionConfig(Кэш, Результат, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Идентификатор = "";//При любой ошибке в процессе получения параметров очищается идентификатор, чтобы не спамить сообщениями об ошибках при дальнейших попытках получения.
		Если	Строка(Результат.code) = "756" Тогда//Код ошибки 756 - подключение не доступно для пользователя, либо было удалено в процессе работы. В любом случае, настройки получить не выйдет.
			Отказ = Ложь;
			Если	Кэш.Текущий.ТипДок = ""
				Или	(	ПараметрыРаботы.Свойство("ИзменениеПользователя")
					И	ПараметрыРаботы.ИзменениеПользователя)
				Или	(	ПараметрыРаботы.Свойство("ИзмененаФормаНастроек")
					И	ПараметрыРаботы.ИзмененаФормаНастроек)Тогда//Было изменение пользователя, или это первый запуск окна(до этого работали под другим пользователем).
				Возврат Неопределено;
			Иначе//Надо предложить сохранить настройки при следующем переходе. Для этого включаем кэш настроек с сохранением того, что было получено и ставим флаг на изменение.
				Кэш.КэшНастроек.ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые", Истина);
				ПриПереходеВРазделФайловНастроек(Кэш, Новый Структура("КэшироватьВсеПолучаемые", Истина), Отказ);
				ВыбранныеНастройки = Неопределено;
				Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда 
					ВыбранныеНастройки.ПараметрыРаботы.Статус = "Удален";
					ВыбранныеНастройки.Идентификатор	= ПараметрыЗапроса.id;
					ВыбранныеНастройки.Название			= Кэш.ГлавноеОкно.НастройкиНазвание;
					ВыбранныеНастройки.ПараметрыРаботы.Автообновление	= Кэш.ГлавноеОкно.НастройкиАвтообновление;
					ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек		= "Пользовательские";
				КонецЕсли;
				ПараметрыДиалога = Новый Структура("ТекстВопроса, КнопкиДиалога", "Сохранить текущие настройки и создать подключение повторно?", РежимДиалогаВопрос.ДаНет);
				Кэш.КэшНастроек.Вставить("ИзмененияВНастройках_ПараметрыДиалога",ПараметрыДиалога);
				Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
			КонецЕсли;
		КонецЕсли;
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		Возврат	Неопределено;
	КонецЕсли;
	
	СбисПараметры = Неопределено;
	Если Не	ЗначениеЗаполнено(Результат.Данные.Параметры) Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	СбисПараметры = Результат.Данные.Параметры;
	Если ТипЗнч(СбисПараметры) = Тип("Строка") Тогда//При работе через крипто плагин здесь строка, вместо структуры. Временный костыль, потом надо разобраться, почему.
		СбисПараметры = Кэш.РаботаСJSON.СбисПрочитатьJSON(СбисПараметры);
	КонецЕсли;
	
	Возврат	Кэш.ФормаНастроекОбщее.ОбработатьСтруктуруПараметров(СбисПараметры);
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ)
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	СписокИни = Неопределено;
	
	ПараметрыЗапроса = Новый Структура("service, connection_type", ПараметрыПолучения.ПараметрыКонфигурации.service, "user");
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("URL") Тогда
		//ПараметрыЗапроса.Вставить("url", ЗначениеВJSON(ПараметрыПолучения.ДополнительныеПараметры.URL));
	КонецЕсли;
	Если ПараметрыПолучения.ДополнительныеПараметры.Свойство("subsystem") Тогда
		ПараметрыЗапроса.Вставить("subsystem", ПараметрыПолучения.ДополнительныеПараметры.subsystem);
	КонецЕсли;
	ПараметрыСообщения		= Новый Структура("filter, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	ТихийРежим				= Неопределено;//Передаем тихий режим как дополнительный параметр чтобы не показывать состояния при работе в "фоне", например при автоподборе соединения
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	
	РезультатМетода = Кэш.Интеграция.ПолучитьСписокConnection(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);	
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый Массив;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение списка настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		СтрокаРезультатДобавить = СтруктураНастроекИзДанныхConnectionConfig(Кэш, СтрокаРезультат, Отказ);
		Если Отказ Тогда
			Возврат СтрокаРезультатДобавить;
		КонецЕсли;
		ЧтениеИни_ОбработатьРезультат(Кэш, СтрокаРезультатДобавить);
		Результат.Добавить(СтрокаРезультатДобавить);
	КонецЦикла;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Возврат	Результат;
	
КонецФункции

//Получает список строк IntegrationConnection.
&НаКлиенте
Функция		ПолучитьСписокConfig(Кэш, ПараметрыПолучения, Отказ)
	Если	Отказ	Тогда
		Возврат	Неопределено
	КонецЕсли;
	
	ПараметрыСообщения		= Новый Структура("service", ПараметрыПолучения.ПараметрыКонфигурации.service);
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	РезультатМетода			= Кэш.Интеграция.ПолучитьСписокConfig(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ);	
	Если Отказ Тогда
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого СтрокаРезультат Из РезультатМетода Цикл
		СтрокаРезультатДобавить = СтруктураНастроекИзДанныхConnectionConfig(Кэш, СтрокаРезультат, Отказ);
		Если Отказ Тогда
			Возврат СтрокаРезультатДобавить;
		КонецЕсли;
		ЧтениеИни_ОбработатьРезультат(Кэш, СтрокаРезультатДобавить);
		Результат.Добавить(СтрокаРезультатДобавить);
	КонецЦикла;
	Возврат	Результат;

КонецФункции

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnection(Кэш, ПараметрыПолучения, Отказ)
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	ПараметрыКонвертации = Неопределено;
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("id",		Строка(ПараметрыПолучения.Идентификатор));
	ПараметрыЗапроса.Вставить("version",Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(ПараметрыПолучения.ПараметрыКонфигурации.Version,"СтрокуВЧисло"),"ЧРГ=; ЧН=0; ЧГ=0"));
	Если	ПараметрыПолучения.ДополнительныеПараметры.Свойство("ТолькоПользовательские")
		И	ПараметрыПолучения.ДополнительныеПараметры.ТолькоПользовательские Тогда
		//Если получаем только пользовательские изменения, то при конвертации не требуется удалять отключенные узлы
		ПараметрыЗапроса.Вставить("read_config", Ложь);
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Ложь);
	КонецЕсли;	
	
	ПараметрыСообщения = Новый Структура("props, ini", ПараметрыЗапроса, ПараметрыПолучения.СписокИни);		
	Результат = ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ПараметрыПолучения.ДополнительныеПараметры, Отказ);
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;

	ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации);

	Возврат	Результат;
	
КонецФункции	

//Получает типовые настройки по параметрам системы.
&НаКлиенте
Функция		ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ)
	
	Если Отказ Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Результат				= Неопределено;
	ДополнительныеПараметры	= ПараметрыПолучения.ДополнительныеПараметры;
	ТихийРежим				= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	ПараметрыКонфигурации	= ПараметрыПолучения.ПараметрыКонфигурации;
	Запрос_Фильтр			= Новый Структура("version,subsystem,service");
	Если Не ЗначениеЗаполнено(ПараметрыКонфигурации) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.ПолучитьConfig", 600, "Неизвестная ошибка настроек", "Отсутствует описание конфигурации для получения стандартных настроек! Обратитесь в тех. поддержку.");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Запрос_Фильтр, ПараметрыКонфигурации);
	Запрос_Фильтр.Вставить("version", Формат(Кэш.ОбщиеФункции.СериализоватьВерсию(Запрос_Фильтр.version,"СтрокуВЧисло"), "ЧРГ=; ЧН=0; ЧГ=0"));
	
	ПараметрыСообщения = Новый Структура("props, ini", Запрос_Фильтр, ПараметрыПолучения.СписокИни);
	
	Если ПустаяСтрока(ПараметрыСообщения.props.subsystem) Тогда//Это пользовательская конфигурация. Генерируем ряд обязательных параметров, всё остальное берётся по-умолчанию.
		РезультатМетода = Новый Структура(
		"name_config,					auto_update,service,							subsystem,							version", 
		"Пользовательская конфигурация",Ложь,		ПараметрыСообщения.props.service,	ПараметрыСообщения.props.subsystem,	ПараметрыСообщения.props.version);
	Иначе
		РезультатМетода	= ВыполнитьПолучениеИни(Кэш, "ReadConfig", ПараметрыСообщения, ДополнительныеПараметры, Отказ);//Получаем типовые конфиги.
		Если РезультатМетода = Неопределено Тогда
			Отказ = Истина;
			ИмяЗапрашиваемойКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыСообщения.props.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыСообщения.props));
			РезультатМетода = Новый Структура("code,message,details", 765, "Значение не найдено в таблице настроек", СтрЗаменить("Настройки %CF% не найдены!", "%CF%", ИмяЗапрашиваемойКонфигурации));
		КонецЕсли;
	КонецЕсли;
	Если	Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение стандартных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	Результат = СтруктураНастроекИзДанныхConnectionConfig(Кэш, РезультатМетода, Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Если Отказ Тогда 
		Возврат	Результат;
	КонецЕсли;
	
	ЧтениеИни_ОбработатьРезультат(Кэш, Результат);
	
	Возврат	Результат;
	
КонецФункции

//Функция выполняет разбивку получения ини по пакетно, для ускорения разбора данных.
&НаКлиенте
Функция		ВыполнитьПолучениеИни(Кэш,Метод,ПараметрыМетода,ДополнительныеПараметры,Отказ)
	
	СписокКЗапросу	= Неопределено;
	Результат		= Неопределено;
	ПолучатьИни		= Неопределено;
	
	Если ПараметрыМетода.Свойство("ini", СписокКЗапросу) Тогда
		ПолучатьИни = Не СписокКЗапросу = Неопределено;
	Иначе
		ПолучатьИни = Ложь;
	КонецЕсли;
	
	Если ПолучатьИни Тогда
		ЧислоИниЗаРаз = Кэш.КэшНастроек.ПараметрыНастроек.ПолучатьИниЗаРаз;
		СписокРазовоеЧтение = Новый Массив;
		Если СписокКЗапросу.Количество() > ЧислоИниЗаРаз Тогда
			Для Каждого ИниПолучить Из СписокКЗапросу Цикл
				Если СписокРазовоеЧтение.Количество() = ЧислоИниЗаРаз Тогда
					ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
					РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДополнительныеПараметры, Отказ);
					Если Отказ Тогда
						Возврат РезультатПолучения;
					КонецЕсли;
					ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
					СписокРазовоеЧтение = Новый Массив
				КонецЕсли;
				СписокРазовоеЧтение.Добавить(ИниПолучить);
			КонецЦикла;
			Если СписокРазовоеЧтение.Количество() Тогда
				ПараметрыМетода.Вставить("ini", СписокРазовоеЧтение);
				РезультатПолучения = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДополнительныеПараметры, Отказ);
				Если Отказ Тогда
					Возврат РезультатПолучения;
				КонецЕсли;
				ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатПолучения,Отказ);
			КонецЕсли;
		Иначе//Список пустой, или нужно инишек меньше, чем разбивка.
			ПараметрыМетода.Вставить("ini", СписокКЗапросу);
			Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДополнительныеПараметры, Отказ);
		КонецЕсли;
	Иначе
		Результат = Кэш.Интеграция.ПолучитьИни(Кэш, Метод, ПараметрыМетода, ДополнительныеПараметры, Отказ);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура	ВыполнитьПолучениеИни_ДобавитьВРезультат(Кэш,Результат,РезультатЗапроса,Отказ)
	ДанныеРезультат = Неопределено;
	ДанныеЗапроса	= Неопределено;
	Если Результат = Неопределено Тогда
		Результат = РезультатЗапроса;
	ИначеЕсли	Результат.Свойство("data",			ДанныеРезультат)
			И	РезультатЗапроса.Свойство("data",	ДанныеЗапроса) Тогда
		Если ТипЗнч(ДанныеРезультат) = Тип("Строка") Тогда
			data = Новый Массив;
			data.Добавить(ДанныеРезультат);
			Результат.data = data;	
		КонецЕсли;
		Результат.data.Добавить(ДанныеЗапроса);
	КонецЕсли;
КонецПроцедуры

//Получает настройки по ID.
&НаКлиенте
Функция		ПолучитьConnectionССервиса(Кэш, ПараметрыСообщения, ДополнительныеПараметры, Отказ) Экспорт
	
	ТихийРежим	= Неопределено;//Можно передать отдельно флаг тихого режима, чтобы статус не скакал при получении промежуточных данных, вроде меню и параметров
	ИмяМетода	= "ReadConnection";
	Если Не ДополнительныеПараметры.Свойство("ТихийРежим", ТихийРежим) Тогда
		ТихийРежим = Кэш.ТихийРежим;
	КонецЕсли;
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	
	РезультатМетода = ВыполнитьПолучениеИни(Кэш, ИмяМетода, ПараметрыСообщения, ДополнительныеПараметры, Отказ);
	
	Если Отказ Тогда
		Если Не ТихийРежим Тогда
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;	
		Возврат	РезультатМетода;
	КонецЕсли;
	
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Чтение сохраненных настроек", Кэш.ГлавноеОкно);
	КонецЕсли;	
	Результат = СтруктураНастроекИзДанныхConnectionConfig(Кэш, РезультатМетода, Отказ);
	Если Не ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	Возврат	Результат;
	
КонецФункции	

//Функция преобразует результат, полученный от БЛ к структуре для работы в 1С. 
&НаКлиенте
Функция		СтруктураНастроекИзДанныхConnectionConfig(Кэш, Соединение, Отказ)
	//Что-то вроде класса. Все ключи структуры работы с соединением
	//Статус	- возможные значнения "Активен", "Удален"
	ПараметрыРаботы = Новый Структура("Статус, ТипНастроек, Автообновление, Изменен", "Активен","Стандартные", Истина, Ложь);
	//Определяет работу со Сбис параметрами:
	//Отправлять- если нет необходимости записывать на сервис, то флаг переключить в ложь. Тогда изменения будут кэшироваться в выбранном подключении
	//Обновить	- флаг изменения в параметрах. Если переключен в истину, то будет проведена отправка на сервис.
	ПараметрыРаботы.Вставить("СбисПараметры",	Новый Структура("Обновить, Отправлять", Ложь, Истина));
	ПараметрыРаботы.Вставить("СбисМеню",		Новый Структура("Обновить, Отправлять", Ложь, Истина));
	ПараметрыРаботы.Вставить("СбисИни",			Новый Структура("СписокОтправить", Новый Массив));
	Результат = Новый Структура(
	"	ПараметрыРаботы,Данные,									Ошибки,				Название, Идентификатор, ПараметрыКонфигурации, ДатаИзмененияНастроек", 
		ПараметрыРаботы,Новый Структура("Ини, Меню, Параметры"),Новый Соответствие, "Пустые настройки");
	Если Соединение = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Результат.Вставить("Пользователь");
	
	Если Соединение.Свойство("ID", Результат.Идентификатор) Тогда
		Результат.Идентификатор = Строка(Результат.Идентификатор);
	Иначе
		Результат.Идентификатор = "";
	КонецЕсли;
	Если Не Соединение.Свойство("auto_update", Результат.ПараметрыРаботы.Автообновление) Тогда
		Результат.ПараметрыРаботы.Автообновление = Истина;
	ИначеЕсли ТипЗнч(Результат.ПараметрыРаботы.Автообновление) = Тип("Строка") Тогда
		Результат.ПараметрыРаботы.Автообновление = Кэш.РаботаСJSON.СбисПрочитатьJSON(Результат.ПараметрыРаботы.Автообновление);
	КонецЕсли;
	Если Не Соединение.Свойство("user", Результат.Пользователь) Тогда
		Результат.Пользователь	= "";
	КонецЕсли;
	Если Не Соединение.Свойство("name_connection", Результат.Название) Тогда
		Результат.Название	= Соединение.name_config;
	Иначе//Так, как для полей в JSON идёт двойное экранирование, снимаем его для названия
		Попытка
			Результат.Название	= Кэш.РаботаСJSON.СбисПрочитатьJSON("""" + Результат.Название + """");
		Исключение
			//Некорректное название. Оставляем как есть?
		КонецПопытки;
	КонецЕсли;
	Если Соединение.Свойство("update_date",		Результат.ДатаИзмененияНастроек) Тогда//Дата последней правки настроек
		Результат.ДатаИзмененияНастроек =	Дата(Лев(СтрЗаменить(СтрЗаменить(СтрЗаменить(Результат.ДатаИзмененияНастроек,
											"-",""),
											" ",""),
											":", ""),
											14));
	Иначе
		Результат.ДатаИзмененияНастроек = ТекущаяДата();
	КонецЕсли;
	
	Если Не ПустаяСтрока(Результат.Идентификатор) Тогда
		ПараметрыРаботы.ТипНастроек = ?(ПустаяСтрока(Результат.Пользователь), "Общие", "Пользовательские");
	КонецЕсли;
	
	ПараметрыКонфигурации = Новый Структура("service,subsystem,url", Соединение.service,Соединение.subsystem);											
	Если Не Соединение.Свойство("url", ПараметрыКонфигурации.url) Тогда
		ПараметрыКонфигурации.Удалить("url");
	КонецЕсли;
	ПараметрыКонфигурации.Вставить("version", ?(Соединение.Свойство("version_config"),
												Соединение.version_config,
												Соединение.version));
	Результат.ПараметрыКонфигурации = ПараметрыКонфигурации;
	Результат.Данные.Параметры = Новый Структура;
	СтрокаJson = Неопределено;
	Если	Соединение.Свойство("json_connection", СтрокаJson)
		И	ЗначениеЗаполнено(СтрокаJson) Тогда
		СбисСтрокаJson = Кэш.РаботаСJSON.СбисПрочитатьJSON(СтрокаJson);
		Если Не ТипЗнч(СбисСтрокаJson) = Тип("Структура") Тогда
			Отказ = Истина;
			Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.СтруктураНастроекИзДанныхConnectionConfig", 785, "Ошибка во входящих данных", "Неизвестная структура параметров json_connection", СбисСтрокаJson);
		КонецЕсли;
		Результат.Данные.Параметры = Кэш.ФормаНастроекОбщее.ОбработатьСтруктуруПараметров(СбисСтрокаJson)
	КонецЕсли;
	
	data = Неопределено;
	Если	Соединение.Свойство("data", data)
		И	ЗначениеЗаполнено(data) Тогда//При пакетном чтении ини, в data будет массив строк.
		Если Не ТипЗнч(data) = Тип("Массив") Тогда
			Списокdata = Новый Массив;
			Списокdata.Добавить(data);
			data = Списокdata;
		Иначе
			Списокdata = data;
		КонецЕсли;
		data = Новый Структура;
		Для Каждого Строкаdata Из Списокdata Цикл
			Попытка
				Соединениеdata = Кэш.РаботаСJSON.СбисПрочитатьJSON(Строкаdata);
				Для	Каждого КлючИЗначение Из Соединениеdata Цикл
					ИмяИни = КлючИЗначение.Ключ;
					ЗначениеИни = Неопределено;
					Если Не КлючИЗначение.Значение.Свойство("data", ЗначениеИни) Тогда
						ЗначениеИни = КлючИЗначение.Значение;
					КонецЕсли;
					//В меню флаги не нужны
					Если ИмяИни = "сбисМеню" Тогда
						Результат.Данные.Меню = ЗначениеИни;
						Продолжить;
					КонецЕсли;
					data.Вставить(ИмяИни, ЗначениеИни);
					//Флаг типовой ини. Если свойства нет, подразумевается, что это и так типовая
					Если КлючИЗначение.Значение.Свойство("standart") Тогда
						data[ИмяИни].Вставить("СбисЕстьТиповая",(КлючИЗначение.Значение.standart = 1));
					Иначе
						data[ИмяИни].Вставить("СбисЕстьТиповая",Истина);
					КонецЕсли;
					//Флаг пользовательской ини. Если свойства нет, подразумевается, что пользовательской тоже нет.
					data[ИмяИни].Вставить("СбисЕстьИзменения",	(КлючИЗначение.Значение.Свойство("custom") И КлючИЗначение.Значение.custom = 1));
					//Флаг автообновления ини. Если включено и есть типовая.
					data[ИмяИни].Вставить("СбисАвтообновление",	(Результат.ПараметрыРаботы.Автообновление И data[ИмяИни].СбисЕстьТиповая));
				КонецЦикла;
			Исключение
				Результат	= Новый Структура("code,message,details", 100, "Ошибка разбора файлов настроек.", Результат.Название + ": " + ОписаниеОшибки());
				Отказ		= Истина;
				Прервать;
			КонецПопытки;
		КонецЦикла;
	Иначе
		data = Новый Структура;
	КонецЕсли;
	Если Не Отказ Тогда
		Результат.Данные.Ини = data;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////
////////////////Конвертеры настроек////////////////
///////////////////////////////////////////////////

///////////////////////////////
//Из формата обработки в JSON//

//Функция преобразует структуру файлов настроек из "привычного" для обработки вида в формат JSON.
&НаСервереБезКонтекста
Функция		ПреобразованиеВОИни_JSONИни_ВыполнитьПреобразование(Знач КэшИни) Экспорт
	
	Результат = Новый Структура();
	Для	Каждого	КлючИЗначение Из КэшИни Цикл
		//Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеИниСтВJSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение));
		Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, Новый Структура("Уровень_Текущий, Уровень_ВложенныйМассив, РежимМассива, ОпределятьТипМассив", 0, 0, Ложь, Истина)));
	КонецЦикла;
	Возврат	Результат;
		
КонецФункции

//Флаг режим массив определяет форму возвращаемого значения, флаг ОпределятьТипМассив определяет необходимости проверки текущего элемента на то, является ли он массивом
&НаСервереБезКонтекста
Функция		ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(Знач КэшИни, ПараметрыКонвертации)
	
	Результат	= ?(ПараметрыКонвертации.РежимМассива, Новый Массив(), Новый Структура());
	
	Для	Каждого	КлючИЗначение Из КэшИни Цикл
		КонтекстКонвертации = Новый Структура;
		//Пробросим контекст в подузлы
		Для Каждого КлючИЗначениеПараметр Из ПараметрыКонвертации Цикл
			КонтекстКонвертации.Вставить(КлючИЗначениеПараметр.Ключ, КлючИЗначениеПараметр.Значение);
		КонецЦикла;
		КонтекстКонвертации.Уровень_ВложенныйМассив = 0;
		Если		КлючИЗначение.Ключ	= "СписокДокументов"
				И	КонтекстКонвертации.Уровень_Текущий = 0 Тогда
			//Узел СписокДокументов не обрабатываем. Вообще.
			Продолжить;
		ИначеЕсли   КлючИЗначение.Ключ	= "Вложения" Тогда
			Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
				КонтекстКонвертации.Удалить("ИмяУзла");
			КонецЕсли;
			КонтекстКонвертации.Вставить("Сократить", "Значение");//В значение по ключу узла, в значении ини которого будет сокращаемый ключ, будет добавлен сразу сокращаемый узел.
			КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
			Результат.Вставить(КлючИЗначение.Ключ, Новый Структура("Имя, Значение", КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации)));
			Продолжить;
		ИначеЕсли	КлючИЗначение.Ключ = "мФайл"
				Или	КлючИЗначение.Ключ = "мДокумент" Тогда
			//Если встречается структура в которой в мФайле идёт затем мДокумент, то это массив. Нужно поймать имя и проверять дальше
			КонтекстКонвертации.Вставить("СистемныйКлюч", КлючИЗначение.Ключ);
		КонецЕсли;
				
		//Проверим текущий элемент: не массивом ли он должен быть
		КонтекстКонвертации.РежимМассива = ?(КонтекстКонвертации.ОпределятьТипМассив, ПреобразованиеВОИни_JSONИни_ЭтоМассив(КлючИЗначение.Ключ, КлючИЗначение.Значение, КонтекстКонвертации), Ложь);
		
		Если	ПараметрыКонвертации.РежимМассива	Тогда
			Если	КонтекстКонвертации.РежимМассива
				И	КлючИЗначение.Значение.Свойство("Значение") Тогда
				//Это массив в массиве
				ЭлементДобавить	= ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(КлючИЗначение.Значение);
				ЭлементДобавить.Вставить("Имя",	КлючИЗначение.Ключ);
			Иначе
				КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
				ЭлементДобавить	= Новый	Структура("Имя, Значение", КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации));
			КонецЕсли;
			Результат.Добавить(ЭлементДобавить);
		Иначе
			Если	(Не	ТипЗнч(КлючИЗначение.Значение) = Тип("Структура"))	Тогда
				Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
					Результат.Вставить("Имя", КонтекстКонвертации.ИмяУзла);
				КонецЕсли;
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ИначеЕсли	(	КлючИЗначение.Значение.Свойство("Отбор")		)	Тогда
				Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(КлючИЗначение.Значение));
			ИначеЕсли 	(	КлючИЗначение.Значение.Свойство("Значение")		)	Тогда
				Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")	Тогда
					Если	КонтекстКонвертации.Свойство("Сократить")
						И	КлючИЗначение.Значение.Свойство(КонтекстКонвертации.Сократить) Тогда
						Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение[КонтекстКонвертации.Сократить]);
					Иначе	
						КонтекстКонвертации.Вставить("РежимМассива", Ложь);
						Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
							КонтекстКонвертации.ИмяУзла = КлючИЗначение.Ключ;
						КонецЕсли;
						КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
						Результат.Вставить(КлючИЗначение.Ключ, ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации));
					КонецЕсли;
				Иначе
					Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЕсли;
			Иначе
				Если КонтекстКонвертации.Свойство("ИмяУзла") Тогда
					КонтекстКонвертации.ИмяУзла = КлючИЗначение.Ключ;
				КонецЕсли;
				КонтекстКонвертации.Уровень_Текущий = КонтекстКонвертации.Уровень_Текущий + 1;
				ПромежуточныйРезультат = ПреобразованиеВОИни_JSONИни_ПреобразоватьСтруктуруИни(КлючИЗначение.Значение, КонтекстКонвертации);
				Результат.Вставить(КлючИЗначение.Ключ, ПромежуточныйРезультат);
			КонецЕсли;
			Если КонтекстКонвертации.РежимМассива Тогда
				//Первый встречный вложенный массив будет нашим мерилом для вложенности.
				//TODO39 добавить анализ уровней, если в одном элементе будет массив и структура с массивом
				Если ПараметрыКонвертации.Уровень_ВложенныйМассив = 0 Тогда
					ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_Текущий
				КонецЕсли;
			ИначеЕсли Не КонтекстКонвертации.Уровень_ВложенныйМассив = 0 Тогда
				ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_ВложенныйМассив;
			КонецЕсли;
		КонецЕсли
	КонецЦикла;
	Если ПараметрыКонвертации.РежимМассива Тогда
		ПараметрыКонвертации.Уровень_ВложенныйМассив = ПараметрыКонвертации.Уровень_Текущий;
	ИначеЕсли Не ПараметрыКонвертации.Уровень_Текущий = 0 Тогда
		//Если был вложенный массив, то проверим на предмет нашего текущего уровня. Если 2 и более, то текущий элемент тоже должен быть массивом
		Если ПараметрыКонвертации.Уровень_ВложенныйМассив - ПараметрыКонвертации.Уровень_Текущий = 2 Тогда
			//Переформатируем результат
			НовыйРезультат = Новый Массив;
			ПараметрыКонвертации.РежимМассива = Истина;
			//ПараметрыКонвертации.Уровень_ВложенныйМассив = КонтекстКонвертации.Уровень_Текущий - 1;
			Для Каждого ЭлементРезультата Из Результат Цикл
				 НовыйРезультат.Добавить(Новый Структура("Имя, Значение", ЭлементРезультата.Ключ, ЭлементРезультата.Значение));
			КонецЦикла;
			Результат = НовыйРезультат; 
		КонецЕсли;
	КонецЕсли;	
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует новый элемент при наличии в нём отборов.
&НаСервереБезКонтекста
Функция		ПреобразованиеВОИни_JSONИни_СформироватьЭлементСОтбором(Значение)
	
	Результат	= Новый	Структура();
	
	Для	Каждого	УзелДобавить	Из Значение	Цикл
		Если	УзелДобавить.Ключ	= "Отбор"
			И	ТипЗнч(УзелДобавить.Значение)	= Тип("Структура")	Тогда
				Для	Каждого	ЭлементОтбора	Из	УзелДобавить.Значение	Цикл
					Результат.Вставить(УзелДобавить.Ключ	+ "_"	+ ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				КонецЦикла;
		Иначе
			Результат.Вставить(УзелДобавить.Ключ, УзелДобавить.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	Результат;

КонецФункции

//Функция определяет, должен ли переданный элемент быть массивом, или нет
&НаСервереБезКонтекста
Функция		ПреобразованиеВОИни_JSONИни_ЭтоМассив(Ключ, Значение, КонтекстУзла)
	
	ЭтоМассив	= Ложь;
	Если		Ключ	= "Данные"					Тогда
	ИначеЕсли	ТипЗнч(Значение) = Тип("Структура")	Тогда
		ЭтоМассив	= Значение.Свойство("Значение");
		Если	Не	ЭтоМассив	Тогда//Проверим подэлементы. Если в одном из есть "значение", то делаем массив
			Для	Каждого	ПодЭлемент	Из	Значение	Цикл
				Если(	(	ТипЗнч(ПодЭлемент.Значение)	= Тип("Структура")
						И	ПодЭлемент.Значение.Свойство("Значение")))
					//Или если уровнем выше был системный ключ и в узле встречается другой системный ключ, то тоже делаем
					Или	(		(	ПодЭлемент.Ключ = "мФайл"
								Или ПодЭлемент.Ключ = "мДокумент")
						И		КонтекстУзла.Свойство("СистемныйКлюч")
						И	Не	ПодЭлемент.Ключ = КонтекстУзла.СистемныйКлюч) Тогда
					ЭтоМассив = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат	ЭтоМассив;

КонецФункции

///////////////////////////////
//Из формата JSON в обработку//

//Функция преобразует структуру файлов настроек к "привычному" для обработки виду.
&НаСервереБезКонтекста
Функция		ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(Знач КэшИни, ДопПараметры) Экспорт
	
	СтруктураНастроек	= Новый	Структура;//
	КонтекстКонвертации	= Новый Структура;
	Если Не ДопПараметры.Свойство("Уровень") Тогда
		КонтекстКонвертации.Вставить("Уровень", 0);
	КонецЕсли;
		Для Каждого КлючЗначениеПараметра Из ДопПараметры	Цикл 
			КонтекстКонвертации.Вставить(КлючЗначениеПараметра.Ключ, КлючЗначениеПараметра.Значение);
		КонецЦикла;
	КонтекстКонвертации.Уровень = КонтекстКонвертации.Уровень + 1;
	Для Каждого Элемент Из КэшИни Цикл
		Если	Элемент.Ключ="СписокДокументов" Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ЭлементЗначение = Неопределено;
			Если	Элемент.Значение.Свойство("Значение",ЭлементЗначение)
				И	ТипЗнч(ЭлементЗначение) = Тип("Структура") Тогда
				СтруктураВставки = Новый Структура;
				ЭлементИни = Элемент.Значение;
				Для Каждого ЭлементСтруктуры Из ЭлементЗначение Цикл
					СтруктураВставки.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);//	
				КонецЦикла;
				СтруктураНастроек.Вставить(Элемент.Ключ, ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(СтруктураВставки,КонтекстКонвертации));//					
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(Элемент.Значение,КонтекстКонвертации));//
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ПодСтруктура = Новый Структура;
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				СтруктураЭлемента = Новый Структура;
				Для Каждого Поле Из ЭлементМассива Цикл
					Если Поле.Ключ<>"Имя" Тогда
						СтруктураЭлемента.Вставить(Поле.Ключ, Поле.Значение);	
					КонецЕсли;
				КонецЦикла;
				КлючПодструктуры = ЭлементМассива.Имя;
				ПодСтруктура.Вставить(КлючПодструктуры,СтруктураЭлемента);	
			КонецЦикла;
			КонтекстКонвертации.Вставить("УровеньМассив", КонтекстКонвертации.Уровень);
			КлючВставить	= Элемент.Ключ;
			ЗначениеВставить= ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(ПодСтруктура,КонтекстКонвертации);//
			Если	КлючВставить = "Значение"
				И	КэшИни.Количество() = 1
				И	ДопПараметры.Свойство("УровеньМассив")
				И	КонтекстКонвертации.Уровень - ДопПараметры.УровеньМассив = 2 Тогда
				//На 2 уровеня выше был массив, значит это может быть структура с удаленным дублирующимся именем . Пример: <Сотрудник Имя="Сотрудник"><Элемент/></Сотрудник> Превращается в {"Сотрудник": {"Элемент"}}
				СтруктураНастроек = ЗначениеВставить;//
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, ЗначениеВставить);//
			КонецЕсли;
			КонтекстКонвертации.Удалить("УровеньМассив");
		ИначеЕсли Лев(Элемент.Ключ,6)="Отбор_" Тогда
			ИмяОтбора = Сред(Элемент.Ключ, 7);
			Если	Элемент.Значение = ""
				И	КонтекстКонвертации.Свойство("ОчищатьОтключенные")
				И	КонтекстКонвертации.ОчищатьОтключенные Тогда
				Продолжить;//Отключенные узлы отбора не попадают в итоговую инишку.
			КонецЕсли;
			Если Не СтруктураНастроек.Свойство("Отбор") Тогда
				СтруктураНастроек.Вставить("Отбор", Новый Структура(ИмяОтбора,Элемент.Значение));//			
			Иначе
				СтруктураНастроек.Отбор.Вставить(ИмяОтбора,Элемент.Значение);
			КонецЕсли;
		Иначе
			ЗначениеКонтекста = Неопределено;
			Если КонтекстКонвертации.Свойство("Удалять",ЗначениеКонтекста)
				И ЗначениеКонтекста = Элемент.Ключ Тогда
				Продолжить;
			ИначеЕсли	КонтекстКонвертации.Свойство("ОбернутьЗначение", ЗначениеКонтекста)
				И	Не	ЗначениеКонтекста = Элемент.Ключ Тогда
				СтруктураНастроек.Вставить(Элемент.Ключ, Новый Структура(ЗначениеКонтекста, Элемент.Значение));
			Иначе
				СтруктураНастроек.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураНастроек
	
КонецФункции

///////////////////////////////
/////Конвертация имени ини/////

//Функция переводит имена ини из шаблона онлайна в шаблон обработки и обратно
&НаКлиенте
Функция		ПолучитьИмяИни(СоответствиеНазваний, КлючИни, Направление="json_во")
	
	НаправлениеСтр	= СтрЗаменить(Направление, "_", Символы.ПС);
	КлючНаправления1= СтрПолучитьСтроку(НаправлениеСтр, 1);
	КлючНаправления2= СтрПолучитьСтроку(НаправлениеСтр, 2);
	
	ИмяИни	= КлючИни;
	Для Каждого Соответствие Из СоответствиеНазваний	Цикл
		Если Лев(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])) = Соответствие[КлючНаправления1] Тогда
			Если Соответствие[КлючНаправления1] = Соответствие[КлючНаправления2] Тогда
				ИмяИниНазвание	= Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
				ИмяИни			= Соответствие[КлючНаправления1];//Имена инишек идентичны и в онлайн и в обработке
				Если Не ИмяИниНазвание = "" Тогда
					//Это не имя ини, а направление
					ИмяИни = ИмяИни + "_" + ИмяИниНазвание;
				КонецЕсли;
			Иначе
				ИмяИни =	Соответствие[КлючНаправления2] + ?(ПустаяСтрока(Соответствие[КлючНаправления2]), "", "_") + //переводим имена по соответствию имен, убирая старый префикс.
							Сред(ИмяИни, СтрДлина(Соответствие[КлючНаправления1])+?(ПустаяСтрока(Соответствие[КлючНаправления1]), 0,  2));
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяИни;	
	
КонецФункции

///////////////////////////////////////////////////
////////////////////Внешний вызов//////////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	ИнициализироватьКэшНастроек(Кэш, ПараметрыИнициализации=Неопределено, Отказ=Ложь) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	КэшПолученныхНастроек	= Новый Структура;
	ПараметрыНастроек		= Новый Структура;
	КэшНастроек				= Новый Структура("ПараметрыНастроек, КэшПолученныхНастроек, ИзмененияВНастройках", ПараметрыНастроек, КэшПолученныхНастроек, Ложь);
	ПрефиксСервисСистемы	= "Com1C";
	
	ПараметрыНастроек.Вставить("ПрефиксСервис",					ПрефиксСервисСистемы + "82");	//Префикс системы по-умолчанию, для стандартных настроек
	ПараметрыНастроек.Вставить("ЭлементФормы",					"НастройкиНазвание");			//Элемент формы по-умолчанию
	ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек",	"-");							//Передаваемый в статистику префикс от выбранных настроек.
	ПараметрыНастроек.Вставить("ПолучатьИниЗаРаз",				30);							//Определяет максимальное количество ини, получаемое запросом на сервер за раз. Разбивка для ускорения обработки больших строк.
	ПараметрыНастроек.Вставить("СимволыКаталог",				"@/-_=\# &:|;?.");				//Последовательность символов, которых не может быть в идентификаторе соединения, но могут быть в пути к папке
	ПараметрыНастроек.Вставить("КэшироватьВсеПолучаемые",		Ложь);							//Определяет необходимость хранить полученные ини в памяти.
	ПараметрыНастроек.Вставить("СформироватьСтруктуруРазделов",	Ложь);							//Определяет необходимость формировать структуру разделов с Сбис Меню по всем инишкам.
	ПараметрыНастроек.Вставить("Режим",							"Облако");
	ПараметрыНастроек.Вставить("ПоследнийРаздел",				"");							//Определяет наличие перехода в раздел настроек.
	
	
	ПараметрыСистемы = Кэш.ПараметрыСистемы;
	Если ПараметрыСистемы = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ПараметрыКонфигурации = Кэш.ФормаНастроекОбщее.ОпределитьПараметрыКонфигурации(Кэш.ПараметрыСистемы, Отказ);
	
	//Определяем service в зависимости от текущей версии системы
	ВерсияСистемыМС = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
	service = ПрефиксСервисСистемы + СтрПолучитьСтроку(ВерсияСистемыМС,1);
	ПодВерсияСистемы2 = СтрПолучитьСтроку(ВерсияСистемыМС,2);
	Если (ПодВерсияСистемы2 = "1") Тогда
		ПодВерсияСистемы2 = "2";
	КонецЕсли;
	service = service + ПодВерсияСистемы2;
	
	ПараметрыКонфигурации.Вставить("service", service);
	КэшНастроек.Вставить("ПараметрыКонфигурации", ПараметрыКонфигурации);
	
	СоответствиеНазваний= Новый Массив;
	ДоступныеТипыИни	= Новый Массив;
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Конфигурация",		"Конфигурация"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "сбисМеню",			"сбисМеню"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхВыгрузка", 		"СинхВыгрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "СинхЗагрузка", 		"СинхЗагрузка"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ЗагрузкаИсходящих",	"Загрузка_Исходящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Загрузка", 			"Загрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "ВыгрузкаВходящих", 	"Выгрузка_Входящий"));
	СоответствиеНазваний.Добавить(Новый Структура("json, во", "Выгрузка", 			""));
	//Так, как в меню могут быть различные типы, не относящиеся к обработке, делаем фильтр.
	ДоступныеТипыИни.Добавить("Система");
	Для Шаг = 4 По СоответствиеНазваний.Количество()-1 Цикл
		ДоступныеТипыИни.Добавить(СоответствиеНазваний[Шаг].json);
	КонецЦикла;
	ПараметрыНастроек.Вставить("СоответствиеНазваний",СоответствиеНазваний);//Шаблон перевода имен названий сервис-обработка
	ПараметрыНастроек.Вставить("ДоступныеТипыИни",	ДоступныеТипыИни);		//Список доступных типов ини для работы обработки

	Кэш.Вставить("КэшНастроек", КэшНастроек);
	
	//Очищаем закэшированные значения ини загрузки.
	Если Кэш.Свойство("КэшЗначенийИни") Тогда 
		Кэш.КэшЗначенийИни.ИниЗагрузки = Новый Структура();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Функция		ПолучитьМассивФайловДляКонфигурации(Кэш,СписокТиповНастроек, ПрефиксСервис,ДополнительныеПараметры) Экспорт
	
	Возврат	Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, ПрефиксСервис, ДополнительныеПараметры);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьИнформациюПоНастройкам(Кэш, ПараметрыСтатистики, Отказ) Экспорт
	
	Возврат Новый Структура("XSLT,XML,EPF", Новый Массив, Новый Массив, Новый Структура("ЕстьИзменения", Ложь));
	
КонецФункции	

&НаКлиенте
Функция		СбисКлючНастроек(Кэш) Экспорт
	Если ЗначениеЗаполнено(Кэш.ГлавноеОкно.Пользователь) Тогда
		КлючНастроек = Кэш.ГлавноеОкно.Пользователь;
	ИначеЕсли	Кэш.СБИС.ОбменВключен
			И	Кэш.СБИС.Авторизован Тогда
		КлючНастроек = Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
	Иначе
		КлючНастроек = "";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КлючНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат НРег(СтрЗаменить(СтрЗаменить(СтрЗаменить(КлючНастроек, " ", ""), Символы.ПС, ""), Символы.Таб, ""));
КонецФункции

//Функция возвращает последний сохраненный идентификатор настроек в СБИС для выбранного логина пользователя
&НаКлиенте
Функция		СбисПолучитьИдентификаторНастроек(Кэш) Экспорт
	Результат = "";
	КлючНастроек = СбисКлючНастроек(Кэш);
	Если Не ЗначениеЗаполнено(КлючНастроек) Тогда
		Если Не Кэш.Парам.ВходПоСертификату Тогда
			КлючНастроекСтарый = НРег(Кэш.Парам.Логин);
			ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроекСтарый);
			Если Не ЗначениеИдентификатора = Неопределено Тогда
				Возврат ЗначениеИдентификатора.Представление;
			КонецЕсли;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроек);
	Если Не ЗначениеИдентификатора = Неопределено Тогда
		Результат = ЗначениеИдентификатора.Представление;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция устанавливает соответсвие последнего идентификатора настроек для пользователя
&НаКлиенте
Процедура	СбисЗаписатьИдентификаторНастроек(Кэш, ИдентификаторНастроек) Экспорт
	КлючНастроек = СбисКлючНастроек(Кэш);
	Если Не ЗначениеЗаполнено(КлючНастроек) Тогда
		Возврат;
	КонецЕсли;
	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроек);
	Если ЗначениеИдентификатора = Неопределено Тогда
		Кэш.Парам.ИдентификаторыНастроекВСБИС.Добавить(КлючНастроек, ИдентификаторНастроек);
	Иначе
		ЗначениеИдентификатора.Представление = ИдентификаторНастроек;
	КонецЕсли;
	СбисОчиститьИдПоСтаромуКлючу(Кэш, КлючНастроек);
	Кэш.ГлавноеОкно.ИдентификаторыНастроекВСБИС = Кэш.Парам.ИдентификаторыНастроекВСБИС;
КонецПроцедуры

&НаКлиенте
Процедура	СбисОчиститьИдПоСтаромуКлючу(Кэш, НовыйКлюч)
	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению("");
	//Очищаем старые некорректные значения.
	Если Не ЗначениеИдентификатора = Неопределено Тогда
		Кэш.Парам.ИдентификаторыНастроекВСБИС.Удалить(ЗначениеИдентификатора);
	КонецЕсли;
	Если Кэш.Парам.ВходПоСертификату Тогда
		Возврат;
	КонецЕсли;
	КлючНастроекСтарый = НРег(Кэш.Парам.Логин);
	Если НовыйКлюч = КлючНастроекСтарый Тогда
		Возврат;
	КонецЕсли;
	ЗначениеИдентификатора = Кэш.Парам.ИдентификаторыНастроекВСБИС.НайтиПоЗначению(КлючНастроекСтарый);
	//Очищаем старые значения по логину.
	Если Не ЗначениеИдентификатора = Неопределено Тогда
		Кэш.Парам.ИдентификаторыНастроекВСБИС.Удалить(ЗначениеИдентификатора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура	СбисВыбратьСоединение(Кэш,Отказ=Ложь) Экспорт
	
	ДанныеЗаполнить = СформироватьТаблицуДоступныхНастроек(Кэш, Отказ);
	
	ЗаполнитьТаблицуДоступныхНастроек(ДанныеЗаполнить, Отказ);
	ПараметрыВызова = Новый Структура("Кэш,Отказ,ДополнительныеПараметры",Кэш,Отказ, Новый Структура("СообщатьПриОшибке", Истина));
	ТекстПредупреждения = "Не удалось получить список настроек СБИС!";
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Отказ Тогда
			Предупреждение(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		Идентификатор = ЭтаФорма.ОткрытьМодально();
		СбисПрименитьУстановленныеНастройки(Идентификатор,ПараметрыВызова);
	#Иначе
		Если Отказ Тогда
			ПоказатьПредупреждение(,ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.ФайлыНастроекСервер",Новый Структура("ДанныеЗаполнить",ДанныеЗаполнить),Кэш.ГлавноеОкно,,,,Новый ОписаниеОповещения("СбисПрименитьУстановленныеНастройки",ЭтаФорма,ПараметрыВызова));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисВыгрузитьНастройкиВКаталог(Кэш, Отказ=Ложь,ПродолжитьВыполнение=Истина) Экспорт
	
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= ГлавноеОкно.КаталогНастроек;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогСНастройками	= Кэш.ОбщиеФункции.СбисФорматКаталога(ДиалогОткрытия.Каталог, Кэш.ПараметрыСистемы.Клиент); 
	Иначе
		ПродолжитьВыполнение	= Ложь;
		Возврат;
	КонецЕсли;
	
	ГлавноеОкно.КаталогНастроек	= КаталогСНастройками;
	
	ВыгрузитьНастройкиИзОбработкиВКаталогСервер(Кэш,КаталогСНастройками,Отказ);//Массив установленных ини
		
КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисЗагрузитьНастройкиИзКаталога(Кэш, Отказ=Ложь,ПродолжитьВыполнение=Истина) Экспорт
	
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	
	ДиалогОткрытия	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= ГлавноеОкно.КаталогНастроек;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогСНастройками	= ДиалогОткрытия.Каталог + "\"; 
	Иначе
		ПродолжитьВыполнение	= Ложь;
		Возврат;
	КонецЕсли;
	
	ГлавноеОкно.КаталогНастроек	= КаталогСНастройками;
	УстановленныеИни = ЗагрузитьНастройкиИзКаталогаНаСервер(Кэш,КаталогСНастройками,Отказ);//Массив установленных ини
	
	Если Отказ Тогда
		ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, УстановленныеИни);
		Возврат;
	КонецЕсли;
	
	ГлавноеОкно.СбисСпрятатьСостояние(ГлавноеОкно);
	ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
	Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
	
КонецПроцедуры

//При смене версии, типовые инишки обновляются при чтении соединения.
&НаКлиенте
Процедура	СбисОбновитьИниФайлы(Кэш, ПараметрыОбновления, Отказ) Экспорт
	Возврат;
КонецПроцедуры

//Серверные настройки - не перечитывать ини
&НаКлиенте
Функция		СбисОбновитьМассивУстановленныхИниФайлов(Кэш, МассивУстановленныхИни) Экспорт
	
	Возврат	МассивУстановленныхИни;
	
КонецФункции

&НаКлиенте                                  
Функция		СбисОтключитьВыбранныеФайлыНастроек(Ини, Кэш, Идентификатор, Отказ=Ложь) Экспорт
	
	Если Ини.Количество() Тогда
		Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
	КонецЕсли;
	
	Возврат	ОтключитьФайлыНастроекНаСервере(Ини, Кэш, Идентификатор, Отказ);
	
КонецФункции

//Очищает выбранные настройки для их повторного заполнения
&НаКлиенте
Процедура	СбисОчиститьВыбранныеНастройки(Кэш, Отказ) Экспорт
	Кэш.Ини			= Новый Структура;
	Кэш.ИниВПорядке	= Ложь;
	Если Не Кэш.Свойство("КэшНастроек") Тогда
		Возврат;
	КонецЕсли;
	Кэш.КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
	
	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки")	Тогда
		Кэш.КэшНастроек.Удалить("ВыбранныеНастройки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура	СбисОчиститьКэшНастроек(Кэш) Экспорт

	КэшНастроек = Неопределено;
	ВыбранныеНастройки = Неопределено;
	Если Не Кэш.Свойство("КэшНастроек", КэшНастроек) Тогда
		Возврат;
	КонецЕсли;
	КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые = Ложь;
	КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = "";
	
	Кэш.ФормаНастроекОбщее.СбисОчиститьКэшНастроек(Кэш, Новый Структура);
	Если	Не КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки)
		Или	Не ЗначениеЗаполнено(ВыбранныеНастройки) Тогда
		Возврат;
	КонецЕсли;
	//Установим выбранным настройкам параметры для работы
	ВыбранныеНастройки.Данные.Ини = Новый Структура;
	ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять	= Истина;
	ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять		= Ложь;
КонецПроцедуры

//Функция отслеживает изменение версии конфигурации и наличия изменений в файлах настроек.
&НаКлиенте                                  
Функция		СбисОпределитьНеобходимостьПроверки(Кэш, УстановленныеИниФайлы, СтруктураПараметров) Экспорт
	Перем СбисПоследнееИзменение, ВыбранныеНастройки;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда
		Отказ = Ложь;
		ВыбранныеНастройки = СбисПолучитьДанныеСервисаИнтеграции(Кэш, Новый Структура("Идентификатор,СписокИни", Кэш.Парам.ИдентификаторНастроек, Неопределено), Отказ);
		//TODO38 исправить это место. Не должно быть ситуаций когда нет настроек.
		Если Отказ Тогда//Не понятно, что произошло и почему настроек нет. Вернём проверку истина, на всякий.
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ВыбранныеНастройки);
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	НужноПроверять = Кэш.ФормаНастроекОбщее.СбисОпределитьНеобходимостьПроверки(Кэш, СтруктураПараметров);
	СтруктураПараметров.Свойство("ПоследнееИзменение",	СбисПоследнееИзменение);
	
	//Определим необходимость проверки по последним изменениям в настройках
	Если	Не НужноПроверять
		И	Не СбисПоследнееИзменение = ВыбранныеНастройки.ДатаИзмененияНастроек Тогда
		НужноПроверять = Истина;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ПоследнееИзменение",	ВыбранныеНастройки.ДатаИзмененияНастроек);
	
	Возврат НужноПроверять;
	
КонецФункции

//Применяет выбранные настройки в обработку. Инициирует проверку.
&НаКлиенте
Процедура	СбисПеречитатьНастройки(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	СбисОчиститьВыбранныеНастройки(Кэш, Отказ);
	Если		СбисДополнительныеПараметры = Неопределено
		Или	Не	СбисДополнительныеПараметры.Свойство("Идентификатор") Тогда
		Кэш.Парам.ИдентификаторНастроек = СбисПолучитьИдентификаторНастроек(Кэш);
	Иначе
		Кэш.Парам.ИдентификаторНастроек = СбисДополнительныеПараметры.Идентификатор;
	КонецЕсли;
	
	ПродолжитьВыполнение = Истина;
	УстановленныеИни = СбисПрочитатьНастройки(Кэш, Отказ, ПродолжитьВыполнение);
	                
	Если		Отказ
		Или Не	ПродолжитьВыполнение Тогда
		Возврат;
	КонецЕсли;
	
	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
	РезультатУстановкиНастроек = Кэш.ГлавноеОкно.СбисУстановитьНастройки(Кэш,УстановленныеИни,Истина,Отказ);
	Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
		Отказ = Ложь;//Продолжим работу после сообщения об ошибке
	КонецЕсли;
	Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
	
КонецПроцедуры

//Получает данные настроек, как стандартных, так и пользовательских. Проверяет наличие в кэше, дополняет данные в кэше. Возвращает "псевдокласс" конфиг/коннекшен/их список
&НаКлиенте
Функция		СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ) Экспорт
	Перем	ТипЗапроса,				//Возможные значения: "Config", "Connection, ListConfig, ListConnection". Если не указано, определяем по наличию идентификатора.
			Идентификатор,			//ИД соединения. Если не передан, значит это "Config", иначе "Connection".
			ПараметрыКонфигурации,	//Параметры конфигурации: Структура "service,subsystem,verison"
			СписокИни,				//Возможные значения:
									// 1) Массив структур с ключами "type", "name".
									// 2) Пустой массив - получаем всё.
									// 3) Неопрелено - не получаем ини, только основные поля. 
									// 4) Не передан - строится автоматически из СбисМеню по полю enable.
			ДополнительныеПараметры,//Дополнительно, для передачи в метод чтения.
			Кэшировать,				//Возможность отключить кэширование конкретного чтения, без изменения общей настройки
			БратьВКэше,				//Возможность отключить получение из кэша конкретных значений, без изменения общей настройки
			Результат;				//Возвращаемый результат	

	ПараметрыПолучения = Новый Структура;
	//Определяем переданные параметры и устанавливаем фильтры.
	Если Не ПараметрыЗапроса.Свойство("Идентификатор", Идентификатор) Тогда 
		//Или	Идентификатор = "Новое подключение" Тогда
		Идентификатор = "";
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("ТипЗапроса", ТипЗапроса)	Тогда
		ТипЗапроса = ?(ПустаяСтрока(Идентификатор), "Config", "Connection");	
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("ПараметрыКонфигурации",	ПараметрыКонфигурации)	Тогда
		ПараметрыКонфигурации = Новый Структура("service,subsystem,version");
		ЗаполнитьЗначенияСвойств(ПараметрыКонфигурации,Кэш.КэшНастроек.ПараметрыКонфигурации);	
		Если ТипЗапроса = "Config" Или ТипЗапроса = "ListConfig" Тогда//Для запросов на конфиг без указания конфигурации берем префикс 82.
			ПараметрыКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыЗапроса.Свойство("СписокИни", СписокИни)			Тогда
		//Для config пользовательской конфигурации ини нет.
		Если		ПараметрыКонфигурации.subsystem = ""
			И Не	ТипЗапроса = "Connection"	Тогда
			СписокИни = Неопределено;
		Иначе
			ПараметрыЗапросаМеню = Новый Структура("Идентификатор,ПараметрыКонфигурации",Идентификатор,ПараметрыКонфигурации);
			РезультатЗапроса = СформироватьСписокИни(Кэш, ПараметрыЗапросаМеню, Отказ);
			Если Отказ Тогда
				Возврат РезультатЗапроса;
			КонецЕсли;
			Если	Не ТипЗнч(РезультатЗапроса) = Тип("Структура")
				Или	Не РезультатЗапроса.Свойство("Данные",СписокИни) Тогда
				СписокИни = РезультатЗапроса;	
			КонецЕсли;
		КонецЕсли;
		ПараметрыПолучения.Вставить("СписокИни", СписокИни);	
	Иначе
		ПараметрыПолучения.Вставить("СписокИни", СписокИни);
	КонецЕсли;
	
	Если Не	ПараметрыЗапроса.Свойство("Кэшировать", Кэшировать) Тогда
		Кэшировать = Кэш.КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые;
	КонецЕсли;
	Если Не	ПараметрыЗапроса.Свойство("БратьВКэше", БратьВКэше) Тогда
		БратьВКэше = Кэш.КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые;
	КонецЕсли;	
	Если Не	ПараметрыЗапроса.Свойство("ДополнительныеПараметры", ДополнительныеПараметры) Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если Лев(ТипЗапроса,4) = "List" Тогда
		БратьВКэше = Ложь;
	КонецЕсли;
	
	Если БратьВКэше Тогда
		ID = Кэширование_Идентификатор(Кэш, ПараметрыКонфигурации, Идентификатор);
		Если Отказ Тогда 
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ID, "ФайлыНастроекСервер.СбисПолучитьДанныеСервисаИнтеграции", 760, "Неверные параметры фильтра");
		КонецЕсли;
		
		Результат = Кэширование_Извлечь_Настройки(Кэш, ID, СписокИни, Отказ);
		//После извленения настроек из кэша, составим новый список требуемых к полученю ини
		Если ЗначениеЗаполнено(Результат) Тогда
			Если Результат.Данные.Ини.Количество() Тогда
				СписокИниЗапрос = Новый Массив;
				Для Каждого ПараметрЗапросаИни Из ПараметрыПолучения.СписокИни Цикл
					Если	Результат.Данные.Ини.Свойство(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ПараметрЗапросаИни.name)) Тогда
						Продолжить;
					КонецЕсли;
					СписокИниЗапрос.Добавить(ПараметрЗапросаИни);
				КонецЦикла;
				Если Не СписокИниЗапрос.Количество() Тогда//Всё найдено в кэше. Возвращаем результат.
					Возврат Результат;
				КонецЕсли;
				ПараметрыПолучения.СписокИни = СписокИниЗапрос;
			ИначеЕсли СписокИни = Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//В кэше данных нет, либо есть, но не все. Получаем с сервера
	ПараметрыПолучения.Вставить("ДополнительныеПараметры",	ДополнительныеПараметры);
	Если		ТипЗапроса = "Config" Тогда//Получить типовые
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурации);
		РезультатЗапроса = ПолучитьConfig(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "Connection" Тогда
		ПараметрыПолучения.Вставить("Идентификатор",			Идентификатор);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	Кэш.КэшНастроек.ПараметрыКонфигурации);
		РезультатЗапроса = ПолучитьConnection(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "ListConnection" Тогда
		ПараметрыКонфигурацииСписка = Новый Структура("service");
		ЗаполнитьЗначенияСвойств(ПараметрыКонфигурацииСписка, ПараметрыКонфигурации);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурацииСписка);
		РезультатЗапроса = ПолучитьСписокConnection(Кэш, ПараметрыПолучения, Отказ);
	ИначеЕсли	ТипЗапроса = "ListConfig" Тогда
		ПараметрыКонфигурацииСписка = Новый Структура("service");
		ЗаполнитьЗначенияСвойств(ПараметрыКонфигурацииСписка, ПараметрыКонфигурации);
		ПараметрыПолучения.Вставить("ПараметрыКонфигурации",	ПараметрыКонфигурацииСписка);
		РезультатЗапроса = ПолучитьСписокConfig(Кэш, ПараметрыПолучения, Отказ);
	Иначе
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.СбисПолучитьДанныеСервисаИнтеграции", 760, "Неверные параметры фильтра", "Не известный тип запроса!");
	КонецЕсли;
	
	Если Кэшировать	Тогда
		Кэширование_Поместить_Настройки(Кэш,РезультатЗапроса,Отказ);
	КонецЕсли;
	Если Отказ Тогда 
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = РезультатЗапроса;
	ИначеЕсли Не Лев(ТипЗапроса,4) = "List" Тогда
		Для Каждого ПараметрЗапросаИни Из СписокИни Цикл
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ПараметрЗапросаИни.name);
			Если ИмяИни = "сбисМеню" Тогда
				Результат.Данные.Меню = РезультатЗапроса.Данные.Меню;
				Продолжить;
			ИначеЕсли	Результат.Данные.Ини.Свойство(ИмяИни)
				Или	Не	РезультатЗапроса.Данные.Ини.Свойство(ИмяИни) Тогда
				Продолжить;
			КонецЕсли;
			Результат.Данные.Ини.Вставить(ИмяИни, РезультатЗапроса.Данные.Ини[ИмяИни]);
		КонецЦикла;
	КонецЕсли;
		
	Возврат	Результат;
	
КонецФункции

//Функция взаимодействия с online. Получает и кэширует необходимые данные
&НаКлиенте
Функция		СбисПолучитьНастройки(Кэш=Неопределено,Отказ=Ложь,ПродолжитьВыполнение=Истина) Экспорт
	
	Если Кэш = Неопределено	Тогда//Для теста функции при поиске
		Возврат	Истина;
	КонецЕсли;
	
	РезультатИзмененияПараметров = СбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш,Отказ,ПродолжитьВыполнение);
	Если Не РезультатИзмененияПараметров = Неопределено Тогда
		Возврат РезультатИзмененияПараметров;
	ИначеЕсли Кэш.ИниВПорядке Тогда
		ПродолжитьВыполнение = Ложь;
		Возврат Неопределено;
    КонецЕсли;
	
	СбисПодключитьЗаплатки(Кэш);
	
	Настройки = СбисПрочитатьНастройки(Кэш, Отказ, ПродолжитьВыполнение);
	
	Если Отказ Тогда
		ПродолжитьВыполнение = Ложь;
		Возврат	Неопределено;
	КонецЕсли;
	
	Возврат	Настройки;
			
КонецФункции

&НаКлиенте
Функция		СбисПолучитьШапкуПротоколаОбОшибках(Кэш, СписокИниФайловДляПроверки) Экспорт				
	
	ПараметрыПротокола	= Новый	Структура();
	ВыбранныеНастройки = Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки) Тогда
		ВыбранныеНастройки = Кэш.КэшНастроек.ВыбранныеНастройки;
	КонецЕсли;

	ПараметрыПротокола.Вставить("КонфигурацияФайловНастроек", ВыбранныеНастройки.Название + ", версии " + ВыбранныеНастройки.ПараметрыКонфигурации.version);
	Если ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные"	Тогда
		ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Применение типовых настроек с сервера");
	Иначе
		ПараметрыПротокола.Вставить("ЗаголовокКаталог",	"Применяемые настройки: " + ВыбранныеНастройки.Название);
	КонецЕсли;
	ПараметрыПротокола.Вставить("Версия",			ВыбранныеНастройки.ПараметрыКонфигурации.version);
	ПараметрыПротокола.Вставить("КаталогНастроек",	"");

	Возврат ПараметрыПротокола;
	
КонецФункции

//Формируется массив для обновления главного окна
&НаКлиенте
Функция		СбисПолучитьСписокДоступныхНастроек(Кэш, Отказ=Ложь) Экспорт
	
	Если	Не	Кэш.КэшНастроек.Свойство("ПараметрыКонфигурации")	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	//СписокИни = Новый Массив;
	//СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	ПараметрыЗапроса	= Новый Структура("ТипЗапроса,СписокИни, ДополнительныеПараметры", "ListConfig",Неопределено, Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина));
	ПолученныеНастройки = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ПолученныеНастройки);
		Возврат	Неопределено;
	КонецЕсли;
	
	СписокТиповНастроек = Новый СписокЗначений;
	Для Каждого СтрокаНастроек Из ПолученныеНастройки Цикл
		Если ПустаяСтрока(СтрокаНастроек.ПараметрыКонфигурации.subsystem) Тогда
			Продолжить;
		КонецЕсли;
		Префикс	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(СтрокаНастроек.ПараметрыКонфигурации);
		СписокТиповНастроек.Добавить(Новый Структура("МассивИни,ПараметрыКонфигурации", Новый Массив, СтрокаНастроек.ПараметрыКонфигурации),Префикс);		
	КонецЦикла;
	//Пользовательская конфигурация
	ПараметрыТекущейСистемы	= Новый	Структура("service,subsystem,version");
	ПараметрыТекущейСистемы.Вставить("service",		Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	ПараметрыТекущейСистемы.Вставить("subsystem",	"");
	ПараметрыТекущейСистемы.Вставить("version", 	"0.0.0.1");
	
	СписокТиповНастроек.Добавить(Новый	Структура("МассивИни,ПараметрыКонфигурации",	Новый	Массив, ПараметрыТекущейСистемы),ПараметрыТекущейСистемы.service);
	
	Возврат	СписокТиповНастроек;

КонецФункции

&НаКлиенте
Функция		СбисПолучитьСтруктуруКонфигурации(Кэш, СтруктураКонфигураций, ЗначениеКонфигурации) Экспорт
	
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(СтруктураКонфигураций, ЗначениеКонфигурации);
	Если НашаКонфигурация = Неопределено Тогда//Нет такой конфигурации, что-то отработало не так, как должно.
		Возврат	Неопределено;
	КонецЕсли;
	
	ВыбранныеНастройки = Неопределено;
	Если	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки)
		И	ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		Параметры_Предыдущее = ВыбранныеНастройки.ПараметрыКонфигурации;
		ПрефиксНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ВыбранныеНастройки.ПараметрыКонфигурации);
		ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ВыбранныеНастройки.ПараметрыКонфигурации.service,ПрефиксНастроек);
		ВыбранныеНастройки.ПараметрыКонфигурации = НашаКонфигурация.ПараметрыКонфигурации;//При создании нового подключения меняем параметры системы на выбранную конфигурацию. Потом уже нельзя.
		//Если меняется система
		Если	Не Параметры_Предыдущее.subsystem = ВыбранныеНастройки.ПараметрыКонфигурации.subsystem
			Или Не Параметры_Предыдущее.version = ВыбранныеНастройки.ПараметрыКонфигурации.version	Тогда 
			//Установлены какие-то ини, переустановить с учетом новой системы (те, что есть будут переполучены, тех что нет просто не будет)
			ВыбраноНазвание = ВыбранныеНастройки.Название;
			Если	ЗначениеЗаполнено(ВыбранныеНастройки.ПараметрыКонфигурации.subsystem)
				И	ВыбранныеНастройки.Данные.Ини.Количество() Тогда
				Отказ		= Ложь;
				СписокИскать= Новый Массив;
				Для Каждого КлючИЗначение Из ВыбранныеНастройки.Данные.Ини Цикл
					СписокИскать.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ, "во_json"));
				КонецЦикла;
				ПараметрыПоиска = Новый Структура("Идентификатор,ПараметрыКонфигурации,Искать", "",НашаКонфигурация.ПараметрыКонфигурации, Новый Структура("Имя", СписокИскать));
				ДанныеСписка	= СформироватьСписокИни(Кэш,ПараметрыПоиска,Отказ);
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				ПараметрыУстановки = Новый Структура("СписокИни,ПараметрыКонфигурации", ДанныеСписка.Данные, НашаКонфигурация.ПараметрыКонфигурации);
				РезультатУстановки = УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, ПараметрыУстановки);
				Если	Отказ 
					И	ЗначениеЗаполнено(РезультатУстановки) Тогда
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановки);
				КонецЕсли;
				УстановленныеИни = РезультатУстановки;
				//Чтобы не думалось: при стандартных настройках меняем название создаваемого подключения на название выбранной конфиуграции
				Кэш.КэшНастроек.ВыбранныеНастройки.Название = НашаКонфигурация.НазываниеКонфигурации;
				
				Кэш.ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
				РезультатУстановкиНастроек = Кэш.ГлавноеОкно.СбисУстановитьНастройки(Кэш,УстановленныеИни,Истина,Отказ);
				Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
				Если Отказ Тогда
					Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
					Отказ = Ложь;//Продолжим работу после сообщения об ошибке
				КонецЕсли;
				Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
				Сообщить("Выбранные файлы настроек были переустановлены.");
			ИначеЕсли ВыбранныеНастройки.Название = ИмяКонфигурации Тогда//Название настроек по-прежнему стандартное, сменим название для ясности того, что сменилась базовая конфигурация
				ВыбранныеНастройки.Название = НашаКонфигурация.НазываниеКонфигурации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если	НашаКонфигурация.СтруктураКонфигурации.Количество()
		Или	ПустаяСтрока(НашаКонфигурация.ПараметрыКонфигурации.subsystem)	Тогда
			Возврат	НашаКонфигурация.СтруктураКонфигурации;
	КонецЕсли;
	Отказ = Ложь;
	
	//Получаем полный список ини из меню
	ПараметрыПоиска = Новый Структура("Идентификатор,ПараметрыКонфигурации,Искать", "",НашаКонфигурация.ПараметрыКонфигурации, Новый Структура("Включено", "01"));
	ДанныеСписка	= СформироватьСписокИни(Кэш,ПараметрыПоиска,Отказ);
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	СтруктураКонфигурации = Новый СписокЗначений();
	
	Для	Каждого	Ини	Из	ДанныеСписка.Карта	Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, Ини.Значение);
		Если Ини.Значение = "Конфигурация"	Тогда
			ПолеСортировки	= "а";
		ИначеЕсли Лев(Ини.Представление, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		//Переводим инишки к старому формату названий.
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имя",					ИмяИни	+ ".sbis3");
		НоваяСтрока.Вставить("ИмяБезРасширения",	ИмяИни);
		НоваяСтрока.Вставить("ПолноеИмя",			ИмяИни	+ ".sbis3");
		НоваяСтрока.Вставить("Путь",				"");
		НоваяСтрока.Вставить("Расширение",			"");
		СтруктураКонфигурации.Добавить(НоваяСтрока,   ПолеСортировки + ИмяИни);
	КонецЦикла;
	СтруктураКонфигурации.СортироватьПоПредставлению();
	НашаКонфигурация.СтруктураКонфигурации = СтруктураКонфигурации.ВыгрузитьЗначения();
	
	Возврат	НашаКонфигурация.СтруктураКонфигурации;
	
КонецФункции	

//Получает подходящие готовые, либо общие настройки с данными ини если есть. Применяет в обработку, сохраняет connection в автоматическом режиме.
&НаКлиенте
Функция		СбисПрименитьПредустановленныеНастройки(Кэш, Отказ, ПродолжитьВыполнение, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	МассивИдентификаторовИсключить = Неопределено;
	Если		ДополнительныеПараметры = Неопределено
		Или	Не	ДополнительныеПараметры.Свойство("ИдентификаторыИсключить", МассивИдентификаторовИсключить) Тогда
		МассивИдентификаторовИсключить = Новый Массив;
	КонецЕсли;
	
	Если ПустаяСтрока(Кэш.КэшНастроек.ПараметрыКонфигурации.subsystem) Тогда//Это пользовательская конфигурация. Не применяем автоматический поиск настроек
		Возврат Неопределено;
	КонецЕсли;
	ДополнительныеПараметрыЗапрос = Новый Структура;
	ДополнительныеПараметрыЗапрос.Вставить("subsystem", Кэш.КэшНастроек.ПараметрыКонфигурации.subsystem);
	ПараметрыЗапроса = Новый Структура("СписокИни,		ТипЗапроса,			ПараметрыКонфигурации,					ДополнительныеПараметры", 
										Неопределено,	"ListConnection",	Кэш.КэшНастроек.ПараметрыКонфигурации,	ДополнительныеПараметрыЗапрос);
	РезультатЗапросаСписка = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапросаСписка;
	КонецЕсли;
	
	НастройкиУстановить = Неопределено;
	Для Каждого СоединениеПодобрано Из РезультатЗапросаСписка Цикл
		Если Не МассивИдентификаторовИсключить.Найти(СоединениеПодобрано.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НастройкиУстановить = СоединениеПодобрано;
		Прервать;
	КонецЦикла;
	Если НастройкиУстановить = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("Кэш, ПараметрыКонфигурации, Отказ", Кэш, НастройкиУстановить.ПараметрыКонфигурации, Отказ);
	Результат = СбисПрименитьУстановленныеНастройки(НастройкиУстановить.Идентификатор,ПараметрыЗапроса);
	Отказ = ПараметрыЗапроса.Отказ;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(Результат, "ФайлыНастроекСервер.СбисПрименитьПредустановленныеНастройки");
	КонецЕсли;
	
	Если Кэш.ИниВПорядке Тогда//Тут запоминаем только идентификатор настроек, так как ничего не менялось
		//Если применили предустановленные ини, то надо проверить наличие структуры аккордеона в меню. Если нет, то запишем с формированием меню.
		СтруктураАккордеона = ПолучитьСтруктуруРазделов(Кэш,,Отказ);
		Если Не ЗначениеЗаполнено(СтруктураАккордеона) Тогда
			Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		КонецЕсли;
		СбисСохранитьВыбранныеНастройки(Кэш, Отказ, ПродолжитьВыполнение, Новый Структура("ПропуститьЗапись",Истина));
	КонецЕсли;
	Если		Отказ
		Или Не	Кэш.ИниВПорядке Тогда//Ошибка при записи найденного соединения, или проблема с проверкой инишек. Переходим в раздел настроек для ручной правки.
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		Кэш.ГлавноеОкно.ПерейтиВРаздел("АккордеонФайлыНастроек55");
		Отказ = Ложь;
	КонецЕсли;
	
	ПродолжитьВыполнение = Ложь;//Передаём флаг главному окну, что больше ничего делать не нужно.
	Возврат Результат;
	
КонецФункции

//Применяет выбранные настройки в обработку. Инициирует проверку. 2 Параметра исключетельно для возможности вызова описания оповещения!
&НаКлиенте
Функция		СбисПрименитьУстановленныеНастройки(Идентификатор, ПараметрыВызова) Экспорт
	
	Результат = Неопределено;
	ДополнительныеПараметры = Неопределено;
	Кэш = ПараметрыВызова.Кэш;
	Если	ПараметрыВызова.Отказ
		Или	Идентификатор = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СбисОчиститьВыбранныеНастройки(Кэш, ПараметрыВызова.Отказ);	
	Если ПустаяСтрока(Идентификатор) Тогда
		Результат = УстановитьСтандартныеНастройкиНаСервере(Кэш, ПараметрыВызова.Отказ, Новый Структура("УстановитьИни", Истина));
		СтруктураНастроек = ПолучитьПараметрыСБИС(Кэш,Идентификатор,ПараметрыВызова.Отказ);
	Иначе
		Результат = СбисУстановитьГотовыеНастройки(Идентификатор, ПараметрыВызова);
		СтруктураНастроек = ПолучитьПараметрыСБИС(Кэш,Идентификатор,ПараметрыВызова.Отказ);
		Если Не ПараметрыВызова.Отказ Тогда
			ПараметрыУстановки = Новый Структура("СтруктураНастроек,ИдентификаторНастроек",СтруктураНастроек, Идентификатор);
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);	
			РезультатУстановкиНастроек = Кэш.ГлавноеОкно.СбисУстановитьНастройки(Кэш, Результат, Истина, ПараметрыВызова.Отказ, ПараметрыУстановки);
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
			Если ПараметрыВызова.Отказ Тогда
				Результат = РезультатУстановкиНастроек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыВызова.Отказ Тогда
		Если	ЗначениеЗаполнено(Результат)//Если вызов происходит из формы диалога выбора подключения, то надо сообщить результат тут
			И	ПараметрыВызова.Свойство("ДополнительныеПараметры", ДополнительныеПараметры)
			И	ДополнительныеПараметры.Свойство("СообщатьПриОшибке")
			И	ДополнительныеПараметры.СообщатьПриОшибке Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Кэш.КэшНастроек.ИзмененияВНастройках= Не Кэш.Парам.ИдентификаторНастроек = Идентификатор;
	Кэш.Парам.ИдентификаторНастроек = Идентификатор;
	Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, Результат, ПараметрыВызова.Отказ);
	
	Возврат Результат;
	
КонецФункции

//Пока ничего не происходит. Пользовательские инишки не формируем
&НаКлиенте
Процедура	СбисСформироватьИниФайлыКлиента(Кэш, СписокФайловПроверки, ОшибкиИни) Экспорт
	
	Возврат;
	
КонецПроцедуры

//Сохраняет выбранные настройки на сервис
&НаКлиенте
Процедура	СбисСохранитьВыбранныеНастройки(Кэш, Отказ, ПродолжитьВыполнение, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если		Отказ
		Или	Не	ПродолжитьВыполнение Тогда
			Возврат;
	КонецЕсли;
	
	Если Не	Кэш.ИниВПорядке Тогда
		ТекстПредупреждения	= "Для сохранения настроек они должны пройти проверку!";
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстПредупреждения);
		#Иначе
			ПоказатьПредупреждение(,ТекстПредупреждения);
		#КонецЕсли
		ПродолжитьВыполнение = Ложь;
		Возврат;
	КонецЕсли;
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	ПропуститьЗапись	= Неопределено;
	ВыбранныеНастройки	= Неопределено;
	СбисПараметры		= Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",ВыбранныеНастройки)	Тогда
		Возврат;
	КонецЕсли;
	//Флаг необходимости проверки необходимости записи. Если передать в дополнительных параметрах, то вызов сервера не будет производиться.	
	Если Не ДополнительныеПараметры.Свойство("ПропуститьЗапись", ПропуститьЗапись) Тогда
		ПропуститьЗапись = Ложь;
	КонецЕсли;

	ИдентификаторНастроек = ВыбранныеНастройки.Идентификатор;
	Если ВыбранныеНастройки.ПараметрыРаботы.Статус = "Удален" Тогда
		ИдентификаторНастроек = "";
		ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить = Истина;//Для создания нового подключения обязательно нужно передать СбисПараметры с service4config
	КонецЕсли;
	//Если настройки не пользовательские, то запись обязана быть проведена для создания нового пользовательского соединения
	Если Не ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Пользовательские" Тогда
		ПропуститьЗапись = Ложь;
		ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить = Истина;//Для создания нового подключения с стандартными настройками обязательно нужно передать СбисПараметры с service4config
		Если ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
			НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, Кэш.ГлавноеОкно.Конфигурация);	
			ВыбранныеНастройки.ПараметрыКонфигурации = НашаКонфигурация.ПараметрыКонфигурации;
			//Для пользовательской конфигурации(с пустым subsystem) ставим отправку всех ини, так как иначе данных на сервере не появится!
			Если НашаКонфигурация.ПараметрыКонфигурации.subsystem = "" Тогда
				Для Каждого КлючИЗначениИни Из ВыбранныеНастройки.Данные.Ини Цикл
					ВыбранныеНастройки.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениИни.Ключ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	//Если взяты готовые настройки без изменений, просто запишем их ID в обработке, во всех прочих случаях, нужно записать JSON на сервер
	ИначеЕсли 	Не	ПропуститьЗапись
			И	Не	(	Кэш.КэшНастроек.ИзмененияВНастройках
					И	НастройкиМенялись(Кэш, ВыбранныеНастройки, Отказ)) Тогда
		ПропуститьЗапись = Истина;
	КонецЕсли;
	
	Если Не ПропуститьЗапись Тогда
		ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять = Истина;
		ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять = Истина;
		Если ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
			ПараметрыЗапроса = Новый Структура("ПараметрыКонфигурации,						СписокИни",
												ВыбранныеНастройки.ПараметрыКонфигурации,	Неопределено);
			СтруктураНастроекБыло = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
		ИначеЕсли ВыбранныеНастройки.ПараметрыРаботы.Статус = "Удален" Тогда
			СтруктураНастроекБыло = ВыбранныеНастройки;
		Иначе
			ПараметрыЗапроса = Новый Структура("Идентификатор,ПараметрыКонфигурации,СписокИни",ИдентификаторНастроек,ВыбранныеНастройки.ПараметрыКонфигурации,Неопределено);
			СтруктураНастроекБыло = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
		КонецЕсли;
		РезультатЗаписи = ЗаписатьConnection(Кэш, ВыбранныеНастройки, Новый Структура("Кэшировать", Истина), Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
			Возврат;
		Иначе
			ИдентификаторНастроек = РезультатЗаписи;
		КонецЕсли;
		
		УстановленныеИни = Неопределено;
		//После записи проверить, менялась ли галка автообновления. Если менялась, то надо перечитать настройки и проверить базовый конфиг, который использован для инишек. Если взят не тот, что был, то надо перечитать настройки сразу.
		Если Не СтруктураНастроекБыло.ПараметрыРаботы.Автообновление = ВыбранныеНастройки.ПараметрыРаботы.Автообновление Тогда
			ПараметрыЗапроса		= Новый Структура("Идентификатор,СписокИни,БратьВКэше",ИдентификаторНастроек,Неопределено,Ложь);
			СтруктураНастроекСтало	= СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
			ID = Кэширование_Идентификатор(Кэш, СтруктураНастроекСтало.ПараметрыКонфигурации, ИдентификаторНастроек, Отказ);
			Если Отказ Тогда 
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(ID, "ФайлыНастроекСервер.СбисСохранитьВыбранныеНастройки"));
				Возврат;
			КонецЕсли;
			Если Кэш.КэшНастроек.КэшПолученныхНастроек.Свойство(ID) Тогда
				Кэш.КэшНастроек.КэшПолученныхНастроек.Удалить(ID);
			КонецЕсли;
			Если	Не СтруктураНастроекСтало.ПараметрыКонфигурации.version		= ВыбранныеНастройки.ПараметрыКонфигурации.version
				Или	Не СтруктураНастроекСтало.ПараметрыКонфигурации.subsystem	= ВыбранныеНастройки.ПараметрыКонфигурации.subsystem Тогда
				СбисОчиститьВыбранныеНастройки(Кэш, Отказ);
				ПараметрыВызова		= Новый Структура("Кэш,Отказ",Кэш,Отказ);
				УстановленныеИни	= СбисУстановитьГотовыеНастройки(ИдентификаторНастроек, ПараметрыВызова);
				Отказ				= ПараметрыВызова.Отказ;
			Иначе//Проставим нужные галки и на этом все 
				Для Каждого КлючИЗначениеИни Из ВыбранныеНастройки.Данные.Ини Цикл
					ЗначениеИни = КлючИЗначениеИни.Значение;
					Если Не ЗначениеИни.Свойство("СбисАвтообновление") Тогда
						ЗначениеИни.Вставить("СбисАвтообновление", Ложь);
					КонецЕсли;
					Если Не ЗначениеИни.Свойство("СбисЕстьТиповая") Тогда
						ЗначениеИни.Вставить("СбисЕстьТиповая",Ложь);
					КонецЕсли;
					ЗначениеИни.СбисАвтообновление = ЗначениеИни.СбисЕстьТиповая И СтруктураНастроекСтало.ПараметрыРаботы.Автообновление;
				КонецЦикла;
				Кэш.Ини = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ВыбранныеНастройки.Данные.Ини);
				УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(Кэш.Ини, СтруктураНастроекСтало, Отказ);
			КонецЕсли;
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УстановленныеИни) Тогда
			ПродолжитьВыполнение = Ложь;
			Кэш.КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
			Кэш.КэшНастроек.ИзмененияВНастройках = Ложь;
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
			РезультатУстановкиНастроек = Кэш.ГлавноеОкно.СбисУстановитьНастройки(Кэш,УстановленныеИни,Истина,Отказ);
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
			Если Отказ Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
				Отказ = Ложь;//Продолжим работу после сообщения об ошибке
			КонецЕсли;
			Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			СбисПеречитатьНастройки(Кэш, , Ложь);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не	Отказ Тогда
		Кэш.Парам.ИдентификаторНастроек = ИдентификаторНастроек;
		СбисЗаписатьИдентификаторНастроек(Кэш, ИдентификаторНастроек);
		Кэш.Ини = ВыбранныеНастройки.Данные.Ини;
		Если Кэш.КэшНастроек.ИзмененияВНастройках Тогда
			Кэш.КэшНастроек.ИзмененияВНастройках = Ложь;
		КонецЕсли;
		//ВыбранныеНастройки.ПараметрыРаботы.Статус = "Активен";
		//ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Пользовательские";
		ПараметрыУстановленнойКОнфигурации = ПараметрыСтандартнойКонфигурации(Кэш, ВыбранныеНастройки.ПараметрыКонфигурации);
		ПараметрыУстановленнойКОнфигурации.Удалить("service");
		Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыУстановленнойКОнфигурации);
		Если ЗначениеЗаполнено(ВыбранныеНастройки.Данные.Параметры) Тогда
			СбисПараметры = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ВыбранныеНастройки.Данные.Параметры);
			СбисУстановитьПараметры(Кэш, ВыбранныеНастройки.Идентификатор, СбисПараметры, Отказ);//Переустановить параметры с учетом сформированного ID
			Если	ПропуститьЗапись
				И	ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить Тогда//Если запись пропускаем, то параметры всё равно надо сохранить. Если не пропускаем, то параметры запишутся вместе с остальными данными.
				ЗаписатьСБИСПараметрыСоединения(Кэш,ВыбранныеНастройки.Данные.Параметры, ВыбранныеНастройки.Идентификатор, Отказ);
				ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                                  
Процедура	СбисУстановитьВыбранныеФайлыНастроек(Ини, Кэш, Идентификатор, Отказ) Экспорт
	
	ТекстСообщения	= "";
	
	СтруктураВыбранныхНастроек = Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",СтруктураВыбранныхНастроек)	Тогда
		Отказ = Истина;
		Сообщить("Отсутствует структура настроек. Операция невозможна!");
		Возврат;
	КонецЕсли;
	
	НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, Кэш.ГлавноеОкно.Конфигурация);	
	
	Если НашаКонфигурация = Неопределено Тогда//Нет такой конфигурации, что-то отработало не так, как должно.
		Отказ = Истина;
		Возврат;
	ИначеЕсли ПустаяСтрока(НашаКонфигурация.ПараметрыКонфигурации.subsystem) Тогда//У пользовательской конфигурации нет стандартных ини файлов.
		Возврат;
	КонецЕсли;
	
	Если		Не	СтруктураВыбранныхНастроек.ПараметрыКонфигурации.subsystem	= НашаКонфигурация.ПараметрыКонфигурации.subsystem	Тогда
		ТекстСообщения= "Внимание, Вы активируете настройки от другой конфигурации!";
	ИначеЕсли	Не	СтруктураВыбранныхНастроек.ПараметрыКонфигурации.version	= НашаКонфигурация.ПараметрыКонфигурации.version	Тогда
		ТекстСообщения= "Внимание, Вы активируете настройки от конфигурации другой версии!";
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		Если	СтруктураВыбранныхНастроек.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
			СтруктураВыбранныхНастроек.Название = НашаКонфигурация.НазываниеКонфигурации;
			Кэш.ГлавноеОкно.НастройкиНазвание = СтруктураВыбранныхНастроек.Название;
		Иначе
			ТекстПредупреждения	= ТекстСообщения + Символы.ПС +  "Выполнение данной операции не доступно!";
			ТаймАут	= 60;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Предупреждение(ТекстПредупреждения, ТаймАут);
			#Иначе
				ПоказатьПредупреждение(,ТекстПредупреждения, ТаймАут);
			#КонецЕсли
			Возврат;
		//Иначе
		//	ТекстВопроса	= ТекстСообщения + Символы.ПС + "Очистить текущие установленные настройки и продолжить?";
		//	ДопПараметры	= Новый	Структура();
		//	ДопПараметры.Вставить("НашаКонфигурация",			НашаКонфигурация);
		//	ДопПараметры.Вставить("Кэш",				Кэш);
		//	ДопПараметры.Вставить("МассивФайловДляУстановки",	Ини);
		//	ДопПараметры.Вставить("Отказ",						Отказ);
		//	
		//	Кнопки		= РежимДиалогаВопрос.ДаНет;
		//	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//		Ответ	= Вопрос(ТекстВопроса, Кнопки);
		//		СбисУстановитьФайлыНастроекПослеДиалога(Ответ, ДопПараметры);
		//	#Иначе
		//		ПоказатьВопрос(Новый ОписаниеОповещения("СбисУстановитьФайлыНастроекПослеДиалога",ЭтаФорма,ДопПараметры),ТекстВопроса, Кнопки);
		//	#КонецЕсли
		//	Возврат;
		КонецЕсли;			
	КонецЕсли;
	
	УстановленныеИни = УстановитьФайлыНастроекНаСервере(Ини, Кэш, СтруктураВыбранныхНастроек, НашаКонфигурация, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, УстановленныеИни);
	Иначе
		Кэш.КэшНастроек.Вставить("ИзмененияВНастройках", Истина);
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
		РезультатУстановкиНастроек = Кэш.ГлавноеОкно.СбисУстановитьНастройки(Кэш,УстановленныеИни,Истина,Отказ);
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
			Отказ = Ложь;//Продолжим работу после сообщения об ошибке
		КонецЕсли;
		Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		СбисУстановитьСтандартныеНастройки(Кэш,Отказ,ПродолжитьВыполнение) Экспорт
	
	Если Не	ПродолжитьВыполнение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Кэш.Парам.ИдентификаторНастроек = "";
		СбисОчиститьВыбранныеНастройки(Кэш, Отказ);
		ПараметрыКонфигурацииУстановить = Кэш.КэшНастроек.ПараметрыКонфигурации;
		Если ПустаяСтрока(ПараметрыКонфигурацииУстановить.subsystem) Тогда
			ПараметрыКонфигурацииУстановить = Кэш.ФормаНастроекОбщее.СистемаПо_Умолчанию();
		КонецЕсли;
		УстановленныеИни = УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, Новый Структура("ПараметрыКонфигурации",ПараметрыКонфигурацииУстановить));
		
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
		РезультатУстановкиНастроек = Кэш.ГлавноеОкно.СбисУстановитьНастройки(Кэш,УстановленныеИни,Истина,Отказ);
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
			Отказ = Ложь;//Продолжим работу после сообщения об ошибке
		КонецЕсли;
		Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
	КонецЕсли;
	Кэш.ГлавноеОкно.ПерейтиВРаздел("АккордеонФайлыНастроек55");
	
	Если Не Отказ Тогда
		ПродолжитьВыполнение = Ложь;
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	КонецЕсли;
	
	Возврат УстановленныеИни;
	
КонецФункции

&НаКлиенте                                  
Процедура	СбисУстановитьФайлыНастроекПослеДиалога(Ответ, ДопПараметры) Экспорт
	
	Если	Ответ	= КодВозвратаДиалога.Нет	Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = ДопПараметры.отказ;
	Кэш = ДопПараметры.Кэш;
	МассивФайловДляУстановки = ДопПараметры.МассивФайловДляУстановки;
	
	ВыбранныйID			= "";
	ВыбранноеНазвание	= "";
	Если	Кэш.КэшНастроек.Свойство("МастерОткрыт")
		И	Кэш.КэшНастроек.МастерОткрыт
		И	Не Кэш.КэшНастроек.ВыбранныеНастройки.СоздаватьНовый	Тогда//Если были выбраны уже готовые настройки с ИД на сервисе, то берём его для перезаписи.
			ВыбранныйID			= Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
			ВыбранноеНазвание	= Кэш.КэшНастроек.ВыбранныеНастройки.Название;
	КонецЕсли;
	СбисОчиститьВыбранныеНастройки(Кэш, Отказ);
	
	//Установить настройки от выбранной конфигурации, без проверки, без конвертации инишек, без определения что установлено.
	РезультатУстановки = УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, Новый	Структура("Текущая,УстановитьИни", Истина, Ложь));
	Если	Отказ 
		И	ЗначениеЗаполнено(РезультатУстановки) Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановки);
	КонецЕсли;
	
	Если	Не	ПустаяСтрока(ВыбранныйID)	Тогда
		Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор	= ВыбранныйID;
		Кэш.КэшНастроек.ВыбранныеНастройки.Название		= ВыбранноеНазвание;
		Кэш.КэшНастроек.ВыбранныеНастройки.Вставить("СоздаватьНовый",	Ложь);
	КонецЕсли;
	
	//Отключить все инишки, чтобы дальше включить только те, что будут устанавливаться
	МассивОтлкюченныхИни	= Новый	Массив;
	Для Каждого	ИниФайл	Из	Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Ини Цикл
		МассивОтлкюченныхИни.Добавить(ИниФайл.Ключ);
	КонецЦикла;
	
	Кэш.КэшНастроек.ВыбранныеНастройки.Вставить("ОтключенныеИни",	МассивОтлкюченныхИни);	
	
	УстановленныеИни = УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, ДопПараметры.НашаКонфигурация, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, УстановленныеИни);
		Возврат;
	КонецЕсли;
	
	Кэш.ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
	РезультатУстановкиНастроек = Кэш.ГлавноеОкно.СбисУстановитьНастройки(Кэш,УстановленныеИни,Истина,Отказ);
	Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
		Отказ = Ложь;//Продолжим работу после сообщения об ошибке
	КонецЕсли;
	Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
	
КонецПроцедуры


///////////////////////////////////////////////////
//////////////////Внутренний вызов/////////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	ВыгрузитьНастройкиИзОбработкиВКаталогСервер(Кэш,КаталогСНастройками,Отказ)
	
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	ВыбранныеНастройки	= Кэш.КэшНастроек.ВыбранныеНастройки;
	Если Не ЗначениеЗаполнено(ВыбранныеНастройки.Данные.Ини) Тогда
		Сообщить("Отсутствуют файлы настроек для выгрузки.");
		Возврат;
	КонецЕсли;
	
	ИниКВыгрузке = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(ВыбранныеНастройки.Данные.Ини);
	Для Каждого Ини Из ВыбранныеНастройки.Данные.Ини Цикл//Возвращаем системные ключи ини, необходимые для работы
		СбисЕстьТиповая		= Неопределено;
		СбисЕстьИзменения	= Неопределено;
		Если		Ини.Значение.Свойство("СбисЕстьТиповая",СбисЕстьТиповая) Тогда
		ИначеЕсли	Ини.Значение.Свойство("СбисИмяФайла")
				И	Найти(Ини.Значение.СбисИмяФайла, ".sbis3") Тогда
			СбисЕстьТиповая = Истина;
		Иначе
			СбисЕстьТиповая = Ложь;
		КонецЕсли;	
		СбисАвтообновление	= ?(Ини.Значение.Свойство("СбисАвтообновление"), Ини.Значение.СбисАвтообновление И СбисЕстьТиповая, СбисЕстьТиповая);
		Если Не	Ини.Значение.Свойство("СбисЕстьИзменения", СбисЕстьИзменения) Тогда
			СбисЕстьИзменения = Ложь;
		КонецЕсли;
		Если Не	СбисЕстьИзменения Тогда
			СбисЕстьИзменения = Не СбисЕстьТиповая;
		КонецЕсли;
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисЕстьИзменения",	СбисЕстьИзменения);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисЕстьТиповая",		СбисЕстьТиповая);
		ИниКВыгрузке[Ини.Ключ].Вставить("СбисАвтообновление",	СбисАвтообновление);
	КонецЦикла;
	
	ВременныйКэш = Новый Структура("Парам, ини", Новый Структура("КаталогНастроек", КаталогСНастройками), Новый Структура);
	ВременныйКэш.Вставить("РежимРаботы",		"");
	ВременныйКэш.Вставить("ГлавноеОкно",		ГлавноеОкно);
	ВременныйКэш.Вставить("ОбщиеФункции",		Кэш.ОбщиеФункции);
	ВременныйКэш.Вставить("ФормаНастроекОбщее",	Кэш.ФормаНастроекОбщее);
	ВременныйКэш.Вставить("Интеграция",			Кэш.Интеграция);
	ВременныйКэш.Вставить("ПараметрыСистемы",	Кэш.ПараметрыСистемы);
	
	ВременныйКэш.Парам.Вставить("СпособОбмена", 1);
	ВременныйКэш.Парам.Вставить("СпособХраненияНастроек", 0);
	ВременныйКэш.Парам.Вставить("ИдентификаторНастроек", "");
	
	ДополнительныеПараметры	= Новый	Структура();
	ДополнительныеПараметры.Вставить("РежимРаботы", "ВыгрузкаВКаталог");
	ВременныйКэш.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	ГлавноеОкно.ОпределитьФормуРаботыСНастройками(ВременныйКэш, ВременныйКэш.Парам.СпособОбмена, ВременныйКэш.Парам.СпособХраненияНастроек);
	
	Если Не ВременныйКэш.Парам.СпособХраненияНастроек = 0 Тогда
		Сообщить("Не удалось установить форму работы с настройками!", СтатусСообщения.Внимание);
		Отказ	= Истина;
		Возврат;
	КонецЕсли;
	
	//ВременныйКэш.ФормаНастроек.ИнициализироватьКэшНастроек(ВременныйКэш, Отказ);
	ПараметрыКонфигурации			= ПараметрыСтандартнойКонфигурации(Кэш, ВыбранныеНастройки.ПараметрыКонфигурации);
	ПараметрыКонфигурацииВыгрузка	= ПараметрыСтандартнойКонфигурации(ВременныйКэш, ПараметрыКонфигурации);
	Если Найти(ПараметрыКонфигурацииВыгрузка.version, ".0.0.0") > 0 Тогда
		Если  Не ПараметрыКонфигурацииВыгрузка.subsystem = "БУХ1" Тогда
			ПараметрыКонфигурацииВыгрузка.version = "";
		Иначе
			ПараметрыКонфигурацииВыгрузка.version = СтрЗаменить(ПараметрыКонфигурацииВыгрузка.version, ".0.0.0","");
		КонецЕсли;
	ИначеЕсли Найти(ПараметрыКонфигурацииВыгрузка.version, ".0.0") > 0 Тогда
		ПараметрыКонфигурацииВыгрузка.version = СтрЗаменить(ПараметрыКонфигурацииВыгрузка.version, ".0.0","");
	КонецЕсли;
	ПрефиксДобавить	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурацииВыгрузка);
	ПрефиксДобавить = ПрефиксДобавить + "_";
	СписокТиповыеИниВыгрузить	= Новый Массив;
	СписокПользовИниВыгрузить	= Новый Массив;
	СбисМеню = СформироватьМеню_Структура(Кэш, ИниКВыгрузке,,Отказ);
	ПараметрыЗапроса = Новый Структура
	(	"СбисМеню,	ДополнительныеПараметры",
		СбисМеню,	Новый Структура("ТихийРежим",Истина));
	ДанныеСписка = СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	
	ТиповыеИниБезИзменений		= Новый Структура();
	ИниСИзмененями				= Новый Структура();
	ВыгружатьТиповые			= Ложь;
	ВыгружатьПользовательские	= Ложь;
	Для Каждого КлючИЗначение Из ИниКВыгрузке Цикл
		ЭлементКарты = ДанныеСписка.Карта.НайтиПоЗначению(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ, "во_json"));
		Если КлючИЗначение.Значение.СбисЕстьИзменения Тогда
			ИниСИзмененями.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			СписокПользовИниВыгрузить.Добавить(ДанныеСписка.Данные[ДанныеСписка.Карта.Индекс(ЭлементКарты)]);
			ВыгружатьПользовательские = Истина;
		ИначеЕсли КлючИЗначение.Значение.СбисЕстьТиповая Тогда  
			ТиповыеИниБезИзменений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ВыгружатьТиповые = Истина;
			Продолжить;
		КонецЕсли;
		Если КлючИЗначение.Значение.СбисЕстьТиповая Тогда
			СписокТиповыеИниВыгрузить.Добавить(ДанныеСписка.Данные[ДанныеСписка.Карта.Индекс(ЭлементКарты)]);
			ВыгружатьТиповые = Истина;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Если ВыгружатьТиповые Тогда
		ДанныеСтандартнойКонфигурации = Неопределено;
		Если СписокТиповыеИниВыгрузить.Количество() Тогда
			//Получаем стандартные ини и формируем .sbis3 файлы. 
			ДополнительныеПараметры = Новый Структура("СообщатьПриОшибке, ВернутьОшибку, ЕстьРезультат", Ложь, Истина, Истина);
			ПараметрыЗапроса = Новый Структура("ПараметрыКонфигурации, СписокИни, ДополнительныеПараметры", ПараметрыКонфигурации, СписокТиповыеИниВыгрузить, ДополнительныеПараметры);
			ДанныеСтандартнойКонфигурации = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
		КонецЕсли;
		Если Отказ Тогда
			ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ДанныеСтандартнойКонфигурации);
			ВыгружатьПользовательские = Ложь;
		Иначе
			Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка стандартных настроек",Кэш.ГлавноеОкно);
			Если Не ДанныеСтандартнойКонфигурации = Неопределено Тогда
				ВременныйКэш.Ини = ДанныеСтандартнойКонфигурации.Данные.Ини;
			КонецЕсли;
			Для Каждого ТиповаяИни Из ТиповыеИниБезИзменений Цикл
				ВременныйКэш.Ини.Вставить(ТиповаяИни.Ключ, ТиповаяИни.Значение);	
			КонецЦикла;
			
			УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ВременныйКэш.ини,,Отказ,ПрефиксДобавить);
			Для Каждого УстановленнаяИни Из УстановленныеИни Цикл
				СбисРеестрПоУмолчанию = Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрПоУмолчанию", ВременныйКэш.Ини[УстановленнаяИни.Ини_ИмяИни]);
				Если СбисРеестрПоУмолчанию = "0" Тогда
					УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".0";
				КонецЕсли;
				УстановленнаяИни.Ини_ИмяБезРасширения = УстановленнаяИни.Ини_ИмяБезРасширения + ".sbis3";
			КонецЦикла;
			ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ВременныйКэш.Ини);
		КонецЕсли;
	КонецЕсли;
	Если ВыгружатьПользовательские Тогда	
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Выгрузка пользовательских изменений",Кэш.ГлавноеОкно);
		//Если есть не записанные изменения данных в настройках, то формируем данные к выгрузке через разбор типовых и выгружаемых
		Если ВыбранныеНастройки.ПараметрыРаботы.СбисИни.СписокОтправить.Количество() Тогда
			ПользовательскиеИзменения = ПолучитьРасхождениеИни(ИниСИзмененями, ВременныйКэш.Ини, Отказ);
		Иначе//Получаем с сервера только пользовательские изменения
			ПараметрыЗапроса = Новый Структура("Идентификатор,ПараметрыКонфигурации", ВыбранныеНастройки.Идентификатор,ПараметрыКонфигурации);	
			ПараметрыЗапроса.Вставить("СписокИни",	СписокПользовИниВыгрузить);
			ПараметрыЗапроса.Вставить("Кэшировать",	Ложь);
			ПараметрыЗапроса.Вставить("БратьВКэше",	Ложь);
			ПараметрыЗапроса.Вставить("ДополнительныеПараметры", Новый Структура("ТолькоПользовательские,ТихийРежим,ВернутьОшибку", Истина,Ложь,Истина));
			ПользовательскиеИзменения = СбисПолучитьДанныеСервисаИнтеграции(Кэш,ПараметрыЗапроса,Отказ);
			Если Отказ Тогда
				ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, ПользовательскиеИзменения);
				ПользовательскиеИзменения = Новый Структура;
			Иначе
				ПользовательскиеИзменения = ПользовательскиеИзменения.Данные.Ини;
			КонецЕсли;
		КонецЕсли;
		Если ПользовательскиеИзменения.Количество() Тогда 
			//Отдельльно сохраняем пользовательские изменения.
			УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(ПользовательскиеИзменения,,Отказ,ПрефиксДобавить);	
			ВременныйКэш.ФормаНастроек.СбисСформироватьИниФайлыКлиента(ВременныйКэш, УстановленныеИни, ПользовательскиеИзменения);
		КонецЕсли;
	КонецЕсли;
	//РезультатФормированияМеню = ВременныйКэш.ФормаНастроек.СбисОбновитьСтруктуруРазделов(ВременныйКэш, ВременныйКэш.ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		//ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатФормированияМеню);
	Иначе
		Сообщить("Файлы настроек успешно сохранены в каталог " + КаталогСНастройками, СтатусСообщения.Информация);
	КонецЕсли;
	
	ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	ВременныйКэш = Неопределено;
		
КонецПроцедуры

&НаКлиенте
Функция		ЗагрузитьНастройкиИзКаталогаНаСервер(Кэш,КаталогСНастройками,Отказ)
	
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	
	ВременныйКэш = Новый Структура("Парам, Ини", Новый	Структура("КаталогНастроек", КаталогСНастройками), Новый	Структура);
	ВременныйКэш.Вставить("ГлавноеОкно",			ГлавноеОкно);
	ВременныйКэш.Вставить("ФормаНастроекОбщее",		Кэш.ФормаНастроекОбщее);
	ВременныйКэш.Вставить("Интеграция",				Кэш.Интеграция);
	ВременныйКэш.Вставить("ПараметрыФильтра",		Кэш.ПараметрыФильтра);
	ВременныйКэш.Вставить("ОбщиеФункции",			Кэш.ОбщиеФункции);
	ВременныйКэш.Вставить("Заплатки",				Кэш.Заплатки); 
	ВременныйКэш.Вставить("ПараметрыСистемы",		Кэш.ПараметрыСистемы);
	ВременныйКэш.Вставить("ТекущийСеанс",			Новый Структура("Функции", Новый Структура));
	ВременныйКэш.Вставить("ИниВПорядке",			Ложь);
	ВременныйКэш.Вставить("КэшНастроек",			Новый Структура);
	ВременныйКэш.Вставить("КэшЗначенийИни",			Новый Структура("ИниЗагрузки", Новый Структура));
	ВременныйКэш.Вставить("ТихийРежим",				Истина);
	
	ВременныйКэш.Парам.Вставить("СпособОбмена",				1);
	ВременныйКэш.Парам.Вставить("СпособХраненияНастроек",	0);
	ВременныйКэш.Парам.Вставить("ИдентификаторНастроек",	"");
	ВременныйКэш.Парам.Вставить("НастройкиАвтообновление",	Ложь);
	
	ДополнительныеПараметры	= Новый	Структура();
	ДополнительныеПараметры.Вставить("РежимРаботы", "ЗагрузкаИзКаталога");
	ВременныйКэш.Вставить("ДополнительныеПараметры",ДополнительныеПараметры);
	
	ГлавноеОкно.ОпределитьФормуРаботыСНастройками(ВременныйКэш, ВременныйКэш.Парам.СпособОбмена, ВременныйКэш.Парам.СпособХраненияНастроек);
	
	Если Не ВременныйКэш.Парам.СпособХраненияНастроек = 0 Тогда
		Отказ = Истина;
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер",776,"Запуск программы/функции/метода не удался","Не удалось установить форму работы с настройками!");
	КонецЕсли;
	
	УстановленныеИниФайлы = ВременныйКэш.ФормаНастроек.СбисПолучитьНастройки(ВременныйКэш, Отказ);
	ДатаИзмененияНастроек = ТекущаяДата();
	
	Если УстановленныеИниФайлы = Неопределено	Тогда
		Отказ	= Истина;
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер",610,"Отсутствует файл настроек для данного типа данных","В каталоге " + КаталогСНастройками + " отсутствуют файлы настроек!");
	КонецЕсли;
	
	//Определение стандартной конфигурации по инишкам xml
	ПрефиксКонфигурации	= "";
	Для	Каждого	УстановленнаяИни Из УстановленныеИниФайлы Цикл
		ИмяФайлаИни	= Сред(УстановленнаяИни.ИмяФайла, СтрДлина(ВременныйКэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис)+1);
		ПрефиксИни	= Сред(ИмяФайлаИни, 1, Найти(ИмяФайлаИни, "_")-1);
		ПолноеИмяИни= СтрЗаменить(УстановленнаяИни.ИмяФайла, ".", "_");
		Если			ПустаяСтрока(ПрефиксКонфигурации) Тогда
			ПрефиксКонфигурации	= ПрефиксИни;
		ИначеЕсли Не	ПрефиксКонфигурации	= ПрефиксИни Тогда
			//Сообщить("Нельзя загрузить настройки от различных конфигураций!",	СтатусСообщения.Важное);
			Отказ = Истина;
			Возврат	Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер",608, "Некорректное описание параметра в файле настроек", "Нельзя загрузить настройки от различных конфигураций!");
		КонецЕсли;
	КонецЦикла;
	
	//Исправление определения базового конфига для загружаемых из каталога инишек
	ПараметрыТекущейСистемы	= Новый	Структура("service,subsystem,version","");
	ЗаполнитьЗначенияСвойств(ПараметрыТекущейСистемы, Кэш.КэшНастроек.ПараметрыКонфигурации, "subsystem,version");
	ПрефиксТекущейСистемы	= Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыТекущейСистемы);
	Если	Лев(ПрефиксТекущейСистемы, СтрДлина(ПрефиксИни)) = ПрефиксИни	Тогда//Это наша система, взять параметры текущей системы.
		ВерсияСистемы	= Кэш.КэшНастроек.ПараметрыКонфигурации.version;
		ПрефиксИни		= Кэш.КэшНастроек.ПараметрыКонфигурации.subsystem;
	ИначеЕсли	ПрефиксИни = "КА"
			Или	ПрефиксИни = "БГУ"
			Или	ПрефиксИни = "УПП" Тогда//Без начала версии в префиксе. Подразумевается 1.
		ВерсияСистемы	= Кэш.ОбщиеФункции.СериализоватьВерсию("1", "Дозаполнить");//Взять последнюю подходящую
	Иначе//Рассчитать версию с учетом наличия символов версии в префиксе.
		СимволыВерсии	= "0123456789";
		Для	шаг	= 1	По СтрДлина(ПрефиксИни)	Цикл
			Если Булево(Найти(СимволыВерсии, сред(ПрефиксИни, шаг, 1))) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ВерсияСистемы	= Кэш.ОбщиеФункции.СериализоватьВерсию(Сред(ПрефиксИни, шаг), "Дозаполнить");
		ПрефиксИни		= Сред(ПрефиксИни, 1, шаг -1);
	КонецЕсли;
	
	//Определение подходящих конфигов для загруженных файлов
	ПараметрыКонфигурации	= Новый	Структура;
	ПараметрыКонфигурации.Вставить("service",	Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	ПараметрыКонфигурации.Вставить("subsystem",	ПрефиксИни);
	ПараметрыКонфигурации.Вставить("version",	ВерсияСистемы);
	//Проверяем при временном кэше, чтобы корректно заполнилась шапка отчета об ошибках
	ВременныйКэш.ТихийРежим = Ложь;
	ГлавноеОкно.СбисПоказатьСостояние("Установка настроек", ГлавноеОкно);
	
	//Выполним минимально необходимые операции с настройками
	СтруктураСбисПараметров = ПолучитьПараметрыСБИС(Кэш,"",Ложь);
	//Проверка файлов
	УстановленныеИниФайлы = ВременныйКэш.ФормаНастроекОбщее.СбисПроверитьУстановленныеНастройки(ВременныйКэш, УстановленныеИниФайлы, ВременныйКэш.Ини, СтруктураСбисПараметров);
	Если Не ВременныйКэш.ИниВПорядке Тогда
		Возврат УстановленныеИниФайлы;
	КонецЕсли;
	//Заполним в печатные формы по настройкам. TODO45, вынести всё это в запись
	РезультатУстановки = ВременныйКэш.ФормаНастроекОбщее.сбисДобавитьПечатныеФормы(ВременныйКэш, Отказ);
	Если Отказ Тогда
		//Только сообщить об ошибке, не прерывая обработку
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФормаНастроекОбщее.ЗагрузитьНастройкиИзКаталогаНаСервер"));
	КонецЕсли;
	//Установка ини конфигурации и раздела.
	ПараметрыУстановки = Новый Структура("НеобходимоОбновление, ИниСтруктурыРазделов", Ложь, ВременныйКэш.ФормаНастроекОбщее.СбисСформироватьСтруктуруРазделов(ВременныйКэш, ВременныйКэш.Ини, Новый Структура));
	РезультатУстановки = ВременныйКэш.ФормаНастроекОбщее.СбисУстановитьВыбранныеНастройки(Кэш, ПараметрыУстановки, ДополнительныеПараметры, Отказ);//Всё верно, в общий Кэш устанавливаем настройки из каталога
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер");
	КонецЕсли;
	
	НашаКонфигурацияБыло	= Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, ГлавноеОкно.Конфигурация);
	НашаКонфигурацияНовая	= УстановитьКонфигурацию_v2(Кэш, ПараметрыКонфигурации, Отказ);
	Если Отказ Тогда
		Возврат	НашаКонфигурацияНовая;
	КонецЕсли;
	Если ВременныйКэш.ИниВПорядке Тогда
		ДополнительныеПараметры.Вставить("ДатаИзмененияНастроек", ТекущаяДата());
	КонецЕсли;
	
	//Привести имена в настройках в стандарту хранения обработкой при серверных настроек. Дополнить недостающее в имени.
	Для	Каждого УстановленнаяИни Из УстановленныеИниФайлы Цикл
		ПолноеИмяИни= СтрЗаменить(УстановленнаяИни.ИмяФайла, ".", "_");
		ИниИмяИни	= УстановленнаяИни.Ини_ИмяИни;
		ЗначениеИни = Неопределено;
		Если ВременныйКэш.ини.Свойство(ИниИмяИни, ЗначениеИни) Тогда
			ЗначениеИни.Вставить("СбисЕстьИзменения",	УстановленнаяИни.ЕстьИзменения);
			Если(	Не	(	ИниИмяИни = "Конфигурация"
						Или	Лев(ИниИмяИни, 8) = "Загрузка")
				И	ЗначениеИни.Свойство("мДокумент")) Тогда
				ВременныйКэш.ини.Удалить(ИниИмяИни);
				ИниИмяИни = "Загрузка_Входящий_" + ИниИмяИни;
				ВременныйКэш.Ини.Вставить(ИниИмяИни, ЗначениеИни);
				УстановленнаяИни.Ини_ИмяИни = ИниИмяИни;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКонфигурации = НашаКонфигурацияНовая.ПараметрыКонфигурации;
	Идентификатор = Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор;
	
	//Получим стандартные ини для конфигурации
	Кэш.ИниВПорядке = ВременныйКэш.ИниВПорядке;
	Кэш.Вставить("Ини", ВременныйКэш.Ини);
	Кэш.ПараметрыФильтра = ВременныйКэш.ПараметрыФильтра;
	
	ПараметрыФормирования = СтруктураНастроекИзДанныхConnectionConfig(Кэш, Неопределено, Отказ);
	ПараметрыФормирования.ПараметрыКонфигурации = ПараметрыКонфигурации;	
	ПараметрыФормирования.Идентификатор			= Идентификатор;	
	ПараметрыФормирования.ДатаИзмененияНастроек	= ДатаИзмененияНастроек;
	ПараметрыФормирования.Вставить("ПараметрыКонфигурации_Было",НашаКонфигурацияБыло.ПараметрыКонфигурации);
	ПараметрыФормирования.Данные.Параметры		= СтруктураСбисПараметров;
	
	//Дописываем в параметры изменения для записи
	Если ВременныйКэш.ИниВПорядке Тогда
		ВременныйКэш.КэшНастроек.Вставить("ВыбранныеНастройки", Новый Структура("ДатаИзмененияНастроек", ДатаИзмененияНастроек));
		ВременныйКэш.КэшНастроек.Вставить("ПараметрыКонфигурации", Кэш.КэшНастроек.ПараметрыКонфигурации);
		СбисОпределитьНеобходимостьПроверки(ВременныйКэш, ВременныйКэш.Ини, ПараметрыФормирования.Данные.Параметры); 
	КонецЕсли;
	ПараметрыФормирования.ПараметрыРаботы.СбисМеню.Обновить = Истина;
	
	РезультатФормирования = СформироватьСтруктуруНастроек(Кэш,ПараметрыФормирования,Отказ);
	ВременныйКэш = Неопределено;
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатФормирования,"ФайлыНастроекСервер.ЗагрузитьНастройкиИзКаталогаНаСервер");
	КонецЕсли;
	ВыбранныеНастройки = РезультатФормирования;
	ВыбранныеНастройки.Вставить("ПараметрыКонфигурации", ПараметрыКонфигурации);
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", ВыбранныеНастройки);
	
	УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(ВыбранныеНастройки.Данные.Ини,ВыбранныеНастройки,Отказ);
	//Заполним параметры последней проверки
	СбисОпределитьНеобходимостьПроверки(Кэш, УстановленныеИниФайлы, ВыбранныеНастройки.Данные.Параметры);
	Возврат	УстановленныеИниФайлы;
	
КонецФункции

&НаСервере
Процедура	ЗаполнитьТаблицуДоступныхНастроек(ДанныеКЗаполнению, Отказ)
	//Для управляемых форм заполнение происходит при создании объекта формы при открытии.	
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеКЗаполнению) Тогда
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура;	
	Параметры.Вставить("ДанныеЗаполнить",ДанныеКЗаполнению);
	ПриСозданииНаСервере(Отказ);
	
КонецПроцедуры

//В процедуре из переданной структуры убираются отключенные узлы, которые были оставлены для их записи и отправки на сервер (для отключения при получении), но которые будут мешать нормальной работе с настройками
&НаКлиенте
Процедура	ОчиститьОтключенныеУзлы(ДанныеИни, КонтекстУзла=Неопределено)
	
	КлючиУдалить = Новый Массив;
	Если ТипЗнч(ДанныеИни) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из ДанныеИни Цикл
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
				ПараметрыУзла = Новый Структура("ИмяУзла", КлючИЗначение.Ключ);
				ОчиститьОтключенныеУзлы(КлючИЗначение.Значение,ПараметрыУзла);
			ИначеЕсли	КлючИЗначение.Значение = "" Тогда
				Если	КонтекстУзла.Свойство("ИмяУзла")
					И	КонтекстУзла.ИмяУзла = "Отбор" Тогда
					КлючиУдалить.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для Каждого КлючУдалить Из КлючиУдалить Цикл
		ДанныеИни.Удалить(КлючУдалить);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура	ПриСозданииНаСервере(Отказ=Ложь, СтандартнаяОбработка=Истина)
	
	ТаблицаНастроек.Очистить();
	
	ДанныеЗаполнить = Неопределено;
	Если ЭтаФорма.Параметры.Свойство("ДанныеЗаполнить",ДанныеЗаполнить)
		И ЗначениеЗаполнено(ДанныеЗаполнить) Тогда
		Для Каждого СтрокаНастроек Из ДанныеЗаполнить Цикл
			НоваяСтрока = ТаблицаНастроек.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНастроек);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		СформироватьТаблицуДоступныхНастроек(Кэш, Отказ)
	
	СписокИни = Неопределено;
	//СписокИни = Новый Массив();
	//СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	ПараметрыЗапроса = Новый Структура("ТипЗапроса,СписокИни,ПараметрыКонфигурации,", "ListConnection",СписокИни,Кэш.КэшНастроек.ПараметрыКонфигурации);
	
	РезультатЗапроса = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
	ДанныеКЗаполнению = Новый Массив();
	Если Отказ	Тогда
		Возврат Неопределено;
	КонецЕсли;
	КлючиКолонок = "Название,Пользователь,НазваниеБазовыхНастроек,ВерсияБазовыхНастроек,Идентификатор,service,subsystem,version";
	ДЛя Каждого СтрокаПолучено Из РезультатЗапроса Цикл
		ПараметрыКонфигурации = СтрокаПолучено.ПараметрыКонфигурации;
		
		НоваяСтрока	= Новый Структура(КлючиКолонок);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыКонфигурации);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПолучено);
		
		НоваяСтрока.НазваниеБазовыхНастроек = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурации));
		НоваяСтрока.ВерсияБазовыхНастроек	= ПараметрыКонфигурации.version;
		Если	ПустаяСтрока(СтрокаПолучено.Пользователь)	Тогда
			НоваяСтрока.Пользователь = "Общие для аккаунта";
		Иначе
			НоваяСтрока.Пользователь = Кэш.ГлавноеОкно.Пользователь;
		КонецЕсли;
		ДанныеКЗаполнению.Добавить(НоваяСтрока);
	КонецЦикла;	
	ПараметрыСортировки = Новый Структура("ПоляСортировки", Новый Массив);
	ПараметрыСортировки.ПоляСортировки.Добавить(Новый Структура("Поле,Направление", "Название",	"Возр"));
	ДанныеКЗаполнению = Кэш.ОбщиеФункции.СбисОтсортироватьОбъект(ДанныеКЗаполнению,ПараметрыСортировки, Отказ);
	
	ПараметрыКонфигурации = Кэш.КэшНастроек.ПараметрыКонфигурации;
	
	НоваяСтрока = Новый Структура(КлючиКолонок);
	ЗаполнитьЗначенияСвойств(НоваяСтрока,  Кэш.КэшНастроек.ПараметрыКонфигурации);
	НоваяСтрока.Название				= "Создать новое подключение";
	НоваяСтрока.Пользователь			= Кэш.ГлавноеОкно.Пользователь;
	НоваяСтрока.НазваниеБазовыхНастроек = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации.service, Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурации));
	НоваяСтрока.ВерсияБазовыхНастроек	= ПараметрыКонфигурации.version;
	НоваяСтрока.Идентификатор			= "";
	ДанныеКЗаполнению.Добавить(НоваяСтрока);
	
	Возврат ДанныеКЗаполнению;
				
КонецФункции

//Проверяет переданный идентификатор и возвращает готовый для работы со структурой настроек в кэше
&НаКлиенте
Функция		Кэширование_Идентификатор(Кэш, ПараметрыКонфигурации, Идентификатор = "", Отказ=Ложь)

	ID = Идентификатор;
	Если ПустаяСтрока(ID) Тогда
		ID	= СтрЗаменить(Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурации), "-", "");
	КонецЕсли;
	ID = Кэш.ОбщиеФункции.СбисФорматСтроки(ID, "КлючСтруктуры");
	Если ID = "_" Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.Кэширование_Идентификатор", 600,,"Невозможно определить идентификтор настроек для хранения!", Новый Структура("config, id", ПараметрыКонфигурации, Идентификатор));
	КонецЕсли;
	Возврат	ID;

КонецФункции

&НаКлиенте                                  
Процедура	Кэширование_Поместить_Настройки(Кэш, ДанныеКэшировать, Отказ)
	
	КэшНастроек = Кэш.КэшНастроек;
	Если	ДанныеКэшировать = Неопределено
		Или	Отказ
		Или Не КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеКэшировать) = Тип("Массив") Тогда
		Для Каждого СтрокаКэшировать Из ДанныеКэшировать Цикл
			Кэширование_Поместить_Настройки(Кэш, СтрокаКэшировать, Отказ);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	КэшПолученныхНастроек	= Неопределено;
	ПараметрыКонфигурации	= Неопределено;
	КэшДанных				= Неопределено;
	ConnectionIDНастроек	= ДанныеКэшировать.Идентификатор;
	Если Не	КэшНастроек.Свойство("КэшПолученныхНастроек", КэшПолученныхНастроек) Тогда
		КэшНастроек.Вставить("КэшПолученныхНастроек",Новый Структура());
		КэшПолученныхНастроек = КэшНастроек.КэшПолученныхНастроек;
	КонецЕсли;
	
	//Если Не ДанныеКэшировать.Свойство("Идентификатор", ConnectionIDНастроек) Тогда
	//	ConnectionIDНастроек = "";
	//КонецЕсли;
	Если Не ДанныеКэшировать.Свойство("ПараметрыКонфигурации", ПараметрыКонфигурации) Тогда
		ПараметрыКонфигурации = Новый Структура("version,subsystem,service", Кэш.ОбщиеФункции.СериализоватьВерсию(ДанныеКэшировать.version), ДанныеКэшировать.subsystem, ДанныеКэшировать.service);
	КонецЕсли;
	
	ID = Кэширование_Идентификатор(Кэш, ПараметрыКонфигурации, ConnectionIDНастроек, Отказ);
	Если Отказ Тогда 
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(ID, "ФайлыНастроекСервер.Кэширование_Поместить_Настройки"));
		Возврат;
	КонецЕсли;
	
	Если КэшПолученныхНастроек.Свойство(ID, КэшДанных) Тогда
		Если ЗначениеЗаполнено(ДанныеКэшировать.Данные.Ини) Тогда
			//Если есть данные ини, то закэшируем их
			ИниКэшировать = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ДанныеКэшировать.Данные.Ини);
			Если КэшДанных.Данные.Ини = Неопределено Тогда
				КэшДанных.Данные.Ини = Новый Структура;
			КонецЕсли;
			Для Каждого КлючИЗначениеИни Из ИниКэшировать Цикл
				КэшДанных.Данные.Ини.Вставить(КлючИЗначениеИни.Ключ, КлючИЗначениеИни.Значение);
			КонецЦикла;
		КонецЕсли;
		КэшДанных.Название = ДанныеКэшировать.Название;
		КэшДанных.Данные.Меню		= Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ДанныеКэшировать.Данные.Меню);
		КэшДанных.Данные.Параметры	= Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ДанныеКэшировать.Данные.Параметры);
		КэшДанных.ПараметрыРаботы	= Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ДанныеКэшировать.ПараметрыРаботы);
	ИначеЕсли ЗначениеЗаполнено(ДанныеКэшировать.Данные.Ини) Тогда//Добавляем коннекшен/конфиг в кэш только если там что-то есть.
		КэшПолученныхНастроек.Вставить(ID, Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ДанныеКэшировать));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                                  
Функция		Кэширование_Извлечь_Настройки(Кэш, Идентификатор, СписокИни, Отказ)
	
	Найдено = Неопределено;
	Если		Отказ
		Или	Не	Кэш.КэшНастроек.КэшПолученныхНастроек.Свойство(Идентификатор, Найдено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Результат = СтруктураНастроекИзДанныхConnectionConfig(Кэш, Неопределено, Отказ);
	Если Найдено.Свойство("ДатаИзмененияНастроек") Тогда
		Результат.Вставить("ДатаИзмененияНастроек", Найдено.ДатаИзмененияНастроек);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Результат, Найдено, , "Данные, ПараметрыРаботы, ПараметрыКонфигурации");
	Результат.ПараметрыКонфигурации	= Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(Найдено.ПараметрыКонфигурации);
	Результат.ПараметрыРаботы		= Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(Найдено.ПараметрыРаботы);
	Результат.Данные.Ини = Новый Структура;
	Если Не СписокИни = Неопределено Тогда
		Для Индекс = 0 По СписокИни.Количество()-1 Цикл
			ПараметрЗапросаИни = СписокИни[Индекс];
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ПараметрЗапросаИни.name);
			ЗаписьИни = Неопределено;
			Если Найдено.Данные.Ини.Свойство(ИмяИни, ЗаписьИни) Тогда
				Результат.Данные.Ини.Вставить(ИмяИни, Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ЗаписьИни));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//Функция определяет наличие изменений в выбранных настройках. осущствлённых пользователем
&НаКлиенте                                  
Функция		НастройкиМенялись(Кэш, СтруктураНастроек, Отказ)
	
	Если Отказ Тогда
		Возврат	Ложь;
	КонецЕсли;
	Если	СтруктураНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Количество()
		Или	СтруктураНастроек.ПараметрыРаботы.Статус = "Удален"
		Или	СтруктураНастроек.ПараметрыРаботы.СбисМеню.Обновить Тогда
		Возврат Истина;
	КонецЕсли;
	
	СписокИни = Новый Массив;
	СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	ПараметрыЗапроса = Новый Структура
	(	"Идентификатор,					ПараметрыКонфигурации,					СписокИни,ДополнительныеПараметры",
		СтруктураНастроек.Идентификатор,СтруктураНастроек.ПараметрыКонфигурации,СписокИни,Новый Структура("ТихийРежим",Истина));
	НастройкиБыли = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
	//Сравним основные значения таблицы
	Если	Не	НастройкиБыли.ПараметрыРаботы.Автообновление = СтруктураНастроек.ПараметрыРаботы.Автообновление
		Или	Не	НастройкиБыли.Название = СтруктураНастроек.Название Тогда
		Возврат Истина;
	КонецЕсли;
	ПараметрыЗапроса.Удалить("СписокИни");
	ПараметрыЗапроса.Вставить("СбисМеню", НастройкиБыли.Данные.Меню);
	ДанныеСписка = СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	//Сравним состав ини
	МассивПроверено = Новый Массив;
	Для Каждого ЭлементКарты Из ДанныеСписка.Карта Цикл
		ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЭлементКарты.Значение);
		Если Кэш.Ини.Свойство(ИмяИни) Тогда
			МассивПроверено.Добавить(ИмяИни);
			Продолжить;
		КонецЕсли;
		Возврат Истина;
	КонецЦикла;
	Если Не Кэш.Ини.Количество() = МассивПроверено.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	ПараметрыЗапроса.Удалить("СбисМеню");
	НастройкиБыли = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
	//Сравним значения ини.
	Если ИниРазличаются(Кэш.Ини, НастройкиБыли.Данные.Ини, Отказ) Тогда
		Для Каждого КлючИЗначениеИни Из Кэш.Ини Цикл
			СтруктураНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(КлючИЗначениеИни.Ключ)
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция		ОтключитьФайлыНастроекНаСервере(СписокИниКОтключению, Кэш, Идентификатор, Отказ)
	
	Если Отказ Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	СтруктураВыбранныхНастроек	= Кэш.КэшНастроек.ВыбранныеНастройки;
	
	Для	Каждого	УстановленныйФайл Из СписокИниКОтключению Цикл
		ИмяИниИсточник	= СтрЗаменить(УстановленныйФайл.Значение,".sbis3","");
		СтруктураВыбранныхНастроек.Данные.Ини.Удалить(ИмяИниИсточник);
		ИндексВОтправить = СтруктураВыбранныхНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Найти(ИмяИниИсточник);
		Если Не ИндексВОтправить = Неопределено Тогда
			СтруктураВыбранныхНастроек.ПараметрыРаботы.СбисИни.СписокОтправить.Удалить(ИндексВОтправить);
		КонецЕсли;
	КонецЦикла;
	Кэш.Вставить("ини", СтруктураВыбранныхНастроек.Данные.Ини);
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(СтруктураВыбранныхНастроек.Данные.Ини,СтруктураВыбранныхНастроек,Отказ);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьМассивУстановленныхИниФайлов(КэшИни, ВыбранныеНастройки=Неопределено, Отказ=Ложь, ПрефиксИни="")
	
	МассивУстановленныхИниФайлов = Новый Массив;
	
	ДатаНастроек		= ?(ВыбранныеНастройки=Неопределено, ТекущаяДата(), ВыбранныеНастройки.ДатаИзмененияНастроек);
	АвтообновлениеДефолт= ?(ВыбранныеНастройки=Неопределено, Истина, ВыбранныеНастройки.ПараметрыРаботы.Автообновление);
	
	КлючиСтрок	= "Имяфайла,ИмяфайлаБезРасширения,ПутьДоИниФайла,ЕстьИзменения,Автообновление,ДатаФайла,ДатаФайлаКлиент,Ини_ИмяИни,Ини_ИмяБезРасширения";
	СписокСтрок	= Новый	СписокЗначений();
	Для Каждого КлючИЗначениеИни Из КэшИни	Цикл
		ИмяИни		= КлючИЗначениеИни.Ключ;
		ЗначениеИни	= КлючИЗначениеИни.Значение;
		Если		ИмяИни	= "Конфигурация"	Тогда//Конфигурация вверху.
			ПолеСортировки = "а";
		ИначеЕсли Лев(ИмяИни, 8) = "Загрузка" Тогда
			ПолеСортировки = "я";
		Иначе
			ПолеСортировки = "б";
		КонецЕсли;
		СбисЕстьТиповая		= Ложь;
		СбисЕстьИзменения	= Ложь;
		СбисАвтообновление	= АвтообновлениеДефолт;
		Если ЗначениеЗаполнено(ЗначениеИни) Тогда				
			ЗначениеИни.Вставить("СбисОшибки",			Новый Массив());
			ЗначениеИни.Вставить("СбисПолноеИмяФайла",	СтрЗаменить(ИмяИни,"""",""));
			ЗначениеИни.Вставить("СбисИмяФайла",		СтрЗаменить(ИмяИни,"""",""));
			
			Если ЗначениеИни.Свойство("СбисЕстьТиповая")	Тогда
				СбисЕстьТиповая = ЗначениеИни.СбисЕстьТиповая;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисЕстьИзменения")	Тогда
				СбисЕстьИзменения = ЗначениеИни.СбисЕстьИзменения;
			КонецЕсли;
			Если ЗначениеИни.Свойство("СбисАвтообновление")	Тогда
				СбисАвтообновление = ЗначениеИни.СбисАвтообновление; 
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока = Новый	Структура(КлючиСтрок);
		НоваяСтрока.ПутьДоИниФайла			= "";
		НоваяСтрока.ЕстьИзменения			= СбисЕстьИзменения;
		НоваяСтрока.Автообновление			= СбисАвтообновление;		
		НоваяСтрока.Имяфайла				= ПрефиксИни + СтрЗаменить(ИмяИни + ?(СбисЕстьТиповая, ".sbis3", ""),"""","");
		НоваяСтрока.ИмяфайлаБезРасширения	= ПрефиксИни + СтрЗаменить(ИмяИни, """", "");
		НоваяСтрока.ДатаФайла				= ?(СбисЕстьТиповая,	ДатаНастроек, Неопределено);
		НоваяСтрока.ДатаФайлаКлиент			= ?(СбисЕстьИзменения,	ДатаНастроек, Неопределено);
		НоваяСтрока.Ини_ИмяИни				= СтрЗаменить(ИмяИни,"""","");
		НоваяСтрока.Ини_ИмяБезРасширения	= Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1);
		
		СписокСтрок.Добавить(НоваяСтрока,  ПолеСортировки + НоваяСтрока.ИмяФайла);
	КонецЦикла;
	СписокСтрок.СортироватьПоПредставлению();
	Возврат	СписокСтрок.ВыгрузитьЗначения();
	
КонецФункции

&НаКлиенте
Функция		ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурации)
	
	ПараметрыСтандартнойКонфигурации = Новый Структура("service, subsystem, version");
	ЗаполнитьЗначенияСвойств(ПараметрыСтандартнойКонфигурации, ПараметрыКонфигурации);
	ПараметрыСтандартнойКонфигурации.service = Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис;
	Возврат ПараметрыСтандартнойКонфигурации;
	
КонецФункции

//Функция возвращает описание инишки меню для запроса методами получения данных
&НаКлиенте
Функция		СбисОписаниеИниМеню(Кэш, СбисМеню=Неопределено)
	Результат = СбисОписаниеИни(Кэш, СбисМеню);
	Результат.type = "Меню";
	Результат.name = "сбисМеню";
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция		СбисОписаниеИни(Кэш, data_ini=Неопределено)
	Возврат Новый Структура("active,data,type,name", Истина, data_ini)
КонецФункции

//Функция выполняет проверку изменения параметров работы формы настроек. Возвращает результат изменения параметров, либо неопределено.
&НаКлиенте                                  
Функция		СбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш, Отказ, ПродолжитьВыполнение)
	
	//Проверка изменения параметров работы формы с настройками.	Обрабатываем переданные параметры и сразу очищаем.
	ПараметрРаботы = Неопределено;
	Если ПараметрыРаботы.Свойство("ИзменениеПользователя",ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			Кэш.Парам.ИдентификаторНастроек = СбисПолучитьИдентификаторНастроек(Кэш);//При работе серверными настройками нужно проверить наличие идентификатора пользователя;
			СбисОчиститьВыбранныеНастройки(Кэш, Отказ);//Была смена пользователя. Перезапускаем получение даже если уже были выбраны какие-то настройки
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзменениеПользователя");
	КонецЕсли;	
	Если	ПараметрыРаботы.Свойство("ВыполнитьПроверку", ПараметрРаботы)
		И	ПараметрРаботы Тогда
		ВыбранныеНастройки = Неопределено;
		Если Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда//Настройки должны быть выбраны
			ПродолжитьВыполнение = Ложь;
			Возврат Неопределено;
		КонецЕсли;
		ПродолжитьВыполнение = Истина;
		Возврат ПолучитьМассивУстановленныхИниФайлов(Кэш.ини,ВыбранныеНастройки,Отказ);
	КонецЕсли;
	Если ПараметрыРаботы.Свойство("КэшироватьТекущие") Тогда
		ПараметрыРаботы.Удалить("КэшироватьТекущие");
	КонецЕсли;
	//Чистим способ данные по конфигурациям в кэше и выбранную конфу, так как другой способ хранения настроек
	Если ПараметрыРаботы.Свойство("ИзмененаФормаНастроек", ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзмененаФормаНастроек");
	КонецЕсли;

	Возврат Неопределено;
		
КонецФункции

//Функция осуществляет поиск и получение настроек по сохраненному идентификатору, либо по наличию ранее настроенного соединения.
&НаКлиенте                                  
Функция		СбисПрочитатьНастройки(Кэш, Отказ, ПродолжитьВыполнение)
	
	Результат = Неопределено;
	ДополнительныеПараметры = Неопределено;
	ПолучатьНастройки = Истина;
	
	//Сперва пробуем по готовому ID
	Если ЗначениеЗаполнено(Кэш.Парам.ИдентификаторНастроек) Тогда
		ПараметрыВызова = Новый Структура("Кэш,Отказ",Кэш,Отказ);//Отказ для получения настроек отдельно.
		СбисУстановитьПараметры(Кэш, Кэш.Парам.ИдентификаторНастроек,,ПараметрыВызова.Отказ);//Сперва применяем параметры и проверяем доступность соединения
		Если ЗначениеЗаполнено(Кэш.Парам.ИдентификаторНастроек) Тогда
			ЧтениеНастроекПоТребованию = Кэш.Парам.ЧтениеНастроекПоТребованию И Не (Кэш.Текущий.ТипДок = "ФайлыНастроек");

			ПараметрыВызова.Вставить("ЧтениеНастроекПоТребованию", Кэш.Парам.ЧтениеНастроекПоТребованию);//Для инишек по требованию не получаем значения ини
			Результат = СбисУстановитьГотовыеНастройки(Кэш.Парам.ИдентификаторНастроек, ПараметрыВызова);
		КонецЕсли;
		Если ПараметрыВызова.Отказ Тогда
			Если ЗначениеЗаполнено(Результат) Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
			КонецЕсли;
			ДополнительныеПараметры = Новый Структура();
			ДополнительныеПараметры.Вставить("ИдентификаторыИсключить", Новый Массив);
			ДополнительныеПараметры.Вставить("СоздаватьНовый", Ложь);
			ДополнительныеПараметры.ИдентификаторыИсключить.Добавить(Кэш.Парам.ИдентификаторНастроек);
		ИначеЕсли Не Результат = Неопределено Тогда
			ПолучатьНастройки = Ложь;
			ПараметрыУстановленнойКОнфигурации = ПараметрыСтандартнойКонфигурации(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыКонфигурации);
			ПараметрыУстановленнойКОнфигурации.Удалить("service");
			Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыУстановленнойКОнфигурации);
		КонецЕсли;
	КонецЕсли;
	//Не вышло, применить предустановленное
	Если ПолучатьНастройки Тогда
		Результат = СбисПрименитьПредустановленныеНастройки(Кэш, Отказ, ПродолжитьВыполнение, ДополнительныеПараметры);
		Если Отказ Тогда
			Если ЗначениеЗаполнено(Результат) Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, Результат);
			КонецЕсли;
			Отказ = Ложь;//Переключаем ошибку в ложь для установки стандартных настроек. Возможно, имеет смысл добавить проверку типа ошибки ответ не получен 
		Иначе
			СбисУстановитьПараметры(Кэш, Кэш.Парам.ИдентификаторНастроек,,Отказ);		
			Если Кэш.ИниВПорядке Тогда
				ПолучатьНастройки = Ложь;
			//TODO38 удалить, если не потребуется. 
			//Иначе//Ини не удалось установить, или они с ошибками. Включаем кэширование и сразу кэшируем полученные данные(если есть)
			//	ВыбранныеНастройки = СформироватьСтруктуруТекущихНастроек(Кэш, Новый Структура("КэшироватьВсеПолучаемые", Истина), Отказ);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	//Если всё ещё не удалось получить, то стандартные
	Если ПолучатьНастройки Тогда
		//При ошибках ставим пользовательскую конфигурацию
		СбисУстановитьПараметры(Кэш,"",,Отказ);		
		Кэш.КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые = Истина;//Включаем кэширование и ставим стандартные настройки.		
		Результат = СбисУстановитьСтандартныеНастройки(Кэш,Отказ,ПродолжитьВыполнение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Получает структуру XSLT при её отсутствии в кэше
&НаКлиенте
Функция		СбисСформироватьСтруктуруXSLT(Кэш, Идентификатор, Отказ)
	
	//Пока XSLT не привязаны к ID. Делаем всегда получение. После переделать на получение xslt по ID.
	Если	Отказ
		Или	(	Кэш.Свойство("XSLT")
			И	ЗначениеЗаполнено(Кэш.XSLT))	Тогда
			Возврат Ложь;
	ИначеЕсли Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Получение структуры XSLT", Кэш.ГлавноеОкно);
	КонецЕсли;
	ДопПараметрыЗапроса	= Новый Структура("ВернутьОшибку, ЕстьРезультат", Истина, Истина);
	
	РезультатЗапроса = Кэш.Интеграция.ПолучитьXslt(Кэш, Неопределено, ДопПараметрыЗапроса, Отказ);
	
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	Кэш.Вставить("XSLT", РезультатЗапроса);
	Возврат Истина;

КонецФункции

//Возвращает массив установленных инишек при успехе
&НаКлиенте
Функция		СбисУстановитьГотовыеНастройки(Идентификатор, ПараметрыВызова)
	
	Кэш			= ПараметрыВызова.Кэш;
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	Если Не ПараметрыВызова.Свойство("Отказ") Тогда
		ПараметрыВызова.Вставить("Отказ", Ложь);
	КонецЕсли;
	ПолучитьДанныеИни =		Не	ПараметрыВызова.Свойство("ЧтениеНастроекПоТребованию")
						Или	Не 	ПараметрыВызова.ЧтениеНастроекПоТребованию;
	
	СтруктураНастроек = Неопределено;
	Если Не	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки",СтруктураНастроек)	Тогда
		ПараметрыЗапроса = Новый Структура("Идентификатор", Идентификатор);
		Если ПараметрыВызова.Свойство("ПараметрыКонфигурации") Тогда
			ПараметрыЗапроса.Вставить("ПараметрыКонфигурации", ПараметрыВызова.ПараметрыКонфигурации);
		КонецЕсли;
		//При начальном получении ини, не читаем данные. Берем только заголовки
		Если Не ПолучитьДанныеИни Тогда
			ПараметрыЗапроса.Вставить("СписокИни", Новый Массив);
			ПараметрыЗапроса.СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
			ПараметрыЗапроса.СписокИни.Добавить(Новый Структура("type,name", "Система","Конфигурация"));
		КонецЕсли;
		СтруктураНастроек = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, ПараметрыВызова.Отказ);
		Если Не ПараметрыВызова.Отказ Тогда
			Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтруктураНастроек);
		КонецЕсли;
	КонецЕсли;		
	Если	ПараметрыВызова.Отказ
		Или СтруктураНастроек = Неопределено Тогда
		Возврат	СтруктураНастроек;
	КонецЕсли;
	СбисСформироватьСтруктуруXSLT(Кэш, Идентификатор, ПараметрыВызова.Отказ);
	
	Если Не	Кэш.ТихийРежим Тогда
		ГлавноеОкно.СбисПоказатьСостояние("Формирование структуры настроек", ГлавноеОкно);
	КонецЕсли;
	
	ГлавноеОкно.НастройкиАвтообновление	= СтруктураНастроек.ПараметрыРаботы.Автообновление;
	ГлавноеОкно.НастройкиНазвание		= СтруктураНастроек.Название;
	//Если не получали инишки
	Если ПолучитьДанныеИни Тогда
		СтруктураИни = СтруктураНастроек.Данные.Ини;
	Иначе
		//Дозаполним структуру ини установленными, но не полученными настройками
		ПараметрыПоиска = Новый Структура("СбисМеню", СтруктураНастроек.Данные.Меню);
		СписокУстановленныхИни = СформироватьСписокИни(Кэш, ПараметрыПоиска, ПараметрыВызова.Отказ);
		Если ПараметрыВызова.Отказ Тогда
			Возврат СписокУстановленныхИни;
		КонецЕсли;
		СтруктураИни = Новый Структура;
		Для Каждого ВключеннаяИни Из СписокУстановленныхИни.Данные Цикл
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ВключеннаяИни.name);
			СтруктураИни.Вставить(ИмяИни, Неопределено);
			СтруктураНастроек.Данные.Ини.Свойство(ИмяИни, СтруктураИни[ИмяИни]);
		КонецЦикла;
		СтруктураНастроек.Данные.Ини = СтруктураИни;
	КонецЕсли;
	
	УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(СтруктураИни,СтруктураНастроек,ПараметрыВызова.Отказ);
	Кэш.Вставить("Ини", СтруктураИни);
		
	Если Не	Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
	ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, СтруктураНастроек.ПараметрыКонфигурации);
	
	//Выберем базовую, для установленных настроек, конфигурацию и заполним список доступных конфигураций
	ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации.service,Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурации));
	Кэш.ГлавноеОкно.Конфигурация = ИмяКонфигурации;
	
	Если Кэш.Текущий.ТипДок = "ФайлыНастроек" Тогда
		Если Не Кэш.Свойство("Конфигурация") Тогда
			СписокТиповНастроек = СбисПолучитьСписокДоступныхНастроек(Кэш,ПараметрыВызова.Отказ);
			Если СписокТиповНастроек = Неопределено Тогда
				ПараметрыВызова.Отказ = Истина;
				Возврат Неопределено;
			КонецЕсли;
			ДанныеКонфигураций = Кэш.ФормаНастроекОбщее.СформироватьСтруктуруКонфигураций(Кэш, СписокТиповНастроек);
			Кэш.Вставить("Конфигурация", ДанныеКонфигураций.СтруктураКонфигураций);
			Кэш.ГлавноеОкно.СбисЭлементФормы(Кэш.ГлавноеОкно,"Конфигурация").СписокВыбора.ЗагрузитьЗначения(ДанныеКонфигураций.СписокВыбора);
		КонецЕсли;
		НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, ИмяКонфигурации);
	КонецЕсли;
	Если Кэш.КэшНастроек.ИзмененияВНастройках Тогда
		Кэш.КэшНастроек.ИзмененияВНастройках = Не СбисПолучитьИдентификаторНастроек(Кэш) = Идентификатор;
	КонецЕсли;
	Возврат	УстановленныеИни;
	
КонецФункции

&НаКлиенте
Функция		СформироватьСписокИни(Кэш=Неопределено, ПараметрыПоиска, Отказ)

	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	СбисМеню		= Неопределено;
	Искать			= Неопределено;
	Идентификатор	= Неопределено;
	ТипыИни			= Неопределено;
	
	Если	Не	ПараметрыПоиска.Свойство("СбисМеню", СбисМеню)
		Или		СбисМеню = Неопределено Тогда
		Если Кэш = Неопределено Тогда//Если не передаётся меню, то кэш должен быть для возможности получить с сервера
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", "Ошибка передачи параметров.");
		КонецЕсли;
		Если Не ПараметрыПоиска.Свойство("Идентификатор", Идентификатор) Тогда
			Идентификатор = "";
		КонецЕсли;
		//Для Пользовательской ТИПОВОЙ конфигурации базовое меню будет пустым. Для коннекшена меню должно быть
		Если	ПустаяСтрока(Идентификатор)
			И	ПустаяСтрока(ПараметрыПоиска.ПараметрыКонфигурации.subsystem) Тогда
			СбисМеню = Новый Структура();
		Иначе
			СбисМеню = ПолучитьСбисМенюПодключения(Кэш, Новый Структура("Идентификатор, ПараметрыКонфигурации", Идентификатор,	ПараметрыПоиска.ПараметрыКонфигурации), Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисМеню, "ФайлыНастроекСервер.СформироватьСписокИни");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("ДоступныеТипыИни", ТипыИни) Тогда
		Если Кэш = Неопределено Тогда//Если не передаются ТипыИни, то кэш должен быть
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		ТипыИни = Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни;
	КонецЕсли;
	Если Не	ПараметрыПоиска.Свойство("Искать", Искать) Тогда
		Искать = Новый Структура("Включено", "1")//По-умолчанию искать только включенные. 01 - ищутся все, 0 - отключенные
	КонецЕсли;
	
	Результат = СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать);
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует по меню структуру с полями "Карта" и "Данные" для дальнейшего составления запроса. 
//Карта		- список имен для быстрого поиска. 
//Данные	- массив структур "type, name" из меню для передачи в методы получения уже самих ини.
&НаКлиенте                                  
Функция		СформироватьСпискиИзМеню(ТипыИни, СбисМеню, Искать, СписокИни = Неопределено)	
	
	Если Не	ТипЗнч(СбисМеню) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СписокИни = Неопределено Тогда
		СписокИни = Новый Структура("Карта,Данные",Новый СписокЗначений,Новый Массив);
	КонецЕсли;
	//Обойти меню и сформировать реестр ини.
	Для	Каждого	КлючИЗначение Из СбисМеню Цикл
		Если Не ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		enable = Неопределено;
		Если КлючИЗначение.Значение.Свойство("enable", enable) Тогда	
			ИмяИни	= КлючИЗначение.Ключ;
			ТипИни	= Неопределено;
			Если 	Не	КлючИЗначение.Значение.Свойство("type", ТипИни)
				Или		ТипыИни.Найти(ТипИни) = Неопределено Тогда//Фильтр по типу ини. Описание в инициализации кэша
				Продолжить;
			КонецЕсли;
			Карта	= СписокИни.Карта;//Карта для поиска значений без перебора
			Раздел	= СписокИни.Данные;//Данные - собственно список для передачи в запросы
			enable	= Строка(enable);
			Фильтр	= Неопределено;
			Если		Искать.Свойство("Включено",Фильтр)
				И Не	Найти(Фильтр, enable) Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Имя",Фильтр)
				И 		Фильтр.Найти(ИмяИни) = Неопределено Тогда 
				Продолжить;
			ИначеЕсли	Искать.Свойство("Тип")
				И 		Фильтр.Найти(ТипИни) = Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			Если Не	Карта.НайтиПоЗначению(ИмяИни) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Раздел.Добавить(Новый Структура("type,name", ТипИни,ИмяИни));
			Карта.Добавить(ИмяИни, ТипИни);
		Иначе//Это подраздел
			СформироватьСпискиИзМеню(ТипыИни, КлючИЗначение.Значение,Искать,СписокИни);	
		КонецЕсли;
	КонецЦикла;
	Возврат СписокИни;
	
КонецФункции
	
//Функция формирует готовую структуру (условный класс) настроек из переданных параметров
&НаКлиенте                                  
Функция		СформироватьСтруктуруНастроек(Кэш,ПараметрыФормирования,Отказ)
	
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	
	ДатаИзмененияНастроек	= Неопределено;
	ПараметрыКонфигурации	= Неопределено;
	КонтрольРасхождений		= Неопределено;
	Идентификатор			= Неопределено;
	НашаКонфигурация		= Неопределено;
	Если Не ПараметрыФормирования.Свойство("ПараметрыКонфигурации", ПараметрыКонфигурации) Тогда
		НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, ГлавноеОкно.Конфигурация);
		Если ЗначениеЗаполнено(НашаКонфигурация) Тогда
			ПараметрыКонфигурации = НашаКонфигурация.ПараметрыКонфигурации;
		Иначе//Не удалось найти конфигурацию и при этом нет параметров системы. Создать структуру настроек невозможно. 
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Не ПараметрыФормирования.Свойство("Идентификатор", Идентификатор) Тогда
		Идентификатор = "";
	КонецЕсли;
	Если Не ПараметрыФормирования.Свойство("ДатаИзмененияНастроек", ДатаИзмененияНастроек) Тогда
		ДатаИзмененияНастроек = ТекущаяДата();
	КонецЕсли;
	Если Не ПараметрыФормирования.Свойство("КонтрольРасхождений", КонтрольРасхождений) Тогда
		КонтрольРасхождений = Истина;
	КонецЕсли;
	
	//Передаем ини меню для вычитки стандартных настроек и правильного определения версии конфига
	СписокИни = Новый Массив;
	СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));	ПараметрыЗапроса = Новый Структура
	(	"Идентификатор,	ПараметрыКонфигурации,	СписокИни,	ДополнительныеПараметры", 
		Идентификатор,	ПараметрыКонфигурации,	СписокИни,	Новый Структура("ТихийРежим,ЕстьРезультат", Истина,Истина));
	РезультатЗапроса = СбисПолучитьДанныеСервисаИнтеграции(Кэш,ПараметрыЗапроса,Отказ);
	Если Отказ Тогда
		//При ошибке недоступности подключения как данные по идентификатору возьмём config и дополним его тем, что должно быть. Для возможности потом записать его.
		Если	Строка(РезультатЗапроса.code) = "756"
			И	ЗначениеЗаполнено(Идентификатор) Тогда
			Отказ = Ложь;
			ПараметрыЗапроса.Удалить("Идентификатор");
			ПараметрыЗапроса.ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурации);
			РезультатЗапроса = СбисПолучитьДанныеСервисаИнтеграции(Кэш,ПараметрыЗапроса,Отказ);
			Если Отказ Тогда
				Возврат РезультатЗапроса;
			КонецЕсли;
			ДанныеПоИдентификатору = РезультатЗапроса;
			ДанныеПоИдентификатору.Идентификатор	= Идентификатор;
			ДанныеПоИдентификатору.Название			= Кэш.ГлавноеОкно.НастройкиНазвание;
			ДанныеПоИдентификатору.ПараметрыРаботы.Автообновление	= Кэш.ГлавноеОкно.НастройкиАвтообновление;
			ДанныеПоИдентификатору.ПараметрыРаботы.ТипНастроек		= "Пользовательские";
			ДанныеПоИдентификатору.ПараметрыРаботы.Статус			= "Удален";
			ПараметрыДиалога = Новый Структура("ТекстВопроса", "Сохранить текущие настройки и создать подключение повторно?");
			Кэш.КэшНастроек.Вставить("ИзмененияВНастройках_ПараметрыДиалога",ПараметрыДиалога);
			Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		Иначе
			Возврат РезультатЗапроса;
		КонецЕсли;
	Иначе
		ДанныеПоИдентификатору = РезультатЗапроса;
	КонецЕсли;
	Если ДанныеПоИдентификатору.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда//Если меняем стандартные настройки, то определим название конфигурации. 
		Если НашаКонфигурация = Неопределено Тогда
			НашаКонфигурация = Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, ГлавноеОкно.Конфигурация);
		КонецЕсли;
		ПараметрыКонфигурации_Было = Неопределено;
		Если ПараметрыФормирования.Свойство("ПараметрыКонфигурации_Было",ПараметрыКонфигурации_Было) Тогда
			ИмяКонфигурации_Было = Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(ПараметрыКонфигурации_Было.service,Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(ПараметрыКонфигурации_Было));
			Если	Кэш.ГлавноеОкно.НастройкиНазвание = ИмяКонфигурации_Было
				И	ЗначениеЗаполнено(НашаКонфигурация) Тогда
				ДанныеПоИдентификатору.Название = НашаКонфигурация.НазываниеКонфигурации;
			Иначе
				ДанныеПоИдентификатору.Название = Кэш.ГлавноеОкно.НастройкиНазвание;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(НашаКонфигурация) Тогда
			ДанныеПоИдентификатору.Название = НашаКонфигурация.НазываниеКонфигурации;
		КонецЕсли;
	КонецЕсли;
	ПараметрыЗапроса = Новый Структура("ПараметрыКонфигурации,Искать", ПараметрыКонфигурации,Новый Структура("Включено", "01"));	
	
	ЧистыеИни = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(Кэш.Ини);//По ошибке. Чистим структуру ини от возможного "мусора"
	Если КонтрольРасхождений Тогда//При включенном контроле расхождений будет проведена оценка по тому, что лежит в облаке.
		РезультатЗапроса = СформироватьСписокИни(Кэш,ПараметрыЗапроса,Отказ);
		Если Отказ Тогда
			Возврат РезультатЗапроса;
		КонецЕсли;
		ДанныеСпискаИни = РезультатЗапроса;
		СписокИниКПОлучению = Новый Массив;
		Для Каждого КлючИЗначениеИни Из ЧистыеИни Цикл
			ИмяИниВО	= КлючИЗначениеИни.Ключ;
			ИмиИниМеню	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний,ИмяИниВО, "во_json");
			ЭлементКарты = ДанныеСпискаИни.Карта.НайтиПоЗначению(ИмиИниМеню);
			Если ЭлементКарты = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СписокИниКПОлучению.Добавить(ДанныеСпискаИни.Данные[ДанныеСпискаИни.Карта.Индекс(ЭлементКарты)]);
		КонецЦикла;
		
		ПараметрыЗапроса.Удалить("Искать");
		ПараметрыЗапроса.Вставить("Идентификатор", "");
		ПараметрыЗапроса.Вставить("СписокИни", СписокИниКПОлучению);
		ДанныеСтандартнойКонфигурации = СбисПолучитьДанныеСервисаИнтеграции(Кэш,ПараметрыЗапроса,Отказ);
		Если Отказ Тогда
			Возврат ДанныеСтандартнойКонфигурации;
		КонецЕсли;
		
		РасхожденияИни = ПолучитьРасхождениеИни(ЧистыеИни, ДанныеСтандартнойКонфигурации.Данные.Ини, Отказ);
		//Помимо заполнения параметров для кэширования настроек, надо дополнить уже готовые данные в кэше
		Для Каждого УстановленныйИни Из ЧистыеИни Цикл
			ИмяИни = УстановленныйИни.Ключ;
			
			ЕстьТиповая		= ДанныеСтандартнойКонфигурации.Данные.Ини.Свойство(ИмяИни);
			ЕстьИзменение	= Не ЕстьТиповая Или РасхожденияИни.Свойство(ИмяИни); 
			Автообновление	= ДанныеПоИдентификатору.ПараметрыРаботы.Автообновление И ЕстьТиповая;
			
			УстановленныйИни.Значение.Вставить("СбисЕстьИзменения", ЕстьИзменение);
			УстановленныйИни.Значение.Вставить("СбисЕстьТиповая",	ЕстьТиповая);
			УстановленныйИни.Значение.Вставить("СбисАвтообновление",Автообновление);
			//Дополнить данные в ини кэша при контроле изменений
			Кэш.Ини[ИмяИни].Вставить("СбисЕстьИзменения",	ЕстьИзменение);
			Кэш.Ини[ИмяИни].Вставить("СбисЕстьТиповая",		ЕстьТиповая);
			Кэш.Ини[ИмяИни].Вставить("СбисАвтообновление",	Автообновление);
			
			ДанныеПоИдентификатору.ПараметрыРаботы.СбисИни.СписокОтправить.Добавить(ИмяИни)
		КонецЦикла;
		//При контроле расхождения пока что всегда отправляем ини на сервер, так как в настройках могли убрать какие-то пользовательские изменения.
		//ДанныеПоИдентификатору.ПараметрыРаботы.ОбновитьИниНаСервере	= Истина;
		ДанныеПоИдентификатору.ДатаИзмененияНастроек = ДатаИзмененияНастроек;
	Иначе//Если не контролировать расхождения, то флажки определяем по тому, что было изначально.
		Для Каждого Ини Из Кэш.Ини Цикл//Возвращаем системные ключи ини, необходимые для работы.
			СбисЕстьТиповая		= Неопределено;
			СбисЕстьИзменения	= Неопределено;
			Если		Ини.Значение.Свойство("СбисЕстьТиповая",СбисЕстьТиповая) Тогда
			ИначеЕсли	Ини.Значение.Свойство("СбисИмяФайла")
					И	Найти(Ини.Значение.СбисИмяФайла, ".sbis3") Тогда
				СбисЕстьТиповая = Истина;
			Иначе
				СбисЕстьТиповая = Ложь;
			КонецЕсли;	
			СбисАвтообновление	= ДанныеПоИдентификатору.ПараметрыРаботы.Автообновление И СбисЕстьТиповая;
			Если Не Ини.Значение.Свойство("СбисЕстьИзменения", СбисЕстьИзменения) Тогда
				СбисЕстьИзменения = Ложь;
			КонецЕсли;
			Если Не СбисЕстьИзменения Тогда
				СбисЕстьИзменения = Не СбисЕстьТиповая;
			КонецЕсли;
			ЧистыеИни[Ини.Ключ].Вставить("СбисЕстьИзменения",	СбисЕстьИзменения);
			ЧистыеИни[Ини.Ключ].Вставить("СбисЕстьТиповая",		СбисЕстьТиповая);
			ЧистыеИни[Ини.Ключ].Вставить("СбисАвтообновление",	СбисАвтообновление);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.Данные.Параметры) Тогда
		СбисПараметрыТекущие = Новый Структура;
		Если	ЗначениеЗаполнено(ДанныеПоИдентификатору.Идентификатор)
			И	ДанныеПоИдентификатору.ПараметрыРаботы.ТипНастроек = "Пользовательские" Тогда
			СбисПараметрыТекущие = ПолучитьПараметрыСБИС(Кэш, ДанныеПоИдентификатору.Идентификатор, Отказ);
			Если Отказ Тогда
				Возврат Новый Структура("code, message, details", 100, "Ошибка заполнения СбисПараметров подключения!", "Не удалось прочитать существующие параметры " + ДанныеПоИдентификатору.Название + "!");
			КонецЕсли;
		КонецЕсли;
		Для Каждого КлючИЗначение Из ПараметрыФормирования.Данные.Параметры Цикл
			СбисПараметрыТекущие.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;

		ДанныеПоИдентификатору.Данные.Параметры = СбисПараметрыТекущие;
		ДанныеПоИдентификатору.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
	КонецЕсли;
	Если ПараметрыФормирования.Свойство("ПараметрыРаботы") Тогда
		Если ПараметрыФормирования.ПараметрыРаботы.Свойство("СбисМеню") Тогда 
			ДанныеПоИдентификатору.ПараметрыРаботы.СбисМеню = ПараметрыФормирования.ПараметрыРаботы.СбисМеню;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПоИдентификатору.Данные.Ини = ЧистыеИни;
	
	Возврат	ДанныеПоИдентификатору;
	
КонецФункции

//Формируем Сбис меню на основании переданного и внесенных изменений.
&НаКлиенте                                  
Функция		СформироватьМеню_Структура(Кэш, УстановленныеИни, БазовоеМеню=Неопределено, Отказ)//
	
	Если Отказ Тогда 
		Возврат	Неопределено;
	КонецЕсли;
	
	Если БазовоеМеню = Неопределено Тогда
		БазовоеМеню	= Новый	Структура();
		//Если меню отсутствует, то надо собрать его по алгоритму с нуля из инишек, которые имеются в наличии, если меню есть, то взять только отличия (то, что было переключено)
	КонецЕсли;
	СтруктураМеню = БазовоеМеню;
	Если СтруктураМеню = Неопределено Тогда
		СтруктураМеню = Новый Структура();
	КонецЕсли;

	//Сперва смотрим ини, которые есть в меню. Переставляем все флаги в базовом меню (по-идее, это меню от конфига)
	ПараметрыЗапроса= Новый Структура("СбисМеню, Искать, ДоступныеТипыИни", БазовоеМеню, Новый Структура("Включено", "1"), Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни);
	ДанныеСписка	= СформироватьСписокИни(,ПараметрыЗапроса, Отказ);
	Для	Каждого	КлючИЗначениеРаздел	Из	БазовоеМеню	Цикл//Переключить то, что установлено в типовых настройках
		Если Не ТипЗнч(КлючИЗначениеРаздел.Значение) = Тип("Структура") Тогда
			//На случай добавления в меню не структурных параметров, пропускаем их
			Продолжить;
		КонецЕсли;
		Для	Каждого	Ини	Из КлючИЗначениеРаздел.Значение Цикл
			//+++ МАИ 02.08.2021 На случай добавления в ини не структурных параметров, пропускаем их
			ИниВключена	= Неопределено;
			ИниТип		= Неопределено;
			Если Не ТипЗнч(Ини.Значение) = Тип("Структура")
				ИЛИ Не	Ини.Значение.Свойство("enable", ИниВключена)
				Или	Не	Ини.Значение.Свойство("type",	ИниТип)
				Или		Кэш.КэшНастроек.ПараметрыНастроек.ДоступныеТипыИни.Найти(ИниТип) = Неопределено Тогда//Ини не из списка поддерживаемых обработкой, не трогаем 
				Продолжить;
			КонецЕсли;
			//--- МАИ 02.08.2021
			ИмяИниМеню	= Ини.Ключ;
			ИмяИниВо	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниМеню);
			Добавить	= Ложь;
			Если		ИниВключена = "1"	Тогда
				Если	УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже включено.
				КонецЕсли;
				ИниВключена	= "0";
				Добавить	= Истина;
			ИначеЕсли	ИниВключена = "0"	Тогда
				Если Не УстановленныеИни.Свойство(ИмяИниВо) Тогда
					Продолжить;//Уже выключено.
				КонецЕсли;
				ИниВключена	= "1";
				Добавить	= Истина;
			КонецЕсли;
			Если Добавить Тогда
				Если Не	СтруктураМеню.Свойство(КлючИЗначениеРаздел.Ключ)	Тогда
					СтруктураМеню.Вставить(КлючИЗначениеРаздел.Ключ, Новый	Структура);
				КонецЕсли;
				Если Не СтруктураМеню[КлючИЗначениеРаздел.Ключ].Свойство(ИмяИниМеню)	Тогда
					СтруктураМеню[КлючИЗначениеРаздел.Ключ].Вставить(ИмяИниМеню, Новый Структура("enable", ИниВключена));
				Иначе
					СтруктураМеню[КлючИЗначениеРаздел.Ключ][ИмяИниМеню].enable = ИниВключена;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Смотрим установленные ини - возможно, добавлена не стандартная инишка
	Для	Каждого	КлючИЗначениеИни Из УстановленныеИни Цикл
		ИмяИниВО	= КлючИЗначениеИни.Ключ;
		ИмяИниМеню	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИниВО, "во_json");
		ПунктМеню	= СформироватьМеню_Элемент(КлючИЗначениеИни.Значение, ИмяИниМеню);
		Для	шаг = 1 По СтрЧислоСтрок(ПунктМеню.КнопкиРеестров)	Цикл
			ИмяКнопки	= СтрПолучитьСтроку(ПунктМеню.КнопкиРеестров, шаг);
			Раздел		= Неопределено;
			ПодРаздел	= Неопределено;
			Если Не СтруктураМеню.Свойство(ИмяКнопки, Раздел)	Тогда
				Раздел = Новый Структура();
				СтруктураМеню.Вставить(ИмяКнопки, Раздел);
			КонецЕсли;
			Если Раздел.Свойство(ИмяИниМеню, ПодРаздел)	Тогда
				ПодРаздел.enable = ПунктМеню.ЗначениеМеню.enable;
			Иначе
				Раздел.Вставить(ИмяИниМеню, ПунктМеню.ЗначениеМеню);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СтруктураМеню.Вставить("РазделыВнешнейОбработки", Кэш.ФормаНастроекОбщее.СбисСформироватьСтруктуруРазделов(Кэш, УстановленныеИни, Новый Структура));
	
	Возврат	СтруктураМеню;
	
КонецФункции

&НаКлиенте                                  
Функция		СформироватьМеню_Элемент(ЗначениеИни, НазваниеИни)

	ИниВключена = "1";
    Если ЗначениеИни.Свойство("Реестр1С_Название")	Тогда
        ИмяРеестра = СтрЗаменить(ЗначениеИни.Реестр1С_Название.Значение,"'", "");
	Иначе	
		ИмяРеестра = НазваниеИни;
	КонецЕсли;
	КнопкиРеестров = "";
	Если ЗначениеИни.Свойство("РеестрСБИС_ИдМеню")	Тогда
        КнопкиРеестров = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЗначениеИни.РеестрСБИС_ИдМеню.Значение,
						 " ", ""), 
						 "'", ""), 
						 ",", Символы.ПС);
	КонецЕсли;
	Если ЗначениеИни.Свойство("мДокумент") Тогда
		Для Каждого КлючИЗначениеМДокумент Из ЗначениеИни["мДокумент"] Цикл 
			ИмяРаздела	= Неопределено;
			РеестрИдМеню= КлючИЗначениеМДокумент.Значение;
			Если 	Не РеестрИдМеню.Свойство("Имя", ИмяРаздела)
				Или Не ИмяРаздела = "РеестрСБИС_ИдМеню" Тогда
				Продолжить;
			КонецЕсли;
			КнопкиРеестров = КнопкиРеестров 
						   + ?(ПустаяСтрока(КнопкиРеестров), "", ",") 
						   + СтрЗаменить(СтрЗаменить(СтрЗаменить(РеестрИдМеню["Значение"],
							 " ", ""), 
							 "'", ""), 
							 ",", Символы.ПС);
            Прервать;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(КнопкиРеестров) Тогда
		КнопкиРеестров = "Handling";
	КонецЕсли;
	Если ЗначениеИни.Свойство("РеестрПоУмолчанию")	Тогда
        ПоУмолчанию = СтрЗаменить(ЗначениеИни.РеестрПоУмолчанию.Значение, "'", "");
	Иначе	
        ПоУмолчанию = "0";
	КонецЕсли;
	Если		НазваниеИни = "Конфигурация"	Тогда
		ТипИни	= "Система";
	ИначеЕсли	ЗначениеИни.Свойство("ТипИни")	Тогда
		ТипИни	= СтрЗаменить(ЗначениеИни.ТипИни.Значение, "'", "");
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "загрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "исходящий" Тогда
            ТипИни = ТипИни + "Исходящих";
		КонецЕсли;
	ИначеЕсли	НРег(Лев(НазваниеИни,8)) = "выгрузка" Тогда
		МногострочнНазвание = СтрЗаменить(НазваниеИни, "_", Символы.ПС);
		ТипИни	= СтрПолучитьСтроку(МногострочнНазвание,1);
        Если НРег(СтрПолучитьСтроку(МногострочнНазвание,2)) = "входящий" Тогда
            ТипИни = ТипИни + "Входящих";
		КонецЕсли;
	ИначеЕсли	ЗначениеИни.Свойство("мДокумент")	Тогда
		ТипИни	= "Загрузка";
	Иначе
		ТипИни	= "Выгрузка";
	КонецЕсли;
	
	Возврат Новый Структура("КнопкиРеестров, ЗначениеМеню", КнопкиРеестров, Новый Структура("name,type,default,enable", ИмяРеестра, ТипИни, ПоУмолчанию, ИниВключена));

КонецФункции

//Функция добавляет выбранные настройки в список активных Вызов extSDK происходит на клиенте
&НаКлиенте
Функция		УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, Кэш, СтруктураВыбранныхНастроек, НашаКонфигурация, Отказ)
		
	Если	Отказ
		Или	СтруктураВыбранныхНастроек	= Неопределено	Тогда//Настройки должны быть получены. Если нет, была ошибка
		Возврат	Неопределено;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура("ПараметрыКонфигурации,Искать",НашаКонфигурация.ПараметрыКонфигурации,Новый Структура("Включено", "01"));
	РезультатЗапроса = СформироватьСписокИни(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(РезультатЗапроса, "ФайлыНастроекСервер.УстановитьФайлыНастроекНаСервере");
	КонецЕсли;
	
	СписокНеПолученных	= Новый Массив;
	СписокКПолучению	= Новый Массив;
	Для Каждого УстановленныйФайл Из МассивФайловДляУстановки Цикл
		ЧистоеИмяИни	= СтрЗаменить(УстановленныйФайл.ИмяФайлаИсточника,".sbis3","");
		ИмяИниИсточник	= ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ЧистоеИмяИни, "во_json");
		ЭлементКарты	= РезультатЗапроса.Карта.НайтиПоЗначению(ИмяИниИсточник);
		Если ЭлементКарты = Неопределено Тогда
			СписокНеПолученных.Добавить(ЧистоеИмяИни);
			Продолжить;
		КонецЕсли;
		СписокКПолучению.Добавить(РезультатЗапроса.Данные[РезультатЗапроса.Карта.Индекс(ЭлементКарты)]);
	КонецЦикла;
	Если СписокНеПолученных.Количество() Тогда
		Отказ		= Истина;
		СтрокаОшибки= "";
		Для Каждого ЭлементНеНайден Из СписокНеПолученных Цикл
			СтрокаОшибки = СтрокаОшибки + ?(ПустаяСтрока(СтрокаОшибки), "", ", ") + ЭлементНеНайден;
		КонецЦикла;
		СтрокаОшибки = "Не удалось определить файл" + ?(СписокНеПолученных.Количество()=1, " ", "ы ") + СтрокаОшибки + " для чтения."; 
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекСервер.УстановитьФайлыНастроекНаСервере", 765, "Значение не найдено в таблице настроек", СтрокаОшибки);
	КонецЕсли;
	
	ПараметрыЗапроса.Удалить("Искать");
	ПараметрыЗапроса.Вставить("СписокИни", СписокКПолучению);
	СтруктураТиповыхНастроек = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда//Настройки должны быть получены.
		Возврат	Кэш.ОбщиеФункции.СбисИсключение(СтруктураТиповыхНастроек, "ФайлыНастроекСервер.УстановитьФайлыНастроекНаСервере");
	КонецЕсли;
	
	Для Каждого ИниДобавить Из СтруктураТиповыхНастроек.Данные.Ини Цикл
		ИниДобавить.Значение.СбисАвтообновление = СтруктураВыбранныхНастроек.ПараметрыРаботы.Автообновление;
		СтруктураВыбранныхНастроек.Данные.Ини.Вставить(ИниДобавить.Ключ, ИниДобавить.Значение);
	КонецЦикла;
	
	СтруктураВыбранныхНастроек.ДатаИзмененияНастроек = ТекущаяДата();//Настройки меняются, а значит дата тоже	
	УстановленныеИни = ПолучитьМассивУстановленныхИниФайлов(СтруктураВыбранныхНастроек.Данные.Ини,СтруктураВыбранныхНастроек,Отказ);
	Кэш.Вставить("ини", СтруктураВыбранныхНастроек.Данные.Ини);
	
	Возврат	УстановленныеИни;
	
КонецФункции

&НаКлиенте                                  
Функция		УстановитьКонфигурацию_v2(Кэш, ПараметрыКонфигурации, Отказ)
	
	//Процедура устанавливает в левой колонке наиболее подходящую конфигурацию, соответствующую выбранным service subsystem version
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	
	ДополнительныеПараметрыУстановки = Новый Структура;
	ДополнительныеПараметрыУстановки.Вставить("ПрефиксТекущейКонфигурации", ПараметрыКонфигурации.service + Кэш.ФормаНастроекОбщее.ОтсеятьЧисла(ПараметрыКонфигурации.subsystem));
	//ДополнительныеПараметрыУстановки.Вставить("ПрефиксТекущейКонфигурации", СформироватьПрефиксСистемы(ПараметрыКонфигурации));//Устанавливаем конкретную конфигурацию. Должна быть только одна
	ДополнительныеПараметрыУстановки.Вставить("ВерсияТекущейКонфигурации", СтрЗаменить(ПараметрыКонфигурации.version, ".", "-"));
	ДополнительныеПараметрыУстановки.Вставить("ЗначениеПредставление", "Представление");	
	
	СписокТиповНастроек =  СбисПолучитьСписокДоступныхНастроек(Кэш, Отказ);
		
	СбисПрефикс		= Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, ДополнительныеПараметрыУстановки);
	ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис,СбисПрефикс);
	НашаКонфигурация= Кэш.ФормаНастроекОбщее.НайтиВыбраннуюКонфигурациюНастроек(Кэш.Конфигурация, ИмяКонфигурации);
	
	Если	ИмяКонфигурации	= ПараметрыКонфигурации.subsystem
		Или	НашаКонфигурация= Неопределено	Тогда
		Сообщить("Не удалось определить конфигурацию настроек!",	СтатусСообщения.Важное);
		Отказ	= Истина;
		Возврат Неопределено;
	ИначеЕсли	СбисПрефикс	= ПараметрыКонфигурации.service	Тогда
		Название	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу("",ПараметрыКонфигурации.subsystem);
		Если	Не	ПустаяСтрока(Название)	Тогда
			Сообщить("Отсутствуют типовые настройки для конфигурации "	+ Название	+ " версии " + ПараметрыКонфигурации.version + "!",	СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Если	Не	ГлавноеОкно.Конфигурация	= ИмяКонфигурации	Тогда
		ГлавноеОкно.Конфигурация = ИмяКонфигурации;
		ГлавноеОкно.СбисПереключитьКонфигурацию(Кэш, ИмяКонфигурации);
	КонецЕсли;
	
	Возврат НашаКонфигурация;
	
КонецФункции

//Функция устанавливает стандартные настройки из списка подходящих конфигураций
&НаКлиенте
Функция		УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, ДополнительныеПараметры=Неопределено)
	Перем	СписокИниУстановить,	//Определяет список ини к получению и установке.
			УстановитьИни,			//Определяет необходимость получения и установки ини.
			ПараметрыКонфигурацииУс,//service,subsystem и version устанавливаемой конфигурации
	        ПрименитьXSLT,			//Необходимость получения и применения стандартных xslt. Необходимо для возможности установить пользовательскую конфу, если при получении что-то пошло не так и с сервера ничего не возвращается
			СтруктураКонфигураций, СписокТиповНастроек;
			
	Если Отказ Тогда
		Возврат Неопределено;
	ИначеЕсли ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый	Структура;
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("СписокИни", СписокИниУстановить) Тогда
		СписокИниУстановить = Новый Массив;
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("УстановитьИни", УстановитьИни) Тогда
		УстановитьИни = Истина;
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("ПараметрыКонфигурации", ПараметрыКонфигурацииУс) Тогда
		ПараметрыКонфигурацииУс = Кэш.КэшНастроек.ПараметрыКонфигурации;
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("ПрименитьXSLT", ПрименитьXSLT) Тогда
		ПрименитьXSLT = Истина;
	КонецЕсли;
	
	ПараметрыКонфигурации = ПараметрыСтандартнойКонфигурации(Кэш, ПараметрыКонфигурацииУс);
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	//Ищем подходящую конфигурацию по параметрам системы: service,subsystem,version, получаем меню. Пока без данных ини.
	СписокИни = Новый Массив();
	СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	ПараметрыПоиска = Новый Структура("СписокИни,ПараметрыКонфигурации,ДополнительныеПараметры", СписокИни,ПараметрыКонфигурации,Новый Структура("ТихийРежим,ЕстьРезультат", Истина, Истина));
	РезультатЗапроса = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыПоиска, Отказ);
	Если ПрименитьXSLT Тогда
		СбисСформироватьСтруктуруXSLT(Кэш, "", Отказ);
	КонецЕсли;
	//Вынесено 
	Если Отказ Тогда//По какой-то причине пришла ошибка и не удалось получить стандартные настройки.
		Возврат УстановитьПользовательскуюКонфигурациюНаСервере(Кэш, Отказ, ДополнительныеПараметры);
	КонецЕсли;
	
	СтандартнаяКонфигурация = РезультатЗапроса;
	
	//Заполняем список доступных конфигураций.
	Если	Не	Кэш.Свойство("Конфигурация", СтруктураКонфигураций)
		Или	Не	ЗначениеЗаполнено(СтруктураКонфигураций)	Тогда
		Если СписокТиповНастроек = Неопределено Тогда
			СписокТиповНастроек = СбисПолучитьСписокДоступныхНастроек(Кэш, Отказ);
		КонецЕсли;
		Если Отказ Тогда 
			Отказ = Ложь;
		Иначе
			ДанныеКонфигураций	= Кэш.ФормаНастроекОбщее.СформироватьСтруктуруКонфигураций(Кэш, СписокТиповНастроек);
			ГлавноеОкно.СбисЭлементФормы(ГлавноеОкно, "Конфигурация").СписокВыбора.ЗагрузитьЗначения(ДанныеКонфигураций.СписокВыбора);
			СтруктураКонфигураций = ДанныеКонфигураций.СтруктураКонфигураций;
			Кэш.Вставить("Конфигурация", СтруктураКонфигураций);		
		КонецЕсли;
	КонецЕсли;
	//Формируем префикс и устанавливаем на главном окне конфигурацию в левой колонке.
	Префикс = Кэш.ФормаНастроекОбщее.СформироватьПрефиксСистемы(СтандартнаяКонфигурация.ПараметрыКонфигурации);
	ИмяКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(СтандартнаяКонфигурация.ПараметрыКонфигурации.service, Префикс);
	
	УстановленныеИниФайлы = Неопределено;
	Если УстановитьИни Тогда//Смысл в том, что если мы делаем действие при установке файлов от другой конфигурации, то конвертация и установка ини нам не нужна - они всё равно потом отключаются и включаются только те, что были выбраны
		Кэш.ГлавноеОкно.СбисПоказатьСостояние("Формирование структуры настроек", Кэш.ГлавноеОкно);
		//Получаем включенные по-умолчанию ини.
		ПараметрыПоиска = Новый Структура("ПараметрыКонфигурации", СтандартнаяКонфигурация.ПараметрыКонфигурации);
		Если СписокИниУстановить.Количество() Тогда//Если указаны инишки к установке, то получаем и применяем. Иначе - по-умолчанию(установка только включенных)
			ПараметрыПоиска.Вставить("СписокИни", СписокИниУстановить);
		КонецЕсли;
		СтандартнаяКонфигурация = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыПоиска, Отказ);	
		Если Не Отказ Тогда
			УстановленныеИниФайлы	= ПолучитьМассивУстановленныхИниФайлов(СтандартнаяКонфигурация.Данные.Ини,СтандартнаяКонфигурация,Отказ);		//Массив установленных ини

			Кэш.Вставить("Ини", СтандартнаяКонфигурация.Данные.Ини);
			Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		КонецЕсли;
	Иначе
		//СтандартнаяКонфигурация.Данные.Ини.Удалить("СбисМеню");
		УстановленныеИниФайлы = Новый Массив;
	КонецЕсли;
	
	СтандартнаяКонфигурация.Название = ИмяКонфигурации;
	ГлавноеОкно.Конфигурация = ИмяКонфигурации;
	Если ЗначениеЗаполнено(СтандартнаяКонфигурация) Тогда 
		ГлавноеОкно.НастройкиНазвание		= СтандартнаяКонфигурация.Название;
		ГлавноеОкно.НастройкиАвтообновление	= СтандартнаяКонфигурация.ПараметрыРаботы.Автообновление;
	КонецЕсли;
	
	СтандартнаяКонфигурация.ПараметрыРаботы.СбисМеню.Обновить = Истина;//Для типовой конфигурации обязательно вызываем формирование меню
	СтандартнаяКонфигурация.ПараметрыРаботы.Статус = "Новый";
	СтандартнаяКонфигурация.Идентификатор = "";
	
	Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтандартнаяКонфигурация);
	
	Возврат	УстановленныеИниФайлы;
	
КонецФункции

//Функция устанавливает стандартные настройки из списка подходящих конфигураций
&НаКлиенте
Функция		УстановитьПользовательскуюКонфигурациюНаСервере(Кэш, Отказ, ДополнительныеПараметры=Неопределено)
	
	ПараметрыПользовательскойСистемы = Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(Кэш.КэшНастроек.ПараметрыКонфигурации);
	ПараметрыПользовательскойСистемы.Вставить("subsystem", "");
	ДополнительныеПараметрыПользовательское = Новый Структура;
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		Для Каждого КлючИЗначение Из Кэш.ОбщиеФункции.СбисСкопироватьОбъектНаКлиенте(ДополнительныеПараметры) Цикл
			ДополнительныеПараметрыПользовательское.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ДополнительныеПараметрыПользовательское.Вставить("ПараметрыКонфигурации", ПараметрыПользовательскойСистемы);
	Если Отказ Тогда
		ДополнительныеПараметрыПользовательское.Вставить("ПрименитьXSLT", Ложь);
	КонецЕсли;
	Отказ = Ложь;
	//ДополнительныеПараметрыПользовательское.Вставить("ПрименитьПользовательскую", Истина);
	Возврат УстановитьСтандартныеНастройкиНаСервере(Кэш, Отказ, ДополнительныеПараметрыПользовательское);

КонецФункции

//Процедура выполняет конвертацию полученных ини после их получения
&НаКлиенте
Процедура	ЧтениеИни_ОбработатьРезультат(Кэш, Результат, ПараметрыКонвертации = Неопределено)
	Ини = Новый Структура();
	Если ПараметрыКонвертации = Неопределено Тогда
		ПараметрыКонвертации = Новый Структура("ОчищатьОтключенные", Истина);
	КонецЕсли;
	Для Каждого КлючИЗначение Из Результат.Данные.Ини Цикл
		Если КлючИЗначение.Ключ = "СбисМеню" Тогда
			Ини.Вставить("СбисМеню", КлючИЗначение.Значение);
		Иначе
			ИмяИни = ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначение.Ключ);
 			ЗначениеИни = ПреобразованиеJSONИни_ВОИни_ВыполнитьПреобразование(КлючИЗначение.Значение, ПараметрыКонвертации);
			Ини.Вставить(ИмяИни, ЗначениеИни);
		КонецЕсли;
	КонецЦикла;
	Результат.Данные.Ини = Ини;		
	Результат.ПараметрыКонфигурации.version = Кэш.ОбщиеФункции.СериализоватьВерсию(Результат.ПараметрыКонфигурации.version);
КонецПроцедуры

///////////////////////////////
////////Поиск различий/////////

///////Вызов///////

&НаСервереБезКонтекста
Функция		ПолучитьРасхождениеИни(Знач СтруктураИни1,Знач СтруктураИни2, Отказ)
	
	СтруктураПользовательскихИзменений	= Новый	Структура;
	
	Если	Не ЗначениеЗаполнено(СтруктураИни1) Тогда
		Возврат СтруктураИни2;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураИни2) Тогда
		Возврат СтруктураИни1;
	КонецЕсли;
	Для	Каждого	КлючИЗначение	Из	СтруктураИни1	Цикл
		Если	Лев(КлючИЗначение.Ключ,4)	= "Сбис"	Тогда
			Продолжить;
		КонецЕсли;
		Если	Не	СтруктураИни2.Свойство(КлючИЗначение.Ключ)	Тогда
			СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			Продолжить;
		КонецЕсли;
		
		РасхождениеИни	= РасхождениеСтруктур(КлючИЗначение.Значение, СтруктураИни2[КлючИЗначение.Ключ], Отказ);
		
		//Удалить системные данные, которые при сравнении не нужны
		МассивКлючекКУдалению	= Новый	Массив;
		Для	Каждого	ПолеИни	Из	РасхождениеИни	Цикл
			Если	Лев(ПолеИни.Ключ,4)	= "Сбис"	Тогда
				МассивКлючекКУдалению.Добавить(ПолеИни.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для	Каждого	КлючКУдалению	Из	МассивКлючекКУдалению	Цикл
			РасхождениеИни.Удалить(КлючКУдалению);
		КонецЦикла;
		
		Если	РасхождениеИни.Количество()	Тогда
			СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, РасхождениеИни);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	СтруктураПользовательскихИзменений;
	
КонецФункции

//Сравнивает инишки между собой. Если есть малейшее отличие, возвращает истина.
&НаСервереБезКонтекста
Функция		ИниРазличаются(Знач СтруктураИни1,Знач СтруктураИни2, Отказ)
	
	Если	Не	СтруктураИни1.Количество()	= СтруктураИни2.Количество()	Тогда
		Возврат	Истина;
	КонецЕсли;
	
	Для	Каждого	КлючИЗначение	Из	СтруктураИни1	Цикл
		Если	Лев(КлючИЗначение.Ключ,4) = "Сбис" Тогда
			Продолжить;
		КонецЕсли;
		Если Не	СтруктураИни2.Свойство(КлючИЗначение.Ключ) Тогда
			Возврат	Истина;
		КонецЕсли;
		РасхождениеИни	= РасхождениеСтруктур(КлючИЗначение.Значение,	СтруктураИни2[КлючИЗначение.Ключ], Отказ);
		
		//Удалить системные данные, которые при сравнении не нужны
		МассивКлючейКУдалению	= Новый	Массив;
		Для	Каждого	ПолеИни	Из	РасхождениеИни	Цикл
			Если	Лев(ПолеИни.Ключ,4)	= "Сбис"	Тогда
				МассивКлючейКУдалению.Добавить(ПолеИни.Ключ);
			КонецЕсли;
		КонецЦикла;
		Для	Каждого	КлючКУдалению	Из	МассивКлючейКУдалению	Цикл
			РасхождениеИни.Удалить(КлючКУдалению);
		КонецЦикла;
		
		Если	РасхождениеИни.Количество()	Тогда
			Возврат	Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат	Ложь
	
КонецФункции

//Алгоритм поиска//

//Функция возвращает структуру с полями, которые в структуре1 отличаются от структуры2. 
&НаСервереБезКонтекста
Функция		РасхождениеСтруктур(Знач Структура1, Знач Структура2, Отказ)
	
	Если	Отказ	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	Если	Не	ТипЗнч(Структура1)	= Тип("Структура")
		Или	Не	ТипЗнч(Структура1)	= ТипЗнч(Структура2)	Тогда//Это не структуры, нечего сравнивать.
			Возврат	Структура1;
	КонецЕсли;
	
	СтруктураПользовательскихИзменений	= Новый	Структура;
	КлючиСтруктуры2Проверены			= Новый	Массив;
	
	Для	Каждого	КлючИЗначение	Из	Структура1	Цикл
		Значение1	= КлючИЗначение.Значение;
		Ключ		= КлючИЗначение.Ключ;
		Если	Структура2.Свойство(Ключ)	Тогда
			Значение2	= Структура2[Ключ];
			КлючиСтруктуры2Проверены.Добавить(Ключ);
		Иначе
			Значение2	= Неопределено;
		КонецЕсли;
		Если		ТипЗнч(Значение1)	= Тип("Структура")	Тогда
			Если	ЗначениеЗаполнено(Значение2)	Тогда//Свойство есть в типовых настройках, продолжить на проверку на более низких уровнях
				Расхождение	= РасхождениеСтруктур(Значение1, Значение2, Отказ);
			Иначе//Свойства нет. Добавить расхождение.
				Расхождение	= Значение1;
			КонецЕсли;
		ИначеЕсли	ТипЗнч(Значение1)	= Тип("Массив")		Тогда
			Если	ТипЗнч(Значение2)	= Тип("Массив")	Тогда
				Расхождение	= РасхожденияМассивов(Значение1, Значение2, Отказ);
			Иначе
				Расхождение	= Значение1;
			КонецЕсли;	
		Иначе
			Если	ТипЗнч(Значение1) = "Строка" Тогда
				Значение1 = СокрЛП(Значение1);
			КонецЕсли;
			Если	ТипЗнч(Значение2) = "Строка" Тогда
				Значение2 = СокрЛП(Значение2);
			КонецЕсли;
			Если	Значение1 = Значение2	Тогда//Значения равны, переходим к следующему
				Продолжить;
			Иначе
				Расхождение	= Значение1;
			КонецЕсли;
		КонецЕсли;
		Если	ЗначениеЗаполнено(Расхождение)	Тогда
			СтруктураПользовательскихИзменений.Вставить(Ключ, Расхождение);
		КонецЕсли;
	КонецЦикла;
	
	Для	Каждого	КлючИЗначение	Из	Структура2	Цикл
		Если	Не	КлючиСтруктуры2Проверены.Найти(КлючИЗначение.Ключ)	= Неопределено	Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПользовательскихИзменений.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат	СтруктураПользовательскихИзменений;
		
КонецФункции

//Функция возвращает массив с полями, которые в массиве1 отличаются от массива2. 
&НаСервереБезКонтекста
Функция		РасхожденияМассивов(Знач Массив1, Знач Массив2, Отказ)
	
	Если	Отказ	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	
	Если	Не	ТипЗнч(Массив1)	= Тип("Массив")
		Или	Не	ТипЗнч(Массив1)	= ТипЗнч(Массив2)	Тогда//Это не структуры, нечего сравнивать.
			Возврат	Массив1;
	КонецЕсли;
	
	МассивРасхождений		= Новый	Массив();
	ИндексыМассив2Проверено	= Новый	Массив();
	
	Для	ИндексМассив1	= 0	По	Массив1.Количество()	- 1	Цикл
		ФлагСовпадения		= Ложь;
		ЭлементСравнения1	= Массив1[ИндексМассив1];
		ЭлементСравнения2	= НайтиПохожийЭлементВМассиве(ЭлементСравнения1, Массив2, ИндексыМассив2Проверено, Отказ);
		Если		ЭлементСравнения2	= Неопределено				Тогда//Не найдено похожих элементов
			Расхождение	= ЭлементСравнения1;	
		ИначеЕсли	ТипЗнч(ЭлементСравнения1)	= Тип("Структура")	
				И	ТипЗнч(ЭлементСравнения2)	= Тип("Структура")	Тогда//элементы-структуры, сравнить их.
			Расхождение	= РасхождениеСтруктур(ЭлементСравнения1, ЭлементСравнения2, Отказ);
		ИначеЕсли	ТипЗнч(ЭлементСравнения1)	= Тип("Массив")	
				И	ТипЗнч(ЭлементСравнения2)	= Тип("Массив")		Тогда//сравнить массивы
			Расхождение	= РасхожденияМассивов(ЭлементСравнения1, ЭлементСравнения2,	Отказ);
		Иначе//разные типы значений
			Если	ТипЗнч(ЭлементСравнения1) = "Строка" Тогда
				ЭлементСравнения1 = СокрЛП(ЭлементСравнения1);
			КонецЕсли;
			Если	ТипЗнч(ЭлементСравнения2) = "Строка" Тогда
				ЭлементСравнения2 = СокрЛП(ЭлементСравнения2);
			КонецЕсли;
			Если	ЭлементСравнения1	= ЭлементСравнения2	Тогда
				Расхождение	= Неопределено;
			Иначе
				Расхождение	= ЭлементСравнения1;	
			КонецЕсли;
		КонецЕсли;
		Если	ЗначениеЗаполнено(Расхождение)	Тогда
			Если	ТипЗнч(ЭлементСравнения1)	= Тип("Структура")
				И	ЭлементСравнения1.Свойство("Имя")	Тогда
					Расхождение.Вставить("Имя",	ЭлементСравнения1["Имя"]);
			КонецЕсли;
			МассивРасхождений.Добавить(Расхождение);
		КонецЕсли;
	КонецЦикла;
	
	//То, что отсутствует в основных, сделать пустым для отключения
	Для	ИндексМассив2	= 0	По	Массив2.Количество()	- 1	Цикл
		Если	Не	ИндексыМассив2Проверено.Найти(ИндексМассив2) = Неопределено	Тогда
			Продолжить;
		КонецЕсли;
		Если	ТипЗнч(Массив2[ИндексМассив2])	= Тип("Структура")	Тогда
			Расхождение	= Новый Структура;
			Для	Каждого	КлючИЗначение	Из	Массив2[ИндексМассив2]	Цикл
				Если	КлючИЗначение.Ключ	= "Имя"	Тогда
					Расхождение.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				Иначе
					Расхождение.Вставить(КлючИЗначение.Ключ, "");
				КонецЕсли;
			КонецЦикла;
		Иначе
			Расхождение	= Массив2[ИндексМассив2];
		КонецЕсли;
		МассивРасхождений.Добавить(Расхождение);
	КонецЦикла;
	
	Возврат	МассивРасхождений;
	
КонецФункции

//Функция ищет соответствующий элемент в массиве.
//Если передана структура	- подразумевается поиск в массиве структур, по совпадению ключа элемента.
//Если передан массив		- подразумевается поиск в массиве массивов, по совпадению всех входящих (кроме структур, те - через ключ) элементов через рекурсию.
//В остальных случаях		- по совпадению.
&НаСервереБезКонтекста
Функция		НайтиПохожийЭлементВМассиве(Знач Элемент, Знач Массив, ИндексыПроверены, Отказ)
	
	Если		ТипЗнч(Элемент)	= Тип("Структура")	Тогда//Если это массив структур, искать по ключу
		Если	Элемент.Свойство("Имя")
			И	Элемент.Свойство("Значение")	Тогда
					ПоискПоИмени	= Истина;
		Иначе
			ПоискПоИмени	= Ложь;
		КонецЕсли;
		Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
			Если	Не	ИндексыПроверены.Найти(ИндексМассива)			= Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСравнение	= Массив[ИндексМассива];	
			Если	Не	ТипЗнч(ЭлементСравнение)	= Тип("Структура")	Тогда 
				Продолжить;
			КонецЕсли;
			
			Если	ПоискПоИмени	Тогда
				Если	Не	ЭлементСравнение.Свойство("Имя")
					Или	Не	ЭлементСравнение.Свойство("Значение")	Тогда
						Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НайденоСовпадение	= Ложь;
			Если	ПоискПоИмени
				И	Элемент.Имя	= ЭлементСравнение.Имя	Тогда
					НайденоСовпадение	= Истина;
			КонецЕсли;
			
			Если	Не	(	ПоискПоИмени
						Или	НайденоСовпадение)	Тогда
				НайденоСовпадение	= Истина;
				Для	Каждого	КлючИЗначение	Из	Элемент	Цикл
					Если	Не	ЭлементСравнение.Свойство(КлючИЗначение.Ключ)	Тогда
						НайденоСовпадение	= Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если	НайденоСовпадение	Тогда
				ИндексыПроверены.Добавить(ИндексМассива);
				Возврат	ЭлементСравнение;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли	ТипЗнч(Элемент)	= Тип("Массив")		Тогда//Если это массив массивов, сравнить все входящие элементы и вернуть тот, который равен нашему.
		Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
			Если	Не	ИндексыПроверены.Найти(ИндексМассива)			= Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			ЭлементСравнение		= Массив[ИндексМассива];	
			РасхождениеЭлементов	= РасхожденияМассивов(Элемент, ЭлементСравнение, Отказ);
			Если	Не	ЗначениеЗаполнено(РасхождениеЭлементов)	Тогда
				ИндексыПроверены.Добавить(ИндексМассива);
				Возврат	ЭлементСравнение;					
			КонецЕсли;
		КонецЦикла;
	Иначе//Обычный массив значений
		ИндексВМассиве	= Массив.Найти(Элемент);
		Если	ИндексВМассиве	= Неопределено	Тогда
			Возврат	Неопределено;
		КонецЕсли;
		Если	ИндексыПроверены.Найти(ИндексВМассиве)	= Неопределено	Тогда
			ИндексыПроверены.Добавить(ИндексВМассиве);
			Возврат	Массив[ИндексВМассиве];
		Иначе
			Для	ИндексМассива	= 0	По	Массив.Количество()	-1	Цикл
				Если	Не	ИндексыПроверены.Найти(ИндексМассива)		= Неопределено	Тогда
					Продолжить;
				КонецЕсли;
				ЭлементСравнение		= Массив[ИндексМассива];	
				Если	ЭлементСравнение	= Элемент	Тогда
					ИндексыПроверены.Добавить(ИндексМассива);
					Возврат	ЭлементСравнение;					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Возврат	Неопределено;

КонецФункции

///////////////////////////////////////////////////
////////////////ВнешниеФункции_Клиент//////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	СбисПодключитьЗаплатки(Кэш)
	
	// Подключает внешнюю обработку с пользовательскими функциями
	Кэш.ТекущийСеанс.Функции.Очистить();
	ИмяФункций = "ВнешниеФункции_Клиент";
	
	МестаПоискаОбработки = Новый Массив();//Массив адресов, где искать файл в порядке приоритета
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));
	//МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Обработки",					"Метаданные");
	
	ДанныеЗаписи = Кэш.ФормаНастроекОбщее.ПолучитьАдресВнешнихФункций(ИмяФункций,МестаПоискаОбработки,Кэш.ПараметрыСистемы);
	Кэш.Заплатки = ДанныеЗаписи.Заплатки;
	Если ДанныеЗаписи.Свойство("СписокКлиентскихФорм") Тогда
		Кэш.ТекущийСеанс.Формы.Клиентские = ДанныеЗаписи.СписокКлиентскихФорм;
	КонецЕсли;

		
КонецПроцедуры

///////////////////////////////////////////////////
///////////////////СБИС параметры//////////////////
///////////////////////////////////////////////////

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_ДоВключения(Кэш, ПараметрыИнтеграции, ДополнительныеПараметры, ИзмененияПараметров=Ложь) Экспорт
	Перем АдресСервера;
	Если Не ПараметрыИнтеграции.Свойство("АдресСервера", АдресСервера) Тогда 
		АдресСервера = Кэш.ГлавноеОкно.АдресСервера;
	КонецЕсли;
	Если  Не АдресСервера = Кэш.СБИС.АдресСервера Тогда
		Кэш.СБИС.Вставить("АдресСервера", АдресСервера);//Восстановление значения адреса сервера по-умолчанию, если раньше было изменено.
		Кэш.ГлавноеОкно.АдресСервера = АдресСервера;
		ИзмененияПараметров = Истина;
	КонецЕсли;
	Если ИзмененияПараметров Тогда//Были изменения в настройках, переопределить формы интеграции.
		//Переключили сервер и повторно идём на определение форм, только уже пропуская установку параметров
		Если ДополнительныеПараметры.ВызыватьРекурсивно	Тогда
			ДополнительныеПараметры.ВызыватьРекурсивно = Ложь;
			Возврат Кэш.ГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(Кэш,ПараметрыИнтеграции,ДополнительныеПараметры);
		Иначе
			Возврат Ложь;
		КонецЕсли;       
	КонецЕсли;
	Возврат	Истина;
	
КонецФункции
	
&НаКлиенте
Процедура	СбисУстановитьПараметры(Кэш,Идентификатор,СтруктураНастроек=Неопределено,Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПолучитьПараметрыСБИС(Кэш, Идентификатор, Отказ);
	КонецЕсли;
	Кэш.ФормаНастроекОбщее.УстановитьСбисПараметры(Кэш, СтруктураНастроек, Идентификатор);		
	
КонецПроцедуры

&НаКлиенте
Функция		ПолучитьПараметрыСБИС(Кэш,Идентификатор,Отказ=Ложь) Экспорт
	
	СтруктураНастроекДефолт	= Новый	Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов","","","","");
	Если Отказ Тогда
		Возврат СтруктураНастроекДефолт;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Идентификатор) Тогда
		СтруктураНастроек = ПолучитьСБИСПараметрыСоединения(Кэш, Идентификатор, Отказ);
		Если Не ЗначениеЗаполнено(СтруктураНастроек) Тогда
			СтруктураНастроек = СтруктураНастроекДефолт;
		КонецЕсли;
	Иначе
		СтруктураНастроек = СтруктураНастроекДефолт;
	КонецЕсли;
		
	Возврат	СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Функция		СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,Идентификатор,Отказ=Ложь) Экспорт
	Перем ВыбранныеНастройки, СтруктураПараметров;
	
	ОбновитьСбисПараметры	= Ложь;
	ЗаписатьНаСервис		= Истина;
	ИдПараметров			= Идентификатор;
	Если СтруктураНастроек = Неопределено Тогда
		Возврат	Неопределено;
	КонецЕсли;
	Если 	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) 
		И	ЗначениеЗаполнено(ВыбранныеНастройки) Тогда
		СтруктураПараметров = ВыбранныеНастройки.Данные.Параметры;
		Если СтруктураПараметров = Неопределено Тогда
			СтруктураПараметров = ПолучитьПараметрыСБИС(Кэш, ВыбранныеНастройки.Идентификатор, Отказ);
			ВыбранныеНастройки.Данные.Параметры = СтруктураПараметров;
		КонецЕсли;
		Если Не ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять Тогда
			//Если отключена отправка на сервис, то мы находимся в разделе файлов настроек. Не пишем сразу настройки, это будет сделано позже, при записи изменений
			ИдПараметров		= ВыбранныеНастройки.Идентификатор;
			ЗаписатьНаСервис	= Ложь;
		КонецЕсли;			
	ИначеЕсли ПустаяСтрока(ИдПараметров) Тогда
		Возврат Неопределено;
	Иначе	
		СтруктураПараметров = ПолучитьПараметрыСБИС(Кэш,ИдПараметров,Отказ);
	КонецЕсли;

	Для Каждого Элемент Из СтруктураНастроек Цикл
		ЗначениеСвойства = Неопределено;
		//Сразу проверим необходимость записи параметров - если такого узла ещё нет, либо он менялся
		Если	Не СтруктураПараметров.Свойство(Элемент.Ключ, ЗначениеСвойства)
			Или	Не ЗначениеСвойства = Элемент.Значение Тогда
			ОбновитьСбисПараметры = Истина;
		КонецЕсли;
		СтруктураПараметров.Вставить(Элемент.Ключ,Элемент.Значение);
	КонецЦикла;
	
	Если	Не	ВыбранныеНастройки = Неопределено
		И	Не	ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить Тогда
		ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить = ОбновитьСбисПараметры;
	КонецЕсли;
	Если	ЗаписатьНаСервис
		И	ОбновитьСбисПараметры Тогда 
		ЗаписатьСБИСПараметрыСоединения(Кэш, СтруктураПараметров, Идентификатор, Отказ);
	КонецЕсли;
		
КонецФункции


///////////////////////////////////////////////////
///////////////////////Диалог//////////////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	Диалог_ОтменаНажатие(Элемент)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура	Диалог_ВыбратьНажатие(Элемент)
	
	КлючЭлементов = "ЭлементыФормы";
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		КлючЭлементов = "Элементы";
	КонецЕсли;
	ЭтаФорма.Закрыть(ЭтаФорма[КлючЭлементов].ТаблицаНастроек.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

////////////////////////////////////////////////////
//////////////Вызов ини по требованию///////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция		Ини(Кэш, ИмяИни, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	ЗначениеИни = Неопределено;
	Если		Кэш.Ини.Свойство(ИмяИни, ЗначениеИни)
		И	Не	ЗначениеИни = Неопределено Тогда
		Возврат ЗначениеИни;
	КонецЕсли;
	//Ини в кэше нет. Получаем с сервиса
	
	ПараметрыПоиска = Новый Структура
	(	"Идентификатор,					ПараметрыКонфигурации", 
		Кэш.Парам.ИдентификаторНастроек,Кэш.КэшНастроек.ПараметрыКонфигурации);
	Если ЗначениеЗаполнено(ДопПараметры)
		И ДопПараметры.Свойство("ДоступныеТипыИни") Тогда
		ПараметрыПоиска.Вставить("ДоступныеТипыИни", ДопПараметры.ДоступныеТипыИни);
	КонецЕсли;
	Если ИмяИни = "СбисМеню" Тогда
		Возврат ПолучитьСбисМенюПодключения(Кэш, ПараметрыПоиска, Отказ);
	КонецЕсли;
	ПараметрыПоиска.Вставить("СбисМеню", Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню);
	СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
	СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, ИмяИни, "во_json"));
	ПараметрыПоиска.Вставить("Искать", СтруктураИскать);
	ДанныеСписка = СформироватьСписокИни(Кэш, ПараметрыПоиска, Отказ);
	Если Отказ Тогда
		Возврат ДанныеСписка;
	ИначеЕсли Не ДанныеСписка.Данные.Количество() Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(779, "ФайлыНастроекСервер.Ини",,,СтрЗаменить("Ини ""{}"" не найдена в сбис Меню.", "{}", ИмяИни));
	КонецЕсли;
	ПараметрыПоиска.Удалить("Искать");
	ПараметрыПоиска.Вставить("СписокИни",				ДанныеСписка.Данные);
	ПараметрыПоиска.Вставить("ДополнительныеПараметры",	Новый Структура("ТихийРежим,ЕстьРезультат", Истина, Истина));
	
	ДанныеИни = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыПоиска, Отказ);
	Если Отказ Тогда
		Возврат ДанныеИни;
	КонецЕсли;
	
	Если ДанныеИни.Данные.Ини.Свойство(ИмяИни, ЗначениеИни) Тогда
		Кэш.Ини.Вставить(ИмяИни, ЗначениеИни);
	КонецЕсли;
	Возврат ЗначениеИни;
	
КонецФункции

//Получим структуру разделов по указанному ИД. Если ид не заполнен, то это типовые настройки меню запишем при общей записи
&НаКлиенте
Функция		ПолучитьСтруктуруРазделов(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	Если Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Стандартные" Тогда
		Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = СформироватьСбисМенюПодключения(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Отказ);
	ИначеЕсли Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор = "" Тогда
		//Пока возвращаем неопределено, так как не ясно в каких ситуациях может быть подключение без ИД.
		Возврат Неопределено;
	КонецЕсли;
	Если Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = Неопределено Тогда
		СбисМеню = Ини(Кэш, "СбисМеню", , Отказ);
		Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = СбисМеню;
	Иначе
		СбисМеню = Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню;
	КонецЕсли;
	Если Отказ Тогда
		Возврат СбисМеню;
	КонецЕсли;
	СбисАккордеон = Неопределено;
	Если Не СбисМеню.Свойство("РазделыВнешнейОбработки", СбисАккордеон) Тогда
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(,"ФайлыНастроекСервер.ПолучитьСтруктуруРазделов", 785, "Ошибка во входящих данных", "Отсутствует описание разделов аккордеона в выбранных настройках");
	КонецЕсли;
	
	Возврат СбисАккордеон;		
КонецФункции

&НаКлиенте
Функция		СбисОбновитьДанныеПоНастройкам(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	//Если установлены типовые настройки, то структура раздела будет при создании коннекшена.
	Если Не Кэш.КэшНастроек.ВыбранныеНастройки.Идентификатор = "" Тогда
		РезультатОбновления = СбисДополучитьНедостающиеНастройки(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекСервер.СбисОбновитьДанныеПоНастройкам");
		КонецЕсли;
		РезультатОбновления = СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекСервер.СбисОбновитьДанныеПоНастройкам");
		КонецЕсли;
	КонецЕсли;
	//Для всех настроек формируем печатные формы в том числе
	РезультатОбновления = Кэш.ФормаНастроекОбщее.сбисДобавитьПечатныеФормы(Кэш, Отказ);
	Если Отказ Тогда
		//TODO40 решить проблему с обновлением ПФ из хранилища.
		СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Запись ошибки", РезультатОбновления);
		Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, СбисПараметрыСтатистики, Ложь);
		//В случае невозможности обновить должна быть ошибка, чтоб понимать что пошло не так. Вычистить возможные ситуации когда падает метод добавления ПФ.
		//Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекСервер.СбисОбновитьДанныеПоНастройкам"));
		//После обработки ошибки, продолжить установку настроек
		//TODO39 ошибка ПФ является результатом с флагом отказа
		Отказ = Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

//Функция обновляет структуру для формирования аккордеона и заполнения фильтров
&НаКлиенте
Функция		СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Обновить = Истина;
	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Обновить = Истина;
	//Если пользовательский коннекшен, то сразу запишем меню с аккордеоном. Если нет, то сформируем меню, что записали руками.
	Если		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.ТипНастроек = "Пользовательские" 
		И		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять
		И	Не	Кэш.Текущий.ТипДок = "ФайлыНастроек" Тогда
		Возврат ЗаписатьConnection(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Новый Структура("ТихийРежим,Кэшировать", Истина,Истина), Отказ);
	Иначе
		Кэш.КэшНастроек.ВыбранныеНастройки.Данные.Меню = СформироватьСбисМенюПодключения(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Отказ);
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Функция		СбисПолучитьПолныеУстановленныеНастройки(Кэш, ПараметрыЗапроса, Отказ)
	
	
КонецФункции

&НаКлиенте
Функция		СбисПроверитьУстановленныеНастройки(Кэш, УстановленныеИниФайлы, СтруктураИни, СтруктураПараметров, ИдентификаторНастроек) Экспорт	
	Отказ = Ложь;
	СтруктураДляДозапроса	= Кэш.КэшНастроек.ВыбранныеНастройки;
	РезультатДозапроса		= СбисДополучитьНедостающиеНастройки(Кэш, СтруктураДляДозапроса, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатДозапроса);
		Возврат Ложь;
	КонецЕсли;
	СтруктураИни = СтруктураДляДозапроса.Данные.Ини;
	//Так, как установленные ини были сформированы без данных, то требуется их переопределить для корректной расстановки флагов
	УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(СтруктураИни, СтруктураДляДозапроса, Отказ);
	Возврат Кэш.ФормаНастроекОбщее.СбисПроверитьУстановленныеНастройки(Кэш,УстановленныеИниФайлы,СтруктураИни,СтруктураПараметров,ИдентификаторНастроек);
КонецФункции

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктураСбисПараметров, ДополнительныеПараметры, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктураСбисПараметров, ДополнительныеПараметры, Отказ);	
КонецФункции

//Временное решение для обновления статусов. Не использовать в других местах! 1179408775
&НаКлиенте
Функция		СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ) Экспорт
	Возврат СбисДополучитьНедостающиеНастройки(Кэш, Кэш.КэшНастроек.ВыбранныеНастройки, Отказ);
КонецФункции

//Дозапрашивает отсутствующие ини для дальнейшей работы 
&НаКлиенте
Функция		СбисДополучитьНедостающиеНастройки(Кэш, ПараметрыДозапроса, Отказ)
	
	СтруктураИни = ПараметрыДозапроса.Данные.Ини;
	СтруктураИскать = Новый Структура("Включено, Имя", "01", Новый Массив);
	Для Каждого КлючИЗначениеИни Из СтруктураИни Цикл
		Если Не КлючИЗначениеИни.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураИскать.Имя.Добавить(ПолучитьИмяИни(Кэш.КэшНастроек.ПараметрыНастроек.СоответствиеНазваний, КлючИЗначениеИни.Ключ, "во_json"));
	КонецЦикла;
	Если СтруктураИскать.Имя.Количество() Тогда
		ПараметрыПоиска = Новый Структура
		(	"Идентификатор,						ПараметрыКонфигурации,						Искать", 
			ПараметрыДозапроса.Идентификатор,	ПараметрыДозапроса.ПараметрыКонфигурации,	СтруктураИскать);
			
		ДанныеСписка = СформироватьСписокИни(Кэш, ПараметрыПоиска, Отказ);
		ПараметрыПоиска.Вставить("СписокИни", ДанныеСписка.Данные);
		НедостающиеДанныеНастроек = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыПоиска, Отказ);
		Если Отказ Тогда
			Возврат НедостающиеДанныеНастроек;
		КонецЕсли;
		Для Каждого КлючИЗначениеИни Из НедостающиеДанныеНастроек.Данные.Ини Цикл
			СтруктураИни.Вставить(КлючИЗначениеИни.Ключ, КлючИЗначениеИни.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция		ПолучитьСбисМенюПодключения(Кэш, ПараметрыПолучения, Отказ)
	//Помимо получения данных, тут идёт проверка доступности соединения. Получаем меню, чтобы были актуальные данные и в случае недоступности соединения, ругаемся	
	ПараметрыЗапроса = Новый Структура
		("БратьВКэше,	ДополнительныеПараметры,									Идентификатор, ПараметрыКонфигурации, СписокИни"
		,Ложь,			Новый Структура("ТихийРежим, ЕстьРезультат", Истина, Истина));	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыПолучения);
	ПараметрыЗапроса.СписокИни = Новый Массив;
	ПараметрыЗапроса.СписокИни.Добавить(СбисОписаниеИниМеню(Кэш));
	
	ВыбранныеНастройки		= Неопределено;
	ЭтоМенюТекущихНастроек	=	ЗначениеЗаполнено(ПараметрыЗапроса.Идентификатор)
							И	Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки)
							И	ВыбранныеНастройки.Идентификатор = ПараметрыЗапроса.Идентификатор;
	Если	ЭтоМенюТекущихНастроек
		И	ЗначениеЗаполнено(ВыбранныеНастройки.Данные.Меню) Тогда
		Возврат ВыбранныеНастройки.Данные.Меню;
	КонецЕсли;
	КэшИни = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат КэшИни;
	КонецЕсли;
	СбисМеню	= Неопределено;
	ТекстОшибки = "У подключения %name% отсутствует меню!";
	Если КэшИни = Неопределено Тогда
		Отказ		= Истина;
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%name% ", "");
	ИначеЕсли Не ЗначениеЗаполнено(КэшИни.Данные.Меню) Тогда 
		Отказ		= Истина;
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%name%", КэшИни.Название);
	КонецЕсли;
	Если Отказ Тогда//Меню нет, или оно пустое. Такого не должно быть.
		Возврат Новый Структура("code,message,details", 100, "Невозможно определить список настроек для получения!", ТекстОшибки);
	КонецЕсли;
	Если ЭтоМенюТекущихНастроек Тогда
		ВыбранныеНастройки.Данные.Меню = КэшИни.Данные.Меню;
	КонецЕсли; 
	Возврат КэшИни.Данные.Меню;
КонецФункции

&НаКлиенте
Функция		СформироватьСбисМенюПодключения(Кэш, ПараметрыФормирования, Отказ)
	Если ПустаяСтрока(ПараметрыФормирования.ПараметрыКонфигурации.subsystem) Тогда
		СбисМеню = Новый Структура;
	Иначе
		ПараметрыЗапроса = Новый Структура//Получаем типовое меню для дозаписи в него изменений
			(	"Идентификатор,	ПараметрыКонфигурации,						ДополнительныеПараметры",
				"",				ПараметрыФормирования.ПараметрыКонфигурации,Новый Структура("ТихийРежим", Истина));
		Если	ПараметрыФормирования.ПараметрыРаботы.Статус = "Удален"
			Или	ПараметрыФормирования.ПараметрыРаботы.ТипНастроек = "Пользовательские"  Тогда
        	ПараметрыЗапроса.Идентификатор = ПараметрыФормирования.Идентификатор;
		КонецЕсли;
		СбисМеню = ПолучитьСбисМенюПодключения(Кэш, ПараметрыФормирования, Отказ);
		Если Отказ Тогда
			Возврат СбисМеню;
		КонецЕсли;
	КонецЕсли;
	ПараметрыМеню = СбисОписаниеИниМеню(Кэш);
	ПараметрыМеню.Вставить("active",Истина);
	
	//Для обновления меню нужны все настройки. Дополучим отсутствующие, если надо.
	РезультатДополучения = СбисДополучитьНедостающиеНастройки(Кэш, ПараметрыФормирования, Отказ);
	Если Отказ Тогда
		Возврат РезультатДополучения;
	КонецЕсли;
	
	СбисМеню = СформироватьМеню_Структура(Кэш,ПараметрыФормирования.Данные.Ини,СбисМеню,Отказ);//Меням данные меню по записываемым ини.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат	СбисМеню;
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниРазделов(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	СбисСтруктураРазделов = ПолучитьСтруктуруРазделов(Кэш, СбисДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		//Кэш.КэшНастроек.ВыбранныеНастройки.Ошибки.Вставить(СбисСтруктураРазделов.code, СбисСтруктураРазделов);
		Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Обновить = Истина;
		Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(СбисСтруктураРазделов, "ФайлыНастроекСервер.УстановитьИниРазделов");
	КонецЕсли;
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниРазделов(Кэш, СбисСтруктураРазделов, СбисДополнительныеПараметры, Отказ)
	
КонецФункции	
	
&НаКлиенте                                  
Функция		УстановитьИниКонфигурации(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниКонфигурации(Кэш, Ини(Кэш, "Конфигурация", СбисДополнительныеПараметры, Отказ), СбисДополнительныеПараметры, Отказ);
КонецФункции	
	
&НаКлиенте                                  
Функция		СбисДобавитьПечатныеФормы(Кэш) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.СбисДобавитьПечатныеФормы(Кэш);
КонецФункции	

&НаКлиенте                                  
Функция		СбисПолучитьМассивУстановленныхИниФайлов(Кэш, СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	ВыбранныеНастройки = Кэш.КэшНастроек.ВыбранныеНастройки;
	РезультатДозапроса = СбисДополучитьНедостающиеНастройки(Кэш, ВыбранныеНастройки, Отказ);
	Если Отказ Тогда
		Возврат РезультатДозапроса;
	КонецЕсли;
	Возврат ПолучитьМассивУстановленныхИниФайлов(ВыбранныеНастройки.Данные.Ини, ВыбранныеНастройки, Отказ);
	
КонецФункции

&НаКлиенте                                  
Функция		СформироватьСтруктуруТекущихНастроек(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	Перем ВыбранныеНастройки;
	Если  Не Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда
		ПараметрыЗапроса = Новый Структура
		("БратьВКэше,	ДополнительныеПараметры,									СписокИни"
		,Ложь,			Новый Структура("ТихийРежим, ЕстьРезультат", Истина, Истина));	
		Если ЗначениеЗаполнено(Кэш.Парам.ИдентификаторНастроек) Тогда
			//Это пользовательские настройки.
			ПараметрыЗапроса.Вставить("Идентификатор", Кэш.Парам.ИдентификаторНастроек);
		Иначе
			//Это типовые настройки.
			ПараметрыЗапроса.Вставить("ПараметрыКонфигурации", ПараметрыСтандартнойКонфигурации(Кэш, Кэш.КэшНастроек.ПараметрыКонфигурации));
		КонецЕсли;
		ВыбранныеНастройки = СбисПолучитьДанныеСервисаИнтеграции(Кэш, ПараметрыЗапроса, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(ВыбранныеНастройки, "ФайлыНастроекСервер.СформироватьСтруктуруДляТекущихНастроек");
		КонецЕсли;
	КонецЕсли;
	ВыбранныеНастройки.Данные.Ини = Кэш.Ини;
	РезультатДозапроса = СбисДополучитьНедостающиеНастройки(Кэш, ВыбранныеНастройки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатДозапроса, "ФайлыНастроекСервер.СформироватьСтруктуруДляТекущихНастроек");
	КонецЕсли;
	Возврат ВыбранныеНастройки;
КонецФункции

&НаКлиенте                                  
Процедура	ПриПереходеВРазделФайловНастроек(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	Перем КэшироватьТекущие, ВыбранныеНастройки;
	КэшНастроек = Кэш.КэшНастроек;
	
	КэшНастроек.Удалить("ИзмененияВНастройках_ПараметрыДиалога");
	Если Не ДополнительныеПараметры.Свойство("КэшироватьТекущие", КэшироватьТекущие) Тогда
		КэшироватьТекущие = Истина;
	КонецЕсли;
	
	//Кэширование включается при работе в разделе настроек. При выходе из раздела отключается и кэш чистится
	КэшНастроек.ПараметрыНастроек.КэшироватьВсеПолучаемые = ДополнительныеПараметры.КэшироватьВсеПолучаемые;
	//Кэшируем текущие ини.
	Если		КэшироватьТекущие
		И Не	Кэш.КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = Кэш.Текущий.ТипДок Тогда
		СтруктураТекущихНастроек = СформироватьСтруктуруТекущихНастроек(Кэш, ДополнительныеПараметры, Отказ);
		Если Отказ Тогда
			//По какой-то причине не удалось закэшировать текущие настройки. Запускам алгоритм по-умолчанию.
			Если СтруктураТекущихНастроек.code = 765 Тогда//Не нашли типовые настройки. Вообще всё пропало!
				Кэш.КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = Кэш.Текущий.ТипДок;
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш.ГлавноеОкно, СтруктураТекущихНастроек);
				Возврат;
			КонецЕсли;
			Отказ = Ложь;
			СбисПеречитатьНастройки(Кэш, , Отказ);
		ИначеЕсли Кэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбранныеНастройки) Тогда
			//Установим параметры на отправку в ложь. Таким образом, закэшируем изменения и параметры, а после отправим всё на сервис при записи изменений
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисМеню.Отправлять = Ложь;
			Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.СбисПараметры.Отправлять = Ложь;
		Иначе
			Кэш.КэшНастроек.Вставить("ВыбранныеНастройки", СтруктураТекущихНастроек);
		КонецЕсли;
	КонецЕсли;
	Кэш.КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = Кэш.Текущий.ТипДок;

КонецПроцедуры

&НаКлиенте                                  
Процедура	АвтообновлениеПриИзменении(Кэш, НовоеЗначение) Экспорт
	Кэш.КэшНастроек.ИзмененияВНастройках = Истина;		
	Кэш.КэшНастроек.ВыбранныеНастройки.ПараметрыРаботы.Автообновление = НовоеЗначение;
КонецПроцедуры