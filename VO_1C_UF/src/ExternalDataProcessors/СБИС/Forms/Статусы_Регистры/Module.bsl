&НаКлиенте
Перем ЛокальныйКэш Экспорт;

//UAA Новая функция записи изменений по документам. Дополнительные параметры как возможность на расширение
&НаКлиенте
Функция СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, ДополнительныеПараметры) Экспорт
	Перем СбисСтатусРегламент;
	// проставляет статусы по идентификаторам пакетов при получении списка изменений
	Если Не МассивДокументов.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Отказ = Ложь;
	//Сделаем проверку ВФК на случай выноса старой функции.
	Если Не ДополнительныеПараметры.Свойство("ПроверкаСтаройФункции")
		Или	ДополнительныеПараметры.ПроверкаСтаройФункции Тогда
		фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункцииСеанса(Кэш, "ЗаписатьИзмененияПоДокументам1С","Статусы_Регистры", Новый Структура("ПроверятьВО, КэшироватьФункцию", Ложь, Ложь), Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, фрм);
		ИначеЕсли Не фрм = Ложь Тогда
			РезультатДозапроса = Кэш.ФормаНастроек.СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ);
			Если Отказ Тогда
				Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатДозапроса);
				Возврат РезультатДозапроса;
			КонецЕсли;
			фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, Кэш.Парам.КаталогНастроек);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	МассивСтатусРегламент = Новый Массив;
	
	//KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  15 +
	Если  Кэш.Ини.Конфигурация.Свойство("СтатусРегламент", СбисСтатусРегламент) Тогда
		СбисСтатусРегламент = СтрЗаменить(СбисСтатусРегламент.Значение, ",", Символы.ПС);
		Для СтрИндекс = 1 По СтрЧислоСтрок(СбисСтатусРегламент) Цикл 
			МассивСтатусРегламент.Добавить(СтрПолучитьСтроку(СбисСтатусРегламент, СтрИндекс));
		КонецЦикла;
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)

	ЗаполнятьСпособОбменаКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗаполнятьСпособОбменаКонтрагента", Кэш.Ини.Конфигурация);
	ЗаполнятьСпособОбменаКонтрагента = ЗаполнятьСпособОбменаКонтрагента = Истина;

	ПараметрыЗапроса	= Новый Структура("СписокИд", Новый Массив);
	СбисОписаниеОбъекта	= Новый Структура("Тип, Ключ, Значение", "Ини.Конфигурация", "ИмяПланаВидовХарактеристикСвойствОбъектов");
	СбисОписаниеОбъекта.Значение = Кэш.ОбщиеФункции.СбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	Если СбисОписаниеОбъекта.Значение = Неопределено Тогда
		СбисОписаниеОбъекта.Значение = ИмяПланаВидовХарактеристикСвойствОбъектов(Кэш.Ини.Конфигурация);
		Кэш.ОбщиеФункции.СбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ИмяПланаВидовХарактеристикСвойствОбъектов",	СбисОписаниеОбъекта.Значение);
	
	СобытияПакета 		= Неопределено;
	КлючПакета			= Неопределено;
	КартаСписка			= Новый Соответствие;
	ДанныеПоКонтрагентам= Новый Структура;
	Для СчПакета = 0 По МассивДокументов.Количество() - 1 Цикл
		СоставПакета = МассивДокументов[СчПакета];
		Если	СоставПакета.Свойство("Событие", СобытияПакета)
			И	СобытияПакета[0].Свойство("Название")
			И	СобытияПакета[0].Название = "Извещение о получении" Тогда
			//Определим контрагентов для обработки на сервере
			Если ЗаполнятьСпособОбменаКонтрагента Тогда
				КлючИННКПП = "к" + ?(	СоставПакета.Контрагент.Свойство("СвЮЛ"),
										СоставПакета.Контрагент.СвЮЛ.ИНН + "_" + СоставПакета.Контрагент.СвЮЛ.КПП, 
										СоставПакета.Контрагент.СвФЛ.ИНН);
				Если Не ДанныеПоКонтрагентам.Свойство(КлючИННКПП) Тогда
					ДанныеПоКонтрагентам.Вставить(КлючИННКПП, СоставПакета.Контрагент);
				КонецЕсли;
			КонецЕсли;
		Иначе
			СобытияПакета = Неопределено;
		КонецЕсли;	
		// Т.к. при отправке проставили на каждом документе 1С Ид пакета и вложения, ищем все документы, у которых идентификатор начинается на Ид пакета
		Если Не (	СоставПакета.Свойство("Идентификатор", КлючПакета) 
				И	СоставПакета.Свойство("Состояние"))
			Или		СоставПакета.Свойство("Редакция")// на документах 1С проставляем статусы только для актуальных редакций
				И	СоставПакета.Редакция[0].Актуален = "Нет" Тогда
			Продолжить;
		КонецЕсли;
		Если Не	(		СоставПакета.Свойство("Регламент", СбисСтатусРегламент) 
				И		СбисСтатусРегламент.Свойство("Название", СбисСтатусРегламент)
				И НЕ	МассивСтатусРегламент.Найти(СбисСтатусРегламент) = Неопределено) Тогда
			СбисСтатусРегламент = "";
		КонецЕсли;
		СбисОписаниеОбъекта	= Новый Структура("Тип, Ключ, Значение", "ПланыВидовХарактеристик." + ПараметрыЗапроса.ИмяПланаВидовХарактеристикСвойствОбъектов, СбисСтатусРегламент + "ДокументСБИС_Ид");
		СбисОписаниеОбъекта.Значение = Кэш.ОбщиеФункции.СбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
		Если СбисОписаниеОбъекта.Значение = Неопределено Тогда
			СбисОписаниеОбъекта.Значение = СвойствоПланаВидовХарактеристик(СбисОписаниеОбъекта, Отказ);
			Кэш.ОбщиеФункции.СбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
		КонецЕсли;
		ПараметрыЗапроса.СписокИд.Добавить(Новый Структура("Ид, Свойство", КлючПакета, СбисОписаниеОбъекта.Значение));
		ЭлементКарты = КартаСписка.Получить(КлючПакета);
		Если ЭлементКарты = Неопределено Тогда
			ЭлементКарты = Новый Массив;
			КартаСписка.Вставить(КлючПакета, ЭлементКарты);
		КонецЕсли;
		ЭлементКарты.Добавить(Новый Структура("Индекс, Регламент, Событие", СчПакета, СбисСтатусРегламент, СобытияПакета));
	КонецЦикла;

	СбисОписаниеОбъекта	= Новый Структура("Тип, Ключ, Значение", "Ини.Конфигурация", "ИмяРегистраСвойствОбъектов");
	СбисОписаниеОбъекта.Значение = Кэш.ОбщиеФункции.СбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	Если СбисОписаниеОбъекта.Значение = Неопределено Тогда
		СбисОписаниеОбъекта.Значение = ИмяРегистраСвойствОбъектов(Кэш.Ини.Конфигурация);
		Кэш.ОбщиеФункции.СбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ИмяРегистраСвойствОбъектов", СбисОписаниеОбъекта.Значение);

	РезультатЗапросаСпискаИд = Документы1СПоПараметрам(ПараметрыЗапроса,Новый Структура("ПолучитьИмяМетаданных", Истина),Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗапросаСпискаИд);
		Возврат РезультатЗапросаСпискаИд;
	КонецЕсли;
	//Определим ини, котокрые нужны для обработки.
	ДанныеИниДляОбработки = Новый Структура("Конфигурация", Кэш.Ини.Конфигурация);
	Для Каждого СтрокаПоПакетно Из РезультатЗапросаСпискаИд Цикл
		Для Каждого СтрокаДокумента1С Из СтрокаПоПакетно.Значение.Документы1С Цикл
			КлючИни = СтрокаДокумента1С.Метаданные_Имя;
			Если	Не	Кэш.Ини.Свойство(КлючИни)
				Или		ДанныеИниДляОбработки.Свойство(КлючИни) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеИниДляОбработки.Вставить(КлючИни, Кэш.ФормаНастроек.Ини(Кэш, КлючИни));
		КонецЦикла;
	КонецЦикла;
	
	//Дозаполним параметры недостающими данными
	СписокДокументов1СПакета= Неопределено;
	СтрокаЗапросаСпискаИд	= Неопределено;
	Для Каждого КлючИЗначениеКарты Из КартаСписка Цикл
		СтрокаЗапросаСпискаИд = РезультатЗапросаСпискаИд.Получить(КлючИЗначениеКарты.Ключ);
		Если СтрокаЗапросаСпискаИд = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ИндексПакета Из КлючИЗначениеКарты.Значение Цикл
			СоставПакета = МассивДокументов[ИндексПакета.Индекс];
			СбисСтатусРегламент = ИндексПакета.Регламент;
			// << alo СтатусГос
			СбисОписаниеОбъекта	=	 ПолучитьСвойствоСУчетомРегламента(Кэш,ПараметрыЗапроса,СбисСтатусРегламент + "ДокументСБИС_Статус", Отказ);
			СбисОписаниеОбъектаГос = ПолучитьСвойствоСУчетомРегламента(Кэш,ПараметрыЗапроса,СбисСтатусРегламент + "ДокументСБИС_СтатусГос", Отказ);
			СтрокаЗапросаСпискаИд.Вставить("НоваяРедакция",			Ложь);
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_Статус",	СбисОписаниеОбъекта.Значение);
			СтрокаЗапросаСпискаИд.Вставить("ДокументСБИС_СтатусГос",СбисОписаниеОбъектаГос.Значение);
			СтрокаЗапросаСпискаИд.Вставить("Состояние",				СоставПакета.Состояние);
			Если СоставПакета.Свойство("Событие") И ТипЗнч(СоставПакета.Событие) = тип("Массив") 
					И СоставПакета.Событие.Количество()>0 И СоставПакета.Событие[0].Свойство("Название") Тогда	
				Если сбисСтатусГос.НайтиПоЗначению(СоставПакета.Событие[0].Название) <> Неопределено Тогда  // << alo СтатусГос Список
					СтрокаЗапросаСпискаИд.Вставить("СостояниеГос",		СоставПакета.Событие[0].Название);
				Конецесли;
			Конецесли;	// alo СтатусГос >>
			Если Не ИндексПакета.Событие = Неопределено Тогда
				СтрокаЗапросаСпискаИд.Вставить("Событие",			ИндексПакета.Событие);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ПараметрыОбработки = Новый Структура("Контрагенты, Список", ДанныеПоКонтрагентам, РезультатЗапросаСпискаИд);
	РезультатОбработки = СбисЗаписатьИзмененияПоСвойствам(ПараметрыОбработки, Новый Структура("Ини, ИмяРегистраСвойствОбъектов, НоваяРедакция", ДанныеИниДляОбработки, ПараметрыЗапроса.ИмяРегистраСвойствОбъектов, Ложь), Отказ);
	//Сделаем обработку свойств на сервере и заполним массив документов обработанным результатом
	Для Каждого СтрокаРезультатОбработки Из РезультатОбработки Цикл
		ЭлементКарты = КартаСписка.Получить(СтрокаРезультатОбработки.Ключ);
		Если ЭлементКарты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокДокументов = Новый СписокЗначений;
		Для Каждого ОбработаннаяСтрока Из СтрокаРезультатОбработки.Значение Цикл
			СписокДокументов.Добавить(ОбработаннаяСтрока.Ссылка);
		КонецЦикла;
		Для Каждого СтрокаИндексовПакета Из ЭлементКарты Цикл
			МассивДокументов[СтрокаИндексовПакета.Индекс].Вставить("Документы1С", СписокДокументов);
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСвойствоСУчетомРегламента(Кэш, ПараметрыЗапроса, СбисСтатус, Отказ) 	// alo СтатусГос
	СбисОписаниеОбъекта	= Новый Структура("Тип, Ключ, Значение", "ПланыВидовХарактеристик." + ПараметрыЗапроса.ИмяПланаВидовХарактеристикСвойствОбъектов, СбисСтатус);
	СбисОписаниеОбъекта.Значение = Кэш.ОбщиеФункции.СбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	Если СбисОписаниеОбъекта.Значение = Неопределено Тогда
		СбисОписаниеОбъекта.Значение = СвойствоПланаВидовХарактеристик(СбисОписаниеОбъекта, Отказ);
		Кэш.ОбщиеФункции.СбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	КонецЕсли;
	Возврат СбисОписаниеОбъекта;
КонецФункции

//Устанавливает значение параметра в регистре сведений	
&НаСервереБезКонтекста
Функция СбисСвойствоУстановлено(СвойствоПараметр, СвойствоЗначение, ДокументСсылка, НоваяРедакция, ДополнительныеПараметры, Отказ)
	Результат = Истина;
	ИмяРегистраСвойствОбъектов = ДополнительныеПараметры.ИмяРегистраСвойствОбъектов;
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоПараметр);
	НаборЗаписей.Прочитать();
	
	ЗаписатьНабор = Истина;
	Если Не НаборЗаписей.Количество() Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.Объект = ДокументСсылка;
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 24 +
		НоваяЗаписьНабора.Свойство = СвойствоПараметр;
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 25 +
		// << alo СтатусГос
		Если СвойствоПараметр.Наименование = "ДокументСБИС_Статус" Тогда	
			//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
			СтароеЗначениеСвойства = НоваяЗаписьНабора.Значение;
			ЗаписатьНабор = (сбисПриоритетСтатуса(СвойствоЗначение) > сбисПриоритетСтатуса(СтароеЗначениеСвойства)) Или НоваяРедакция;
		ИначеЕсли СвойствоПараметр.Наименование = "ДокументСБИС_СтатусГос" Тогда	
			ЗаписатьНабор = СвойствоЗначение <> НоваяЗаписьНабора.Значение Или НоваяРедакция;	// alo СтатусГос >>
		КонецЕсли;
	КонецЕсли;
	Если ЗаписатьНабор Тогда
		Попытка
			НоваяЗаписьНабора.Значение = СвойствоЗначение;
			НаборЗаписей.Записать();
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 746, "Ошибка на сервере", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Возврат ЗаписатьНабор;
КонецФункции

//Возвращает ссылку на свойство плана видов характеристик
&НаСервереБезКонтекста
Функция СвойствоПланаВидовХарактеристик(Знач ПараметрыЗапроса, Отказ)
	СбисИмяПлана = СтрПолучитьСтроку(СтрЗаменить(ПараметрыЗапроса.Тип, ".", Символы.ПС), 2);
	Возврат ПланыВидовХарактеристик[СбисИмяПлана].НайтиПоНаименованию(ПараметрыЗапроса.Ключ, Истина).Ссылка;
КонецФункции

&НаСервереБезКонтекста
Функция Документы1СПоПараметрам(ПараметрыЗапроса, ДополнительныеПараметры, Отказ) Экспорт
	Перем СбисПолучитьИмяМетаданных;
	//Сформируем временную таблицу для запроса 
	Если Не ДополнительныеПараметры.Свойство("ПолучитьИмяМетаданных", СбисПолучитьИмяМетаданных) Тогда
		СбисПолучитьИмяМетаданных = Ложь;
	КонецЕсли;
	ТаблицаСвойства = Новый ТаблицаЗначений;
	ТаблицаСвойства.Колонки.Добавить("Свойство",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + ПараметрыЗапроса.ИмяПланаВидовХарактеристикСвойствОбъектов));
	ТаблицаСвойства.Колонки.Добавить("Ид",		Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
	Для Каждого ЭлементИд Из ПараметрыЗапроса.СписокИд Цикл
		НоваяСтрока = ТаблицаСвойства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементИд);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ
	                |	ТаблицаСвойства.Ид КАК Ид,
	                |	ТаблицаСвойства.Свойство КАК Свойство
	                |ПОМЕСТИТЬ ИсточникДанных
	                |ИЗ
	                |	&ТаблицаСвойства КАК ТаблицаСвойства
	                |;
	                |
	                |////////////////////////////////////////////////////////////////////////////////
	                |ВЫБРАТЬ
	                |	ИсточникДанных.Ид КАК ИдентификаторПакета,
	                |	ЗначенияСвойствОбъектов.Объект КАК Ссылка
	                |ИЗ
	                |	ИсточникДанных КАК ИсточникДанных
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ПараметрыЗапроса.ИмяРегистраСвойствОбъектов + " КАК ЗначенияСвойствОбъектов
	                |		ПО ИсточникДанных.Свойство = ЗначенияСвойствОбъектов.Свойство.Ссылка
	                |			И ИсточникДанных.Ид = ЗначенияСвойствОбъектов.Значение
	                |ГДЕ
	                |	НЕ ЗначенияСвойствОбъектов.Объект ЕСТЬ NULL
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ИсточникДанных.Ид,
	                |	ЗначенияСвойствОбъектов.Объект
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	ИдентификаторПакета";
	Запрос.УстановитьПараметр("ТаблицаСвойства", ТаблицаСвойства);

	Результат = Новый Соответствие;
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 603, "Ошибка выполнения запроса списка документов", ОписаниеОшибки());
	КонецПопытки;
	ВыборкаПоИд = РезультатЗапроса.Выбрать();
	
	МассивДобавить = Неопределено;
	Пока ВыборкаПоИд.Следующий() Цикл
		КлючРезультат = ВыборкаПоИд.ИдентификаторПакета;
		ЗначениеРезультат = Результат.Получить(КлючРезультат);
		Если ЗначениеРезультат = Неопределено Тогда
			МассивДобавить = Новый Массив;
			Результат.Вставить(КлючРезультат, Новый Структура("Документы1С", МассивДобавить));
		Иначе
			МассивДобавить = ЗначениеРезультат.Документы1С;
		КонецЕсли;                                                   
		СтрокаДобавить = Новый Структура("Ссылка", ВыборкаПоИд.Ссылка);
		Если СбисПолучитьИмяМетаданных Тогда
			СтрокаДобавить.Вставить("Метаданные_Имя", ВыборкаПоИд.Ссылка.Метаданные().Имя);
	КонецЕсли;
		МассивДобавить.Добавить(СтрокаДобавить);
	КонецЦикла;	
	Возврат Результат;
конецфункции

&НаСервереБезКонтекста
Функция СбисЗаписатьИзмененияПоСвойствам(Знач ПараметрыЗапроса, Знач ДополнительныеПараметры, Отказ)
	КэшНаборовЗаписей = Новый Соответствие;
	РезультатОбработки = Новый Соответствие;
	Для Каждого КлючИЗначение Из ПараметрыЗапроса.Список Цикл
		ДанныеДляОбработки = КлючИЗначение.Значение;
		СписокОбработанныхДокументов = Новый Массив;
		Для Каждого СсылкаНаДокумент1С Из ДанныеДляОбработки.Документы1С Цикл
			ОшибкаУстановкиСвойства = Ложь;
			// << alo СтатусГос Список
			Если ДанныеДляОбработки.Свойство("СостояниеГос") Тогда
				РезультатДобавления = СбисСвойствоУстановлено(ДанныеДляОбработки.ДокументСБИС_СтатусГос, ДанныеДляОбработки.СостояниеГос, СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки.НоваяРедакция, ДополнительныеПараметры, Отказ);
				Если Отказ Тогда
					СтрокаДобавить = Новый Структура("Ссылка, Отказ, Ошибка", СсылкаНаДокумент1С.Ссылка, Отказ, РезультатДобавления);
					СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
				КонецЕсли;
			КонецЕсли;	// alo СтатусГос Список >>
			РезультатДобавления = СбисСвойствоУстановлено(ДанныеДляОбработки.ДокументСБИС_Статус, ДанныеДляОбработки.Состояние.Название, СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки.НоваяРедакция, ДополнительныеПараметры, ОшибкаУстановкиСвойства);
			СтрокаДобавить = Новый Структура("Ссылка, Отказ", СсылкаНаДокумент1С.Ссылка, ОшибкаУстановкиСвойства);
			Если ОшибкаУстановкиСвойства Тогда
				СтрокаДобавить.Вставить("Ошибка", РезультатДобавления);
				СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
			ИначеЕсли РезультатДобавления Тогда
				СписокОбработанныхДокументов.Добавить(СтрокаДобавить);
			КонецЕсли;
			ИзменитьРеквизитыДокумента1С(СсылкаНаДокумент1С.Ссылка, ДанныеДляОбработки, ДополнительныеПараметры.Ини);
		КонецЦикла;
		РезультатОбработки.Вставить(КлючИЗначение.Ключ, СписокОбработанныхДокументов);
	КонецЦикла;
	Для Каждого КлючИЗначение Из ПараметрыЗапроса.Контрагенты Цикл
		Контрагент = НайтиКонтрагентаИзДокументаСБИС(ДополнительныеПараметры.Ини.Конфигурация, КлючИЗначение.Значение);
		Если Контрагент = Ложь Тогда
			Продолжить;
		КонецЕсли;
		сбисЗаполнитьСпособДоставкиКонтрагента(Контрагент, ДополнительныеПараметры.Ини.Конфигурация);	
	КонецЦикла;
	Возврат РезультатОбработки;
КонецФункции

//UAA Старая функция оставлена для верного поиска, в случае вынесения этого кода в ВФК
&НаКлиенте
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	СбисЗаписатьИзмененияПоДокументам1С(ЛокальныйКэш, МассивДокументов, Новый Структура("ПроверкаСтаройФункции", Ложь));
КонецПроцедуры

Процедура ЗаписатьИзмененияПоДокументам1С_old(МассивДокументов, Ини, КаталогНастроек) Экспорт
	// проставляет статусы по идентификаторам пакетов при получении списка изменений
	КэшПоКонтрагентам = Новый Структура;
	МассивСтатусРегламент = Новый Массив;
	
	//KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  15 +
	Если  Ини.Конфигурация.Свойство("СтатусРегламент") Тогда
		МассивСтатусРегламент = РазбитьСтрокуВМассив(Ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)


	Для Каждого СоставПакета Из МассивДокументов Цикл
		// Т.к. при отправке проставили на каждом документе 1С Ид пакета и вложения, ищем все документы, у которых идентификатор начинается на Ид пакета
		Если СоставПакета.Свойство("Идентификатор") и СоставПакета.Свойство("Состояние") Тогда
			Если СоставПакета.Свойство("Редакция") и СоставПакета.Редакция[0].Актуален = "Нет" Тогда  // на документах 1С проставляем статусы только для актуальных редакций
				Продолжить;
			КонецЕсли;
			
			//KES 050751151 Статусы в разрезе регламентов(ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  16 +
			СтатусРегламент = "";
			Если СоставПакета.Свойство("Регламент") 
				И СоставПакета.Регламент.Свойство("Название")
				И НЕ МассивСтатусРегламент.Найти(СоставПакета.Регламент.Название)=Неопределено Тогда
					СтатусРегламент = СоставПакета.Регламент.Название;
			КонецЕсли;
			ТаблицаДокументов1С = ДокументыПоИдПакета(СоставПакета.Идентификатор, Ини.Конфигурация, Новый Структура("Регламент",СтатусРегламент)); 
			//<-- KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)


			
			// alo <<
			СоставПакета.вставить("Документы1С",новый списокЗначений);
			Для Каждого Строка Из ТаблицаДокументов1С Цикл
				//KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  17 +
				Если ДобавитьСвойствоОбъекта("ДокументСБИС_Статус", СоставПакета.Состояние.Название, Строка, КаталогНастроек, Ини.Конфигурация,,Новый Структура("Регламент",СтатусРегламент)) тогда
				//<--KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ) 
					СоставПакета.Документы1С.Добавить(Строка);
				конецесли;
				// alo >>
				ИзменитьРеквизитыДокумента1С(Строка, СоставПакета,Ини);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьСпособОбменаКонтрагента(СоставПакета,Ини,КэшПоКонтрагентам);
	КонецЦикла
КонецПроцедуры

//KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ) -->  18 +
&НаСервереБезКонтекста
Функция ДокументыПоИдПакета(Ид, ИниКонфигурация, ДополнительныеПараметры = Неопределено) Экспорт
// <--KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ) 
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
	
	//KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  19 +
	
	//KES 1178719824 -->
	Префикс = ?(ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("Регламент"),ДополнительныеПараметры.Регламент,"");
	//<-- KES 1178719824
 
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	СвойствоДокументСбисИд =  ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(Префикс+"ДокументСБИС_Ид", Истина).Ссылка; 
		
	запрос = новый Запрос;
	запрос.Текст  = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Ссылка
	|ИЗ
	|		РегистрСведений."+ИмяРегистраСвойствОбъектов+" КАК ЗначенияСвойствОбъектов
	|		ГДЕ ЗначенияСвойствОбъектов.Значение = &Идентификатор
	|			И (ЗначенияСвойствОбъектов.Свойство.Ссылка = &СвойствоДокументСбисИд)";
	
	запрос.УстановитьПараметр("Идентификатор", Ид);
	запрос.УстановитьПараметр("СвойствоДокументСбисИд", СвойствоДокументСбисИд);
	// <--KES 050751151 Статусы в разрезе регламентов (ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)

	ТЗ=Запрос.Выполнить().Выгрузить();
	возврат ТЗ.ВыгрузитьКолонку("Ссылка");
конецфункции
&НаСервереБезКонтекста
Процедура ИзменитьРеквизитыДокумента1С(ДокСсылка,СоставПакета,Ини) экспорт
	ИмяДокумента = ДокСсылка.Метаданные().Имя;
	// в фактуре проставляем дату и способ выставления
	Если Ини.Свойство(ИмяДокумента) и Ини[ИмяДокумента].Свойство("мФайл") Тогда
		Попытка
			Если СоставПакета.Свойство("Событие") и СоставПакета.Событие[0].Название = "Извещение о получении" Тогда
				Событие=СоставПакета.Событие[0];
				Для Каждого Элемент Из Ини[ИмяДокумента].мФайл Цикл
					Если Элемент.Значение.Свойство("ЗаполнятьДатуСпособВыставления") и Элемент.Значение.ЗаполнятьДатуСпособВыставления.Значение ="'Истина'" Тогда
						ИмяРеквизитаДатыВыставления = Сред(Элемент.Значение.ДатаВыставления.Значение, Найти(Элемент.Значение.ДатаВыставления.Значение, ".")+1);
						ИмяРеквизитаСпособаВыставления = Сред(Элемент.Значение.СпособВыставления.Значение, Найти(Элемент.Значение.СпособВыставления.Значение, ".")+1);
						ЗначениеСпособаВыставления = Элемент.Значение.СпособВыставления.Вычислить;
						ДокОбъект = ДокСсылка.ПолучитьОбъект();
						ДокОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина); // обязательно требуется для состоянияЭД
						ДокОбъект[ИмяРеквизитаДатыВыставления] = Событие.ДатаВремяДокумента;
						ДокОбъект[ИмяРеквизитаСпособаВыставления] = ЗначениеСпособаВыставления;
						ДокОбъект.Записать();
					КонецЕсли;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
процедура ЗаполнитьСпособОбменаКонтрагента(СоставПакета,Ини,КэшПоКонтрагентам) экспорт
	Если Ини.Конфигурация.Свойство("ЗаполнятьСпособОбменаКонтрагента") и Ини.Конфигурация.ЗаполнятьСпособОбменаКонтрагента.Значение = "'Истина'" и
		СоставПакета.Свойство("Событие") и СоставПакета.Событие[0].Свойство("Название") и СоставПакета.Событие[0].Название = "Извещение о получении" Тогда
		ИННКПП = ?(СоставПакета.Контрагент.Свойство("СвЮЛ"),СоставПакета.Контрагент.СвЮЛ.ИНН+"_"+СоставПакета.Контрагент.СвЮЛ.КПП, СоставПакета.Контрагент.СвФЛ.ИНН);
		Если не КэшПоКонтрагентам.Свойство("к"+ИННКПП) Тогда
			КэшПоКонтрагентам.Вставить("к"+ИННКПП);
			Контрагент = НайтиКонтрагентаИзДокументаСБИС(Ини.Конфигурация, СоставПакета.Контрагент);
			Если Контрагент<>Ложь Тогда
				сбисЗаполнитьСпособДоставкиКонтрагента(Контрагент,Ини.Конфигурация);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// alo >>
&НаСервереБезКонтекста
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам,ИниКонфигурация,КаталогНастроек) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 20 +
		ЗаписатьПараметрыДокументаСБИС(Элемент.СтруктураСвойств,Элемент.Документ1С,ИниКонфигурация,КаталогНастроек,Новый Структура("Регламент",?(Элемент.Свойство("Регламент"),Элемент.Регламент,"")));
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	КонецЦикла;
КонецФункции
&НаСервереБезКонтекста
Функция ЗаписатьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,ИниКонфигурация,КаталогНастроек,ДополнительныеПараметры=Неопределено) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	Для Каждого Свойство Из СтруктураПараметровДокументаСБИС Цикл
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 21 +
		ДобавитьСвойствоОбъекта(Свойство.Ключ,Свойство.Значение,ДокументСсылка,КаталогНастроек,ИниКонфигурация,Истина,ДополнительныеПараметры);
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	КонецЦикла;
КонецФункции
&НаСервереБезКонтекста
Функция ДобавитьСвойствоОбъекта(ИмяСвойства,ЗначениеСвойства,ДокументСсылка,КаталогНастроек,ИниКонфигурация,НоваяРедакция=Ложь,ДополнительныеПараметры=Неопределено) Экспорт
	
	//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  22 +
	ПолноеИмяСвойства = ?(ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("Регламент"),ДополнительныеПараметры.Регламент,"") + ИмяСвойства;
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)

	// устанавливает значение параметра в регистре сведений	
	ОбновлятьЗначение = Истина;
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	СвойствоСсылка = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация)].НайтиПоНаименованию(ПолноеИмяСвойства, Истина).Ссылка;
	//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)-->  23 +
	НаборЗаписей.Отбор.Свойство.Установить(СвойствоСсылка);
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.Объект = ДокументСсылка;
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 24 +
		НоваяЗаписьНабора.Свойство = СвойствоСсылка;
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
	Иначе
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
		//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)--> 25 +
		Если Найти(ПолноеИмяСвойства,"ДокументСБИС_Статус") > 0 Тогда
			//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ, ПОЛУЧЕНИЕ СПИСКА ИЗМЕНЕНИЙ)
			СтароеЗначениеСвойства = НоваяЗаписьНабора.Значение;
			ОбновлятьЗначение = (сбисПриоритетСтатуса(ЗначениеСвойства) > сбисПриоритетСтатуса(СтароеЗначениеСвойства)) Или НоваяРедакция;
		КонецЕсли;
	КонецЕсли;
	Если ОбновлятьЗначение Тогда
		Попытка
			НоваяЗаписьНабора.Значение = ЗначениеСвойства;
			НаборЗаписей.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	возврат ОбновлятьЗначение; // alo
КонецФункции
//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 26 +
//&НаСервереБезКонтекста не было тут изначально, не могу поставить
Функция УдалитьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек) Экспорт
	
	УдалитьПараметрыДокументаСБИСПарам(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек,Неопределено);
	
КонецФункции
//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)

Функция УдалитьПараметрыДокументаСБИСПарам(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек,ДополнительныеПараметры = Неопределено) Экспорт
	
	// удаляет свойства для документа 1С (при удалении сопоставления)	
	Для Каждого Свойство Из СтруктураПараметровДокументаСБИС Цикл
		//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 27
		УдалитьСвойствоОбъекта(Свойство.Ключ,ДокументСсылка,КаталогНастроек,Ини.Конфигурация,ДополнительныеПараметры);
		//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)
	КонецЦикла;
	
КонецФункции

//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 28  +
Функция УдалитьСвойствоОбъекта(ИмяСвойства,ДокументСсылка,КаталогНастроек,ИниКонфигурация,ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолноеИмяСвойства = ?(ЗначениеЗаполнено(ДополнительныеПараметры) И ДополнительныеПараметры.Свойство("Регламент"),ДополнительныеПараметры.Регламент,"") + ИмяСвойства;
	//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) 
	
	// удаляет значение параметра из регистра сведений	
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ДокументСсылка);
	//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 29 +
	НаборЗаписей.Отбор.Свойство.Установить(ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация)].НайтиПоНаименованию(ПолноеИмяСвойства, Истина).Ссылка);
	//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) 
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()>0 Тогда	
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Попытка
			НоваяЗаписьНабора.Значение = "";
			НаборЗаписей.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
КонецФункции
&НаСервереБезКонтекста
Функция НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, КэшИни, КаталогНастроек, МассивСлужебных) Экспорт
	// функция ищет связанные документы 1С для каждого вложения пакета и заполняет массив служебных вложений	
	сч = 0;
	Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
		Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
			ДанныеДокумента1С = НайтиДокументы1СПоИдВложенияСБИС(ПолныйСоставПакета.Идентификатор, Вложение.Идентификатор, КэшИни, КаталогНастроек);
			ПолныйСоставПакета.Вложение[сч].Вставить("Документы1С", Новый СписокЗначений);
			ПолныйСоставПакета.Вложение[сч].Вставить("Документ1СПроведен");
			Если ЗначениеЗаполнено(ДанныеДокумента1С) Тогда
				ПолныйСоставПакета.Вложение[сч].Документы1С=ДанныеДокумента1С.Ссылки;
				ПолныйСоставПакета.Вложение[сч].Документ1СПроведен=ДанныеДокумента1С.Проведен;
			КонецЕсли;
		Иначе
			МассивСлужебных.Добавить(сч);
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;		
КонецФункции
&НаСервереБезКонтекста
Функция НайтиДокументы1СПоИдВложенияСБИС(Ид, ИдВложения,Ини,КаталогНастроек) Экспорт
	// Ищет документы 1С По идентификаторам пакета и вложения
	Документы1С = Новый СписокЗначений;
	ЕстьПроведенный = Ложь;
	ИниКонфигурация = Ини.Конфигурация;
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
	
	//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 30 +
	МассивСтатусРегламент = Новый Массив;
	Если Ини.Конфигурация.Свойство("СтатусРегламент") Тогда 
		МассивСтатусРегламент = РазбитьСтрокуВМассив(Ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;

	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(Ини.Конфигурация);
	мСвойстваДокументСбисИдВложения = Новый Массив;
	мСвойстваДокументСбисИдВложения.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("ДокументСБИС_ИдВложения", Истина).Ссылка );
	мСвойстваДокументСбисИд = Новый Массив;
	мСвойстваДокументСбисИд.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("ДокументСБИС_Ид", Истина).Ссылка );

	Для Каждого Элемент из МассивСтатусРегламент Цикл
       	мСвойстваДокументСбисИдВложения.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(Элемент+"ДокументСБИС_ИдВложения", Истина).Ссылка );
		мСвойстваДокументСбисИд.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(Элемент+"ДокументСБИС_Ид", Истина).Ссылка );
    КонецЦикла;

	запрос = новый Запрос;
	запрос.Текст  = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВТДокументыПакета
	|ИЗ
	|	РегистрСведений."+ИмяРегистраСвойствОбъектов+" КАК ЗначенияСвойствОбъектов
	|ГДЕ (ЗначенияСвойствОбъектов.Свойство В (&мСвойстваДокументСбисИд) ) И ЗначенияСвойствОбъектов.Значение = &Ид;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыПакета.Объект,
	|	ЗначенияСвойствОбъектов.Объект КАК Ссылка
	|ИЗ
	|	ВТДокументыПакета КАК ВТДокументыПакета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраСвойствОбъектов+" КАК ЗначенияСвойствОбъектов
	|		ПО ВТДокументыПакета.Объект = ЗначенияСвойствОбъектов.Объект
	|			И ЗначенияСвойствОбъектов.Значение = &ИдВложения
	|			И (ЗначенияСвойствОбъектов.Свойство В (&мСвойстваДокументСбисИдВложения))";
	
	запрос.УстановитьПараметр("Ид", Ид);
	запрос.УстановитьПараметр("ИдВложения", ИдВложения);
	запрос.УстановитьПараметр("мСвойстваДокументСбисИд", мСвойстваДокументСбисИд);
	запрос.УстановитьПараметр("мСвойстваДокументСбисИдВложения", мСвойстваДокументСбисИдВложения);
	//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) 
	
	Выборка = Запрос.Выполнить().выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		Документы1С.Добавить(Выборка.Ссылка);
		Попытка   // попытка на случай отправки справочника, а не документа
			Если Выборка.Ссылка.Проведен Тогда
				ЕстьПроведенный = Истина;
			КонецЕсли;
		Исключение
		КонецПопытки; 
	КонецЦикла;
	
	Возврат Новый Структура("Ссылки, Проведен",Документы1С, ЕстьПроведенный);
КонецФункции
Функция ПрочитатьПараметрыДокументаСБИС(ДокументСсылка, КаталогНастроек,ИмяСвойства,Ини) Экспорт
	// возвращает свойство (статус, идентификатор пакета, идентификатор вложения) документа 1С	
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(Ини.Конфигурация);
	запрос = новый Запрос;
	запрос.Текст  = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Значение КАК Значение
	|ИЗ
	|		РегистрСведений."+ИмяРегистраСвойствОбъектов+" КАК ЗначенияСвойствОбъектов
	|		ГДЕ ЗначенияСвойствОбъектов.Объект = &Документ1С
	|			И (ЗначенияСвойствОбъектов.Свойство.Наименование = """+ИмяСвойства+""")";
	
	запрос.УстановитьПараметр("Документ1С", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Значение;
	КонецЦикла;
	
КонецФункции
&НаСервереБезКонтекста
Функция ПрочитатьПараметрыДокументовСБИС(Знач СписокСсылок,Знач МассивСвойств,Знач Конфигурация,Знач ДополнительныеПараметры) Экспорт
	// возвращает свойство (статус, идентификатор пакета, идентификатор вложения) документа 1С	
	Если Не ТипЗнч(СписокСсылок) = Тип("СписокЗначений") Тогда
		НовыйСписок = Новый СписокЗначений;
		НовыйСписок.Добавить(СписокСсылок);
		СписокСсылок = НовыйСписок;
	КонецЕсли;
	Если Не ТипЗнч(МассивСвойств) = Тип("Массив") Тогда
		НовыйМассив = Новый Массив;
		НовыйМассив.Добавить(МассивСвойств);
		МассивСвойств = НовыйМассив;
	КонецЕсли;
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(Конфигурация);
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект КАК Объект,
	|	ЗначенияСвойствОбъектов.Значение КАК Значение,
	|	ЗначенияСвойствОбъектов.Свойство.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДополнительныеСведения_Таблица
	|ИЗ
	|	РегистрСведений."+ИмяРегистраСвойствОбъектов+" КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект В(&Документ1С)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные_Сведения.Значение,
	|	Данные_Сведения.Объект КАК Объект,
	|	Данные_Сведения.Наименование
	|ИЗ
	|	(";
	СтрокаКлючей = "";
	Для Каждого Свойство Из МассивСвойств Цикл
		ТекстЗапроса =	ТекстЗапроса + ?(ПустаяСтрока(СтрокаКлючей), "", "
		|	ОБЪЕДИНИТЬ ВСЕ") + 
		"
		|	ВЫБРАТЬ
		|		ДополнительныеСведения_Таблица.Наименование КАК Наименование,
		|		ЕстьNULL(ДополнительныеСведения_Таблица.Значение, """") КАК Значение,
		|		ДополнительныеСведения_Таблица.Объект КАК Объект
		|	ИЗ
		|		ДополнительныеСведения_Таблица КАК ДополнительныеСведения_Таблица
		|	ГДЕ
		|		ДополнительныеСведения_Таблица.Наименование = """+ Свойство + """";
		СтрокаКлючей = СтрокаКлючей +?(ПустаяСтрока(СтрокаКлючей), "",",")+Свойство;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + 
	") КАК Данные_Сведения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДополнительныеСведения_Таблица";

	Результат = Новый Массив;
	
	запрос = Новый Запрос();
	запрос.УстановитьПараметр("Документ1С", СписокСсылок);
	запрос.Текст = ТекстЗапроса;
	
	СвойстваОбъекта = запрос.Выполнить().Выбрать();
	Пока СвойстваОбъекта.СледующийПоЗначениюПоля("Объект") Цикл
		СтруктураСвойств = Новый Структура(СтрокаКлючей);
		СтруктураДобавить = Новый Структура("Документ1С", СвойстваОбъекта.Объект);
		Пока СвойстваОбъекта.Следующий() Цикл
			СтруктураСвойств.Вставить(СвойстваОбъекта.Наименование, СвойстваОбъекта.Значение);
		КонецЦикла;
		СтруктураДобавить.Вставить("СтруктураСвойств", СтруктураСвойств);
		Результат.Добавить(СтруктураДобавить);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции
Процедура ПолучитьТаблицуДокументов1СПоИдПакетаСБИС(МассивДокументов, ИниКонфигурация, КаталогНастроек) Экспорт	
	
	//KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)--> 31 +
	МассивСтатусРегламент = Новый Массив;
	Если ИниКонфигурация.Свойство("СтатусРегламент") Тогда
		МассивСтатусРегламент = РазбитьСтрокуВМассив(ИниКонфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ) 

	
	// Для массива документов СБИС ищет по идентификаторам пакетов документы 1С	
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	
	//KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)--> 32 +
	мСвойстваДокументСбисИд = Новый Массив;
	мСвойстваДокументСбисИд.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("ДокументСБИС_Ид", Истина).Ссылка );
	
	Для Каждого Элемент из МассивСтатусРегламент Цикл
       	мСвойстваДокументСбисИд.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(Элемент+"ДокументСБИС_Ид", Истина).Ссылка );
    КонецЦикла;
	//<-- KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ) 
	
	
	ВремТабл = МассивСтруктурВТаблицуЗначений(МассивДокументов);	
	КолонкаИдСБИС = ВремТабл.ВыгрузитьКолонку("ИдСБИС");
	ВремТабл.Колонки.Удалить("ИдСБИС");
	ВремТабл.Колонки.Добавить("ИдСБИС", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ВремТабл.ЗагрузитьКолонку(КолонкаИдСБИС, "ИдСБИС");
	запрос = новый Запрос;
	запрос.Текст  = "ВЫБРАТЬ
	|	ТЗ.ИдСБИС
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ИдСБИС,
	|	ЗначенияСвойствОбъектов.Объект КАК ссылка
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраСвойствОбъектов(ИниКонфигурация)+" КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.ИдСБИС = ЗначенияСвойствОбъектов.Значение
	|//KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)--> 33 +
	|			//И (ЗначенияСвойствОбъектов.Свойство = &Свойство_ДокументСБИС_Ид)
	|			И (ЗначенияСвойствОбъектов.Свойство В (&мСвойстваДокументСбисИд))";
	//<-- KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)

	запрос.УстановитьПараметр("ТЗ", ВремТабл);
	// KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)-->  34 +
	запрос.УстановитьПараметр("мСвойстваДокументСбисИд", мСвойстваДокументСбисИд);
	// <-- KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)

	ТаблицаДокументов1С = Запрос.Выполнить().выгрузить();
	//====================================================================================
	Для каждого стр из МассивДокументов цикл 
		массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("ИдСБИС", стр.ИдСБИС) ) ;
		Если массивДоков.количество()>0 тогда 
			Документы1С = Новый СписокЗначений;
			Для Каждого Элемент Из массивДоков Цикл
				Документы1С.Добавить(Элемент.Ссылка);
			КонецЦикла;
			стр.Вставить("Документы1С", Документы1С);
			Попытка
				стр.Вставить("СуммаДокумента1С", массивДоков[0].Ссылка.СуммаДокумента);
				Дельта = Число(стр.Сумма) - стр.СуммаДокумента1С;
				Дельта = ?(Дельта<0,-Дельта,Дельта);
				стр.Вставить("Дельта", Дельта);
			Исключение
				стр.Вставить("СуммаДокумента1С", 0);
				стр.Вставить("Дельта", 0);
			КонецПопытки;
			стр.Вставить("Проведен", сбисИндексКартинкиПоДокументу1С(массивДоков[0].Ссылка));
		Иначе
			стр.Вставить("Документы1С",Новый СписокЗначений);
			стр.Вставить("СуммаДокумента1С", 0);
			стр.Вставить("Проведен", -1);
			стр.Вставить("Дельта", 0);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
Процедура ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, ИниКонфигурация, КаталогНастроек) Экспорт	
	// Для массива документов СБИС ищет по идентификаторам пакетов и вложений документы 1С	
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	Свойство_ДокументСБИС_Ид = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("ДокументСБИС_Ид", Истина).Ссылка;
	Свойство_ДокументСБИС_ИдВложения = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("ДокументСБИС_ИдВложения", Истина).Ссылка;
	ВремТабл = МассивСтруктурВТаблицуЗначений(МассивИдентификаторов);	
	КолонкаИд = ВремТабл.ВыгрузитьКолонку("Ид");
	ВремТабл.Колонки.Удалить("Ид");
	ВремТабл.Колонки.Добавить("Ид", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ВремТабл.ЗагрузитьКолонку(КолонкаИд, "Ид");
	КолонкаИдВложения = ВремТабл.ВыгрузитьКолонку("ИдВложения");
	ВремТабл.Колонки.Удалить("ИдВложения");
	ВремТабл.Колонки.Добавить("ИдВложения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(999)));
	ВремТабл.ЗагрузитьКолонку(КолонкаИдВложения, "ИдВложения");
	
	//KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)--> 35
	МассивСтатусРегламент = Новый Массив;
	Если ИниКонфигурация.Свойство("СтатусРегламент") Тогда
		МассивСтатусРегламент = РазбитьСтрокуВМассив(ИниКонфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	
	мСвойстваДокументСбисИдВложения = Новый Массив;
	мСвойстваДокументСбисИдВложения.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("ДокументСБИС_ИдВложения", Истина).Ссылка );
	мСвойстваДокументСбисИд = Новый Массив;
	мСвойстваДокументСбисИд.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию("ДокументСБИС_Ид", Истина).Ссылка );

	Для Каждого Элемент из МассивСтатусРегламент Цикл
       	мСвойстваДокументСбисИдВложения.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(Элемент+"ДокументСБИС_ИдВложения", Истина).Ссылка );
		мСвойстваДокументСбисИд.Добавить( ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(Элемент+"ДокументСБИС_Ид", Истина).Ссылка );
    КонецЦикла;
	//<-- KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)

	
	запрос = новый Запрос;
	запрос.Текст  = "ВЫБРАТЬ
	|	ТЗ.Ид,
	|	ТЗ.ИдВложения
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ид,
	|	ЗначенияСвойствОбъектов.Объект КАК Док1С
	|ПОМЕСТИТЬ ВТДокументыПакета
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраСвойствОбъектов+" КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.Ид = ЗначенияСвойствОбъектов.Значение
	|		И (ЗначенияСвойствОбъектов.Свойство.Ссылка В (&мСвойстваДокументСбисИд))
	|СГРУППИРОВАТЬ ПО Ид, Объект;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.ИдВложения,
	|	ЗначенияСвойствОбъектов.Объект КАК Док1С
	|ПОМЕСТИТЬ ВТДокументыВложений
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраСвойствОбъектов+" КАК ЗначенияСвойствОбъектов
	|		ПО ВТ.ИдВложения = ЗначенияСвойствОбъектов.Значение
	|		И (ЗначенияСвойствОбъектов.Свойство.Ссылка В (&мСвойстваДокументСбисИдВложения))
	|СГРУППИРОВАТЬ ПО ИдВложения, Объект;
	|	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДокументыПакета.Ид,
	|	ЕСТЬNULL(ВТДокументыВложений.ИдВложения, """") КАК ИдВложения,
	|	ВТДокументыПакета.Док1С								
	|ИЗ
	|	ВТДокументыПакета КАК ВТДокументыПакета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыВложений 
	|		ПО ВТДокументыПакета.Док1С = ВТДокументыВложений.Док1С";
	
	запрос.УстановитьПараметр("ТЗ", ВремТабл);
	запрос.УстановитьПараметр("мСвойстваДокументСбисИд", мСвойстваДокументСбисИд);
	запрос.УстановитьПараметр("мСвойстваДокументСбисИдВложения", мСвойстваДокументСбисИдВложения);
	//<-- KES 050751151 Статусы в разрезе регламентов (РЕЕСТР ОТПРАВЛЕННЫЕ)

	ТаблицаДокументов1С = Запрос.Выполнить().выгрузить();
	//====================================================================================
	Для каждого стр из МассивДокументов цикл 
		Если стр.СоставПакета[0].Значение.Свойство("Вложение") и стр.СоставПакета[0].Значение.Вложение.Количество() Тогда
			ДокументПроведен=-1;
			Для Каждого Вложение Из стр.СоставПакета[0].Значение.Вложение Цикл
				Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
					
					массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("Ид, ИдВложения", стр.ИдСБИС, Вложение.Идентификатор) ) ;
					Если массивДоков.количество()>0 тогда 
						Документы1С = Новый СписокЗначений;
						Для Каждого Элемент Из массивДоков Цикл
							Документы1С.Добавить(Элемент.Док1С);
							стр.Документы1С.Добавить(Элемент.Док1С);
						КонецЦикла;
						Вложение.Вставить("Документы1С", Документы1С);
						стр.Вставить("СуммаДокумента1С", 0);
						стр.Вставить("Дельта", 0);
						ДокументПроведен = ?(ДокументПроведен=-1,сбисИндексКартинкиПоДокументу1С(массивДоков[0].Док1С), ДокументПроведен);
						стр.Вставить("Проведен", ДокументПроведен);
					Иначе
						Вложение.Вставить("Документы1С",Новый СписокЗначений);
						стр.Вставить("СуммаДокумента1С", 0);
						Если Не стр.Свойство("Проведен") Тогда
							стр.Вставить("Проведен", -1);
						КонецЕсли;
						стр.Вставить("Дельта", 0);
						// << alo Меркурий
						массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("Ид, ИдВложения", стр.ИдСБИС, "") ) ;
						если массивДоков.количество()>0 тогда
							стр.Документы1С.Добавить(массивДоков[0].Док1С);
							стр.Вставить("Проведен", сбисИндексКартинкиПоДокументу1С(массивДоков[0].Док1С));
						конецесли;//  alo Меркурий >>
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			// << alo Меркурий
		Иначе
			массивДоков =  ТаблицаДокументов1С.найтиСтроки(Новый Структура("Ид, ИдВложения", стр.ИдСБИС, "") ) ;
			если массивДоков.количество()>0 тогда
				стр.Документы1С.Добавить(массивДоков[0].Док1С);	//	вручную сопоставленный документ без вложения
				стр.Вставить("Проведен", сбисИндексКартинкиПоДокументу1С(массивДоков[0].Док1С));
			конецесли;
			//  alo Меркурий >>
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ПолучитьИдДокументаДопСвойства(Знач СсылкаНаОбъект, Знач ДопПараметры) Экспорт
	//получаем идентификатор из доп.реквизитов
	ИмяРегистра = ИмяРегистраСвойствОбъектов(ДопПараметры.Конфигурация);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|    ЗначенияСвойствОбъектов.Значение
	|ИЗ
	|    РегистрСведений." + ИмяРегистра + " КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|    ЗначенияСвойствОбъектов.Объект = &Объект
	|    И ЗначенияСвойствОбъектов.Свойство.Наименование = &Свойство";

	Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Свойство", "ДокументСБИС_Ид"); 

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Значение;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции
&НаСервереБезКонтекста
Функция ИмяРегистраСвойствОбъектов(Знач ИниКонфигурация) Экспорт
	// возвращает имя регистра, где хранятся статусы и идентификаторы СБИС	
	Если ИниКонфигурация.Свойство("ИмяРегистраСвойствОбъектов") Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяРегистраСвойствОбъектов.Значение,"'","");
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ДополнительныеСведения")<>Неопределено Тогда
		Возврат "ДополнительныеСведения";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов")<>Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции
&НаСервереБезКонтекста
Функция ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация)
	// возвращает имя плана видов характеристик, где хранятся названия дополнительных свойств	
	Если ИниКонфигурация.Свойство("ИмяПланаВидовХарактеристикСвойствОбъектов") Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяПланаВидовХарактеристикСвойствОбъектов.Значение,"'","");
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения")<>Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов")<>Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции
&НаСервереБезКонтекста
Функция ИмяСправочникаСвойствОбъектов(ИниКонфигурация) Экспорт
	// возвращает имя справочника, где хранятся свойства для статусов контрагентов	
	Если ИниКонфигурация.Свойство("СправочникСвойствОбъектов") Тогда
		СправочникСвойствОбъектов = СтрЗаменить(ИниКонфигурация.СправочникСвойствОбъектов.Значение, "'","");
	Иначе
		СправочникСвойствОбъектов = "ЗначенияСвойствОбъектов";
	КонецЕсли;
	Возврат СправочникСвойствОбъектов;
КонецФункции
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	// преобразует массив структур в таблицу значений	
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции
//&НаСервереБезКонтекста
Функция сбисИндексКартинкиПоДокументу1С(Документ1С) Экспорт
	// Функция возвращает индекс картинки по статусу документа 1С	
	Попытка
		Если Документ1С.Проведен Тогда 
			Возврат 0;
		ИначеЕсли Документ1С.ПометкаУдаления Тогда 
			Возврат 2;
		Иначе
			Возврат 1;
		КонецЕсли;
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции
&НаСервереБезКонтекста
функция сбисПриоритетСтатуса(СтатусЭД)
	// Функция возвращает индекс картинки по статусу электронного документа	
	Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
		Возврат 0;
	ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
		Возврат 1;
	ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
		Возврат 2;
	ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
		Возврат 4;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
		Возврат 6;
	ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 Тогда                        // Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 7;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции
&НаСервереБезКонтекста
Функция НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН = Ложь) Экспорт
	// Функция ищет организацию или контрагента в базе 1С по ИНН/КПП
	ЮлОрг   = оУчастник.Свойство("СвЮЛ");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ?(ЮлОрг, оУчастник.СвЮЛ.ИНН, оУчастник.СвФЛ.ИНН));
	
	Если ЮлОрг и НЕ ТолькоПоИНН Тогда
		Запрос.УстановитьПараметр("КПП",оУчастник.СвЮЛ.КПП);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Участник.КПП=&КПП","");
	КонецЕсли;
	
	Если оУчастник.Свойство("Подразделение") и оУчастник.Подразделение.Свойство("Идентификатор") Тогда
		Запрос.УстановитьПараметр("КодФилиала",оУчастник.Подразделение.Идентификатор);
	Иначе
		Запрос.УстановитьПараметр("КодФилиала","");
	КонецЕсли;
	
	Если оУчастник.Свойство("GLN") Тогда
		Запрос.УстановитьПараметр("GLN",оУчастник.GLN);
	Иначе
		Запрос.УстановитьПараметр("GLN","");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		Возврат РезультатЗапроса.Ссылка;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции	
&НаСервереБезКонтекста
Функция НайтиКонтрагентаИзДокументаСБИС(Ини, оУчастник) Экспорт
	// Функция ищет контрагента в базе 1С по данным участника в универсальном формате
	Если Ини.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросКонтрагента.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Контрагенты.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;

	Возврат НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса);
КонецФункции
&НаСервереБезКонтекста
Функция сбисСообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	// Функция возвращает название реквизита для значений из файлов настроек (например, для [Документ].Контрагент)	
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1);	
КонецФункции
&НаСервереБезКонтекста
Функция сбисЗаполнитьСпособДоставкиКонтрагента(Контрагент, ИниКонфигурация) Экспорт
	// устанавливает значение параметра в регистре сведений	
	ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
	НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Контрагент);
	Свойство = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация)].НайтиПоНаименованию("СБИС_СпособДоставки").Ссылка;
	НаборЗаписей.Отбор.Свойство.Установить(Свойство);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.Объект = Контрагент;
		НоваяЗаписьНабора.Свойство = Свойство;
		СправочникСвойствОбъектов = ИмяСправочникаСвойствОбъектов(ИниКонфигурация);
		Выборка = Справочники[СправочникСвойствОбъектов].Выбрать(,Свойство,Новый Структура("Наименование", "Бумага, хочет ЭДО"));
		Если Выборка.Следующий() Тогда
			Попытка
				НоваяЗаписьНабора.Значение = Выборка.Ссылка;
				НаборЗаписей.Записать();
			Исключение
				Ошибка = ОписаниеОшибки();
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РазбитьСтрокуВМассив(Знач сбисСтрока, сбисРазделитель=".")
	Результат = Новый Массив();	
	МногоуровневаяСтрока = СтрЗаменить(сбисСтрока, сбисРазделитель, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(МногоуровневаяСтрока) Цикл 
		Результат.Добавить(СокрЛП(СтрПолучитьСтроку(МногоуровневаяСтрока, НомерСтроки)));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// << alo СтатусГос Список допустимых статусов Гос систем. Разделены комментариями с названием систем и типами документов. Повторяющиеся закоентарены
//	Маркировка
// Реализация по УПД
сбисСтатусГос.Добавить("Отправка в ГИС МТ","Начальное событие маркировки на реализациях по УПД");
сбисСтатусГос.Добавить("Коды подтверждены","Документ реализации был утвержден по ЭДО");
сбисСтатусГос.Добавить("Регистрация в ГИС МТ","Ожидаем получения успешной технической квитанции");
сбисСтатусГос.Добавить("Ошибка регистрации в ГИС МТ","В технической квитанции пришла ошибка");
// Поступления по УПД
сбисСтатусГос.Добавить("Оформлений в ГИС МТ","Начальное событие при получении маркировочного поступления по УПД");
сбисСтатусГос.Добавить("Коды отклонены","Документ поступления был отклонен по ЭДО");
сбисСтатусГос.Добавить("Коды утверждены","Документ поступления был утвержден по ЭДО");
//сбисСтатусГос.Добавить("Регистрация в ГИС МТ","Сделан запрос технической квитанции");
//сбисСтатусГос.Добавить("Ошибка регистрации в ГИС МТ","В технической квитанции пришла ошибка");
сбисСтатусГос.Добавить("Зарегистрировано в ГИС МТ","В технической квитанции пришел успех");
// Реализация по Тrue API
сбисСтатусГос.Добавить("Оформление в ГИС МТ","Начальное событие для реализации по True API. Документ наполняется наименованиями и редактируется");
сбисСтатусГос.Добавить("Оформлено","Редактирование документа завершено");
//сбисСтатусГос.Добавить("Отправка в ГИС МТ","Отправка документа в ГИС МТ по True API");
сбисСтатусГос.Добавить("Отправлено в ГИС МТ","Отправка завершено (переименовали пред. событие)");
//сбисСтатусГос.Добавить("Регистрация в ГИС МТ","Ожидаем утверждения / отклонения покупателем");
сбисСтатусГос.Добавить("Принято в ГИС МТ","Документ был утвержден покупателем ИЛИ успешно принят в ГИС МТ в случае реализации не участнику.");
сбисСтатусГос.Добавить("Не принято в ГИС МТ","Документ был отклонен покупателем / ГИС МТ");
// Поступление по True API
сбисСтатусГос.Добавить("Получено из ГИС МТ","Начальное событие для документа поступления, полученного по TrueAPI");
сбисСтатусГос.Добавить("Утверждение в ГИС МТ","Отправлен файл приёмки всех кодов маркировки");
сбисСтатусГос.Добавить("Утверждено в ГИС МТ","Файл приёмки был успешно обработан в ГИС МТ");
//сбисСтатусГос.Добавить("Не принято в ГИС МТ","Файл приёмки был отклонен ГИС МТ с ошибкой");
сбисСтатусГос.Добавить("Отклонение в ГИС МТ","Отправлен файл приёмки с отклонением всех кодов маркировки");
сбисСтатусГос.Добавить("Отклонено в ГИС МТ","Файл приёмки с отклонением был успешно обработан в ГИС МТ");
// Заказ Документ исходящего заказа используется для заказа кодов маркировки у ГИС МТ в сценариях импорта маркированной продукции
//не нужно сбисСтатусГос.Добавить("Оформление заказа кодов ГИС МТ для импорта","Начальное событие для документа. Закрывается, только после успешного заказа кодов на все позиции документа");
сбисСтатусГос.Добавить("Регистрация заказа кодов в ГИС МТ","Отправлен заказ кодов в ГИС МТ");
сбисСтатусГос.Добавить("Зарегистрирован заказ кодов в ГИС МТ","Заказ кодов успешно обработан в ГИС МТ по части или всем позициям документа");
сбисСтатусГос.Добавить("Ошибка при регистрация заказа кодов в ГИС МТ","При регистарции заказа не смогли доставить заказ в ГИС МТ или ГИС МТ обработал заказ с ошибкой");
сбисСтатусГос.Добавить("Регистрация упаковок","Будет в документах, по которым пользователь упаковывает полученные коды из документа заказа. Упаковка доступна только после успешной регистрации всего заказа.");
сбисСтатусГос.Добавить("Упаковки зарегистрированы","Упаковки были успешно зарегистрированы запросами агрегации в ГИС МТ");
сбисСтатусГос.Добавить("Ошибка при регистрации упаковок","Не смогли доставить до ГИС МТ запрос на регистрацию упаковок");
сбисСтатусГос.Добавить("Упаковки не зарегистрированы","Упаковки не были зарегистрированы в ГИС МТ");
сбисСтатусГос.Добавить("Инициирован заказ марок из внешней системы","Событие, создание которого иницирует робот внешней обработки после успешного заказа кодов маркировки");
// Импортное поступление 
//не нужно сбисСтатусГос.Добавить("Оформление импорта в ГИС МТ","Начальное событие для документа. Закрывается, только после успешного ввода в оборот");
сбисСтатусГос.Добавить("Ввод в оборот в ГИС МТ","Ввод в оборот отправлен в ГИС МТ");
сбисСтатусГос.Добавить("Ввод в оборот незарегистрирован","Ввод в оборот обработан в ГИС МТ с ошибкой или не доставлен до ГИС МТ");
сбисСтатусГос.Добавить("Ввод в оборот зарегистрирован","Ввод в оборот успешно зарегистрирован");
// Производство
//не нужно сбисСтатусГос.Добавить("Оформление в ГИС МТ","Начальное событие для документа. Закрывается, только после успешного ввода в оборот кодов");
сбисСтатусГос.Добавить("Получение КМ","Отправлен заказ кодов в ГИС МТ");
сбисСтатусГос.Добавить("Получены КМ","Заказ кодов успешно обработан в ГИС МТ по части или всем позициям документа");
сбисСтатусГос.Добавить("Ошибка при получении КМ","При регистарции заказа не смогли доставить заказ в ГИС МТ или ГИС МТ обработал заказ с ошибкой");
сбисСтатусГос.Добавить("Регистрация упаковок","Отправлен запрос регистрации упаковок в ГИС МТ. Для всех упаковок, заведенных в документах производства, происходит автоматическая регистрация этих упаковок в ГИС МТ");
сбисСтатусГос.Добавить("Упаковки зарегистрированы","Упаковки были успешно зарегистрированы запросами агрегации в ГИС МТ");
сбисСтатусГос.Добавить("Ошибка при регистрации упаковок","Не смогли доставить до ГИС МТ запрос на регистрацию упаковок");
сбисСтатусГос.Добавить("Упаковки не зарегистрированы", "Упаковки не были зарегистрированы в ГИС МТ");
сбисСтатусГос.Добавить("Ввод в оборот в ГИС МТ", "Ввод в оборот отправлен в ГИС МТ");
сбисСтатусГос.Добавить("Ввод в оборот зарегистрирован", "Ввод в оборот успешно зарегистрирован");
сбисСтатусГос.Добавить("Ввод в оборот незарегистрирован", "Ввод в оборот обработан в ГИС МТ с ошибкой или не доставлен до ГИС МТ");
// Списания	Данные события принимаются и для табачной продукции
сбисСтатусГос.Добавить("Оформление списания для ГИС МТ", "Начальное событие или событие после получения ошибки от ГИС МТ. Документ можно редкатировать");
//сбисСтатусГос.Добавить("Отправка в ГИС МТ", "Происходит отправка документа в ГИС МТ");
сбисСтатусГос.Добавить("Оформлено списание в ГИС МТ", "Документс cписания был успешно зарегистрирован в ГИС МТ");
сбисСтатусГос.Добавить("Отклонено в ГИС", "Документ был отклонет с ошибкой в ГИС МТ или не смогли успешно отправить. После него будет новое начальное событие");
сбисСтатусГос.Добавить("Нет маркировок", "После добавления/удаления наименований документ перестает быть маркированным");

//	Маркировка лекарств	
// Реализация прямым порядком и реализация в ЕАЭС
сбисСтатусГос.Добавить("Оформление для МДЛП", "Начальное событие для реализации прямым порядком");
сбисСтатусГос.Добавить("Оформлено для МДЛП", "Пользователь завершил оформление (переименование пред события)");
сбисСтатусГос.Добавить("Нет маркированных лекарств", "Если пользователь оформил документ с лекарствами и принял решение, что кодов маркировки в нем не будет");
сбисСтатусГос.Добавить("Подтверждение кодов покупателем", "Ожидания ответа из ГИС МТ о решении покупателя");
сбисСтатусГос.Добавить("Подтверждено в МДЛП", "Реализация была подтверждена");
сбисСтатусГос.Добавить("Покупатель отклонил коды", "Реализация была отклонена покупателем");
сбисСтатусГос.Добавить("Ошибка регистрации в МДЛП", "Документ был обработан с ошибкой в МДЛП");
// Поступления прямым порядком
сбисСтатусГос.Добавить("Подтверждение в МДЛП", "Начальное событие для лекарственного поступления прямым порядком");
//сбисСтатусГос.Добавить("Подтверждено в МДЛП", "Документ подтвержден в МДЛП");
сбисСтатусГос.Добавить("Ошибка подтверждения в МДЛП", "Документ подтверждения был отклонен в МДЛП с ошибкой");
сбисСтатусГос.Добавить("Отклонение в МДЛП", "Отправка отклонения документа в МДЛП");
сбисСтатусГос.Добавить("Отклонено в МДЛП", "Отклонение документа обработано в МДЛП");
// Реализации обратным порядком
//сбисСтатусГос.Добавить("Оформление для МДЛП", "Начальное событие для лекарственных реализаций созданных руками
сбисСтатусГос.Добавить("Подтвердить в МДЛП", "Начальное событие для реализаций, полученных по обратному порядку из МДЛП");
//сбисСтатусГос.Добавить("Подтверждение в МДЛП", "Отправка подтверждения реализации обратным порядком в МДЛП");
//сбисСтатусГос.Добавить("Подтверждено в МДЛП", "Документ подтверждения успешно обработан в МДЛП");
//сбисСтатусГос.Добавить("Ошибка подтверждения в МДЛП", "Документ подтверждения обработан в МДЛП с ошибкой");
сбисСтатусГос.Добавить("Отклонение в МДЛП", "Документ реализации по обратному порядку отправлен на отклонением");
//сбисСтатусГос.Добавить("Отклонено в МДЛП", "Отклонение документа реализации по обратному порядку успешно обработан МДЛП");
сбисСтатусГос.Добавить("Ошибка отклонения в МДЛП", "Отклонение документа не принято в МДЛП");
// Поступления обратным порядком
//сбисСтатусГос.Добавить("Оформление для МДЛП", "Начальное событие для поступления обратным порядком");
//сбисСтатусГос.Добавить("Оформлено для МДЛП", "Пользователь завершил оформление");
сбисСтатусГос.Добавить("Подтверждение   кодов поставщиком", "Ожидание ответа из ГИС МТ о решении поставщика");
сбисСтатусГос.Добавить("Подтверждение кодов поставщиком", "Ожидание ответа из ГИС МТ о решении поставщика");
сбисСтатусГос.Добавить("Утверждено в МДЛП", "Поставщик утвердил документ");
сбисСтатусГос.Добавить("Поставщик отклонил коды", "Поставщик отклонил документ");
сбисСтатусГос.Добавить("Ошибка регистрации в МДЛП", "Документ был обработан в МДЛП с ошибкой");
сбисСтатусГос.Добавить("Нет маркированных лекарств", "Если пользователь оформил документ с лекарствами и принял решение, что кодов маркировки в нём не будет");
// Списания
сбисСтатусГос.Добавить("Оформление списания для МДЛП", "Начальное событие для лекарственных списаний");
сбисСтатусГос.Добавить("Регистрация в МДЛП", "Документ был отправлен на регистрацию в момент, когда регистратор выбытия не работал");
сбисСтатусГос.Добавить("Зарегистрировано в МДЛП", "Документ списания зарегистрирован в МДЛП");
//сбисСтатусГос.Добавить("Ошибка регистрации в МДЛП", "Документ был отклонен в МДЛП или не смогли отправить");
сбисСтатусГос.Добавить("Регистрация через РВ", "Документ был отправлен на регистрацию в МДЛП через РВ");
сбисСтатусГос.Добавить("Нет маркированных лекарств", "После добавления/удаления лекарственных наименований или по решению пользователя пометили документ как не требующий отправки в МДЛП");

// Меркурий		Для Меркурия концепция событий работает не как для остальных документов. Документы обрабатываются по наименованиям. У каждого наименования свой статус. Итоговые статусы по наименованиям влияют на статус документа, при этом событие для документа только одно. 
//Реализация
сбисСтатусГос.Добавить("Оформление в ИС Меркурий", "Основное событие по документу. Если событие активно, то документ обрабатывается. В нём могут быть часть ВСД отправлена, часть нет.");
сбисСтатусГос.Добавить("Оформление ВСД", "Количество этих событий зависит от того, частично обрабатывается документ или нет. Пример. В документе 3 ВСД, Пользователь отправляет первую. В ленте появляется событие Оформление ВСД. Если по первой придет ответ, до того как пользователь обработает вторую, то событие закроется. И при отправке второй - создастся новое событие Оформление ВСД. Если вторую обработают, до того как придет ответ по первой, то вторая будет относиться к этому же событию");
сбисСтатусГос.Добавить("Аннулирование ВСД", "Работает по тому же принципу что и Оформление ВСД. Если аннулируют документ, по которому все ВСД обработаны, то будет создано новое событие Оформление в ИС Меркурий");
// Поступление
сбисСтатусГос.Добавить("Оформление в ИС Меркурий", "Основное событие по документу. Если событие активно, то документ обрабатывается. В нём могут быть часть ВСД погашена, часть отклонена, часть не обработана.");
сбисСтатусГос.Добавить("Гашение ВСД", "Событие по наименованиям. Работает по принципам, описанным для реализаций.");
// alo СтатусГос Список >>