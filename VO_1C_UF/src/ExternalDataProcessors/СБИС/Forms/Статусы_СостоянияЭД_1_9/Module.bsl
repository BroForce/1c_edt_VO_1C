//Форма исключительно для УФ

&НаСервереБезКонтекста
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	// дублирует статусы по идентификаторам пакетов при получении списка изменений
	Для Каждого СоставПакета Из МассивДокументов Цикл
		Если СоставПакета.Свойство("Документы1С") Тогда  
			Для Каждого Строка Из СоставПакета.Документы1С Цикл
				ДублироватьСостояние(СоставПакета, Строка.значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам,Ини,КаталогНастроек) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		СоставПакета=новый структура("Состояние",новый структура());
		СоставПакета.Состояние.вставить("Название",Элемент.СтруктураСвойств.ДокументСБИС_Статус);
		СоставПакета.вставить("Идентификатор", 	Элемент.СтруктураСвойств.ДокументСБИС_Ид);
		ДублироватьСостояние(СоставПакета, Элемент.Документ1С);
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
функция ДублироватьСостояние(СоставПакета, ДокСсылка, XMLДокумента=неопределено, СтруктураФайла=неопределено) экспорт
	ПараметрыЭД = Новый Структура("Тип,Направление,Организация,Контрагент,ДоговорКонтрагента,СоглашениеЭД,Партнер,ФормированиеУниверсальногоДокумента");
	ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(ДокСсылка, ПараметрыЭД); // будут обработаны только те документы, которые поддерживает конфигурация
	
	ПараметрыПоиска = Новый Структура("ТипДокумента,ПрикладнойТипДокумента,ИдентификаторОбъектаУчета,ИдентификаторКомандыПечати", 
						ПараметрыЭД.Тип, ИнтеграцияЭДО.ПустойПрикладнойТипЭлектронногоДокумента(),
						ИнтеграцияБСПБЭД.ПустойИдентификаторОбъектаМетаданных(), "");
	ПараметрыЭД.Вставить("ВидДокумента",НайтиВидДокумента(ПараметрыПоиска));
	
	Если не СоставПакета.Свойство("Направление")  Тогда
		СоставПакета.Вставить("Направление", ПараметрыЭД.Направление);
	КонецЕсли;
	
    если значениеЗаполнено(ПараметрыЭД.Организация) И значениеЗаполнено(ПараметрыЭД.Контрагент)тогда
    	ИдентификаторОператора = "2BE";
    	ИдентификаторОрганизации= ПараметрыЭД.Организация.ИНН+"_"+ПараметрыЭД.Организация.КПП;
    	ИдентификаторКонтрагента= ПараметрыЭД.Контрагент.ИНН+"_"+ПараметрыЭД.Контрагент.КПП;
    	СпособОбменаЭД= Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;     
  
		Набор = РегистрыСведений.УчетныеЗаписиЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ИдентификаторЭДО.Установить(ИдентификаторОрганизации);
		Набор.Прочитать();
		Если ЗначениеЗаполнено(Набор) Тогда
			Для Каждого Запись из Набор Цикл // поддержка совместимости с обработками версии 36 и ниже
				Если Запись.СпособОбменаЭД <> СпособОбменаЭД Тогда
					Запись.СпособОбменаЭД = СпособОбменаЭД;
					Набор.Записать();
				КонецЕсли;
			КонецЦикла;
		Иначе
			Запись = Набор.Добавить();
			Запись.ИдентификаторЭДО = ИдентификаторОрганизации;
			Запись.Организация = ПараметрыЭД.Организация;
			Запись.СпособОбменаЭД = СпособОбменаЭД;
			Запись.ОператорЭДО                    = ИдентификаторОператора;
			Запись.НаименованиеУчетнойЗаписи      = "СБИС";
			Запись.ПринятыУсловияИспользования    = "Истина";
			Набор.Записать();
		Конецесли;
		
		ОписаниеОбъектаУчета = ИнтеграцияЭДО.ОписаниеОбъектаУчета(ДокСсылка);
		Если СоставПакета.Направление =  "Исходящий" Тогда
			КлючНастроек = ЭлектронныеДокументыЭДО.КлючНастроекОтправкиОбъектаУчета(ОписаниеОбъектаУчета);
			НастройкиОтправки = НастройкиЭДО.НастройкиОтправки(КлючНастроек);
		
			Если НастройкиОтправки = Неопределено Тогда
				НастройкиОтправки = НастройкиЭДО.СоздатьНастройкиИнтеркампани(КлючНастроек);
			КонецЕсли;
			ЭлектронныйДокумент = "ЭлектронныйДокументИсходящийЭДО";
		Иначе
			КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
			КлючНастроек.ВидДокумента = ПараметрыЭД.ВидДокумента;
			КлючНастроек.ИдентификаторОтправителя = ИдентификаторКонтрагента;
			КлючНастроек.ИдентификаторПолучателя =	ИдентификаторОрганизации;
			КлючНастроек.Отправитель 			= 	ПараметрыЭД.Контрагент; 
			КлючНастроек.Получатель 			= 	ПараметрыЭД.Организация;
			НастройкиОтраженияВУчете = НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроек);
			Если НастройкиОтраженияВУчете = Неопределено Тогда
				НастройкиОтраженияВУчете = НастройкиЭДО.СоздатьНастройкиОтраженияВУчете(КлючНастроек);
			КонецЕсли;
			ЭлектронныйДокумент = "ЭлектронныйДокументВходящийЭДО";
		КонецЕсли;
		ЭлектронныйДокумент = СоздатьЭлектронныйДокумент(ДокСсылка, ЭлектронныйДокумент, СоставПакета, СпособОбменаЭД,
				ПараметрыЭД, ИдентификаторОрганизации, ИдентификаторКонтрагента, XMLДокумента, СтруктураФайла);
		
		УстановитьСостояние(СоставПакета.Состояние.Название, ПараметрыЭД, ДокСсылка, ЭлектронныйДокумент);
	конецесли;
конецфункции

&НаСервереБезКонтекста
Функция СоздатьЭлектронныйДокумент(ДокСсылка, ЭлектронныйДокументНаправление, СоставПакета, 
				СпособОбменаЭД, ПараметрыЭД, ИдентификаторОрганизации, ИдентификаторКонтрагента, 
				XMLДокумента, СтруктураФайла)
	НаборОбъектовУчета = Новый Массив;
	НаборОбъектовУчета.Добавить(ДокСсылка);
	
	Если ЗначениеЗаполнено(XMLДокумента) Тогда
		Поток = Новый ПотокВПамяти;
		Кодировка = ?(СтрНайти(XMLДокумента,"windows"), КодировкаТекста.ANSI, КодировкаТекста.UTF8);
		ЗаписьТекста = Новый ЗаписьТекста(Поток, Кодировка);
		ЗаписьТекста.Записать(XMLДокумента);
		ЗаписьТекста.Закрыть();
		
		ОписаниеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ОписаниеФайла.ИмяФайла = "Сбис.xml";
		ОписаниеФайла.ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные(); //ПолучитьИзВременногоХранилища(ПараметрыФайла.АдресХранилища);
				
		ПараметрыСоздания = Новый Структура("НомерДокумента,ДатаДокумента, СуммаДокумента,ВидДокумента",
							"",Дата(1,1,1),0, неопределено);
		ПараметрыСоздания.Вставить("ИдентификаторПакета", СоставПакета.Идентификатор);
		ПараметрыСоздания.Вставить("Организация", ПараметрыЭД.Организация);
		ПараметрыСоздания.Вставить("Контрагент", ПараметрыЭД.Контрагент);
		ПараметрыСоздания.Вставить("Договор", ПараметрыЭД.ДоговорКонтрагента);
		ПараметрыСоздания.Вставить("ОбъектыУчета", НаборОбъектовУчета);
		
		Результат = ЭлектронныеДокументыЭДО.СоздатьДокументПоФайлу(ПараметрыСоздания, ОписаниеФайла);
		Если Результат.Успех Тогда
			СсылкаНаВладельца = Результат.ЭлектронныйДокумент;
		Иначе 
			сообщить("Не удалось создать электронный документ. Возможно в настройках 1С не включен обмен электронными документами.");
		КонецЕсли;
	Иначе                          
		// воспользоваться готовой точкой входа не удается - нет сформированого пакета 
		Название = ?(СоставПакета.свойство("Название"),"СБИС "+СоставПакета.Название,"СБИС электронный документ");
		запрос=новый запрос("ВЫБРАТЬ
		                    |	ЭД.Ссылка КАК Ссылка
		                    |ИЗ
		                    |	Документ."+ЭлектронныйДокументНаправление+".ИдентификаторыОснований КАК ЭД
		                    |ГДЕ
		                    |	ЭД.Ссылка.ИдентификаторДокументооборота = &ИдентификаторДокументооборота
							|	И ЭД.ИдентификаторСвязи = &ДокументОснование");
		запрос.Параметры.Вставить("ИдентификаторДокументооборота", СоставПакета.Идентификатор);
		запрос.Параметры.Вставить("ДокументОснование", ДокСсылка);
		результат=запрос.Выполнить().Выбрать();
		если результат.Следующий() тогда
			СсылкаНаВладельца =  результат.ссылка;
		иначе
			НовыйЭлектронныйДокумент = Документы[ЭлектронныйДокументНаправление].СоздатьДокумент();
			НовыйЭлектронныйДокумент.Организация			= 	ПараметрыЭД.Организация;
			НовыйЭлектронныйДокумент.Контрагент 			=	ПараметрыЭД.Контрагент;
			НовыйЭлектронныйДокумент.ИдентификаторКонтрагента = ИдентификаторКонтрагента;
			НовыйЭлектронныйДокумент.ИдентификаторОрганизации = ИдентификаторОрганизации;
			НовыйЭлектронныйДокумент.СпособОбмена           =	СпособОбменаЭД;
			НовыйЭлектронныйДокумент.ВидДокумента 			=	ПараметрыЭД.ВидДокумента;
			НовыйЭлектронныйДокумент.Дата= ?(СоставПакета.свойство("Дата"),СоставПакета.Дата,ДокСсылка.Дата); //- дата электронного документа в информационной базе отправителя.
			НовыйЭлектронныйДокумент.ДатаДокумента			=	НовыйЭлектронныйДокумент.Дата;
			НовыйЭлектронныйДокумент.НомерДокумента = ?(СоставПакета.свойство("Номер"),СоставПакета.Номер,ДокСсылка.Номер); // номер электронного документа в информационной базе отправителя.
			НовыйЭлектронныйДокумент.ИдентификаторДокументооборота	= СоставПакета.Идентификатор;
			НовыйЭлектронныйДокумент.ТипРегламента = Перечисления.ТипыРегламентовЭДО.Формализованный;
			НовыйЭлектронныйДокумент.Комментарий= Название + ?(СоставПакета.свойство("Примечание")," "+СоставПакета.Примечание,"");
			Ответственный = ПараметрыСеанса.ТекущийПользователь;
			Попытка
				ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыЭД.Контрагент, ПараметрыЭД.Организация, неопределено, Ответственный);
			Исключение
			КонецПопытки;	
			НовыйЭлектронныйДокумент.Ответственный= Ответственный; // хорошо бы взять из СоставПакета.Ответственный
			если СоставПакета.Состояние.свойство("Примечание") тогда
				НовыйЭлектронныйДокумент.ПричинаОстановки = СоставПакета.Состояние.Примечание;
			конецесли;

			НоваяСтрока = НовыйЭлектронныйДокумент.ИдентификаторыОснований.Добавить();
			НоваяСтрока.ИдентификаторСвязи = ДокСсылка;
			НоваяСтрока.ИдентификаторДокументооборота = НовыйЭлектронныйДокумент.ИдентификаторДокументооборота;
		
			НовыйЭлектронныйДокумент.Записать();
			СсылкаНаВладельца = НовыйЭлектронныйДокумент.ссылка;
		Конецесли;
		ИнтеграцияЭДО.УстановитьАктуальныйЭлектронныйДокумент(НаборОбъектовУчета, СсылкаНаВладельца, СсылкаНаВладельца.ВидДокумента);
	КонецЕсли;
	// << alo Загрузка маркировки
	Если ЗначениеЗаполнено(СтруктураФайла) И СтруктураФайла.Свойство("Файл") 
			И СтруктураФайла.Файл.Свойство("Документ") И СтруктураФайла.Файл.Документ.Свойство("ТаблДок")
			И СтруктураФайла.Файл.Документ.ТаблДок.Свойство("СтрТабл") Тогда
		Для Каждого СтрокаТовара Из СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл Цикл
			Если СтрокаТовара.Свойство("Номенклатура") И СтрокаТовара.Свойство("Название") Тогда
				ЕдИзм = ?(СтрокаТовара.Свойство("ЕдИзм"),СтрокаТовара.ЕдИзм,"");
				Идентификатор = ВРег(СтрЗаменить(СтрокаТовара.Название+"##"+ЕдИзм," ", ""));
				ХарактеристикаНоменклатуры = ?(СтрокаТовара.Свойство("ХарактеристикиНоменклатуры"),СтрокаТовара.ХарактеристикиНоменклатуры,"");
				ОписаниеНоменклатурыИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
											СтрокаТовара.Номенклатура, ХарактеристикаНоменклатуры);
				Партнеры=Ложь;
				Попытка
					Партнеры= (Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.тип.типы().Найти(Тип("СправочникСсылка.Партнеры"))<> неопределено);
				Исключение
				КонецПопытки;
				ОписаниеНоменклатурыКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
													?(Партнеры, ПараметрыЭД.Контрагент.Партнер, ПараметрыЭД.Контрагент), Идентификатор);
				ОписаниеНоменклатурыКонтрагента.Наименование =                       СтрокаТовара.Название;
				//ОписаниеНоменклатурыКонтрагента.ИдентификаторНоменклатурыСервиса =   Идентификатор;
				ОписаниеНоменклатурыКонтрагента.ИдентификаторХарактеристикиСервиса = ?(СтрокаТовара.Свойство("Характеристика"),СтрокаТовара.Характеристика,"");
				ОписаниеНоменклатурыКонтрагента.ЕдиницаИзмерения =                   ЕдИзм;
				
				СопоставлениеНоменклатурыКонтрагентов.УстановитьСоответствиеНоменклатуры(ОписаниеНоменклатурыКонтрагента, ОписаниеНоменклатурыИБ);
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	возврат СсылкаНаВладельца;
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьСостояние(СтатусЭД, ПараметрыЭД, ДокСсылка, ЭлектронныйДокумент)
	СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.НеСформирован;
	Попытка
		Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
		ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяОтветНаПриглашение;
		ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяИзвещениеОПолучении;
		ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ЗакрытСОшибкойПередачи;
		ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
			Если ПараметрыЭД.Тип = перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Или 
					ПараметрыЭД.Тип = перечисления.ТипыДокументовЭДО.СчетФактура Тогда
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
			иначе
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОжидаетсяПодтверждение;
			конецесли;
		ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда	// Отклонен
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ЗакрытСОтклонением;
		ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда	// Утвержден
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ОбменЗавершен;
		ИначеЕсли Найти(нрег(СтатусЭД), "в обработке")=1 Тогда                        
			Если ПараметрыЭД.Направление = перечисления.НаправленияЭДО.Исходящий Тогда
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ТребуетсяОтправка;
			Иначе
				СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ТребуетсяУтверждение;
			КонецЕсли;
		ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 Тогда	// Удален контрагентом
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.Аннулирован;
		ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда	// Удален мной
			СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ЗакрытПринудительно;
		КонецЕсли;
	исключение // Вероятно Какое- то из перечислений оказалось не определено
		СостояниеДокументовЭДО = перечисления.СостоянияДокументовЭДО.ТребуетсяУточнение;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	УстановитьСостояниеЭлектронногоДокументаОбъектаУчета(ДокСсылка, СостояниеДокументовЭДО);
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ЗаписатьСостояниеДокумента(ЭлектронныйДокумент, СостояниеДокументовЭДО, СтатусЭД, ЭлектронныйДокумент.Дата, "ЭДО СБИС");
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьСостояниеЭлектронногоДокументаОбъектаУчета(Знач ОбъектУчета, Знач Состояние)   //общий модуль ИнтеграцияЭДО
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.СостоянияПоОбъектамУчетаЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(ОбъектУчета);
		
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		
		Набор.Прочитать();
		
		Если Не ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор.Добавить();
			Запись.СсылкаНаОбъект = ОбъектУчета;
		КонецЕсли;
		
		Для каждого Запись Из Набор Цикл
			
			Запись.СостояниеЭДО = Состояние;
			Запись.ПредставлениеСостояния = ИнтеграцияЭДО.ПредставлениеСостоянияЭДООбъектаУчета(ОбъектУчета, Состояние);
			
		КонецЦикла;
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ИмяСобытия = НСтр("ru = 'Запись информации о состоянии актуального электронного документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСостояниеДокумента(ЭлектронныйДокумент, Состояние, СостояниеДополнение, ДатаИзменения, Комментарий = "")
	МенеджерЗаписи = РегистрыСведений.СостоянияДокументовЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;
	МенеджерЗаписи.Состояние = Состояние;
	МенеджерЗаписи.СостояниеДополнение = СостояниеДополнение;
	МенеджерЗаписи.ДатаИзменения = ДатаИзменения;
	МенеджерЗаписи.Комментарий = Комментарий;
	МенеджерЗаписи.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиВидДокумента(ПараметрыПоиска)    //общий модуль ИнтеграцияЭДО
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыДокументовЭДО.Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовЭДО КАК ВидыДокументовЭДО
		|ГДЕ
		|	ВидыДокументовЭДО.ТипДокумента = &ТипДокумента
		|	И ВидыДокументовЭДО.ПрикладнойТипДокумента = &ПрикладнойТипДокумента
		|	И ВидыДокументовЭДО.ИдентификаторКомандыПечати = &ИдентификаторКомандыПечати
		|	И ВидыДокументовЭДО.ИдентификаторОбъектаУчета = &ИдентификаторОбъектаУчета";
	
	Запрос.УстановитьПараметр("ТипДокумента", ПараметрыПоиска.ТипДокумента);
	Запрос.УстановитьПараметр("ПрикладнойТипДокумента", ПараметрыПоиска.ПрикладнойТипДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОбъектаУчета", ПараметрыПоиска.ИдентификаторОбъектаУчета);
	Запрос.УстановитьПараметр("ИдентификаторКомандыПечати", ПараметрыПоиска.ИдентификаторКомандыПечати);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
