&НаСервереБезКонтекста
Процедура ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Ини, КаталогНастроек) Экспорт
	// дублирует статусы по идентификаторам пакетов при получении списка изменений
	Для Каждого СоставПакета Из МассивДокументов Цикл
		Если СоставПакета.Свойство("Документы1С") Тогда  
			Для Каждого Строка Из СоставПакета.Документы1С Цикл
				ДублироватьСостояние(СоставПакета, Строка.значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры
&НаСервереБезКонтекста
Функция ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам,Ини,КаталогНастроек) Экспорт
	// добавляет свойства для документа 1С (при сопоставлении и загрузке документов)	
	Для Каждого Элемент Из ДанныеПоСтатусам Цикл
		СоставПакета=новый структура("Состояние",новый структура());
		СоставПакета.Состояние.вставить("Название",Элемент.СтруктураСвойств.ДокументСБИС_Статус);
		СоставПакета.вставить("Идентификатор", 	Элемент.СтруктураСвойств.ДокументСБИС_Ид);
		ДублироватьСостояние(СоставПакета, Элемент.Документ1С);
	КонецЦикла;
КонецФункции
&НаСервереБезКонтекста
Функция УдалитьПараметрыДокументаСБИС(СтруктураПараметровДокументаСБИС,ДокументСсылка,Ини,КаталогНастроек) Экспорт
	если Метаданные.РегистрыСведений.Найти("СостоянияЭД")<>Неопределено тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ДокументСсылка);
		НаборЗаписей.Записать();
		если метаданные.Документы.Найти("ЭлектронныйДокументИсходящий")<> неопределено И 
				метаданные.Документы.Найти("ЭлектронныйДокументВходящий")<> неопределено тогда // новые конфигурации 
			Если СтруктураПараметровДокументаСБИС.свойство("направление") И СтруктураПараметровДокументаСБИС.направление = "Входящий" Тогда
				ДокументНаправление = "ЭлектронныйДокументВходящий";
			Иначе	//СоставПакета.направление = "Исходящий" 
				ДокументНаправление = "ЭлектронныйДокументИсходящий";
			КонецЕсли;
			запрос=новый запрос("ВЫБРАТЬ
			                    |	ЭД.Ссылка КАК Ссылка
			                    |ИЗ
			                    |	Документ."+ДокументНаправление+" КАК ЭД
			                    |ГДЕ
								|	ЭД.ДокументыОснования.ДокументОснование = &ДокументОснование");
			запрос.Параметры.Вставить("ДокументОснование", ДокументСсылка);
			результат=запрос.Выполнить().Выбрать();
			если результат.Следующий() тогда
				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(результат.ссылка);
				НаборЗаписей.Записать();
				
				ЭлектронныйДокумент =  результат.ссылка.ПолучитьОбъект();
				ЭлектронныйДокумент.УстановитьПометкуУдаления(истина, истина);
			конецесли;
		конецесли;
	конецесли;
КонецФункции

&НаСервереБезКонтекста
функция ДублироватьСостояние(СоставПакета, ДокСсылка, XMLДокумента=неопределено, СтруктураФайла=неопределено) экспорт
	если Метаданные.РегистрыСведений.Найти("СостоянияЭД")<>Неопределено И Метаданные.справочники.Найти("СоглашенияОбИспользованииЭД")<>Неопределено тогда
		СтатусЭД= СоставПакета.Состояние.Название;
		СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.НеСформирован;
		соглашение=неопределено;
		
		НастройкиЭД =ОпределитьНастройкиОбменаЭДПоИсточнику(ДокСсылка, ложь);
		если НастройкиЭД= ложь тогда
			возврат ложь;
		Конецесли;	
//ВерсияРегламентаЭДО	2.0	ПеречислениеСсылка.ВерсииРегламентаОбмена1С
//ВерсияФормата	"ФНС 5.01 (с 2016г.)"	Строка
//ВерсияФорматаПакета	Версия 3.0	ПеречислениеСсылка.ВерсииФорматаПакетаЭД
//ВидЭД	Товарная накладная	ПеречислениеСсылка.ВидыЭД
//ЗапомнитьПарольКСертификату	Ложь	Булево
//ЗапомнитьПарольКСертификатуОрганизацииПолучателя	Ложь	Булево
//ИдентификаторКонтрагента	"6000000001_600101001"	Строка
//ИдентификаторОрганизации	"6000000114_600101001"	Строка
//КаталогВходящихДокументов,КаталогВходящихДокументовFTP,КаталогИсходящихДокументов,КаталогИсходящихДокументовFTP	""	Строка
//Контрагент	ООО "Поставщик"	СправочникСсылка.Контрагенты
//НаправлениеЭД	Исходящий	ПеречислениеСсылка.НаправленияЭД
//НастройкаЭДОДействует	Истина	Булево
//ОбщийРесурсВходящихДокументов	Системная учетная запись	СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
//ОжидатьКвитанциюОДоставке	Истина	Булево
//Организация	Покупатель ООО	СправочникСсылка.Организации
//ПарольОрганизацииПолучателяПолучен	Ложь	Булево
//ПарольПолучен	Ложь	Булево
//ПарольПользователя		Null
//ПарольПользователяОрганизацииПолучателя		Null
//Подписывать	Ложь	Булево
//Приоритет	0	Число
//ПрофильНастроекЭДО	Покупатель ООО, Через электронную почту	СправочникСсылка.ПрофилиНастроекЭДО
//РесурсВходящихДокументов		Неопределено
//РесурсИсходящихДокументов	""	Строка
//СертификатДоступен	Ложь	Булево
//СертификатКонтрагентаДляШифрования	ХранилищеЗначения	ХранилищеЗначения
//СертификатОрганизацииДляПодписи,СертификатОрганизацииДляПодтверждения,СертификатОрганизацииДляРасшифровки,СертификатОрганизацииПолучателяДляПодписи		СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//СоглашениеЭД	ООО "Поставщик"	СправочникСсылка.СоглашенияОбИспользованииЭД
//СпособОбменаЭД	Через электронную почту	ПеречислениеСсылка.СпособыОбменаЭД
//ТребуетсяИзвещение	Истина	Булево
//ТребуетсяПодтверждение	Ложь	Булево
//ЭлектроннаяПочтаКонтрагента	"sdf@asf.ru"	Строка
		если не значениеЗаполнено(НастройкиЭД) тогда
			соглашение=СоздатьНастройкиЭДО(ДокСсылка);
			если соглашение <> неопределено тогда
				НастройкиЭД= ОпределитьНастройкиОбменаЭДПоИсточнику(ДокСсылка); 
			конецесли;
		иначе
			Соглашение=НастройкиЭД.СоглашениеЭД;
			попытка
				Если Соглашение.СостояниеСоглашения = Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости 
						И СоставПакета.свойство("Событие") Тогда // подтверждение технической совместимости
					ОбъектСоглашение= Соглашение.ПолучитьОбъект();
					ОбъектСоглашение.СостояниеСоглашения=Перечисления.СостоянияСоглашенийЭД.Действует;
					ОбъектСоглашение.Записать();
				конецесли;
			исключение
			конецпопытки;
		конецесли;
		если значениеЗаполнено(НастройкиЭД) тогда
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ДокСсылка);
			НаборЗаписей.Прочитать();
			если НаборЗаписей.Количество()>0 тогда
				НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			иначе
				НоваяЗаписьНабора = НаборЗаписей.Добавить();
				НоваяЗаписьНабора.СсылкаНаОбъект=ДокСсылка;
			конецесли;
			попытка
				Если Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 Тогда     // Выгружен или загружен на сервер
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					статусФайла=перечисления.СтатусыЭД.ПереданОператору;
				ИначеЕсли Найти(нрег(СтатусЭД), "отослано приглашение")=1 Тогда      // Отправлено приглашение
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ПригласитьКОбмену;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					статусФайла=перечисления.СтатусыЭД.ОтправленоИзвещение;
				ИначеЕсли Найти(нрег(СтатусЭД), "отправлен")=1 Тогда     // Отправлен
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					статусФайла=перечисления.СтатусыЭД.Отправлен;
				ИначеЕсли Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0 Тогда     // Ошибки при отправке или при доставке
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					статусФайла=перечисления.СтатусыЭД.ОшибкаПередачи;
				ИначеЕсли Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1 Тогда                        // Доставлен
					ДокСФ=ложь;
					Попытка
						если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") тогда
							ДокСФ=истина;
						конецесли;
					Исключение
					КонецПопытки;	
					Попытка
						если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.СчетФактураПолученный") тогда
							ДокСФ=истина;
						конецесли;
					Исключение
					КонецПопытки;	
					Попытка
						если ТипЗнч(ДокСсылка) = Тип("ДокументСсылка.СчетФактура") тогда
							ДокСФ=истина;
						конецесли;
					Исключение
					КонецПопытки;	
					Если ДокСФ Тогда
						СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОбменЗавершен;
						НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ВсеВыполнено;
						НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ВсеВыполнено;
					иначе
						СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.НаУтверждении;
						НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
						НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					конецесли;
					статусФайла=перечисления.СтатусыЭД.Доставлен;
				ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 Тогда                        // Отклонен
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.Отклонен;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.Отклонен;
					статусФайла=перечисления.СтатусыЭД.Отклонен;
				ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 Тогда                        // Утвержден
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ОбменЗавершен;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ВсеВыполнено;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ВсеВыполнено;
					статусФайла=перечисления.СтатусыЭД.Утвержден;
				ИначеЕсли Найти(нрег(СтатусЭД), "удален")=1 Тогда                        // Удален контрагентом
					если метаданные.перечисления.СостоянияВерсийЭД.ЗначенияПеречисления.Найти("Аннулирован") <> неопределено тогда
						СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.Аннулирован;
					иначе
						СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
					конецесли;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					если метаданные.перечисления.СтатусыЭД.ЗначенияПеречисления.Найти("Аннулирован") <> неопределено тогда
						статусФайла=перечисления.СтатусыЭД.Аннулирован;
					иначе
						статусФайла=перечисления.СтатусыЭД.Приостановлен;
					конецесли;
				ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
					если метаданные.перечисления.СостоянияВерсийЭД.ЗначенияПеречисления.Найти("Аннулирован") <> неопределено тогда
						СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.Аннулирован;
					иначе
						СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ЗакрытПринудительно;
					конецесли;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.Отклонен;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					если метаданные.перечисления.СтатусыЭД.ЗначенияПеречисления.Найти("Аннулирован") <> неопределено тогда
						статусФайла=перечисления.СтатусыЭД.Аннулирован;
					иначе
						статусФайла=перечисления.СтатусыЭД.Приостановлен;
					конецесли;
				Иначе
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.НеСформирован;
					НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					статусФайла=перечисления.СтатусыЭД.НеСформирован;
				КонецЕсли;
			исключение // Вероятно Какое- то из перечислений оказалось не определено
				если метаданные.перечисления.СостоянияВерсийЭД.ЗначенияПеречисления.Найти("ТребуютсяДействия") <> неопределено тогда
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ТребуютсяДействия;
				иначе
					СостояниеВерсииЭД = перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				конецесли;
				НоваяЗаписьНабора.ДействияСНашейСтороны = перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
				статусФайла=перечисления.СтатусыЭД.ОшибкаПередачи;
				Сообщить(ОписаниеОшибки());
			конецпопытки;
			НоваяЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
			
			если метаданные.Документы.Найти("ЭлектронныйДокументИсходящий")<> неопределено И 
					метаданные.Документы.Найти("ЭлектронныйДокументВходящий")<> неопределено тогда // новые конфигурации 
				Если СоставПакета.свойство("направление") И СоставПакета.направление = "Входящий" Тогда
					ДокументНаправление = "ЭлектронныйДокументВходящий";
				Иначе	//СоставПакета.направление = "Исходящий" 
					ДокументНаправление = "ЭлектронныйДокументИсходящий";
				КонецЕсли;
				запрос=новый запрос("ВЫБРАТЬ
				                    |	ЭД.Ссылка КАК Ссылка
				                    |ИЗ
				                    |	Документ."+ДокументНаправление+" КАК ЭД
				                    |ГДЕ
				                    |	ЭД.ВидЭД = &ВидЭД
									|	И ЭД.ДокументыОснования.ДокументОснование = &ДокументОснование");
				запрос.Параметры.Вставить("ВидЭД", НастройкиЭД.ВидЭД);
				запрос.Параметры.Вставить("ДокументОснование", ДокСсылка);
				результат=запрос.Выполнить().Выбрать();
				если результат.Следующий() тогда
					ЭлектронныйДокумент =  результат.ссылка.ПолучитьОбъект();
				иначе	//	ОбменСКонтрагентамиСлужебный.СоздатьЭлектронныйДокумент(СтруктураЭД);
					ЭлектронныйДокумент = Документы[ДокументНаправление].СоздатьДокумент();
					НоваяСтрока = ЭлектронныйДокумент.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = ДокСсылка;
					ЭлектронныйДокумент.ВерсияРегламентаЭДО = НастройкиЭД.ВерсияРегламентаЭДО;
					ЭлектронныйДокумент.ВидЭД = НастройкиЭД.ВидЭД; //- вид электронного документа.
					ЭлектронныйДокумент.ДатаДокументаОтправителя= ?(СоставПакета.свойство("Дата"),СоставПакета.Дата,ДокСсылка.Дата); //- дата электронного документа в информационной базе отправителя.
					ЭлектронныйДокумент.НомерДокументаОтправителя = ?(СоставПакета.свойство("Номер"),СоставПакета.Номер,ДокСсылка.Номер); // номер электронного документа в информационной базе отправителя.
					ЭлектронныйДокумент.Дата= ЭлектронныйДокумент.ДатаДокументаОтправителя;
					//ЭлектронныйДокумент.Номер= ЭлектронныйДокумент.НомерДокументаОтправителя;
					ЭлектронныйДокумент.УникальныйИД	= СоставПакета.Идентификатор;
					ЭлектронныйДокумент.Комментарий= ?(СоставПакета.свойство("Название"),СоставПакета.Название,"");
					ЭлектронныйДокумент.Организация= НастройкиЭД.Организация;
					ЭлектронныйДокумент.Контрагент= НастройкиЭД.Контрагент;
					ЭлектронныйДокумент.НастройкаЭДО = соглашение;
					ЭлектронныйДокумент.ПрофильНастроекЭДО = соглашение.ПрофильНастроекЭДО;    //     - СправочникСсылка.ПрофилиНастроекЭДО - ссылка на профиль настроек ЭДО.
					ЭлектронныйДокумент.ТребуетсяИзвещение	= НастройкиЭД.ТребуетсяИзвещение;
					ЭлектронныйДокумент.ТребуетсяПодтверждение= НастройкиЭД.ТребуетсяПодтверждение;
					Попытка
						Ответственный =вычислить("ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(НастройкиЭД.Контрагент,соглашение);");
					Исключение
						Ответственный ="";
					КонецПопытки;	
					Если Не ЗначениеЗаполнено(Ответственный) Тогда 
						//Ответственный = Пользователи.АвторизованныйПользователь();
						//Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойОтветственный");
						//ТекушийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
						//ПользовательСсылка = Справочники.Пользователи.НайтиПоКоду(СокрЛП(ТекушийПользователь));
						Ответственный = ПараметрыСеанса.ТекущийПользователь;
					КонецЕсли;
					ЭлектронныйДокумент.Ответственный= Ответственный; // хорошо бы взять из СоставПакета.Ответственный
	//     * СуммаДокумента - Число - итоговая сумма электронного документа.
				конецесли;
	//СоставПакета.Редакция	Массив	Массив
	//СоставПакета.Событие	Массив	Массив
	//СоставПакета.Состояние	Структура	Структура
	//	Код	"7"	Строка
	//	Название	"Выполнение завершено успешно"	Строка
	//	Описание	""	Строка
	//СсылкаДляКонтрагент	"https://online.sbis.ru/reg/showdoc.html?params=eyJHVUlEIjoiYzg4MWM5MjQtNjkwNC00NTUwLTk4OGMtZDA3MjY1MGQzN2Q0Iiwi0JjQndCd%0AIjoiNjAwMDAwMDAwMSIsItCa0J%2FQnyI6IjYwMDEwMTAwMSJ9"	Строка
	//СсылкаДляНашаОрганизация	"https://online.sbis.ru/opendoc.html?guid=c881c924-6904-4550-988c-d072650d37d4"	Строка
	//СсылкаНаPDF	""	Строка
	//СсылкаНаАрхив	"https://online.sbis.ru/service/?method=%D0%92%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%92%D0%BD%D0%B5%D1%88%D0%BD%D0%B5%D0%B3%D0%BE%D0%94%D0%BE%D0%BA%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0.%D0%A1%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B8%D1%82%D1%8C%D0%9D%D0%B0%D0%94%D0%B8%D1%81%D0%BA%D0%A0%D0%B5%D0%B4%D0%B0%D0%BA%D1%86%D0%B8%D1%8E&params=eyLQmNC00J4iOjM1NDE5Mn0%3D&protocol=3&id=0&srv=1"	Строка
	//Сумма	"17700.00"	Строка
	//СоставПакета.Тип	"ФактураИсх"	Строка
	//СоставПакета.Удален	"Нет"	Строка
				если СоставПакета.свойство("Примечание") тогда
					ЭлектронныйДокумент.Текст= СоставПакета.Примечание;
				конецесли;
				если СоставПакета.Состояние.свойство("Примечание") тогда
					если не значениеЗаполнено(ЭлектронныйДокумент.Текст) тогда
						ЭлектронныйДокумент.Текст= СоставПакета.Состояние.Примечание;
					конецесли;
					ЭлектронныйДокумент.ПричинаОтклонения = СоставПакета.Состояние.Примечание;
				конецесли;
				//ЭлектронныйДокумент.ДатаИзмененияСостоянияЭДО    //СоставПакета.ДатаВремяСоздания	14.09.2017 13:36:12	Дата
				ЭлектронныйДокумент.СостояниеЭДО= СостояниеВерсииЭД;
				ЭлектронныйДокумент.Записать();

				НоваяЗаписьНабора.ЭлектронныйДокумент=ЭлектронныйДокумент.Ссылка;
			иначе
				если значениеЗаполнено(НоваяЗаписьНабора.ЭлектронныйДокумент) тогда
					ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент.ПолучитьОбъект();
					ЭлектронныйДокумент.ДатаИзмененияСтатусаЭД=	текущаядата();
					ЭлектронныйДокумент.СтатусЭД			=	статусФайла;
					ЭлектронныйДокумент.Записать();
				иначе
					ЭлектронныйДокумент=Справочники.ЭДПрисоединенныеФайлы.СоздатьЭлемент();
					ЭлектронныйДокумент.Наименование	=	"СБИС";
					если метаданные.Справочники.ЭДПрисоединенныеФайлы.реквизиты.Найти("ВидЭД")<> неопределено тогда
						ЭлектронныйДокумент.ВидЭД = НастройкиЭД.ВидЭД;
					конецесли;
					ЭлектронныйДокумент.ВладелецФайла	=	ДокСсылка;
					ЭлектронныйДокумент.ДатаИзмененияСтатусаЭД=текущаядата();
					ЭлектронныйДокумент.СтатусЭД		=	статусФайла;
					ЭлектронныйДокумент.Описание		=	"обмен через СБИС";
					ЭлектронныйДокумент.Расширение		=	"XML";
					ЭлектронныйДокумент.Записать();
					НоваяЗаписьНабора.ЭлектронныйДокумент=ЭлектронныйДокумент.Ссылка;
				конецесли;
			конецесли;
			попытка
				НаборЗаписей.Записать();
			исключение // Возможно по данному типу документа не предусмотрено ведение состояниеЭД
	//			Сообщить(ОписаниеОшибки());
			конецпопытки;
		конецесли;
	конецесли;
конецфункции

&НаСервереБезКонтекста
функция	СоздатьНастройкиЭДО(ДокСсылка)
	параметрыЭД=новый структура("СпособыОбменаЭД,организация, Контрагент,договор",Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	Соглашение = неопределено;
	ИскомоеСоглашение = неопределено;
	если докСсылка.Метаданные().реквизиты.найти("Организация")<> неопределено тогда 
		параметрыЭД.организация=ДокСсылка.Организация;
	иначе
		если докСсылка.Метаданные().реквизиты.найти("ДокументОснование")<> неопределено
				И ДокСсылка.ДокументОснование.Метаданные().реквизиты.найти("Организация")<> неопределено тогда 
			параметрыЭД.организация=ДокСсылка.ДокументОснование.Организация;
		конецесли;
	конецесли;
	если ДокСсылка.Метаданные().реквизиты.найти("Контрагент")<> неопределено тогда 
		параметрыЭД.Контрагент=ДокСсылка.Контрагент;
	иначе
		если ДокСсылка.Метаданные().реквизиты.найти("ДокументОснование")<> неопределено
				И ДокСсылка.ДокументОснование.Метаданные().реквизиты.найти("Контрагент")<> неопределено тогда 
			параметрыЭД.Контрагент=ДокСсылка.ДокументОснование.Контрагент;
		конецесли;
	конецесли;
	//если ДокСсылка.Метаданные().реквизиты.найти("Договор")<> неопределено тогда 
	//	параметрыЭД.договор=ДокСсылка.Договор;
	//иначеесли ДокСсылка.Метаданные().реквизиты.найти("ДоговорКонтрагента")<> неопределено тогда 
	// 	параметрыЭД.договор=ДокСсылка.ДоговорКонтрагента;
	//иначе
	//	если ДокСсылка.Метаданные().реквизиты.найти("ДокументОснование")<> неопределено
	//			И ДокСсылка.ДокументОснование.Метаданные().реквизиты.найти("Договор")<> неопределено тогда 
	//		параметрыЭД.договор=ДокСсылка.ДокументОснование.Договор;
	//	конецесли;
	//конецесли;
	попытка
		если значениеЗаполнено(параметрыЭД.организация) И значениеЗаполнено(параметрыЭД.Контрагент) тогда
			УстановитьПривилегированныйРежим(Истина); // Получаем настройки ЭДО безусловно
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Организация",параметрыЭД.Организация);
			Запрос.УстановитьПараметр("Контрагент", параметрыЭД.Контрагент);
			попытка
				ДопустимыеСостояния= новый списокЗначений();
				ДопустимыеСостояния.Добавить(Перечисления.СостоянияСоглашенийЭД.ПроверкаТехническойСовместимости);
				ДопустимыеСостояния.Добавить(Перечисления.СостоянияСоглашенийЭД.Действует);
				Запрос.УстановитьПараметр("ДопустимыеСостояния", ДопустимыеСостояния);
				условияДопустимыеСостояния=" И СоглашенияОбИспользованииЭД.СостояниеСоглашения В(&ДопустимыеСостояния)" 
			исключение
				условияДопустимыеСостояния="";
			конецпопытки;
			
			если значениеЗаполнено(параметрыЭД.договор) И метаданные.справочники.СоглашенияОбИспользованииЭД.реквизиты.найти("ДоговорКонтрагента")<> неопределено тогда 
					Запрос.Текст ="ВЫБРАТЬ
					              |	СоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
					              |ИЗ
					              |	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
					              |ГДЕ
					              |	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
					              |	И СоглашенияОбИспользованииЭД.ДоговорКонтрагента = &ДоговорКонтрагента
					              |	И СоглашенияОбИспользованииЭД.Организация = &Организация
					              |	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
								  |	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)"+условияДопустимыеСостояния;
					Запрос.УстановитьПараметр("ДоговорКонтрагента", параметрыЭД.Договор);
					Выборка = Запрос.Выполнить().Выбрать();
					Выборка.Следующий();
					Соглашение=Выборка.Ссылка;
			конецесли;
			если не значениеЗаполнено(соглашение) тогда
				Запрос.Текст ="ВЫБРАТЬ
					|	СоглашенияОбИспользованииЭД.Ссылка
					|ИЗ
					|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
					|ГДЕ
					|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
					|	И СоглашенияОбИспользованииЭД.Организация = &Организация
					|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
					|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)"+условияДопустимыеСостояния;
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				соглашение=Выборка.Ссылка;
			КонецЕсли;
			если не значениеЗаполнено(соглашение) И метаданные.РегистрыСведений.найти("УчастникиОбменовЭДЧерезОператоровЭДО")<> неопределено тогда
				Запрос.Текст ="ВЫБРАТЬ
				              |	СоглашениеЧерезОЭДО.Ссылка
				              |ИЗ
				              |	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
				              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
				              |		ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
				              |ГДЕ
				              |	НЕ СоглашениеЧерезОЭДО.ПометкаУдаления
				              |	И СоглашениеЧерезОЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
				              |	И СоглашениеЧерезОЭДО.Организация = &Организация
				              |	И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Контрагент
				              |	И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)";
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				соглашение=Выборка.Ссылка;
			КонецЕсли;
			если значениеЗаполнено(соглашение) тогда
				ИскомоеСоглашение = соглашение.ПолучитьОбъект();
				если не значениеЗаполнено(ИскомоеСоглашение.Комментарий) тогда
					ИскомоеСоглашение.Комментарий	=	"СБИС";
				конецесли;
				ЗаписатьОбъект = Ложь;
			иначе // создать новое
				ИскомоеСоглашение= Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
				ИскомоеСоглашение.наименование	=	"СБИС";
				ИскомоеСоглашение.Комментарий	=	"СБИС";
				ИскомоеСоглашение.Организация	=	параметрыЭД.Организация;
				ИскомоеСоглашение.Контрагент	=	параметрыЭД.Контрагент;
				ИскомоеСоглашение.СтатусСоглашения= Перечисления.СтатусыСоглашенийЭД.Действует;
				ИскомоеСоглашение.СпособОбменаЭД = параметрыЭД.СпособыОбменаЭД;
				если ИскомоеСоглашение.Метаданные().Реквизиты.Найти("ДоговорКонтрагента")<> неопределено тогда
					ИскомоеСоглашение.ДоговорКонтрагента=параметрыЭД.Договор;
				конецесли;
				если ИскомоеСоглашение.Метаданные().Реквизиты.Найти("СостояниеСоглашения")<> неопределено тогда
					ИскомоеСоглашение.СостояниеСоглашения=Перечисления.СостоянияСоглашенийЭД.Действует;
				конецесли;
				если ИскомоеСоглашение.Метаданные().Реквизиты.Найти("СтатусПодключения")<> неопределено тогда
					ИскомоеСоглашение.СтатусПодключения= Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
				конецесли;
				если ИскомоеСоглашение.Метаданные().Реквизиты.Найти("ИспользуетсяДляОтправки")<> неопределено тогда
					ИскомоеСоглашение.ИспользуетсяДляОтправки= истина;
				конецесли;
				ЗаписатьОбъект = истина;
			конецесли;
			
			если ИскомоеСоглашение.Метаданные().реквизиты.найти("ПрофильНастроекЭДО")<> неопределено тогда 
				если не значениеЗаполнено(ИскомоеСоглашение.ПрофильНастроекЭДО) тогда
					отбор=новый структура("наименование,Организация,СпособОбменаЭД","СБИС",параметрыЭД.Организация,параметрыЭД.СпособыОбменаЭД);
					Запрос.Текст ="ВЫБРАТЬ
						|	профили.Ссылка
						|ИЗ
						|	Справочник.ПрофилиНастроекЭДО КАК профили
						|ГДЕ
						|	профили.наименование = &наименование
						|	И профили.Организация = &Организация
						|	И профили.СпособОбменаЭД = &СпособОбменаЭД 
						|	И НЕ профили.ПометкаУдаления";
					Запрос.УстановитьПараметр("наименование", отбор.наименование);
					Запрос.УстановитьПараметр("СпособОбменаЭД", отбор.СпособОбменаЭД);
					Выборка = Запрос.Выполнить().Выбрать();

					если Выборка.Следующий() тогда
						профильСБИС= Выборка.Ссылка;
					иначе
						профильСБИС=Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
						заполнитьЗначенияСвойств(профильСБИС,отбор);
						//для каждого ЭлементПеречисления Из Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления цикл
						//	НоваяСтрока = профильСБИС.ИсходящиеДокументы.Добавить();
						//	НоваяСтрока.ИсходящийДокумент = ЭлементПеречисления;
						//	перечисления.ВидыЭД.(ЭлементПеречисления.имя)
						//	НоваяСтрока.Формировать       = истина;
						//конеццикла;
						профильСБИС.Записать();
					конецесли;
					ИскомоеСоглашение.ПрофильНастроекЭДО=профильСБИС.Ссылка;
					ЗаписатьОбъект = истина;
				конецесли;
			конецесли;
			
			если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ТОРГ12, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ТОРГ12Продавец, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ТОРГ12Покупатель, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.АктИсполнитель, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.АктЗаказчик, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.СчетФактура, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ПроизвольныйЭД, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			Если ПроверитьВидЭД("Исходящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ПроизвольныйЭД, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;  // alo по ошибке
			КонецЕсли;
			если ПроверитьВидЭД("Входящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ТОРГ12, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Входящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ТОРГ12Продавец, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Входящий",ИскомоеСоглашение, Перечисления.ВидыЭД.ТОРГ12Покупатель, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Входящий",ИскомоеСоглашение, Перечисления.ВидыЭД.АктВыполненныхРабот, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Входящий",ИскомоеСоглашение, Перечисления.ВидыЭД.СчетФактура, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			если ПроверитьВидЭД("Входящий",ИскомоеСоглашение, Перечисления.ВидыЭД.СчетНаОплату, параметрыЭД.СпособыОбменаЭД) тогда
				ЗаписатьОбъект = Истина;
			конецесли;
			
			Если ЗаписатьОбъект Тогда
				попытка
					ИскомоеСоглашение.Записать();
				исключение
					Сообщить("ДоговорКонтрагента "+ИскомоеСоглашение.ДоговорКонтрагента);
					попытка
						Для каждого Реквизит Из ИскомоеСоглашение.Метаданные().Реквизиты Цикл
  							Сообщить(Реквизит.Имя + " " + ИскомоеСоглашение[Реквизит]);
						КонецЦикла;
					исключение
					конецпопытки;
					ИскомоеСоглашение = неопределено;
				конецпопытки;
			КонецЕсли;
		конецесли;
	исключение
		Сообщить("неудачное создание настройки ЭДО :"+ОписаниеОшибки());
	конецпопытки;
	если ИскомоеСоглашение = неопределено тогда
		возврат ИскомоеСоглашение;
	иначе
		возврат ИскомоеСоглашение.Ссылка;
	конецесли;
конецфункции

&НаСервереБезКонтекста
функция ОпределитьНастройкиОбменаЭДПоИсточнику(Источник,
				ВыводитьСообщения = Ложь,
				ПараметрыСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено)
	если не значениеЗаполнено(ВидЭД) тогда
		Попытка
			ПараметрыЭД = вычислить("ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(Источник, истина)");
		Исключение
			Ошибка = ОписаниеОшибки();
			Попытка
				ПараметрыЭД = Новый структура("ВидЭД,НаправлениеЭД,Организация,Контрагент,ДоговорКонтрагента");
				выполнить("ЭлектронныеДокументыПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, истина)");
			Исключение
				Ошибка = Ошибка+" "+ОписаниеОшибки();
				сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
				НастройкиЭД=ложь;
			КонецПопытки;	
		КонецПопытки;	
		если ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) тогда
			ВидЭД= ПараметрыЭД.ВидЭД;
		иначе
			ВидЭД= перечисления.видыЭД.ПроизвольныйЭД;
		конецесли;
	конецесли;
	Попытка
		НастройкиЭД =вычислить("ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Источник,ВыводитьСообщения,ПараметрыСертификатов,ЭД,ВидЭД)");
	Исключение
		Ошибка = ОписаниеОшибки();
		Попытка
			НастройкиЭД =вычислить("ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Источник,ВыводитьСообщения,ПараметрыСертификатов,ЭД,ВидЭД)");
		Исключение
			Ошибка = Ошибка+" "+ОписаниеОшибки();
			сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
			НастройкиЭД=ложь;
		КонецПопытки;	
	КонецПопытки;	
	возврат НастройкиЭД;
конецфункции

&НаСервереБезКонтекста       
функция	ПроверитьВидЭД(Направление, ИскомоеСоглашение, ВидЭД, СпособыОбменаЭД)
	если Направление="Входящий" тогда
		ПолеВидЭД="ВходящийДокумент";
		ТЧ_ЭлДокументы="ВходящиеДокументы";
	иначе
		ПолеВидЭД="ИсходящийДокумент";
		ТЧ_ЭлДокументы="ИсходящиеДокументы";
	конецесли;
	ЗаписатьОбъект=ложь;
	строкаЭД = ИскомоеСоглашение[ТЧ_ЭлДокументы].Найти(ВидЭД, ПолеВидЭД);
	ЕстьСпособОбменаЭД= (ИскомоеСоглашение.Метаданные().ТабличныеЧасти[ТЧ_ЭлДокументы].Реквизиты.Найти("СпособОбменаЭД")<> неопределено);
	Если строкаЭД = Неопределено Тогда
		строкаЭД = ИскомоеСоглашение[ТЧ_ЭлДокументы].Добавить();
		строкаЭД[ПолеВидЭД]       = ВидЭД;
		если ЕстьСпособОбменаЭД тогда
			строкаЭД.СпособОбменаЭД		= СпособыОбменаЭД;
		конецесли;
		строкаЭД.Формировать             = истина;
		ЗаписатьОбъект = Истина;
	иначе
		если не строкаЭД.Формировать тогда
			строкаЭД.Формировать=Истина;
			ЗаписатьОбъект = Истина;
		конецесли;
		если ЕстьСпособОбменаЭД тогда
			если строкаЭД.СпособОбменаЭД	<> СпособыОбменаЭД тогда
				строкаЭД.СпособОбменаЭД = СпособыОбменаЭД;
				ЗаписатьОбъект = Истина;
			конецесли;
		конецесли;
	КонецЕсли;
	возврат ЗаписатьОбъект;
конецфункции

// << alo ВосстановлениеСостояниеЭД
&НаКлиенте
функция ВосстановлениеСостояниеЭД() экспорт
	сообщить("Проверяем... ");
	ВосстановлениеСостояниеЭДНаСервере();
	сообщить("Завершили ");
Конецфункции

&НаСервереБезКонтекста
Функция ВосстановлениеСостояниеЭДНаСервере() экспорт
если метаданные.Документы.Найти("ЭлектронныйДокументИсходящий")<> неопределено И 
		метаданные.Документы.Найти("ЭлектронныйДокументВходящий")<> неопределено тогда // новые конфигурации 
	запрос=новый запрос("ВЫБРАТЬ
	                    |	СостоянияЭД.СсылкаНаОбъект КАК ДокСсылка,
	                    |	ЭДПрисоединенныеФайлы.Ссылка КАК СсылкаНаОбъект
	                    |ИЗ
	                    |	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	                    |		ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.Ссылка
	                    |ГДЕ
	                    |	ЭДПрисоединенныеФайлы.Наименование = &Наименование
	                    |	И (ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка ЕСТЬ NULL или ЭДПрисоединенныеФайлы.ВладелецФайла Ссылка Справочник.СоглашенияОбИспользованииЭД )
	                    |	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления");
	запрос.Параметры.Вставить("Наименование","СБИС");
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		справочникЭД = Выборка.СсылкаНаОбъект.ПолучитьОбъект(); 
		ДокСсылка=Выборка.ДокСсылка;
		если значениеЗаполнено(ДокСсылка) И не ДокСсылка.ПометкаУдаления тогда
			сообщить("Поправляем "+ДокСсылка);
			НастройкиЭД =НастройкиОбменаЭДПоИсточнику(ДокСсылка, ложь);
			если не значениезаполнено(НастройкиЭД) тогда
				соглашение=СоздатьНастройкиЭДО(ДокСсылка);
				если соглашение <> неопределено тогда
					НастройкиЭД= НастройкиОбменаЭДПоИсточнику(ДокСсылка, ложь);
				конецесли;
			конецесли;
			если не значениезаполнено(НастройкиЭД) тогда
					сообщить("нет НастройкиЭД");
					продолжить;
			конецесли;
				ДокументНаправление = "ЭлектронныйДокумент"+НастройкиЭД.НаправлениеЭД;
				запрос=новый запрос("ВЫБРАТЬ
					                    |	ЭД.Ссылка КАК Ссылка
					                    |ИЗ
					                    |	Документ."+ДокументНаправление+" КАК ЭД
					                    |ГДЕ
					                    |	ЭД.ВидЭД = &ВидЭД
										|	И ЭД.ДокументыОснования.ДокументОснование = &ДокументОснование");
				запрос.Параметры.Вставить("ВидЭД", НастройкиЭД.ВидЭД);
				запрос.Параметры.Вставить("ДокументОснование", ДокСсылка);
				результат=запрос.Выполнить().Выбрать();
				если результат.Следующий() тогда
					ВладелецФайла =  результат.ссылка;
				иначе	//	ОбменСКонтрагентамиСлужебный.СоздатьЭлектронныйДокумент(СтруктураЭД);
					ЭлектронныйДокумент = Документы[ДокументНаправление].СоздатьДокумент();
					НоваяСтрока = ЭлектронныйДокумент.ДокументыОснования.Добавить();
					НоваяСтрока.ДокументОснование = ДокСсылка;
					ЭлектронныйДокумент.ВерсияРегламентаЭДО = НастройкиЭД.ВерсияРегламентаЭДО;
					ЭлектронныйДокумент.ВидЭД = НастройкиЭД.ВидЭД; //- вид электронного документа.
					ЭлектронныйДокумент.ДатаДокументаОтправителя= ДокСсылка.Дата; //- дата электронного документа в информационной базе отправителя.
					ЭлектронныйДокумент.НомерДокументаОтправителя = ДокСсылка.Номер; // номер электронного документа в информационной базе отправителя.
					ЭлектронныйДокумент.Дата= ЭлектронныйДокумент.ДатаДокументаОтправителя;
					//ЭлектронныйДокумент.Номер= ЭлектронныйДокумент.НомерДокументаОтправителя;
				//		ЭлектронныйДокумент.УникальныйИД	= СоставПакета.Идентификатор;
					ЭлектронныйДокумент.Комментарий= "восстановленная запись";
					ЭлектронныйДокумент.Организация= НастройкиЭД.Организация;
					ЭлектронныйДокумент.Контрагент= НастройкиЭД.Контрагент;
					ЭлектронныйДокумент.НастройкаЭДО = НастройкиЭД.СоглашениеЭД;
					ЭлектронныйДокумент.ПрофильНастроекЭДО = НастройкиЭД.СоглашениеЭД.ПрофильНастроекЭДО;    //     - СправочникСсылка.ПрофилиНастроекЭДО - ссылка на профиль настроек ЭДО.
					ЭлектронныйДокумент.ТребуетсяИзвещение	= НастройкиЭД.ТребуетсяИзвещение;
					ЭлектронныйДокумент.ТребуетсяПодтверждение= НастройкиЭД.ТребуетсяПодтверждение;
					ЭлектронныйДокумент.Ответственный= ПараметрыСеанса.ТекущийПользователь;
					ЭлектронныйДокумент.СостояниеЭДО= перечисления.СостоянияВерсийЭД.ОбменЗавершен;
					ЭлектронныйДокумент.Записать();

					ВладелецФайла=ЭлектронныйДокумент.Ссылка;
				конецесли;
				справочникЭД.ВладелецФайла=ВладелецФайла;
				справочникЭД.ЭлектронныйДокументВладелец=справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
				сообщить("ВладелецФайла "+ВладелецФайла);
				сообщить("ЭлектронныйДокументВладелец "+ 	справочникЭД.ЭлектронныйДокументВладелец.Метаданные().ПолноеИмя());
			справочникЭД.Записать();
		конецесли;
	КонецЦикла; 
иначе
	сообщить("недопустимо в этой конфигурации");
конецесли;
КонецФункции

&НаСервереБезКонтекста
функция НастройкиОбменаЭДПоИсточнику(Источник,
				ВыводитьСообщения = Истина,
				ПараметрыСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено)
	если не значениеЗаполнено(ВидЭД) тогда
		Попытка
			ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник, истина);
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить("ошибка в модуле конфигурации "+ Ошибка);
			НастройкиЭД=ложь;
		КонецПопытки;	
		если ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) тогда
			ВидЭД= ПараметрыЭД.ВидЭД;
		иначе
			ВидЭД= определитьВидЭД(Источник); //перечисления.видыЭД.ТОРГ12Покупатель;	ТОРГ12 .ПроизвольныйЭД
		конецесли;
	конецесли;
	Попытка    
		НастройкиЭД =ВосстановлениеОпределитьНастройкиОбменаЭДПоИсточнику(ПараметрыЭД,Источник,ВыводитьСообщения,ПараметрыСертификатов,ЭД,ВидЭД);
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить("ошибка в модуле конфигурации "+ Ошибка);
		НастройкиЭД=ложь;
	КонецПопытки;	
	возврат НастройкиЭД;
конецфункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, Ссылка - объект либо ссылка документа/справочника-источника.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//              в параметрах должны быть указаны соответствующие виды ЭД.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид элекронного документа.
//  БыстрыйОбмен - Булево - признак того, что не будут использоваться УПД и УКД.
//
// Возвращаемое значение:
//  Структура - параметры источника, необходимые для определения
//              настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//              Контрагент, СоглашениеЭД или Организация.
//
&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено, БыстрыйОбмен = Ложь) Экспорт
	
	Попытка
		ПараметрыЭД = вычислить("ОбменСКонтрагентамиСлужебный.СтруктураПараметровЭД()");
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
		возврат ложь;
	КонецПопытки;	
	Попытка
		СправочникОрганизации = вычислить("ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(""Организации"")");
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
		возврат ложь;
	КонецПопытки;	
	
	ТипИсточника = ТипЗнч(Источник);
	
	ЗначенияРеквизитовИсточника = Новый Структура;
	РеквизитыИсточника = Новый Массив;
	Если ТипИсточника = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.СоглашенияОбИспользованииЭД") Тогда
		
		ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД  = Источник.Ссылка;
		Если Не Источник.ЭтоИнтеркампани Тогда
			РеквизитыИсточника.Добавить("Контрагент");
			РеквизитыИсточника.Добавить("Организация");
			РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка." + СправочникОрганизации)
		Или ТипИсточника = Тип("СправочникОбъект." + СправочникОрганизации) Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		РеквизитыИсточника.Добавить("НастройкаЭДО");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		РеквизитыИсточника.Добавить("НастройкаЭДО");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
	Иначе
		
		ПараметрыЭД.ВидЭД = ВидЭД;
		Попытка
			простоВычислить = вычислить("ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML)");
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
			возврат ложь;
		КонецПопытки;	
	КонецЕсли;
	
	Если РеквизитыИсточника.Количество() Тогда
		Попытка
			ЗначенияРеквизитовИсточника = вычислить("ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(Источник, РеквизитыИсточника)");
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
			возврат ложь;
		КонецПопытки;	
		ЗаполнитьЗначенияСвойств(ПараметрыЭД, ЗначенияРеквизитовИсточника);
		
		Если ЗначенияРеквизитовИсточника.Свойство("НастройкаЭДО") Тогда
			ПараметрыЭД.СоглашениеЭД  = ЗначенияРеквизитовИсточника.НастройкаЭДО;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) 
		И Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
		Попытка
			простоВычислить=вычислить("ОбменСКонтрагентамиСлужебный.ДополнитьПараметрыЭД(Источник, ПараметрыЭД)");
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
			возврат ложь;
		КонецПопытки;	
	КонецЕсли;
	
	Если БыстрыйОбмен Тогда
		Возврат ПараметрыЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) тогда
		Попытка
			ЕстьПравоЧтенияЭД= вычислить("ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЕстьПравоЧтенияЭД(Ложь)");
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
			возврат ложь;
		КонецПопытки;	
		если ЕстьПравоЧтенияЭД Тогда
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(?(ОбщегоНазначения.ЭтоСсылка(ТипИсточника), Источник, Источник.Ссылка));
		
			Попытка
				СоответствиеВладельцевИЭД =вычислить("ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок)");
			Исключение
				Ошибка = ОписаниеОшибки();
				сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
				возврат ложь;
			КонецПопытки;	
			Для Каждого ТекЭл Из МассивСсылок Цикл
				
				СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
				Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
					Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
						ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВладелецФайла");
	//					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВидЭД");
					Иначе
						ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Использование = вычислить("ОбменСКонтрагентами.ИспользованиеУниверсальногоПередаточногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента)");
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
		возврат ложь;
	КонецПопытки;	
	Если Использование Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Использование = вычислить("ОбменСКонтрагентами.ИспользованиеУниверсальногоКорректировочногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента)");
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
		возврат ложь;
	КонецПопытки;	
	Если Использование Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыЭД;
КонецФункции

// Определение настройки обмена ЭД по источнику - документу базы данных или по ЭД.
//
// Параметры:
//  Источник - Ссылка - ссылка на источник.
//  ВыводитьСообщения - Булево - выводить сообщения об ошибках.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ФлагДействующиеСоглашения - Булево - отбор по действующим настройкам ЭДО.
// 
// Возвращаемое значение:
//  Структура - настройки обмена.
//
&НаСервереБезКонтекста
Функция восстановлениеОпределитьНастройкиОбменаЭДПоИсточнику(ПараметрыЭД,
				Источник,
				ВыводитьСообщения = Истина,
				МассивОтпечатковСертификатов = Неопределено,
				ЭД = Неопределено,
				ВидЭД = Неопределено,
				ФлагДействующиеСоглашения = Истина) Экспорт
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = ВидЭД;
	КонецЕсли;
	
	Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, МассивОтпечатковСертификатов, ФлагДействующиеСоглашения);
	
	Возврат Результат;
КонецФункции

// Определение настройки обмена электронными документами по параметрам.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры поиска.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов для проверки.
//  ФлагДействующиеСоглашения - Булево - признак поиска только действующих соглашений.
// 
// Возвращаемое значение:
//  Структура - данные настройки обмена.
//
&НаСервереБезКонтекста
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено, ФлагДействующиеСоглашения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("НаправлениеЭД",	НаправлениеЭД);
		
		Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидЭД",			ВидЭД);
		Запрос.УстановитьПараметр("Контрагент",		Контрагент);
		
		ДоговорКонтрагента = "";
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			Попытка
				ДоговорКонтрагента = вычислить("ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку(""ДоговорыКонтрагентов"")");
			Исключение
				Ошибка = ОписаниеОшибки();
				сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
				возврат ложь;
			КонецПопытки;	
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		ВидЭДВладельца = Неопределено;
		Если СтруктураПараметров.Свойство("ВидЭДВладельца", ВидЭДВладельца) Тогда
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭДВладельца",				ВидЭДВладельца);
		Попытка
			ДокументФНС =вычислить("ОбменСКонтрагентамиСлужебный.ЭтоФНС(ВидЭДВладельца)");
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
			возврат ложь;
		КонецПопытки;	
		Запрос.УстановитьПараметр("ДокументФНС",				ДокументФНС);
		Запрос.УстановитьПараметр("ТолькоДействующиеСоглашения",ФлагДействующиеСоглашения);
		Запрос.УстановитьПараметр("ПользовательНеУказан",		Пользователи.СсылкаНеуказанногоПользователя());
		
		СоглашениеЭД = "";
		Организация = "";
		ВыполнятьЗапрос = Истина;
		Если СтруктураПараметров.Свойство("СоглашениеЭД", СоглашениеЭД) И ЗначениеЗаполнено(СоглашениеЭД) Тогда
			Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
			Попытка
				простоВычислить= вычислить("ОбменСКонтрагентамиСлужебный.ПолучитьТекстНастроекОбменаПоСоглашению(Запрос.Текст)");
			Исключение
				Ошибка = ОписаниеОшибки();
				сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
				возврат ложь;
			КонецПопытки;	
		ИначеЕсли СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			Попытка
				Используется= вычислить("ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры()");
			Исключение
				Ошибка = ОписаниеОшибки();
				сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
				возврат ложь;
			КонецПопытки;	
			Если Используется Тогда
				Партнер = "";
				СтруктураПараметров.Свойство("Партнер", Партнер);
				Запрос.УстановитьПараметр("Партнер", Партнер);
			КонецЕсли;
			ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(Запрос.Текст);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			ВыполнятьЗапрос = Ложь;
			Если РезультатЗапроса[2].Пустой() Тогда  		// Поищем настройку ЭДО без указания договора контрагента.
				Попытка
					ДоговорКонтрагента = вычислить("ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку(""ДоговорыКонтрагентов"")");
				Исключение
					Ошибка = ОписаниеОшибки();
					сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
					возврат ложь;
				КонецПопытки;	
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				ВыполнятьЗапрос = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			Если ВыполнятьЗапрос Тогда
				РезультатЗапроса = Запрос.ВыполнитьПакет();
			КонецЕсли;
			ТЗ = РезультатЗапроса[2].Выгрузить();
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если МассивОтпечатковСертификатов <> Неопределено Тогда

					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если МассивОтпечатковСертификатов = Неопределено ИЛИ МассивОтпечатковСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если НастройкиОбменаЭД.Свойство("Подписывать") Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
			КонецЕсли;
		КонецЕсли;
	Иначе
		сообщить("Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.");
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
КонецФункции

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
&НаСервереБезКонтекста
Процедура ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(ТекстЗапроса)
	
	Попытка
		ТекстЗапроса= вычислить("ОбменСКонтрагентамиПереопределяемый.ПолучитьТекстЗапросаНастроекОбменаСПриоритетами()");
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
		возврат;
	КонецПопытки;	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЧ_Соглашения.Организация КАК Организация,
		|	ТЧ_Соглашения.Контрагент КАК Контрагент,
		|	ТЧ_Соглашения.ВидЭД,
		|	ТЧ_Соглашения.НаправлениеЭД,
		|	ТЧ_Соглашения.ИспользоватьЭП КАК Подписывать,
		|	ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ТЧ_Соглашения.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
		|	ИСТИНА КАК ОжидатьКвитанциюОДоставке,
		|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
		|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
		|	ТЧ_Соглашения.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
		|	ТЧ_Соглашения.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ТЧ_Соглашения.Ссылка КАК Основание,
		|	ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ТЧ_Соглашения.Приоритет,
		|	ТЧ_Соглашения.ВерсияФормата,
		|	ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ТЧ_Соглашения.НастройкаЭДОДействует,
		|	ТЧ_Соглашения.МаршрутПодписания
		|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Ссылка,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭП КАК ИспользоватьЭП,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|		&НаправлениеЭД КАК НаправлениеЭД,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация КАК Организация,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|		ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ВерсияФормата КАК ВерсияФормата,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|		0 КАК Приоритет,
		|		ВЫБОР
		|			КОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|					И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|					ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК НастройкаЭДОДействует,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.МаршрутПодписания КАК МаршрутПодписания
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА &ТолькоДействующиеСоглашения
		|					ТОГДА НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
		|							И (СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|							ИЛИ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует))
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		И ВЫБОР
		|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
		|						И ВЫБОР
		|							КОГДА &ЭтоСлужебныйЭД
		|								ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭДВладельца
		|							ИНАЧЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|						КОНЕЦ
		|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
		|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|						И &Партнер
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК ТЧ_Соглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Ссылка КАК Ссылка,
		|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
		|	Сертификаты.Организация КАК Организация,
		|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
		|	ЛОЖЬ КАК ПарольПолучен,
		|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
		|ПОМЕСТИТЬ ВТ_Сертификаты
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
		|		ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			ПрофилиЭДОСертификаты.Сертификат КАК Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиЭДОСертификаты
		|				ПО ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО = ПрофилиЭДОСертификаты.Ссылка
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			СоглашенияЭДСертификаты.Сертификат
		|		ИЗ
		|			ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейОрганизации КАК СоглашенияЭДСертификаты
		|				ПО ВТ_ТЧ_Соглашения.Основание = СоглашенияЭДСертификаты.Ссылка) КАК СертификатыИзНастроекИПрофилей
		|		ПО Сертификаты.Ссылка = СертификатыИзНастроекИПрофилей.Сертификат
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВидыЭДЭП.ВидЭД = &ВидЭД
		|		КОНЕЦ
		|	И Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
		|	И ВидыЭДЭП.Использовать
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
		|	ВТ_ТЧ_Соглашения.Организация,
		|	ВТ_ТЧ_Соглашения.Контрагент,
		|	ВТ_ТЧ_Соглашения.ВидЭД,
		|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
		|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
		|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ВТ_ТЧ_Соглашения.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
		|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
		|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
		|	ВТ_ТЧ_Соглашения.ОбщийРесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументов,
		|	ВТ_ТЧ_Соглашения.КаталогВходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.КаталогИсходящихДокументовFTP,
		|	ВТ_ТЧ_Соглашения.ЭлектроннаяПочтаКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
		|	ВТ_ТЧ_Соглашения.ПрофильНастроекЭДО КАК ПрофильНастроекЭДО,
		|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
		|	ВЫБОР
		|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
		|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_Сертификаты.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
		|	ВЫБОР
		|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
		|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
		|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
		|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
		|	ВТ_Сертификаты.ПарольПользователя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОрганизацииПолучателя,
		|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольОрганизацииПолучателяПолучен,
		|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОрганизацииПолучателя,
		|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО,
		|	ВТ_ТЧ_Соглашения.ВерсияФормата,
		|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета,
		|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует,
		|	ВТ_ТЧ_Соглашения.МаршрутПодписания
		|ИЗ
		|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
		|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
		|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
		|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
		|					И ВЫБОР
		|						КОГДА &ЭтоСлужебныйЭД
		|							ТОГДА ВЫБОР
		|									КОГДА &ДокументФНС
		|										ТОГДА ИСТИНА
		|									ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭДВладельца
		|								КОНЕЦ
		|						ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
		|					КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		ТекстЗапросаПартнеры = "ИСТИНА";
		Попытка
			Используется= вычислить("ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры()");
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить("Форма работы со статусами 'Статусы_СостоянияЭД' не поддерживается для данной конфигурации "+ Ошибка);
			возврат;
		КонецПопытки;	
		Если Используется Тогда
			ТекстЗапросаПартнеры = "&Партнер <> НЕОПРЕДЕЛЕНО
			|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент.Партнер = &Партнер";
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер", ТекстЗапросаПартнеры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
функция определитьВидЭД(Источник) Экспорт
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПокупателю")или ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
		возврат Перечисления.ВидыЭД.СчетНаОплату;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуПоставщика") или ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуПоставщика") Тогда
		возврат Перечисления.ВидыЭД.СчетНаОплату;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг") или ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		возврат Перечисления.ВидыЭД.ТОРГ12;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") или ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		возврат Перечисления.ВидыЭД.ТОРГ12Покупатель;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный") или ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
//		Если ЭтоКорректировочныйДокумент(Источник) Тогда
//			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//		Иначе
		возврат Перечисления.ВидыЭД.СчетФактура;
//		КонецЕсли;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный") или ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
//		Если ЭлектронноеВзаимодействиеБП.ЭтоКорректировочныйДокумент(Источник) Тогда
//			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
//		Иначе
		возврат Перечисления.ВидыЭД.СчетФактура;
//		КонецЕсли;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации") или ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		попытка
			ВидДКР=	Вычислить("ЭлектронноеВзаимодействиеБП.ВидЭлектронногоДокументаКорректировки(Источник)"); // Бух 3
		исключение
			попытка
				ВидДКР=Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
			исключение
				ВидДКР=Перечисления.ВидыЭД.ТОРГ12Продавец;
			конецпопытки;
		конецпопытки;
		возврат ВидДКР;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") или ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") 
				или ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") или ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
		возврат Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	КонецЕсли;
Конецфункции
// alo >>