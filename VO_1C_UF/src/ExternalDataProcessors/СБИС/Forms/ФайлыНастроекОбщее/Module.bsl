///////////////////////////////////////////////////
///////////////////////Общее///////////////////////
///////////////////////////////////////////////////

&НаСервереБезКонтекста
Процедура	сбисСкопироватьСтруктуру(СтруктураКуда, знач СтруктураОткуда)							Экспорт
	
	// Копирует СтруктураОткуда в СтруктураКуда	
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый	Массив);
			сбисСкопироватьМассив(СтруктураКуда[Элемент.Ключ], Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
				СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура	сбисСкопироватьМассив(МассивКуда, знач МассивОткуда)									Экспорт
	
	//Копирует массив откуда в массив куда.
	Для Каждого Элемент Из МассивОткуда Цикл	
		Если ТипЗнч(Элемент) = Тип("Массив") Тогда
			МассивДобавить	= Новый	Массив;
			сбисСкопироватьМассив(МассивДобавить, Элемент);
			МассивКуда.Добавить(МассивДобавить);
		ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
			СтруктураДобавить	= Новый	Структура();
			сбисСкопироватьСтруктуру(СтруктураДобавить, Элемент);
			МассивКуда.Добавить(СтруктураДобавить);
		Иначе
			МассивКуда.Добавить(Элемент);			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет тип настройки по префиксу файла настроек	
&НаСервереБезКонтекста
Функция		ОпределитьТипНастроекПоПрефиксу(ПрефиксСервис, ПрефиксПолный)							Экспорт

	Префикс	= СтрЗаменить(ПрефиксПолный, ПрефиксСервис, "");
	Конфигурация= "";
	
	Если		ВРег(Лев(Префикс,3))	= "БУХ" Тогда
		Конфигурация	= "Бухгалтерия предприятия";
		Версия	= Сред(Префикс, 4);
		Если		Сред(Префикс, 4, 1)	= "1"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 1.6"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция " + Сред(Префикс, 4, 1) +".0";
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,2))	= "УТ" Тогда	
		Конфигурация	= "Управление торговлей";
		Версия	= Сред(Префикс, 3);
		Если	Сред(Префикс, 3, 2)	= "11"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 11";
			Если		Сред(Префикс, 5, 1)	= "2"	Тогда
				Конфигурация	= Конфигурация	+ ".2 (не обновляется)";
			ИначеЕсли	Сред(Префикс, 5, 2)	= "-2"	Тогда
				Конфигурация	= Конфигурация	+ ".2";
				Префикс	= Сред(Префикс, Найти(Префикс, "-")+1);
			КонецЕсли;
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 10.3";
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,3))	= "УПП" Тогда	
		Конфигурация = "Управление производственным предприятием, редакция 1.3";
		Версия	= Сред(Префикс, 4);
	ИначеЕсли	ВРег(Лев(Префикс,2))	= "КА" Тогда	
		Конфигурация = "Комплексная автоматизация";
		Версия	= Сред(Префикс, 3);
		Если	Сред(Префикс, 3, 1)	= "2"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 2.0";
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 1.1";
		КонецЕсли;
	ИначеЕсли ВРег(Лев(Префикс,3)) = "КЗП" Тогда
		Конфигурация = СтрЗаменить("КАМИН:Зарплата. Версия {0}.0", "{0}", Сред(Префикс,4,1));	
	ИначеЕсли	ВРег(Лев(Префикс,3))	= "БГУ" Тогда	
		Конфигурация = "Бухгалтерия государственного учреждения";
		Версия	= Сред(Префикс, 4);
		Если	Сред(Префикс, 4, 1)	= "2"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 2.0"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 1.0"
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,4)) = "БСХП" Тогда 
		Конфигурация = "Бухгалтерия сельскохозяйственного предприятия, редакция " + Сред(Префикс, 5, 1) + ".0";
		Версия	= Сред(Префикс, 5);
	ИначеЕсли	ВРег(Лев(Префикс,3)) = "УНФ" Тогда 
		Конфигурация = "Управление небольшой фирмой, редакция " + СтрЗаменить(Сред(Префикс, 4, 3), "-", ".");
		Версия	= Сред(Префикс, 4);
		Если	Сред(Префикс, 4, 2)	= "15"	Тогда
			Конфигурация	= Конфигурация	+ " (не обновляется)";
		Иначе
			Префикс	= Сред(Префикс, Найти(Префикс, "-")+1);
		КонецЕсли;
	ИначеЕсли ВРег(Лев(Префикс,4)) = "РОЗН" Тогда 
		Конфигурация = "Розница";
		Версия = Сред(Префикс, 5);
		Если Лев(Версия, 1)	= "1"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 1.0"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция " + СтрЗаменить(Лев(Версия, 3),"-",".");
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,3)) = "ЗУП" Тогда 
		Конфигурация = "Зарплата и Управление Персоналом, редакция 2.5";
		Версия	= Сред(Префикс, 4);		
	ИначеЕсли	Не	ПустаяСтрока(ПрефиксСервис)
			И	ПрефиксСервис	= ПрефиксПолный	Тогда
		Конфигурация = "Пользовательская конфигурация";
		Версия	= Сред(Префикс, Найти(Префикс, "-")+1);
	ИначеЕсли	ВРег(Лев(Префикс,3)) = "ERP" Тогда 
		Конфигурация = "ERP управление предприятием, редакция 2";
		Версия	= Сред(Префикс, 4);	
	ИначеЕсли ВРег(Лев(Префикс, 4))  = "ШТП5" Тогда //d.ch 15.08.2019
		Конфигурация = "Штрих-М: Торговое предприятие 5"; 
		Версия = Сред(Префикс, 4);
	ИначеЕсли ВРег(Лев(Префикс, 4)) = "ШТП7" Тогда //d.ch 13.01.2020
		Конфигурация = "Штрих-М: Торговое предприятие 7";
		Версия = Сред(Префикс, 4);
	ИначеЕсли ВРег(Лев(Префикс,2)) = "АА" Тогда //bav 11.09.2019
		Конфигурация = "Альфа-Авто, редакция 5.1";
		Версия = Сред(Префикс, 3);
	ИначеЕсли ВРег(Лев(Префикс,5)) = "ЗИКГУ" Тогда
		Конфигурация = "Зарплата и кадры государственного учреждения";
		Версия = Сред(Префикс, 6);
	ИначеЕсли ВРег(Лев(Префикс,3)) = "УХ3" Тогда // alo 16.09.2019
		Конфигурация = "Управление холдингом, редакция 3.0";
		Версия = Сред(Префикс, 3);
	ИначеЕсли ВРег(Лев(Префикс,3)) = "ДУМ" Тогда //rav 04.07.2020
		Конфигурация = "ДАЛИОН: Управление магазином";
		Версия = Сред(Префикс, 4);
		Если Лев(Версия, 1)	= "2"	Тогда
			Конфигурация	= Конфигурация	+ ", редакция 2.0"
		Иначе
			Конфигурация	= Конфигурация	+ ", редакция 1.2"
		КонецЕсли;
	ИначеЕсли	ВРег(Лев(Префикс,6)) = "АУНБУХ" Тогда	
		Конфигурация = "Аренда и управление недвижимостью для ""1С:Бухгалтерия 8""";
		Версия	= Сред(Префикс, 7);
	ИначеЕсли	ВРег(Лев(Префикс,4))	= "ПСУФ" Тогда
		Конфигурация	= "Подрядчик строительства. Управление финансами, редакция " + Сред(Префикс, 5, 1) +".0";
		Версия	= Сред(Префикс, 5);
	Иначе 
		Конфигурация = "";
		Версия	= "";
	КонецЕсли;	
	
	Если	Булево(Найти(Версия, "-")) Тогда
		Конфигурация	= Конфигурация	+ ", версия "	+ СтрЗаменить(Версия,"-",".")+" и выше";
	КонецЕсли;
	
	Возврат	Конфигурация;
	
КонецФункции	

&НаСервереБезКонтекста
Функция		ПолучитьМассивФайловДляКонфигурации(знач СписокТиповНастроек, ПрефиксСервис, ДопПараметры=Неопределено)	Экспорт
	// Получает список доступных настроек для текущей конфигурации	
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	ПрефиксТекущейКонфигурации	= ?(ДопПараметры.Свойство("ПрефиксТекущейКонфигурации"), ДопПараметры.ПрефиксТекущейКонфигурации, "");
	ВерсияТекущейКонфигурации	= ?(ДопПараметры.Свойство("ВерсияТекущейКонфигурации"), ДопПараметры.ВерсияТекущейКонфигурации, "");
	ЗначениеПредставление		= ?(ДопПараметры.Свойство("ЗначениеПредставление"), ДопПараметры.ЗначениеПредставление, "Значение");
	
	Если Не ЗначениеЗаполнено(СписокТиповНастроек) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ПустаяСтрока(ПрефиксТекущейКонфигурации) Тогда
		ПредставлениеПодсистемы = ОпределитьТипПодсистемы(Метаданные, Ложь);
		ПрефиксТекущейКонфигурации = ПрефиксСервис + ПредставлениеПодсистемы;
	КонецЕсли;
	
	СписокТиповНастроекДляКонфигурации = Новый СписокЗначений;
	ДлинаПрефикса = СтрДлина(ПрефиксТекущейКонфигурации);
	Для Каждого Элемент Из СписокТиповНастроек Цикл
		Если Лев(Элемент.Представление,ДлинаПрефикса) = ПрефиксТекущейКонфигурации Тогда
			//Передаем представление версии конфигураций с клиента. В случае, если нет, пробуем определить
			СбисПредставлениеДляСортировки = Неопределено;
			Если Не Элемент.Значение.Свойство("ПредставлениеВерсии", СбисПредставлениеДляСортировки) Тогда
				СбисПредставлениеДляСортировки = Сред(Элемент.Представление,ДлинаПрефикса+1);
			КонецЕсли;
			СписокТиповНастроекДляКонфигурации.Добавить(Элемент.Представление, СбисЗаполнитьПрефиксНулями(СбисПредставлениеДляСортировки));
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ВерсияТекущейКонфигурации) Тогда
		ВерсияТекущейКонфигурации = СтрЗаменить(ОпределитьВерсиюСистемы(Метаданные.Версия),".","-"); 
	КонецЕсли;
	СписокТиповНастроекДляКонфигурации.Добавить("Текущая конфигурация", СбисЗаполнитьПрефиксНулями(ВерсияТекущейКонфигурации)+"-");
	СписокТиповНастроекДляКонфигурации.СортироватьПоПредставлению();
	ИндексТекущий = СписокТиповНастроекДляКонфигурации.Индекс(СписокТиповНастроекДляКонфигурации.НайтиПоЗначению("Текущая конфигурация"));
	Если ИндексТекущий>0 Тогда
		ПодходящаяВерсия = СписокТиповНастроекДляКонфигурации[ИндексТекущий-1].Значение;	
		Для Каждого Элемент Из СписокТиповНастроек Цикл
			Если Элемент.Представление = ПодходящаяВерсия Тогда
				Возврат Элемент[ЗначениеПредставление];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПрефиксСервис = "Com1C82" Тогда
		//Префикс - "Com1C82" и настроек нет. А значит что это пользовательская конфа. У неё должен быть пустой subsystem
		Если СписокТиповНастроек.Количество() Тогда
			шаг = СписокТиповНастроек.Количество();
			Пока шаг <> 0 Цикл
				шаг = шаг - 1;
				Если СписокТиповНастроек[шаг].Значение.ПараметрыКонфигурации.subsystem = "" Тогда
					Возврат СписокТиповНастроек[шаг][ЗначениеПредставление];
				КонецЕсли;
			КонецЦикла;
			Возврат	СписокТиповНастроек[0][ЗначениеПредставление];
		Иначе
			Возврат	Неопределено;
		КонецЕсли;
	Иначе
		Возврат СписокТиповНастроек[6][ЗначениеПредставление];
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция		СбисЗаполнитьПрефиксНулями(Префикс)														Экспорт
	ФорматныйПрефикс = "";
	ВерсииКонф = РазбитьСтрокуВМассив(Префикс,"-");
	Для Каждого Элемент Из ВерсииКонф Цикл
		ФорматныйПрефикс = ФорматныйПрефикс + сбисЗаполнитьСлева(Элемент, "0", 4)+"-";	
	КонецЦикла;
	ФорматныйПрефикс = Лев(ФорматныйПрефикс, СтрДлина(ФорматныйПрефикс)-1);
	Возврат ФорматныйПрефикс;
КонецФункции

&НаСервереБезКонтекста
функция		РазбитьСтрокуВМассив(знач Строка, Разделитель)											Экспорт
	// Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов	
	МассивЭлементов = Новый Массив();
	ЕстьРазделитель = Истина;
	Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
		Если Найти(Строка,Разделитель)=0 Тогда
			Прервать;
		КонецЕсли;
		Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
		МассивЭлементов.Добавить(Элемент);
		Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
	КонецЦикла;
	МассивЭлементов.Добавить(Строка);
	Возврат МассивЭлементов;
КонецФункции

&НаСервереБезКонтекста
функция		сбисЗаполнитьСлева(ИсходнаяСтрока, Заполнитель, Длина)									Экспорт
	// Функция заполняет строку слева указанным заполнителем до указанной длины	
	Результат = ИсходнаяСтрока;
	КолЗаполнителей = Длина-СтрДлина(ИсходнаяСтрока);
	Если КолЗаполнителей>0 Тогда
		Для сч = 1 По КолЗаполнителей Цикл
			Результат = строка(Заполнитель)+строка(Результат);	
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Функция		ТабДоступныеИниФайлыОбновить(Конфигурация, ФормаТабУстФайлы)							Экспорт
	// Функция возвращает массив доступных файлов настроек для выбранной конфигурации	
	МассивДоступныхИниФайлов = Новый Массив();
	
	Если Конфигурация<>Неопределено Тогда
		
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
			ТабУстФайлы = ФормаТабУстФайлы.Выгрузить(, "ИмяФайла");
		Иначе
			ТабУстФайлы = ФормаТабУстФайлы;
		КонецЕсли;	
		СтруктураФайлов = Конфигурация;
		Для Каждого Элемент Из СтруктураФайлов Цикл			
			НайденнаяСтрока			= ТабУстФайлы.Найти(Элемент.Имя, "ИмяФайла"); 
			РазделительРасширения	= Найти(Элемент.Имя,".");
			Если	РазделительРасширения	= 0	Тогда
				ИмяФайлаБезРасширения	= Элемент.ИмяБезРасширения;
			Иначе
				ИмяФайлаБезРасширения	= Лев(Элемент.Имя,РазделительРасширения-1);
			КонецЕсли;
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Имяфайла",				Элемент.Имя);
			НоваяСтрока.Вставить("ИмяФайлаБезРасширения",	ИмяФайлаБезРасширения);
			НоваяСтрока.Вставить("ПолноеИмя",				Элемент.ПолноеИмя);
			Если НайденнаяСтрока<>Неопределено Тогда
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Истина);
			Иначе
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Ложь);
			КонецЕсли;	
			МассивДоступныхИниФайлов.Добавить(НоваяСтрока);	
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат МассивДоступныхИниФайлов;	
	
КонецФункции

&НаСервере
Функция		СформироватьМассивТабДоступныеИниФайлыОбновить(Конфигурация, знач УстановленныеИни)		Экспорт
	// Функция возвращает массив доступных файлов настроек для выбранной конфигурации	
	
	Если Конфигурация=Неопределено Тогда
		Возврат Новый Массив();
	КонецЕсли;
		
	МассивДоступныхИниФайлов = Новый Массив();
	
	Если	ТипЗнч(УстановленныеИни)= Тип("ДанныеФормыКоллекция")
		И	ТипЗнч(ЭтаФорма)		= Тип("УправляемаяФорма") Тогда
		ТабУстФайлы = УстановленныеИни.Выгрузить(, "ИмяФайла");
	Иначе
		ТабУстФайлы = сбисПростыеДанныеВТаблицу(УстановленныеИни);
	КонецЕсли;
	Если	ТабУстФайлы.Количество()	Тогда
		ИскатьСтроку	= Истина;
	Иначе
		ИскатьСтроку	= Ложь;
	КонецЕсли;
	СтруктураФайлов	= Конфигурация;
	Для Каждого Элемент Из СтруктураФайлов Цикл			
		НоваяСтрока = Новый Структура();
		
		Если	ИскатьСтроку	Тогда
			НайденнаяСтрока = ТабУстФайлы.Найти(Элемент.Имя, "ИмяФайла");
			Если НайденнаяСтрока<>Неопределено Тогда
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Истина);
			Иначе
				НоваяСтрока.Вставить("ЕстьФайлНастроек", Ложь);
			КонецЕсли;
		Иначе
			НоваяСтрока.Вставить("ЕстьФайлНастроек", Ложь);
		КонецЕсли;
			
		РазделительРасширения	= Найти(Элемент.Имя,".");
		Если	РазделительРасширения	= 0	Тогда
			ИмяФайлаБезРасширения	= Элемент.ИмяБезРасширения;
		Иначе
			ИмяФайлаБезРасширения	= Лев(Элемент.Имя,РазделительРасширения-1);
		КонецЕсли;
		НоваяСтрока.Вставить("Имяфайла",				Элемент.Имя);
		НоваяСтрока.Вставить("ИмяФайлаБезРасширения",	ИмяФайлаБезРасширения);
		НоваяСтрока.Вставить("ПолноеИмя",				Элемент.ПолноеИмя);
		МассивДоступныхИниФайлов.Добавить(НоваяСтрока);	
		
	КонецЦикла;	
	
	Возврат МассивДоступныхИниФайлов;	
	
КонецФункции

&НаКлиенте
Функция		НайтиВыбраннуюКонфигурациюНастроек(СтруктураКонфигураций, ЗначениеКонфигурации)			Экспорт
	
	//Пока так криво ищем выбранную конфу
	НашаКонфигурация = Неопределено;
	Для Каждого СтрокаСтруктур из СтруктураКонфигураций Цикл
		Если СтрокаСтруктур.Значение.НазываниеКонфигурации = ЗначениеКонфигурации Тогда
			НашаКонфигурация = СтрокаСтруктур.Значение;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат	НашаКонфигурация;
	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПростыеДанныеВТаблицу(ИсходныеДанные, ПередатьНаКлиент=Ложь)
	
	ДанныеВозврата = Новый ТаблицаЗначений();
	Если ТипЗнч(ИсходныеДанные) = Тип("Массив") Тогда
		Если	ИсходныеДанные.Количество()
			И	ТипЗнч(ИсходныеДанные[0]) = Тип("Структура") Тогда
			Для	Каждого	ЭлементМассива Из ИсходныеДанные Цикл
				НоваяСтрока	= ДанныеВозврата.Добавить();
				Для	Каждого КлючИЗначение Из ЭлементМассива Цикл
					Если ДанныеВозврата.Колонки.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
						МассивТипов	= Новый	Массив;
						МассивТипов.Добавить(ТипЗнч(КлючИЗначение.Значение));
						ДанныеВозврата.Колонки.Добавить(КлючИЗначение.Ключ, Новый ОписаниеТипов(МассивТипов));
					КонецЕсли;
					НоваяСтрока[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ДанныеВозврата = ИсходныеДанные;	
	КонецЕсли;
		
	Если ПередатьНаКлиент Тогда
		ДанныеВозврата = ЗначениеВСтрокуВнутр(ДанныеВозврата);
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

&НаКлиенте
Функция		СформироватьСтруктуруКонфигураций(Кэш, СписокТиповНастроек)								Экспорт//Вынесено в общее, для возмности формирования списка конфигураций при получении настроек с сервера и установки конфигурации, которая указана как базовая
	
	СтруктураКонфигураций	= Новый Структура();
	СписокВыбора			= Новый	Массив();
	Для каждого СтрокаНастроек из СписокТиповНастроек Цикл
		НазываниеКонфигурации	= ОпределитьТипНастроекПоПрефиксу(Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, СтрокаНастроек.Представление);
		СписокВыбора.Добавить(НазываниеКонфигурации);
		
		СтруктураОднойКонфигурации	= Новый Структура();
		СтруктураОднойКонфигурации.Вставить("НазываниеКонфигурации",	НазываниеКонфигурации);
		СтруктураОднойКонфигурации.Вставить("СтруктураКонфигурации",	СтрокаНастроек.Значение.МассивИни);
		СтруктураОднойКонфигурации.Вставить("ПараметрыКонфигурации",	СтрокаНастроек.Значение.ПараметрыКонфигурации);
		
		СтруктураКонфигураций.Вставить("Конфигурация" + Число(СписокТиповНастроек.Индекс(СтрокаНастроек) + 1),	СтруктураОднойКонфигурации);
	КонецЦикла;
	Результат	= Новый	Структура("СписокВыбора, СтруктураКонфигураций", СписокВыбора, СтруктураКонфигураций);
		
	Возврат	Результат
	
КонецФункции	
	
&НаКлиенте
Процедура	ОчиститьСобранныеНастройки(Кэш)															Экспорт 
	
	//Определяет данные в кэше, которые надо удалить при перезапуске, для повторного сбора
	КлючиКэшУдалить	= Новый	Структура("XSLT, Конфигурация");
	//Определяет данные в кэше, которые надо установить в значения по-умолчанию при перезапуске
	КлючиКэшОчистить= Новый Структура("ини, ИниВПорядке", Новый Структура, Ложь);
	
	Для	Каждого	КлючИЗначение	Из	КлючиКэшУдалить		Цикл
		Если Кэш.Свойство(КлючИЗначение.Ключ) Тогда
			Кэш.Удалить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для	Каждого	КлючИЗначение	Из	КлючиКэшОчистить	Цикл
		Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Если Кэш.КэшНастроек.Свойство("ВыбранныеНастройки") Тогда
		Кэш.КэшНастроек.Удалить("ВыбранныеНастройки");
	КонецЕсли;
	
	Кэш.ГлавноеОкно.Конфигурация = "";
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция		ОчиститьСтруктуруИниОтСлужебныхЗначений(Знач СлужебнаяСтруктура)						Экспорт
	//Копирует и возвращает структуру файла(ов) настроек без системных и рассчитанных значений узлов
	//Функция является дублем аналогичной функции из формы настроек каталога с добавлением проверки на флаг формата и рассчитанного значения
	НоваяСлужебнаяСтруктура	= Новый	Структура();
	Для Каждого Узел Из СлужебнаяСтруктура Цикл
		СбисКлюч = НРег(Узел.Ключ);
		Если	СбисКлюч = "ошибка"
			Или СбисКлюч = "формат2016"//Пока не будет убран флаг при расчете ини.
			Или СбисКлюч = "формат2019"//Пока не будет убран флаг при расчете ини.
			Или СбисКлюч = "форматукд2020"//
			Или СбисКлюч = "рассчитанноезначение"//Убираем рассчитанные значения на случай, если вдруг где-то закэшировалось
			Или	СбисКлюч = "сбисавтообновление"
			Или	СбисКлюч = "сбисестьизменения"
			Или	СбисКлюч = "сбисестьтиповая"
			Или	СбисКлюч = "сбисимяфайла"
			Или	СбисКлюч = "сбисошибки"
			Или	СбисКлюч = "сбисполноеимяфайла"	
			Тогда
				Продолжить;
		КонецЕсли;
		Если ТипЗнч(Узел.Значение) = Тип("Структура") Тогда
			НоваяСлужебнаяСтруктура.Вставить(Узел.Ключ, ОчиститьСтруктуруИниОтСлужебныхЗначений(Узел.Значение));
		Иначе
			НоваяСлужебнаяСтруктура.Вставить(Узел.Ключ, Узел.Значение);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат НоваяСлужебнаяСтруктура;
	
КонецФункции

//Структура с параметрами для работы extSDK. Параметры получаются для переданных параметров конфы.
//Вынесено в общее для сбора всех данных на сервере
&НаСервереБезКонтекста
Функция		ОпределитьПараметрыКонфигурации(ПараметрыСистемы, Отказ)								Экспорт
	
	Если Отказ Тогда
		Возврат	Ложь;
	КонецЕсли;
	РазделительВерсии = ".";
	ВерсияСырая = ПараметрыСистемы.Конфигурация.Версия;
	Результат = Новый Структура("subsystem,version");
	Результат.Вставить("subsystem", ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.Конфигурация.КраткаяИнформация, ВерсияСырая, Отказ));
	Если Найти(Результат.subsystem, "-") Тогда
		ВерсияСырая = Результат.subsystem;
		РазделительВерсии = "-";
		Результат.Вставить("subsystem", СтрПолучитьСтроку(СтрЗаменить(Результат.subsystem, "-", Символы.ПС),1));
	КонецЕсли;
	//Если это пользовательская конфа, то версию ставим от пользовательской.
	Если ПустаяСтрока(Результат.subsystem) Тогда
		Результат.Вставить("version",	"0.0.0.1");
	Иначе
		Результат.Вставить("version",	ОпределитьВерсиюСистемы(ВерсияСырая,Новый Структура("Разделитель", РазделительВерсии)));
	КонецЕсли;

	Возврат	Результат;	
	
КонецФункции

//Возвращает параметры системы, устанавливаемой по-умолчаению
&НаСервереБезКонтекста
Функция		СистемаПо_Умолчанию()																	Экспорт
	
	Возврат Новый Структура("subsystem,version","БУХ3","3.0.51.21");
	
КонецФункции

//Формирует префикс системы, вида "service" + "subsystem" + остаток "version"
&НаСервереБезКонтекста
Функция		СформироватьПрефиксСистемы(ПараметрыКонфигурации) 										Экспорт
		
	ВерсияКПрефиксу	= "";
	
	Если Не ПустаяСтрока(ПараметрыКонфигурации.subsystem) Тогда
		МногоуровневыйПрефикс	= СтрЗаменить(ПараметрыКонфигурации.subsystem,	"-", Символы.ПС);
		МногоуровневаяВерсия	= ?(ПараметрыКонфигурации.Свойство("version"), СтрЗаменить(ПараметрыКонфигурации.version,	".", Символы.ПС), "");
		Для	шаг = 1		По СтрЧислоСтрок(МногоуровневыйПрефикс)	Цикл
			СтрокаВерсии = СтрПолучитьСтроку(МногоуровневаяВерсия, шаг);
			Если	СтрокаВерсии = Прав(СтрПолучитьСтроку(МногоуровневыйПрефикс,шаг), СтрДлина(СтрокаВерсии))	Тогда
				ВерсияКПрефиксу	= "-";
			Иначе
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		Для	шаг = шаг	По СтрЧислоСтрок(МногоуровневаяВерсия)	Цикл
			ВерсияКПрефиксу	= ВерсияКПрефиксу	+ СтрПолучитьСтроку(МногоуровневаяВерсия, шаг) + "-";
		КонецЦикла;
	КонецЕсли;
	Префикс = Неопределено;
	Если Не ПараметрыКонфигурации.Свойство("service", Префикс) Тогда
		Префикс = "";
	КонецЕсли;
	Префикс = Префикс + ПараметрыКонфигурации.subsystem + Лев(ВерсияКПрефиксу, СтрДлина(ВерсияКПрефиксу)-1);
	Возврат	Префикс;

КонецФункции

//Функция отсеивает не числовые символы, приводит версию к стандарту 1С
&НаСервереБезКонтекста
Функция		ОпределитьВерсиюСистемы(ВерсияПоиск, ДополнительныеПараметры=Неопределено)
	//Убираем не числовые символы из версии системы, сохраняя разрядность
	ДопустимыеСимволы	= "0123456789";
	РазделительПоиск	= Неопределено;
	РазделительОсновной	= ".";
	РазделителиАльт		= ";/- _*,\:№";//Возможные разделители в версии, которые прописаны не по формату 1С. 
	ЧислоРазрядов		= 4;
	Заполнитель			= "0";
	ВерсияСистемы		= "";
	Если		ДополнительныеПараметры = Неопределено
		Или Не	ДополнительныеПараметры.Свойство("Разделитель", РазделительПоиск) Тогда
		РазделительПоиск = РазделительОсновной;
	КонецЕсли;
	
	МногоуровневаяВерсия = СтрЗаменить(ВерсияПоиск, РазделительПоиск, Символы.ПС);
	
	Для	шагстрок = 1 По ЧислоРазрядов Цикл
		СтрокаРазряда	= СтрПолучитьСтроку(МногоуровневаяВерсия, шагстрок);
		шаг				= 1;
		Пока шаг	<= СтрДлина(СтрокаРазряда)	Цикл
			ТестСимвол	= Сред(СтрокаРазряда, шаг, 1);
			Если		Булево(Найти(ДопустимыеСимволы,ТестСимвол)) Тогда//Если допустимый символ, то ничего не делаем
				шаг	= шаг + 1;
				Продолжить;
			ИначеЕсли	Булево(Найти(РазделителиАльт,ТестСимвол)) Тогда//Если это возможный разделитель, то как разряд берём все, чтоб было до него
				СтрокаРазряда = Лев(СтрокаРазряда, шаг - 1);
				Прервать;
			КонецЕсли;
			СтрокаРазряда	= Лев(СтрокаРазряда, шаг - 1)	+ Сред(СтрокаРазряда, шаг + 1);
		КонецЦикла;
		ВерсияСистемы	= ВерсияСистемы	+ ?(ПустаяСтрока(ВерсияСистемы), "", РазделительОсновной)	+ ?(ПустаяСтрока(СтрокаРазряда), Заполнитель, СтрокаРазряда);
	КонецЦикла;
	
	Возврат	ВерсияСистемы;
	
КонецФункции

//Префикс конфы по названию. Изменено для совместимости и универсализации поиска по полному и сокращенному наименованию метаданных.
&НаСервереБезКонтекста
Функция		ОпределитьТипПодсистемы(ПараметрыСистемы, Отказ)
	ПредставлениеПодсистемы = ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.Имя, ПараметрыСистемы.Версия, Ложь);
	Если ПустаяСтрока(ПредставлениеПодсистемы) И Не ПустаяСтрока(ПараметрыСистемы.КраткаяИнформация) Тогда
		ПредставлениеПодсистемы = ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.КраткаяИнформация, ПараметрыСистемы.Версия, Ложь);
	КонецЕсли;
	Если ПустаяСтрока(ПредставлениеПодсистемы) И Не ПустаяСтрока(ПараметрыСистемы.ПодробнаяИнформация) Тогда
		ПредставлениеПодсистемы = ПолучитьПрефиксСистемыПоНазванию(ПараметрыСистемы.ПодробнаяИнформация, ПараметрыСистемы.Версия, Ложь);
	КонецЕсли;
	Если ПустаяСтрока(ПредставлениеПодсистемы) Тогда//Система по-умолчанию - БУХ3 последней версии.
		ПараметрыСистемыПо_Умолчанию = СистемаПо_Умолчанию();
		ПредставлениеПодсистемы = СформироватьПрефиксСистемы(ПараметрыСистемыПо_Умолчанию);
	КонецЕсли;
	Возврат ПредставлениеПодсистемы;
КонецФункции

&НаКлиенте
Функция		ОтсеятьЧисла(Строка) Экспорт
	
	СимволыФильтра = "0123456789";
	Результат = Строка;
	шаг = 1;
	Пока шаг <= СтрДлина(Результат)	Цикл
		ТекСимвол = Сред(Результат, шаг, 1);
		Если Не	ПустаяСтрока(ТекСимвол)
			И	Булево(Найти(СимволыФильтра,ТекСимвол)) Тогда
			Результат = Лев(Результат, шаг-1) + Сред(Результат, шаг+1);
			Продолжить;
		КонецЕсли;
		шаг = шаг+1;
	КонецЦикла;
	Возврат	Результат;
	
КонецФункции

//Префикс конфы по названию. Изменено для совместимости и универсализации поиска по полному и сокращенному наименованию метаданных.
&НаСервереБезКонтекста
Функция		ПолучитьПрефиксСистемыПоНазванию(Название, Версия, Отказ)
	
	ТипПодсистемы			= "";
	НомерРедакции			= "";
	МногострочноеНазвание	= СтрЗаменить(Название, " ", Символы.ПС);
	Для Счетчик = 1 По СтрЧислоСтрок(МногострочноеНазвание) Цикл
		ТекСтрока = СтрПолучитьСтроку(МногострочноеНазвание, Счетчик);
		Если	ТекСтрока	= "редакция"  или ТекСтрока    = "ред."	Тогда
			НомерРедакции	= СтрПолучитьСтроку(МногострочноеНазвание, Счетчик	+ 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	НомерРедакции	= СтрЗаменить(НомерРедакции, ".", "");
	НазваниеАнализ	= НРег(Название);	
	Если		Лев(НазваниеАнализ, 11) = "бухгалтерия" Тогда
		Если		Найти(НазваниеАнализ, "государственного") Тогда
			ТипПодсистемы	= "БГУ"	+ ?(Лев(НомерРедакции,1)="1", "", Лев(НомерРедакции,1));
		ИначеЕсли   Найти(НазваниеАнализ, "предприятия") Тогда
			ТипПодсистемы	= "БУХ";
			Если Не Лев(НомерРедакции,1) = "1" Тогда
				ТипПодсистемы = ТипПодсистемы + Лев(НомерРедакции,1);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(НазваниеАнализ, "бухгалтерия сельскохозяйственного") Тогда //  НазваниеАнализ = 1с:предприятие 8. бухгалтерия сельскохозяйственного предприятия, редакция 3.0
		ТипПодсистемы	= "БСХП"+ Лев(НомерРедакции,1);
	ИначеЕсли Найти(НазваниеАнализ, "холдингом") Тогда // alo 16.09.2019
		ТипПодсистемы = "УХ" + Лев(НомерРедакции,1);
	ИначеЕсли	Найти(НазваниеАнализ, "управление") Тогда
		Если		Найти(НазваниеАнализ, "производственным") Тогда
			ТипПодсистемы	= "УПП";
		ИначеЕсли   Найти(НазваниеАнализ, "торговлей") Тогда
			ТипПодсистемы	= "УТ"	+ Лев(НомерРедакции,2);
		ИначеЕсли	(	Найти(НазваниеАнализ, "небольшой")
					Или	Найти(НазваниеАнализ, "нашей"))
				И	Найти(НазваниеАнализ, "фирмой")	Тогда
			ТипПодсистемы	= "УНФ";//	+ Лев(НомерРедакции,2);
		ИначеЕсли	Найти(НазваниеАнализ, "предприятием")
				И	Найти(НазваниеАнализ, "erp")
				И	Лев(Версия,1) = "2" Тогда
			ТипПодсистемы	= "ERP";
		ИначеЕсли	Найти(НазваниеАнализ, "далион")
				И	Найти(НазваниеАнализ, "магазином") Тогда
			ТипПодсистемы = "ДУМ" + Лев(НомерРедакции,1);
		ИначеЕсли	Найти(НазваниеАнализ, "недвижимостью")
				И	Найти(НазваниеАнализ, "аренда") Тогда
			ТипПодсистемы = "АУНБУХ"+ Лев(НомерРедакции,1);
		ИначеЕсли	Найти(НазваниеАнализ, "подрядчик строительства") Тогда
			ТипПодсистемы = "ПСУФ"+ Лев(НомерРедакции,1);
		КонецЕсли;
	ИначеЕсли	Найти(НазваниеАнализ, "комплексная") Тогда
		НомерРедакции = Лев(Версия, 3);
		ТипПодсистемы	= "КА"	+ ?(Лев(НомерРедакции,1)="1", "", Лев(НомерРедакции,1));
	ИначеЕсли	Найти(НазваниеАнализ, "зарплата")
			И	Найти(НазваниеАнализ, "управление") Тогда
		ТипПодсистемы	= "ЗУП";
	ИначеЕсли	Найти(НазваниеАнализ, "розница") Тогда
		ТипПодсистемы	= "РОЗН"	+ Лев(НомерРедакции,1);	// alo розница 
	ИначеЕсли Найти(НазваниеАнализ, "общепит1с") Тогда
		ТипПодсистемы = "БУХ" + Лев(НомерРедакции,1);
	ИначеЕсли Найти(НазваниеАнализ,"штрих-м: торговое предприятие") Тогда //d.ch 15.08.2019
		ТипПодсистемы = "ШТП" + Лев(НомерРедакции,1);
	ИначеЕсли Найти(НазваниеАнализ, "автосалон") Тогда //bav 11.09.2019
		ТипПодсистемы = "АА" + Лев(НомерРедакции,1);
	КонецЕсли;
	
	//Если	ПустаяСтрока(ТипПодсистемы)	Тогда
	//	Сообщить("Не удалось определить префикс настроек для текущей конфигурации!",	СтатусСообщения.Важное);
	//	Отказ	= Истина;
	//КонецЕсли;
	
	Возврат	ТипПодсистемы;
	
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниРазделов(Кэш, сбисСтруктураРазделов, сбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	//Формируем кэш сбис для сопоставления документов
	КэшСБИС = Неопределено;
	Если Не Кэш.Свойство("СБИС", КэшСБИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	сбисСоответствиеНомеровНастраиваемыхРазделов = Новый Структура("Продажа, Покупка, Справочники", "3", "4", "6");
	Для Каждого Раздел Из сбисСтруктураРазделов Цикл
		сбисНомерРаздела = Неопределено;
		Если сбисСоответствиеНомеровНастраиваемыхРазделов.Свойство(Раздел.Ключ, сбисНомерРаздела) Тогда
			Если Не Раздел.Значение.Свойство("Параметры") Тогда
				Раздел.Значение.Вставить("Параметры", Новый Структура);
			КонецЕсли;
			Раздел.Значение.Параметры.Вставить("Номер", сбисНомерРаздела);
			РазделЗаполнить(Кэш, Раздел.Ключ, Раздел.Значение);
		КонецЕсли;
		Для Каждого ПодРаздел Из Раздел.Значение.Список Цикл
			Если	ПодРаздел.Значение.Свойство("РеестрСБИС_Тип")
				И	ЗначениеЗаполнено(ПодРаздел.Значение.РеестрСБИС_Тип) Тогда
				СписокТипов = СтрЗаменить(ПодРаздел.Значение.РеестрСБИС_Тип, ",", Символы.ПС);
				Для НомерСтроки = 1 По СтрЧислоСтрок(СписокТипов) Цикл 
					ТипДок = СокрЛП(СтрПолучитьСтроку(СписокТипов, НомерСтроки));
					ТипДокИни = Неопределено;
					Если Не КэшСБИС.Ини.Свойство(ТипДок, ТипДокИни) Тогда
						ТипДокИни = Новый Массив;
						КэшСБИС.Ини.Вставить(ТипДок, ТипДокИни);
					КонецЕсли;
					ДокументЗначение = ПодРаздел.Значение.Документ;
					Если ПустаяСтрока(ДокументЗначение) Тогда
						Продолжить;
					КонецЕсли;
					Попытка
						ИмяДокумента1С	= Кэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(ДокументЗначение);
						СсылкаПустая	= Кэш.ОбщиеФункции.СформироватьПустуюСсылкуДокумента(ИмяДокумента1С);
						ТипДокИни.Добавить(Новый Структура("Тип,ПустаяСсылка,ини",ИмяДокумента1С,СсылкаПустая,ПодРаздел.Ключ));
					Исключение;
					КонецПопытки;
				КонецЦикла
			КонецЕсли;
			//TODO38 объединить это место с функцией сбисЗаполнитьДополнительныеПараметрыФильтра
			//Заполняем пользовательские фильтры
			Если	Не	ПодРаздел.Значение.Свойство("ЕстьЗапросРеестра")
				Или	Не	ПодРаздел.Значение.ЕстьЗапросРеестра Тогда
				Продолжить;
			КонецЕсли;
			ФормаДопФильтра = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра", 
																	"Фильтр_Раздел_" + Раздел.Ключ + "_" + ПодРаздел.Ключ, 
																	"Фильтр_Раздел_" + Раздел.Ключ + "_Шаблон");
			Если ФормаДопФильтра = Ложь Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьДополнительныеПараметрыФильтра(Кэш, ФормаДопФильтра);	
		КонецЦикла;
	КонецЦикла;
КонецФункции

//В функцию должны быть вынесены все параметры, определяемые из настройки Конфигурация.
&НаКлиенте                                  
Функция		УстановитьИниКонфигурации(Кэш, ИниКонфигурации, ДополнительныеПараметры=Неопределено, Отказ) Экспорт

	ФормаРаботыСоСтатусами		= Кэш.ОбщиеФункции.РассчитатьЗначение("ФормаРаботыСоСтатусами",				ИниКонфигурации);
	ФормаРаботыСНоменклатурой	= Кэш.ОбщиеФункции.РассчитатьЗначение("ФормаРаботыСНоменклатуройПоставщика",ИниКонфигурации);
	//Меняем форму работы со статусами
	Если	ФормаРаботыСоСтатусами= "Статусы_СостоянияЭД" 
		И	Кэш.Парам.СостояниеЭД = Ложь Тогда
		//ИниКонфигурации.ФормаРаботыСоСтатусами.Значение="'Статусы_Регистры'";
		ФормаРаботыСоСтатусами = "Статусы_Регистры";
		Кэш.ГлавноеОкно.СостояниеЭД	= Истина;
		Кэш.Парам.СостояниеЭД		= Истина;
	КонецЕсли;
	//Получим форму работы со статусами и пропишем туда кэш.
	ФормаРаботыСоСтатусамиЗначение = Кэш.ГлавноеОкно.СбисПолучитьФормуОбработки(Кэш, ФормаРаботыСоСтатусами, Новый Структура, Отказ);
	Попытка
		ФормаРаботыСоСтатусамиЗначение.ЛокальныйКэш = Кэш;
	Исключение
		//Исключение не обрабатываем, отвалиться может только в случае, если форма вынесена в внешние функции
	КонецПопытки;
	Кэш.ТекущийСеанс.Формы.Получены.Вставить(ФормаРаботыСоСтатусами, ФормаРаботыСоСтатусамиЗначение);
	
	//Меняем форму работы с номенклатурой
	Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
		СБИС_НоменклатураПоставщиков = Кэш.ОбщиеФункции.РассчитатьЗначение("НоменклатураПоставщиков", ИниКонфигурации);
		// если настройки хранятся на сервере, то номенклатуру сопоставляем не в каталоге
		Если Не ЗначениеЗаполнено(СБИС_НоменклатураПоставщиков) Тогда
		ИначеЕсли	Лев(СБИС_НоменклатураПоставщиков,10) = "Справочник" Тогда
			ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_Справочники"; 
		ИначеЕсли	Лев(СБИС_НоменклатураПоставщиков,7) = "Регистр" Тогда
			ФормаРаботыСНоменклатурой = "СопоставлениеНоменклатуры_Регистры"; 
		КонецЕсли;
	КонецЕсли;
	//Надо проверить что каталог настроек установлен. Если нет, то вернуть по-умолчанию.
	Если ФормаРаботыСоСтатусами = "Статусы_ДБФ" Тогда
		СбисУстановленКаталог = Кэш.Парам.ИдентификаторНастроек;
		Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
			//Если негде хранить статусы и они установлены на DBF, то не считаем за ошибку. 
			СбисУстановленКаталог = Кэш.Парам.КаталогНастроек;
			Если Не ЗначениеЗаполнено(СбисУстановленКаталог) Тогда
				ФормаНастроекКаталог = Кэш.ГлавноеОкно.СбисПолучитьФорму("ФайлыНастроекКаталог");
				СбисУстановленКаталог = ФормаНастроекКаталог.СформироватьКаталогНастроек(Кэш, "", Отказ);
				Если Отказ Тогда 
					Возврат СбисУстановленКаталог;
				КонецЕсли;
			КонецЕсли;
			Кэш.Парам.КаталогНастроек = СбисУстановленКаталог;
			Кэш.ГлавноеОкно.КаталогНастроек = СбисУстановленКаталог;
		КонецЕсли;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			фрм = Кэш.ГлавноеОкно.СбисНайтиФормуФункции("ПолучитьСоединениеСтатусыДБФ", ФормаРаботыСоСтатусами);
			Если фрм <> Ложь Тогда
				Кэш.ГлавноеОкно.СоединениеСтатусыДБФ = фрм.ПолучитьСоединениеСтатусыДБФ(ИниКонфигурации, СбисУстановленКаталог);
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	//Добавляем записи в план видов характеристик с учетом возможных изменений ини конфигурации
	Кэш.ОбщиеФункции.ДобавитьЗаписиВПланВидовХарактеристик(ИниКонфигурации);
	
	Кэш.Вставить("ФормаРаботыСоСтатусами",		ФормаРаботыСоСтатусами);
	Кэш.Вставить("ФормаРаботыСНоменклатурой",	ФормаРаботыСНоменклатурой);
	
	//Заполним кодировки, в которых нужно перечитывать файлы.
	СБИС_Кодировки = Кэш.ОбщиеФункции.РассчитатьЗначение("Кодировки", ИниКонфигурации);
	КодировкиЧтенияФайлов = Новый Структура("Определять, ПоУмолчанию", Новый Массив, Новый Структура("ДляВсех", "utf-8"));
	КодировкиЧтенияФайлов.Определять.Добавить("windows-1251");
	Если ЗначениеЗаполнено(СБИС_Кодировки) Тогда
		//Пример узла: <Кодировки Имя="ЧтениеФайлов"><windows1251>'нужная кодировка'</windows1251></Кодировки>
		Если СБИС_Кодировки.Свойство("ЧтениеФайлов") Тогда
			Для Каждого КлючИЗначение Из СБИС_Кодировки.ЧтениеФайлов Цикл
				СбисЗначениеКодировки = НРег(Кэш.ОбщиеФункции.РассчитатьЗначение("Значение", КлючИЗначение.Значение));
				Если КодировкиЧтенияФайлов.Определять.Найти(СбисЗначениеКодировки) = Неопределено Тогда 
					КодировкиЧтенияФайлов.Определять.Добавить(СбисЗначениеКодировки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//Пример узла: <Кодировки Имя="ЧтениеПоУмолчанию"><ДляВсех>'нужная кодировка'</ДляВсех></Кодировки>
		Если СБИС_Кодировки.Свойство("ЧтениеПоУмолчанию") Тогда
			Если СБИС_Кодировки.ЧтениеПоУмолчанию.Свойство("ДляВсех", КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех) Тогда
				КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех = КодировкиЧтенияФайлов.ПоУмолчанию.ДляВсех.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Кэш.КэшЗначенийИни.Вставить("КодировкиЧтенияФайлов", КодировкиЧтенияФайлов);
	////Возможность переопределить встроенный язык через ини конфигурации
	////Пример узла: <КодВстроенногоЯзыка>'utf-8'</КодВстроенногоЯзыка>
	//СбисКодВстроенногоЯзыка	= Кэш.ОбщиеФункции.РассчитатьЗначение("КодВстроенногоЯзыка", ИниКонфигурации);
	//Если ЗначениеЗаполнено(СбисКодВстроенногоЯзыка) Тогда
	//	Кэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = СбисКодВстроенногоЯзыка;		
	//КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура	РазделЗаполнить(Кэш, НазваниеРаздела, ДанныеРаздела)
	
	Реестр1С_Названия			= Новый СписокЗначений;
	сбисМенюРаздела				= Новый Структура;
	сбисПодразделы				= Новый Массив;
	МассивНазванийКнопок		= Новый Массив;
	Кэш.Разделы[НазваниеРаздела]= Новый Структура;
	Кэш.МенюРазделов.Вставить(НазваниеРаздела, сбисМенюРаздела);
	
	Для Каждого сбисТипДокумента Из ДанныеРаздела.Список Цикл
		Если	Не(	сбисТипДокумента.Значение.ЕстьЗапросРеестра
				Или сбисТипДокумента.Значение.ЕстьСправочникТип) Тогда
			Продолжить;
		КонецЕсли;
		Если сбисТипДокумента.Значение.РеестрПоУмолчанию Тогда
			сбисПодразделы.Вставить(0,сбисТипДокумента.Ключ);	
		Иначе
			сбисПодразделы.Добавить(сбисТипДокумента.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	сбисИмяКнопки		= "Аккордеон" + НазваниеРаздела + "Док%сч%" + ДанныеРаздела.Параметры.Номер + ДанныеРаздела.Параметры.Номер;
	сбисСчетчикРазделов	= -1;
	Для Каждого сбисПодраздел Из сбисПодразделы Цикл
		сбисТипДокумента	= ДанныеРаздела.Список[сбисПодраздел];
		сбисТекстКнопки		= сбисТипДокумента.Реестр1С_Название;
		сбисИмяМеню			= сбисТипДокумента.Реестр1С_Меню;
		сбисМетодАктивации	= сбисТипДокумента.Реестр1С_МетодНаАктивацию;
		сбисЗаголовокМеню	= Неопределено;//Совместимость со старыми коннекшенами, где нет заголовка меню
		Если Не сбисТипДокумента.Свойство("Реестр1С_МенюЗаголовок", сбисЗаголовокМеню) Тогда
			сбисЗаголовокМеню = сбисТекстКнопки;
		КонецЕсли;
		сбисМетодАктивации	= сбисТипДокумента.Реестр1С_МетодНаАктивацию;
		Если		Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение
			И	Не	МассивНазванийКнопок.Найти(сбисТекстКнопки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		сбисСчетчикРазделов	= сбисСчетчикРазделов + 1;
		лИмяКнопки = СтрЗаменить(сбисИмяКнопки, "%сч%", сбисСчетчикРазделов);
		МассивНазванийКнопок.Добавить(сбисТекстКнопки);
		Реестр1С_Названия.Добавить(сбисТекстКнопки, сбисТекстКнопки);
		
		Кэш.Разделы[НазваниеРаздела].Вставить(лИмяКнопки, сбисПодраздел);
		
		сбисМенюРаздела.Вставить(лИмяКнопки, Новый Массив());
		Если	Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение
			И	Не Кэш.ТихийРежим Тогда
			//Для обычного прилоежния попробуем установить заголовок для кнопки
			Попытка
				Кэш.ГлавноеОкно.ЭлементыФормы[лИмяКнопки].Заголовок = "    " + сбисТекстКнопки;
			Исключение
				Сообщить("Раздел """ + сбисТекстКнопки + """ не подключен. Слишком много файлов настроек.");
			КонецПопытки;
		КонецЕсли;
		//Иначе
		//	Продолжить;
		//	//лИмяКнопки = СтрЗаменить(сбисИмяКнопки, "%сч%", 0);
		//КонецЕсли;
		сбисМенюРаздела[лИмяКнопки].Добавить(Новый Структура("ИмяКнопки, ЗаголовокКнопки, МетодАктивации, ИмяИни", сбисИмяМеню, сбисЗаголовокМеню, сбисМетодАктивации, сбисПодраздел));
	КонецЦикла;	
	
	Если Кэш.ТихийРежим Тогда//При тихом режиме не требуется заполнять аккордеон на форме 
		Возврат;
	ИначеЕсли Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		//Для УФ заполним аккордеон на сервере
		Кэш.ГлавноеОкно.РазделЗаполнитьНаСервере(НазваниеРаздела, ДанныеРаздела.Параметры.Номер, МассивНазванийКнопок);
	Иначе
		//Для ОФ очищаем заголовки кнопок, если инишки были удалены
		Для СчР = сбисСчетчикРазделов + 1 По 9 Цикл
			Попытка
				Кэш.ГлавноеОкно.ЭлементыФормы[СтрЗаменить(сбисИмяКнопки, "%сч%", СчР)].Заголовок = "";
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция		СбисДобавитьПечатныеФормы(Кэш, Отказ) Экспорт
	ИмяФайлаОбработки = Кэш.ОбщиеФункции.сбисПолноеИмяФайла(Кэш.ПараметрыСистемы);
	Если Лев(ИмяФайлаОбработки, 5) = "e1cib" Тогда
		//Заглушка на обновление ПФ из хранилища. В случае необходимости, доработать
		Возврат Ложь;
	КонецЕсли;
	СписокДокументов = Новый СписокЗначений;
	Для Каждого Элемент Из Кэш.Ини Цикл
		Если Элемент.Значение.Свойство("ЗапросСпискаДокументов") Тогда
			СписокДокументов.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	ВидДопОбработокПечатнаяФорма = неопределено;
	Если Кэш.Ини.Конфигурация.Свойство("ВидДопОбработокПечатнаяФорма") Тогда
		ВидДопОбработокПечатнаяФорма = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере("ВидДопОбработокПечатнаяФорма", Новый Структура("Ини", Кэш.Ини.Конфигурация));
	КонецЕсли;
	ПараметрыФормированияНаСервере = Новый Структура("УправляемоеПриложение, СписокДокументов, ВидДопОбработокПечатнаяФорма", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение, СписокДокументов, ВидДопОбработокПечатнаяФорма);
	Попытка
		ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ИмяФайлаОбработки);
		сбисДобавитьПечатныеФормыНаСервере(ДвоичныеДанныеОбработки, ПараметрыФормированияНаСервере);	
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекОбщее.СбисДобавитьПечатныеФормы", 700, "Неизвестная ошибка подключения", ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура	СбисДобавитьПечатныеФормыНаСервере(ДвоичныеДанныеОбработки, ПараметрыФормированияНаСервере) Экспорт
	Перем ИмяСправочникаОбработок;
	Если		Не	Метаданные.Справочники.Найти("ВнешниеОбработки") = Неопределено Тогда
		ИмяСправочникаОбработок = "ВнешниеОбработки";
		КлючХранилища = "ХранилищеВнешнейОбработки";
	ИначеЕсли	Не	Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		ИмяСправочникаОбработок = "ДополнительныеОтчетыИОбработки";
		КлючХранилища = "ХранилищеОбработки";
	Иначе//Нет справочника доп. обработок
		Возврат;
	КонецЕсли;
	СбисПредставлениеПФ = "Отправить через sbis";
	// << alo Меркурий
	Если ПараметрыФормированияНаСервере.свойство("ПредставлениеПФ") Тогда
		СбисПредставлениеПФ = ПараметрыФормированияНаСервере.ПредставлениеПФ;
	Конецесли;
	ИдентификаторКоманды = неопределено;
	Если ПараметрыФормированияНаСервере.свойство("ИдентификаторКоманды") Тогда
		ИдентификаторКоманды = ПараметрыФормированияНаСервере.ИдентификаторКоманды;
	Конецесли;	// alo Меркурий >>
	СправочникВОМенеджер = Справочники[ИмяСправочникаОбработок];
	СбисОбработка = СправочникВОМенеджер.НайтиПоНаименованию(СбисПредставлениеПФ);
	Если СбисОбработка = Неопределено Или СбисОбработка.Пустая() Тогда
		//Нет обработки, создать
		СбисОбработка = СправочникВОМенеджер.СоздатьЭлемент();		
		СбисОбработка.Наименование = СбисПредставлениеПФ;
		Если ПараметрыФормированияНаСервере.УправляемоеПриложение Тогда
			Если ПараметрыФормированияНаСервере.Свойство("ВидДопОбработокПечатнаяФорма") И ЗначениеЗаполнено(ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма) Тогда
				СбисОбработка.Вид = ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма;
			Иначе
				СбисОбработка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
			КонецЕсли;
			СбисОбработка.ИспользоватьДляФормыОбъекта = Истина;
			СбисОбработка.ИспользоватьДляФормыСписка = Истина;
			СбисОбработка.БезопасныйРежим = Ложь;
			НоваяКоманда = СбисОбработка.Команды.Добавить();
			НоваяКоманда.Представление = СбисПредставлениеПФ;
			НоваяКоманда.Идентификатор = ИдентификаторКоманды;  // на управляемых формах передача параметров работает только для ВариантЗапуска= ОткрытиеФормы, 
													//	поэтому используем ИдентификаторКоманды, а не ДополнительныеПараметрыОбработки  // alo Меркурий 
			НоваяКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
		Иначе
			Если ПараметрыФормированияНаСервере.Свойство("ВидДопОбработокПечатнаяФорма") И ЗначениеЗаполнено(ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма) Тогда
				СбисОбработка.ВидОбработки = ПараметрыФормированияНаСервере.ВидДопОбработокПечатнаяФорма;
			Иначе
				СбисОбработка.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
			КонецЕсли;
        КонецЕсли;
	Иначе
		сбисОбработка = СбисОбработка.ПолучитьОбъект();
	КонецЕсли;
	// << alo Меркурий
	Если ПараметрыФормированияНаСервере.УправляемоеПриложение Тогда
		сбисОбработка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	КонецЕсли;
	Если ПараметрыФормированияНаСервере.свойство("ПометкаУдаления") Тогда
		сбисОбработка.ПометкаУдаления = ПараметрыФормированияНаСервере.ПометкаУдаления;
	Конецесли;	// alo Меркурий >>
	//Добавить команды
	сбисОбработка[КлючХранилища] = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки);
	Для Каждого Элемент Из ПараметрыФормированияНаСервере.СписокДокументов Цикл
		МетаданныеДок = Метаданные.Документы.Найти(Элемент.Значение);
		Если МетаданныеДок = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПараметрыФормированияНаСервере.УправляемоеПриложение Тогда
			ОбъектНазначения = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", "Документ." + Элемент.Значение);
			Если СбисОбработка.Назначение.Найти(ОбъектНазначения, "ОбъектНазначения") = Неопределено Тогда
				НоваяСтрока = сбисОбработка.Назначение.Добавить();
				НоваяСтрока.ОбъектНазначения = ОбъектНазначения;
			КонецЕсли;
		Иначе
			Если СбисОбработка.Принадлежность.Найти("Документ """ + МетаданныеДок.Синоним + """", "ПредставлениеОбъекта") = Неопределено Тогда
				НоваяСтрока = СбисОбработка.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Документ """ + МетаданныеДок.Синоним + """";
				НоваяСтрока.ПредставлениеКнопки = СбисПредставлениеПФ;
				НоваяСтрока.СсылкаОбъекта = Документы[Элемент.Значение].ПустаяСсылка();
				Попытка
					НоваяСтрока.МетаданныеОбъекта = "Документ." + МетаданныеДок.Имя;
				Исключение
				КонецПопытки;
				// << alo Меркурий
				Если ЗначениеЗаполнено(ИдентификаторКоманды) Тогда
					СтруктураПараметрыОбработки = Новый Структура("ИдентификаторКоманды", ИдентификаторКоманды);
					НоваяСтрока.ДополнительныеПараметрыОбработки = новый ХранилищеЗначения(СтруктураПараметрыОбработки);   
				Конецесли;		// alo Меркурий >>
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	СбисОбработка.Записать();	
КонецПроцедуры


///////////////////////////////////////////////////
///////////////////Протокол ошибок/////////////////
///////////////////////////////////////////////////

&НаСервере
Функция		ВывестиПротоколПроверкиИниФайлов(Знач Ини, Знач ОшибкиИни=Неопределено, Знач ПараметрыПротокола) Экспорт
		
	Если ОшибкиИни = Неопределено Тогда
		ОшибкиИни = Ини;
	КонецЕсли;	
	
	// Функция формирует табличный документ протокола проверки файлов настроек	
	КоличествоРекурсийДляВыводаТаблиц = 1;
	
	Если ПараметрыПротокола.УправляемоеПриложение Тогда		
		сбисСтрокаВычислить = "РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(""ПротоколПроверкиИниФайлов"")";
	Иначе
		сбисСтрокаВычислить = "ЭтотОбъект.ПолучитьМакет(""ПротоколПроверкиИниФайлов"")";
	КонецЕсли;
	МакетПротоколПроверки = Вычислить(сбисСтрокаВычислить);

	ТаблицаМетаданных = Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("Объект");
	ТаблицаМетаданных.Колонки.Добавить("ИмяОбъекта");
	ТаблицаМетаданных.Колонки.Добавить("Синоним");
	ТаблицаМетаданных.Колонки.Добавить("ТипОбъекта");
	
	Таб = Новый ТабличныйДокумент;
	ОбластьЗаголовок = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокПротокола");
	ОбластьЗаголовок.Параметры.ЗаголовокКаталог = ПараметрыПротокола.ЗаголовокКаталог;
	ОбластьЗаголовок.Параметры.КаталогНастроек = ПараметрыПротокола.КаталогНастроек;
	ОбластьЗаголовок.Параметры.ДатаВремя = формат(ТекущаяДата());
	ОбластьЗаголовок.Параметры.Конфигурация = Метаданные.Синоним+" ("+Метаданные.Версия+")";
	ОбластьЗаголовок.Параметры.Версия = ПараметрыПротокола.Версия;
	ОбластьЗаголовок.Параметры.КонфигурацияФайловНастроек = ПараметрыПротокола.КонфигурацияФайловНастроек;
	Таб.Вывести(ОбластьЗаголовок);	
	
	ЗаполнитьТаблицуМетаданныхДляПротокола(ТаблицаМетаданных, Ини);
	
	СписокКопия = ТаблицаМетаданных.Скопировать();
	Для Каждого Элемент Из СписокКопия Цикл
		Если ТипЗнч(Элемент.Объект) = Тип("Структура") Тогда
			Для Каждого ЭлементаСтр из Элемент Цикл
				ТаблицаМетаданных = сбисСформироватьСписокМетаданных(ТаблицаМетаданных,ЭлементаСтр.Значение,КоличествоРекурсийДляВыводаТаблиц);
			КонецЦикла;	
		Иначе	
			ТаблицаМетаданных = сбисСформироватьСписокМетаданных(ТаблицаМетаданных,Элемент.Объект,КоличествоРекурсийДляВыводаТаблиц);
		КонецЕсли;	
	КонецЦикла;	
	
	ВывестиОшибки(МакетПротоколПроверки,Таб, ОшибкиИни);
	
	Если ТаблицаМетаданных.Количество() <> 0 Тогда
		ОбластьСправочнаяИнформация = МакетПротоколПроверки.ПолучитьОбласть("СправочнаяИнформация");
		Таб.Вывести(ОбластьСправочнаяИнформация);
	КонецЕсли;	
	
	сбисВывестиИнформациюПоМетаданным(ТаблицаМетаданных,МакетПротоколПроверки,Таб);
	сбисВывестиИнформацияПоОрганизациям(МакетПротоколПроверки,Таб);
	сбисВывестиСправочнуюИнформацию(МакетПротоколПроверки,Таб);
	
	Таб.ТолькоПросмотр        = Истина;
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Таб.АвтоМасштаб           = Истина;
	
	Возврат Таб;
	
КонецФункции

//группа функций и процедур для проверки ини файлов
&НаСервереБезКонтекста
Процедура	ЗаполнитьТаблицуМетаданныхДляПротокола(ТаблицаМетаданных, СлужебнаяСтруктура)
	// Функция заполняет таблицу с метаданными, по которым есть ошибки в файлах настроек 	
	Если ТипЗнч(СлужебнаяСтруктура) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого сбисФайл из СлужебнаяСтруктура Цикл		
		Если ТипЗнч(сбисФайл.Значение) = Тип("Структура") и (сбисФайл.Значение.Свойство("Ошибка")) Тогда
			Строка = сбисФайл.Значение.Ошибка;
			Если ТипЗнч(Строка.ИнформацияПоОбъекту) = Тип("Структура") Тогда
				Для каждого СтрокаИнфПоОб из Строка.ИнформацияПоОбъекту Цикл
					Если ТаблицаМетаданных.Найти(СтрокаИнфПоОб.Значение,"Объект")=Неопределено Тогда
						НоваяСтрока = ТаблицаМетаданных.Добавить();
						НоваяСтрока.Объект     = СтрокаИнфПоОб.Значение;
						НоваяСтрока.ИмяОбъекта = СтрокаИнфПоОб.Ключ;
						НоваяСтрока.ТипОбъекта = "";
					КонецЕсли;
				КонецЦикла;	
			Иначе	
				Если ТаблицаМетаданных.Найти(Строка.ИнформацияПоОбъекту,"Объект")=Неопределено и Строка.ИнформацияПоОбъекту<>Неопределено Тогда
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					НоваяСтрока.Объект     = Строка.ИнформацияПоОбъекту;
					НоваяСтрока.ИмяОбъекта = Строка.ИмяОбъекта;
					НоваяСтрока.ТипОбъекта = "";
				КонецЕсли;
			КонецЕсли;					
		Иначе
			ЗаполнитьТаблицуМетаданныхДляПротокола(ТаблицаМетаданных, сбисФайл.Значение);
		КонецЕсли;	
	КонецЦикла;	 
	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура	ВывестиОшибку(МакетПротоколПроверки, Таб, Узлы, ини)
	// Процедура выводит строку в таблице ошибок в протоколе проверки	
	Если ТипЗнч(Узлы) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	Если Узлы.Свойство("Ошибка") Тогда
		ОбластьСтрокаОшибки                             = МакетПротоколПроверки.ПолучитьОбласть("ОписаниеОшибки");
		ТекстОшибки 									= СтрЗаменить(Узлы.Ошибка.ТекстОшибки," |","");
		ОбластьСтрокаОшибки.Параметры.ТекстОшибки       = ТекстОшибки;
		ОбластьСтрокаОшибки.Параметры.ПолныйПуть 		= ?(Узлы.Ошибка.ПолныйПуть<>Неопределено,"("+Узлы.Ошибка.ПолныйПуть+")","");
		ОбластьСтрокаОшибки.Параметры.Таблица           = ?(Узлы.Ошибка.ИмяОбъекта<>Неопределено,"("+Узлы.Ошибка.ИмяОбъекта+")","");
		ОбластьСтрокаОшибки.Параметры.ЗначениеПараметра = Узлы.Ошибка.ЗначениеПараметра;
		Если Узлы.Ошибка.ИмяПараметра<>"" Тогда
			ОбластьСтрокаОшибки.Параметры.ИмяПараметра      = Узлы.Ошибка.ИмяПараметра;
			Если ини.Свойство(Узлы.Ошибка.ИмяПараметра) и ини[Узлы.Ошибка.ИмяПараметра].Свойство("Комментарий") Тогда
				ТекстКоммментария 								= ?(ЗначениеЗаполнено(ини[Узлы.Ошибка.ИмяПараметра]["Комментарий"]),ини[Узлы.Ошибка.ИмяПараметра]["Комментарий"],"");
				ОбластьСтрокаОшибки.Параметры.ОписаниеПараметра = ?(СокрЛП(ТекстКоммментария)<>"","("+ТекстКоммментария+")","");
				ОбластьСтрокаОшибки.Параметры.ЗначениеПараметра = ?(НРег(Узлы.Ошибка.ИмяПараметра)="текстзапроса","Смотрите значение параметра ""ТекстЗапроса"" в ini файле.",Узлы.Ошибка.ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
		Таб.Вывести(ОбластьСтрокаОшибки);
	КонецЕсли;
	
	Если Узлы.Количество() <> 0 Тогда
		Для каждого Узел из Узлы Цикл
			ВывестиОшибку(МакетПротоколПроверки, Таб, Узел.Значение, ини);
		КонецЦикла; 
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура	ВывестиОшибки(МакетПротоколПроверки,Таб, Ини)
	// Процедура выводит строки в таблице ошибок в протоколе проверки файлов настроек	
	Для Каждого сбисФайл из ини Цикл
		
		Если сбисФайл.Значение.сбисОшибки.Количество() <> 0 Тогда //Есть системные ошибки
			ОбластьЗаголовокТаблицы = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокТаблицы");
			ОбластьЗаголовокТаблицы.Параметры.ИмяФайла = ини[сбисФайл.Ключ].сбисИмяФайла;
			Таб.Вывести(ОбластьЗаголовокТаблицы);
			Для каждого Ошибка из сбисФайл.Значение.сбисОшибки Цикл
				ОбластьСтрокаОшибки                             = МакетПротоколПроверки.ПолучитьОбласть("ОписаниеОшибки");
				ТекстОшибки 									= СтрЗаменить(Ошибка.ТекстОшибки," |","");
				ОбластьСтрокаОшибки.Параметры.ТекстОшибки       = ТекстОшибки;
				ОбластьСтрокаОшибки.Параметры.ПолныйПуть 		= Ошибка.ПолныйПуть;
				ОбластьСтрокаОшибки.Параметры.ИмяПараметра 		= Ошибка.ИмяПараметра;
				ОбластьСтрокаОшибки.Параметры.ОписаниеПараметра = "";
				ОбластьСтрокаОшибки.Параметры.ЗначениеПараметра = Ошибка.ЗначениеПараметра;
				Таб.Вывести(ОбластьСтрокаОшибки);
			КонецЦикла;	
		Иначе // если системных ошибок нет выводим ошибки ини
			Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(сбисФайл.Значение) Тогда
				ОбластьЗаголовокТаблицы = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокТаблицы");
				ОбластьЗаголовокТаблицы.Параметры.ИмяФайла = ини[сбисФайл.Ключ].сбисИмяФайла;
				Таб.Вывести(ОбластьЗаголовокТаблицы);
			КонецЕсли;		
			ВывестиОшибку(МакетПротоколПроверки, Таб, сбисФайл.Значение, ини);
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция		сбисВывестиИнформациюПоМетаданнымСтрока(ТаблицаМетаданных,МакетПротоколПроверки,Таб, Идентификатор)
	// Функция выводит информацию о реквизитах тех метаданных, в которых были обнаружены ошибки
	Если Идентификатор="" Тогда
		Возврат Ложь;
	КонецЕсли;
	Док = Метаданные.НайтиПоПолномуИмени(Идентификатор);
	
	Попытка
		Для Каждого Реквизит Из Док.Реквизиты Цикл //перебор реквизитов объекта
			Если Найти(Реквизит.Тип,",")=0 Тогда
				ОбъектМ = Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]);
				Если ОбъектМ<>Неопределено Тогда
					НайденнаяСтрока = ТаблицаМетаданных.Найти(ОбъектМ.ПолноеИмя(),"Объект");
				Иначе
					НайденнаяСтрока = Неопределено;
				КонецЕсли;
			Иначе
				НайденнаяСтрока = ТаблицаМетаданных.Найти(Реквизит.Синоним, "Объект");
			КонецЕсли;	
			ДопИнф = ?(НайденнаяСтрока<>Неопределено,НайденнаяСтрока.ИмяОбъекта,"");
			ДопИнф = ?(ДопИнф<>"","("+ДопИнф+")","");
			Если ДопИнф<>"" Тогда
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита1");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;
				СтрокаРеквизита.Параметры.СинонимТаблица = ДопИнф;
				Таб.Вывести(СтрокаРеквизита);
			Иначе
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;
				Таб.Вывести(СтрокаРеквизита);
			КонецЕсли;	
		КонецЦикла;
		Попытка
			Для Каждого Реквизит Из Док.СтандартныеРеквизиты Цикл //перебор реквизитов объекта
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;				
				Таб.Вывести(СтрокаРеквизита);
			КонецЦикла;
		Исключение
		КонецПопытки;
		Попытка
			Если Док.ТабличныеЧасти.Количество()>0 Тогда
				ГруппаРеквизитов = МакетПротоколПроверки.ПолучитьОбласть("ГруппаРеквизитов");
				ГруппаРеквизитов.Параметры.ГруппаРеквизитов     = "Табличные части";
				Таб.Вывести(ГруппаРеквизитов);
			КонецЕсли;
			Для Каждого Реквизит Из Док.ТабличныеЧасти Цикл //перебор реквизитов объекта
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = Реквизит.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = Реквизит.Синоним;				
				Таб.Вывести(СтрокаРеквизита);
			КонецЦикла;
		Исключение
		КонецПопытки;
		
	Исключение
		Попытка
			Для Каждого ЗначенияЭлементаМетаданных Из Док Цикл //перебор доступных объектов из списка объектов
				СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
				СтрокаРеквизита.Параметры.ИмяРеквизита     = ЗначенияЭлементаМетаданных.Имя;
				СтрокаРеквизита.Параметры.СинонимРеквизита = ЗначенияЭлементаМетаданных.Синоним;				
				Таб.Вывести(СтрокаРеквизита);
			КонецЦикла;	
		Исключение
			Попытка
				Если Найти(Нрег(Док.ПолноеИмя()),"перечисление")>0 Тогда
					Для Каждого ЗначениеПеречисления из Док.Объект.ЗначенияПеречисления Цикл
						СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
						СтрокаРеквизита.Параметры.ИмяРеквизита     = Строка(Док.ИмяОбъекта + "."+ЗначениеПеречисления.Имя);
						СтрокаРеквизита.Параметры.СинонимРеквизита = Строка(ЗначениеПеречисления.Синоним);				
						Таб.Вывести(СтрокаРеквизита);	
					КонецЦикла;	
				Иначе	
					СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
					СтрокаРеквизита.Параметры.ИмяРеквизита     = Строка(Док.ИмяОбъекта);
					СтрокаРеквизита.Параметры.СинонимРеквизита = Строка(Док.Синоним);				
					Таб.Вывести(СтрокаРеквизита);
				КонецЕсли;
			Исключение
				//Для Каждого Строка из Строка.Объект Цикл
				//Док = Метаданные.НайтиПоПолномуИмени(Строка.Значение);
				Если Найти(Док.ПолноеИмя(),"ТабличнаяЧасть")>0 Тогда
					НайденнаяСтрока = ТаблицаМетаданных.Найти(Док.ПолноеИмя(),"Объект");
					ДопИнф = ?(НайденнаяСтрока<>Неопределено,НайденнаяСтрока.ИмяОбъекта,"");
					ДопИнф = ?(ДопИнф<>"","("+ДопИнф+")","");
					Если ДопИнф<>"" Тогда
						СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита1");
						СтрокаРеквизита.Параметры.ИмяРеквизита     = Док.Имя;
						СтрокаРеквизита.Параметры.СинонимРеквизита = Док.Синоним;
						СтрокаРеквизита.Параметры.СинонимТаблица = ДопИнф;
						Таб.Вывести(СтрокаРеквизита);
					Иначе
						СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
						СтрокаРеквизита.Параметры.ИмяРеквизита     = Док.Имя;
						СтрокаРеквизита.Параметры.СинонимРеквизита = Док.Синоним;
						Таб.Вывести(СтрокаРеквизита);
					КонецЕсли;	
				Иначе	
					СтрокаРеквизита = МакетПротоколПроверки.ПолучитьОбласть("СтрокаРеквизита");
					СтрокаРеквизита.Параметры.ИмяРеквизита     = Строка(Док.Имя);
					СтрокаРеквизита.Параметры.СинонимРеквизита = Строка(Док.Синоним);				
					Таб.Вывести(СтрокаРеквизита);
				КонецЕсли;
				
				//КонецЦикла;
			КонецПопытки
			
		КонецПопытки;	
	КонецПопытки;	
	
КонецФункции	

&НаСервереБезКонтекста
Процедура	сбисВывестиИнформациюПоМетаданным(ТаблицаМетаданных,МакетПротоколПроверки,Таб)
	// Процедура перебирает таблицу метаданных, в которых были обнаружены ошибки и выводит информацию о реквизитах этих метаданных в табличный документ	
	Если ТаблицаМетаданных.Количество()<>0 Тогда
		
		Для Каждого Строка Из ТаблицаМетаданных Цикл
			ОбластьЗаголовокМетаданных                              = МакетПротоколПроверки.ПолучитьОбласть("ЗаголовокМетаданных");
			ОбластьЗаголовокМетаданных.Параметры.ИмяМетаданных      = Строка.ИмяОбъекта;
			Таб.Вывести(ОбластьЗаголовокМетаданных);
			
			Если ТипЗнч(Строка.Объект) = Тип("Структура") Тогда
				Для каждого СтрокаСтр из Строка.Объект Цикл
					сбисВывестиИнформациюПоМетаданнымСтрока(ТаблицаМетаданных, МакетПротоколПроверки, Таб, СтрокаСтр.Значение);
				КонецЦикла;
			Иначе
				сбисВывестиИнформациюПоМетаданнымСтрока(ТаблицаМетаданных, МакетПротоколПроверки, Таб, Строка.Объект);
			КонецЕсли;	
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция		сбисСформироватьСписокМетаданных(ТаблицаМетаданных,Идентификатор=Неопределено,УровеньВложенности)
	// Функция формирует таблицу с реквизитами метаданных для вывода в протоколе проверки	
	Если УровеньВложенности <> 0 Тогда
		Попытка
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Идентификатор);
			Для Каждого Реквизит из ОбъектМетаданных.Реквизиты Цикл
				Если Найти(Реквизит.Тип,",")=0 Тогда //тип один
					ОбъектМ = Метаданные.НайтиПоТипу(Реквизит.Тип.Типы()[0]);
					Если ОбъектМ<>Неопределено и ТаблицаМетаданных.Найти(ОбъектМ.Полноеимя(),"Объект")=Неопределено Тогда
						Попытка                     
							НоваяСтрока = ТаблицаМетаданных.Добавить();
							НоваяСтрока.Объект=ОбъектМ.ПолноеИмя();
							НоваяСтрока.ИмяОбъекта=ОбъектМ.Имя;
							НоваяСтрока.Синоним = ОбъектМ.Синоним;
							НоваяСтрока.ТипОбъекта = "";
							сбисСформироватьСписокМетаданных(ТаблицаМетаданных,ОбъектМ.ПолноеИмя(),УровеньВложенности-1);
						Исключение
							Ошибка = описаниеОшибки();
							Сообщить(Ошибка);
							Сообщить(строка(ОбъектМ));
						КонецПопытки;
					Иначе	
					КонецЕсли;	                
				Иначе	 //несколько типов
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					НоваяСтрока.Объект=Реквизит.ПолноеИмя();
					НоваяСтрока.ИмяОбъекта = Реквизит.Имя;
					НоваяСтрока.ТипОбъекта = Реквизит.Синоним;
					ТекстДляВывода= "Составной реквизит.";
					НоваяСтрока.Синоним = ТекстДляВывода;
				КонецЕсли;	 
			КонецЦикла;
			
		Исключение
			Попытка
				//если табличные части
				Для Каждого ТабличнаяЧасть из ОбъектМетаданных Цикл
					НоваяСтрока = ТаблицаМетаданных.Добавить();
					НоваяСтрока.Объект=ТабличнаяЧасть;
					НоваяСтрока.ИмяОбъекта=ТабличнаяЧасть.ПолноеИмя();
					НоваяСтрока.Синоним = ТабличнаяЧасть.Синоним;
					НоваяСтрока.ТипОбъекта = ТабличнаяЧасть;
					сбисСформироватьСписокМетаданных(ТаблицаМетаданных,ТабличнаяЧасть,УровеньВложенности-1);
				КонецЦикла;	
			Исключение
			КонецПопытки;	
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ТаблицаМетаданных;	
КОнецФункции

&НаСервереБезКонтекста
Процедура	сбисВывестиИнформацияПоОрганизациям(МакетПротоколПроверки,Таб)
	// Выводит информацию по организации в протокол проверки	
	Попытка
		Выборка = Справочники.Организации.Выбрать();
		ОбластьШапкаОрганизации = МакетПротоколПроверки.ПолучитьОбласть("ШапкаОрганизации");
		Таб.Вывести(ОбластьШапкаОрганизации);	
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			ОбластьСтрокаОрганизации = МакетПротоколПроверки.ПолучитьОбласть("СтрокаОрганизации");
			ОбластьСтрокаОрганизации.Параметры.НаименованиеОрганизации = ?(ЗначениеЗаполнено(Выборка.НаименованиеПолное),Выборка.НаименованиеПолное,Выборка.Наименование);
			ОбластьСтрокаОрганизации.Параметры.ИНН_КПП = Выборка.ИНН+" / "+Выборка.КПП;
			Таб.Вывести(ОбластьСтрокаОрганизации);	
		КонецЦикла;	
	Исключение	
	КонецПопытки	
КонецПроцедуры	

&НаСервереБезКонтекста
Процедура	сбисВывестиСправочнуюИнформацию(МакетПротоколПроверки,Таб)
	// Выводит справочную информацию в протокол проверки	
	ОбластьДокументация = МакетПротоколПроверки.ПолучитьОбласть("СсылкаДокументация");
	ОбластьДокументация.Параметры.ТекстСообщения = "Для исправления ошибок передайте протокол проверки техническому специалисту через Вашего менеджера.";
	Таб.Вывести(ОбластьДокументация);	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция	ЕстьОшибкаВУзлеСлужебнойСтруктуры(Узел)
	// Рекурсивно проверяет, есть ли в узле структуры ошибка, чтобы понимать какую структуру узлов надо создавать в пользовательском файле настроек	
	ЕстьОшибка = Ложь;
	Если ТипЗнч(Узел) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Узел.Свойство("Ошибка") Тогда
		Возврат Истина;
	КонецЕсли;	
	Для каждого ЭлементУзла из Узел Цикл		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда	
			Если ЭлементУзла.Значение.Свойство("Ошибка") Тогда
				Возврат Истина;
			КонецЕсли;	
			Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(ЭлементУзла.Значение) Тогда //Проверяем вложенный узел
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат ЕстьОшибка;
	
КонецФункции

///////////////////////////////////////////////////
//////////////////Проверка настроек////////////////
///////////////////////////////////////////////////

//Вызывает проверку структуры установленных файлов настроек	
&НаКлиенте
Функция		СбисПроверитьУстановленныеНастройки(Кэш, УстановленныеИниФайлы, СтруктураИни, СтруктураПараметров, ИдентификаторНастроек=Неопределено) Экспорт
	СтруктураПараметров.Вставить("ДатаПоследнейПроверки", ТекущаяДата());									
    ГлавноеОкно = Кэш.ГлавноеОкно;
	Отказ = Ложь;
	ГлавноеОкно.сбисПоказатьСостояние("Установка пользовательских фильтров", ГлавноеОкно);
	//Перед проверкой установим пользовательские фильтры для запросов
	ПараметрыУстановкиФильтров = Новый Структура("СформироватьРазделыПоДанным, Ини", Истина, СтруктураИни);	
	РезультатЗаполнения = СбисЗаполнитьДополнительныеПараметрыФильтра(Кэш, ПараметрыУстановкиФильтров, Отказ);
	Если Отказ Тогда
		//TODO42 сделать проброску исключения на верхний уровень
		РезультатЗаполнения = Кэш.ОбщиеФункции.СбисИсключение(РезультатЗаполнения, "ФайлыНастроекОбщее.сбисПроверитьУстановленныеНастройки");
		ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатЗаполнения);
		Кэш.ИниВПорядке = Ложь;
		Возврат Неопределено;
	КонецЕсли;
	
	ГлавноеОкно.сбисПоказатьСостояние("Проверка файлов настроек", ГлавноеОкно);
	УстановленныеИниФайлы = ПроверитьИниФайлы(Кэш, УстановленныеИниФайлы, СтруктураИни, СтруктураПараметров);
	Если	УстановленныеИниФайлы.Количество()
		И	Кэш.ИниВПорядке Тогда
		Сообщить("Ошибок в ini файлах не обнаружено.");
	КонецЕсли;
	
	ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
	
	Возврат УстановленныеИниФайлы;
	
КонецФункции

// Проверяет структуру установленных файлов настроек	
&НаКлиенте
Функция		ПроверитьИниФайлы(Кэш, СписокИниФайловДляПроверки, СтруктураИни, СтруктураПараметров)
	
	ГлавноеОкно	= Кэш.ГлавноеОкно;
	
	//Формируется структура инишек, идентичная оригинальной, но в которой только ошибки, или узлы с ошибками. Дальше просто передать вместо инишек эту.
	СтруктураОшибокИни	= ПроверитьСтруктуруИниФайлов(СписокИниФайловДляПроверки, СтруктураИни, Кэш.ПараметрыФильтра); 
	ПоказатьПротокол	= Не Кэш.ТихийРежим И (СтруктураОшибокИни.Количество() Или СтруктураИни.Количество());
	
	// файл настроек Конфигурация обязательно должен быть, иначе выдаем ошибку
	Если Не Кэш.Ини.Свойство("Конфигурация") Тогда
		СтруктураОшибокИни.Вставить("Конфигурация", Новый Структура("сбисОшибки, сбисИмяФайла", Новый Массив, "Конфигурация.sbis3.xml"));
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра",		"Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра",	"Конфигурация");
		НоваяОшибка.Вставить("ТекстОшибки",			"Не установлен файл настроек конфигурации. ");
		НоваяОшибка.Вставить("ИнформацияПоОбъекту",	"");
		НоваяОшибка.Вставить("ИмяОбъекта",			"");
		НоваяОшибка.Вставить("ПолныйПуть",			"");
		СтруктураОшибокИни.Конфигурация.сбисОшибки.Добавить(НоваяОшибка);
	КонецЕсли;
	
	Если СтруктураОшибокИни.Количество() Тогда//Были ошибки, сформировать протокол и пользовательские файлы на соответствующей форме.
		Кэш.ИниВПорядке = Ложь;
		Если ПоказатьПротокол Тогда 
			ПараметрыПротокола = Кэш.ФормаНастроек.сбисПолучитьШапкуПротоколаОбОшибках(Кэш, СписокИниФайловДляПроверки);
			ПараметрыПротокола.Вставить("УправляемоеПриложение", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение);
			//Показать протокол об ошибках
			ТабПротокол	= ВывестиПротоколПроверкиИниФайлов(Кэш.Ини, СтруктураОшибокИни, ПараметрыПротокола);
			ТабПротокол.Показать("Протокол проверки ini файлов");
		КонецЕсли;
		//Формируем пользовательские инишки на соответствующей форме
		Кэш.ФормаНастроек.сбисСформироватьИниФайлыКлиента(Кэш, СписокИниФайловДляПроверки, СтруктураОшибокИни);
	Иначе//Не было ошибок, сообщить что все ок
		Кэш.ИниВПорядке	= Истина;
		//Сохраняем параметры по завершении всех операций
		//Режим = Неопределено;
		//Если	Кэш.Свойство("ДополнительныеПараметры",Режим)//Сохраняем параметры, но только если это не загрузка из каталога. 
		//	И	Режим.Свойство("РежимРаботы", Режим)
		//	И	Режим = "ЗагрузкаИзКаталога" Тогда
		//	Кэш.КэшНастроек.Вставить("сбисПараметры", СтруктураПараметров);
		//Иначе
		//	Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, СтруктураПараметров, ИдентификаторНастроек);//сохранить сбис параметры
		//КонецЕсли;
	КонецЕсли;
	
	СписокУстановленныхИниФайлов = Кэш.ФормаНастроек.сбисОбновитьМассивУстановленныхИниФайлов(Кэш, СписокИниФайловДляПроверки);
	
	Возврат СписокУстановленныхИниФайлов;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьСтруктуруИниФайлов(СписокИниФайловДляПроверки, СтруктураИни, ПараметрыФильтра)
	
	СтруктураОшибок	= Новый	Структура();
	
	КлючСистемныхОшибок	= "сбисОшибки";
	КлючСвойствЗаполнить= "сбисИмяФайла,сбисПолноеИмяФайла";
	
	Для Каждого ИниФайл Из СписокИниФайловДляПроверки Цикл
		Ошибки				= Ложь;
		ИмяБезРасширения	= ИниФайл.Ини_ИмяБезРасширения;
		ИмяИни				= ИниФайл.Ини_ИмяИни;
		сбисФайл			= СтруктураИни[ИмяИни];
		
		ПроверитьСтруктуруИни(сбисФайл,ИмяБезРасширения,ПараметрыФильтра);//Проверяет инишки, формирует и заполняет ошибки в структуре узлов
		
		//Формируются только структуры с инишками и узлами, где есть ошибки. Пока сделано так. В проверке параметров - черт ногу сломит.
		Если сбисФайл[КлючСистемныхОшибок].Количество() <> 0 Тогда //Есть системные ошибки
			СтруктураОшибкиВставка	= Новый	Структура(КлючСвойствЗаполнить);
			ЗаполнитьЗначенияСвойств(СтруктураОшибкиВставка,сбисФайл,КлючСвойствЗаполнить);
			СтруктураОшибкиВставка.Вставить(КлючСистемныхОшибок,	сбисФайл[КлючСистемныхОшибок]);
			Ошибки	= Истина;
		Иначе //Нет системных ошибок, строим узлы с ошибками
			СтруктураОшибкиВставка	= СформироватьСтруктуруОшибкиУзла(сбисФайл);
			Если	СтруктураОшибкиВставка.Количество()	Тогда
				КлючМногострочный	= СтрЗаменить(КлючСвойствЗаполнить	+ ","	+ КлючСистемныхОшибок,",",Символы.ПС);
				Для	шаг	= 1	По	СтрЧислоСтрок(КлючМногострочный)	Цикл
					СтруктураОшибкиВставка.Вставить(СтрПолучитьСтроку(КлючМногострочный,шаг),	сбисФайл[СтрПолучитьСтроку(КлючМногострочный,шаг)]);
				КонецЦикла;
				Ошибки	= Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если	Ошибки	Тогда//Добавить в ошибки готовую структуру
			СтруктураОшибок.Вставить(ИмяИни,	СтруктураОшибкиВставка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат	СтруктураОшибок;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьСтруктуруИни(СтруктураИниФайла,ИмяБезРасширения,ПараметрыФильтра)
	
	// Проверяет структуру файла настроек	
	Для Каждого Стр Из СтруктураИниФайла Цикл
		//не проверяем элементы структуры в имени которых есть слово "сбис"
		//так как это служебные элементы, которые мы добавили вручную
		Если Найти(Стр.Ключ,"сбис")>0 Тогда
			Продолжить
		КонецЕсли;
		ГрязнаяИни	= Новый Структура;
		сбисСкопироватьСтруктуру(ГрязнаяИни, СтруктураИниФайла);
		Попытка
			ПроверитьЗначениеПараметра(Стр.Ключ, Стр.Значение, ГрязнаяИни, СтруктураИниФайла[Стр.Ключ],ПараметрыФильтра);
		Исключение
			СбисОписаниеОшибки = СтрЗаменить(ИнформацияОбОшибке().Описание, "%Замена%", Символы.ПС);
			СбисТекстОшибки = "Неизвестная структура ини файла" + Символы.ПС + "Детальная информация: " + СтрПолучитьСтроку(СбисОписаниеОшибки, 1);
			СбисСтруктураОшибки = СбисОшибкаПроверки(Стр.Ключ, "Узел ини файла", СбисТекстОшибки,,,СтрПолучитьСтроку(СбисОписаниеОшибки, 2));
			СтруктураИниФайла.сбисОшибки.Добавить(СбисСтруктураОшибки);
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьЗначениеПараметра(знач ИмяПараметра, знач ЗначениеПараметра, СтруктураИниФайла, СлужебнаяСтруктура, ПараметрыФильтра)
	
	// Проверяет значение параметра в файле настроек	
	Если	ТипЗнч(ЗначениеПараметра)	= Тип("Структура")
		И	ЗначениеПараметра.Свойство("Значение") Тогда
			ЗначениеПараметра = ЗначениеПараметра.Значение;	
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("Структура")  Тогда
		сбисСкопироватьСтруктуру(СтруктураИниФайла,ЗначениеПараметра);
		Для Каждого Элемент Из ЗначениеПараметра Цикл //перебираем структуру - там не может быть запроса и массива
			Попытка
				ПроверитьЗначениеПараметра(Элемент.Ключ, Элемент.Значение, СтруктураИниФайла, СлужебнаяСтруктура[Элемент.Ключ], ПараметрыФильтра);
			Исключение
				ВызватьИсключение(СбисТекстИсключениеПриПроверке(Элемент.Ключ, Элемент.Значение, ИнформацияОбОшибке().Описание));
			КонецПопытки;
		КонецЦикла;
		
		//Для Каждого ЭлементМассива Из ЗначениеПараметра Цикл
		//	Если ТипЗнч(ЭлементМассива.Значение) = Тип("Структура") Тогда
		//		сбисСкопироватьСтруктуру(СтруктураИниФайла,ЭлементМассива.Значение);
		//		Для Каждого Элемент Из ЭлементМассива.Значение Цикл //перебираем структуру - там не может быть запроса и массива
		//			ПроверитьЗначениеПараметра(Элемент.Ключ,Элемент.Значение,СтруктураИниФайла, СлужебнаяСтруктура[ЭлементМассива.Ключ][Элемент.Ключ],ПараметрыФильтра);
		//		КонецЦикла;
		//	Иначе
		//		ПроверитьЗначениеПараметра(ЭлементМассива.Ключ,ЭлементМассива.Значение,СтруктураИниФайла[ИмяПараметра],СлужебнаяСтруктура[ЭлементМассива.Ключ],ПараметрыФильтра);
		//	КонецЕсли;
		//КонецЦикла;
		Возврат Истина;
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Строка")  Тогда
		ЗначениеПараметра = СокрЛП(ЗначениеПараметра);
	КонецЕсли;
	
	Если ИмяПараметра="ЗапросСпискаДокументов" Тогда
		Попытка
			Запрос = Новый Запрос;
			Запрос.Текст = Сред(ЗначениеПараметра,2,СтрДлина(ЗначениеПараметра)-2);
			Если ЗначениеЗаполнено(Запрос.Текст) Тогда
				Запрос.УстановитьПараметр("ДатаНач", ТекущаяДата());
				Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());	
				Запрос.УстановитьПараметр("ЗначениеДатаКонЗаполнено", Ложь);	
				Запрос.УстановитьПараметр("Контрагент", "");
				Запрос.УстановитьПараметр("КонтрагентПодключен", "");
				Запрос.УстановитьПараметр("ТекущаяОрганизация", "");
				Запрос.УстановитьПараметр("ЗначениеТекущаяОрганизацияЗаполнено", Ложь);
				Запрос.УстановитьПараметр("ЗначениеКонтрагентЗаполнено", Ложь);
				Запрос.УстановитьПараметр("ТекущийДокумент", "");
				Запрос.УстановитьПараметр("ЗначениеТекущийДокументЗаполнено", Ложь);
				Запрос.УстановитьПараметр("Ответственный", "");
				Запрос.УстановитьПараметр("Маска", ""); // alo СтатусГос
				Для каждого ПараметрФильтра из ПараметрыФильтра Цикл
					Запрос.УстановитьПараметр(ПараметрФильтра.Ключ, "");
					Запрос.УстановитьПараметр("Значение" + ПараметрФильтра.Ключ + "Заполнено", Ложь);
				КонецЦикла;	
				Запрос.Выполнить().Выбрать();
			КонецЕсли;
		Исключение
			ТекстОшибки = ИнформацияОбОшибке();
			ТекстОшибки = "Неправильный текст запроса."+Символы.ПС+"("+ТекстОшибки.Причина.Описание+")";
			сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура);
			Возврат Ложь;
		КонецПопытки;
		Возврат Истина;
	КонецЕсли;
	Если	ТипЗнч(СтруктураИниФайла[ИмяПараметра])	= Тип("Структура")
		И	СтруктураИниФайла[ИмяПараметра].Свойство("Вычислить")
		И	Найти(СтруктураИниФайла[ИмяПараметра].Вычислить,"{") = 1 Тогда
			Если ПроверитьЗначениеПараметраНаВычисление(СтруктураИниФайла[ИмяПараметра].Вычислить) Тогда
				Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,СтруктураИниФайла[ИмяПараметра].Вычислить,"Нарушение правила вызова функции.",СтруктураИниФайла, СлужебнаяСтруктура);
			КонецЕсли;	
	КонецЕсли;	
	
	Если Найти(ЗначениеПараметра,"{") > 0  Тогда	
		//значение параметра вычисляется функцией, проверим что за функция
		Если ПроверитьЗначениеПараметраНаВычисление(ЗначениеПараметра) и Найти(ЗначениеПараметра,"{") = 1 Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Нарушение правила вызова функции.",СтруктураИниФайла, СлужебнаяСтруктура);
		Иначе
			Возврат Ложь;
		КонецЕсли;	
		
	ИначеЕсли Найти(ЗначениеПараметра,"[")=1 Тогда
		СтрОбъекта=Сред(ЗначениеПараметра,2,Найти(ЗначениеПараметра,"]")-2);
		// << alo Меркурий
		Если СтрОбъекта = "Парам" Тогда
			Возврат Ложь;
		КонецЕсли;// alo Меркурий >>
		Попытка
			ЗначениеОбъекта = СтруктураИниФайла[СтрОбъекта];
			Если ТипЗнч(ЗначениеПараметра)= Тип("Строка") или ТипЗнч(ЗначениеПараметра)= Тип("Булево") или ТипЗнч(ЗначениеПараметра)= Тип("Число") Тогда
				Попытка
					Объект1С = ПроверитьЗначениеПараметра(СтрОбъекта,ЗначениеОбъекта,СтруктураИниФайла, СлужебнаяСтруктура,ПараметрыФильтра);
				Исключение
					ВызватьИсключение(СбисТекстИсключениеПриПроверке(СтрОбъекта, ЗначениеОбъекта, ИнформацияОбОшибке().Описание));
				КонецПопытки;
			Иначе	  
				Объект1С =  ЗначениеОбъекта;
			КонецЕсли;	
		Исключение
			ТекстОшибки = "Значение параметра ссылается на несуществующий параметр: """+СтрОбъекта+"""."+Символы.ПС;
			ТекстОшибки = ТекстОшибки + "1. Возможно в слове """+СтрОбъекта+""" опечатка. Исправьте её."+Символы.ПС;
			ТекстОшибки = ТекстОшибки + "2. Определите значение параметра """+СтрОбъекта+""" в виде: "+СтрОбъекта+" = ЗначениеПараметра // комментарий";
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура);
		КонецПопытки;
		
		Если Объект1С<>Ложь Тогда
			ИмяРек=ЗначениеПараметра;
			Если Не Найти(ИмяРек,".") Тогда
				Возврат Ложь;//Переадресация на другой атрибут
			КонецЕсли;
			Пока Найти(ИмяРек,".")>0 Цикл 
				ИмяРек=прав(ИмяРек,СтрДлина(ИмяРек)-Найти(ИмяРек,"."));
			КонецЦикла;	
			Если ИмяРек = "УникальныйИдентификатор" Тогда
				Возврат Ложь;
			КонецЕсли;
			Попытка
				Объект1СПолноеИмя = Объект1С.ПолноеИмя();
			Исключение
				Объект1СПолноеИмя = "";
			КонецПопытки;
			Попытка
				Объект1СТип = Объект1С.Тип;
			Исключение
				Объект1СТип = "";
			КонецПопытки;
			Попытка
				Если (Найти(Объект1СПолноеИмя,"ТабличнаяЧасть")>0 или Найти(Объект1СПолноеИмя,"TabularSection")>0) Тогда
					Попытка
						Попытка
							Возврат Объект1С.Реквизиты[ИмяРек];
						Исключение
							Попытка 
								Возврат Объект1С.СтандартныеРеквизиты[ИмяРек];									
							Исключение
								ТипСравочника=ВернутьТипСправочника(Объект1СТип);
								Попытка
									Возврат ТипСравочника.Реквизиты[ИмяРек];
								Исключение
									Попытка 
										Возврат ТипСравочника.СтандартныеРеквизиты[ИмяРек];									
									Исключение	
										Возврат ТипСравочника.ТабличныеЧасти[ИмяРек];								
									КонецПопытки;	
								КонецПопытки;
							КонецПопытки;	
						КонецПопытки;
					Исключение
						Попытка
							Если (Найти(Объект1СТип,",")=0) Тогда //не составной объект, имеет 1 тип
								ОбъектМетаданных =Метаданные.НайтиПоТипу(Объект1СТип.Типы()[0]); // ищем по типу метаданных, так как тип у объекта один то по нему и ищем
								Попытка
									Возврат ОбъектМетаданных.Реквизиты[ИмяРек];
								Исключение
									Попытка 
										Возврат ОбъектМетаданных.СтандартныеРеквизиты[ИмяРек];									
									Исключение
										Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
									КонецПопытки;
								КонецПопытки;
							ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
								//составной тип реквизита, невозможно проверить
								Возврат Ложь;
							КонецЕсли;	
						Исключение
							//ЗначениеПараметраТабличнойЧасти = СтруктураИниФайла[СтрОбъекта];
							//ИмяПараметраДокумента           = Сред(ЗначениеПараметраТабличнойЧасти,2,Найти(ЗначениеПараметраТабличнойЧасти,"]")-2);
							//ЗначениеПараметраДокумента      = СтруктураИниФайла[ИмяПараметраДокумента];
							//не найден реквизит табличной части
							Возврат     сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
						КонецПопытки;
					КонецПопытки;
				ИначеЕсли Объект1СТип<> "" Тогда 
					Если (Найти(Объект1СТип,",")=0) Тогда //не составной объект, имеет 1 тип
						ОбъектМетаданных =Метаданные.НайтиПоТипу(Объект1СТип.Типы()[0]); // ищем по типу метаданных, так как тип у объекта один то по нему и ищем
						Попытка
							Возврат ОбъектМетаданных.Реквизиты[ИмяРек];
						Исключение
							Попытка 
								Возврат ОбъектМетаданных.СтандартныеРеквизиты[ИмяРек];									
							Исключение
								Попытка 
									Возврат ОбъектМетаданных.ТабличныеЧасти[ИмяРек];									
								Исключение
									Попытка 
										Возврат ОбъектМетаданных.Ресурсы[ИмяРек];									
									Исключение
										Попытка 
											Возврат ОбъектМетаданных.Измерения[ИмяРек];									
										Исключение
											Попытка 
												Возврат ОбъектМетаданных.ЗначенияПеречисления[ИмяРек];									
											Исключение
												Попытка
													Если НРег(ИмяРек) = "этогруппа" Тогда
														Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
															Возврат Истина;
														КонецЕсли;
														Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
													КонецЕсли;
												Исключение
													//Падать в исключение не должно, но на всякий обернул.
												КонецПопытки;
												Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, ОбъектМетаданных,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
											КонецПопытки;
										КонецПопытки;		
									КонецПопытки;	
								КонецПопытки;
							КонецПопытки;
						КонецПопытки;
					ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
						//составной тип реквизита, невозможно проверить
						Возврат Ложь;
					КонецЕсли;	
				ИначеЕсли Объект1С <> Неопределено И (Метаданные.Документы.Найти(Объект1С.Имя)<> Неопределено) и (Лев(нрег(Объект1СПолноеИмя),8)="документ" или Лев(нрег(Объект1СПолноеИмя),8)="document") Тогда
					Попытка
						Возврат Объект1С.Реквизиты[ИмяРек];
					Исключение
						Попытка
							Попытка
								Возврат Метаданные.Документы[Объект1С.Имя].Реквизиты[имяРек];
							Исключение
								Попытка
									Возврат Метаданные.Документы[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
								Исключение
									//Изменено Рыбаков А.В. 2021.02.03. +
									Попытка
										Возврат Метаданные.Документы[Объект1С.Имя].ТабличныеЧасти[имяРек];                                           
                                    Исключение
                                        ОбщийРеквизит = Метаданные.ОбщиеРеквизиты[ИмяРек];
                                        Состав = ОбщийРеквизит.Состав;
                                        Если Состав.Найти(Объект1С).Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
                                            Или (Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать) тогда
                                            Возврат ОбщийРеквизит;
                                        КонецЕсли;
                                    КонецПопытки;
                                    //Изменено Рыбаков А.В. 2021.02.03. -
								КонецПопытки;
							КонецПопытки;	
						Исключение
							если ИмяРек="УникальныйИдентификатор" тогда
								Возврат истина;
							иначе
							Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1СПолноеИмя+"."+ИмяРек);
							конецесли;
						КонецПопытки;	
					КонецПопытки;
				ИначеЕсли Метаданные.Справочники.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),10)="справочник" или Лев(нрег(Объект1СПолноеИмя),7)="catalog") Тогда
					Попытка
						Возврат Метаданные.Справочники[Объект1С.Имя].Реквизиты[имяРек];
					Исключение
						Попытка
							Возврат Метаданные.Справочники[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
						Исключение
							Попытка
								Возврат Метаданные.Справочники[Объект1С.Имя].ТабличныеЧасти[имяРек];
							Исключение
								Попытка 
									Если НРег(ИмяРек) = "этогруппа" Тогда
										Возврат Истина;
									ИначеЕсли Справочники[Объект1С.Имя][имяРек].Предопределенный Тогда
										Возврат Метаданные.Справочники[Объект1С.Имя];
									Иначе
										ВызватьИсключение("");
									КонецЕсли;
								Исключение
									Попытка
										ОбщийРеквизит = Метаданные.ОбщиеРеквизиты[ИмяРек];
	                                    Состав = ОбщийРеквизит.Состав;
	                                    Если Состав.Найти(Объект1С).Использование=Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать
	                                        Или (Состав.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто И ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать) тогда
	                                        Возврат ОбщийРеквизит;
										КонецЕсли;
									Исключение
										Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
									КонецПопытки;
								КонецПопытки;
							КонецПопытки;
						КонецПопытки;
					КонецПопытки;	
				ИначеЕсли Метаданные.РегистрыСведений.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),15)="регистрсведений" или Лев(нрег(Объект1СПолноеИмя),19)="informationregister") Тогда
					Попытка
						Возврат Метаданные.РегистрыСведений[Объект1С.Имя].Ресурсы[имяРек];
					Исключение
						Попытка
							Возврат Метаданные.РегистрыСведений[Объект1С.Имя].Измерения[имяРек];
						Исключение
							Попытка
								Возврат Метаданные.РегистрыСведений[Объект1С.Имя].СтандартныеРеквизиты[имяРек];
							Исключение
								Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
							КонецПопытки;
						КонецПопытки;
					КонецПопытки;
				ИначеЕсли Метаданные.Перечисления.Найти(Объект1С.Имя)<> Неопределено и (Лев(нрег(Объект1СПолноеИмя),12)="перечисление" или Лев(нрег(Объект1СПолноеИмя),11)="enumeration") Тогда
					Попытка
						Возврат Метаданные.Перечисления[Объект1С.Имя].ЗначенияПеречисления[имяРек];
					Исключение
						Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдено значение перечисления "+Объект1С.Имя+" """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1СПолноеИмя,Объект1СПолноеИмя+"."+ИмяРек);
					КонецПопытки;
				ИначеЕсли (Найти(Объект1СТип,",")>0) Тогда
					Возврат Ложь;
				Иначе
					Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Составной тип реквизита: """+Объект1С.Имя+""". Невозможно проверить правильность параметра.",СтруктураИниФайла, СлужебнаяСтруктура);
				КонецЕсли;
			Исключение
				Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реквизит """+ИмяРек+""".",СтруктураИниФайла, СлужебнаяСтруктура, Объект1С,Объект1С.Имя,Объект1С.Имя+"."+ИмяРек);
			КонецПопытки;
		иначе
			Возврат ложь;
		КонецЕсли;	
	ИначеЕсли Найти(ЗначениеПараметра,"Константа")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-10);
		Если Метаданные.Константы.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдена константа: """+ЗначениеПараметра+"""",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Константы,"Константы");
		КонецЕсли;
		Возврат Метаданные.Константы[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"Перечисление")=1 Тогда	
		ИмяРек=сред(ЗначениеПараметра,14);
		Если Метаданные.Перечисления.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найдено перечисление: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Перечисления,"Перечисления");
		КонецЕсли;	
		Возврат Метаданные.Перечисления[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"Справочник")=1 или Найти(ЗначениеПараметра,"ЗаписьСправочника")=1 Тогда	
		
		ИмяРек = Сред(ЗначениеПараметра, Найти(ЗначениеПараметра, ".")+1);
		Если Метаданные.Справочники.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден справочник: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Справочники,"Справочники");
		Иначе
			Возврат Метаданные.Справочники[ИмяРек];
		КонецЕсли;	
	ИначеЕсли Найти(ЗначениеПараметра,"Документ")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-9);
		Если Метаданные.Документы.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден реестр документа: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Документы,"Документы");
		КонецЕсли;
		Возврат Метаданные.Документы[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"РегистрыСведений")=1 Тогда	
		ИмяРек=прав(ЗначениеПараметра,СтрДлина(ЗначениеПараметра)-17);
		Если Метаданные.РегистрыСведений.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден регистр сведений: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Перечисления,"РегистрыСведений");
		КонецЕсли;	
		Возврат Метаданные.РегистрыСведений[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"ПланыСчетов")=1 Тогда	// alo ПланыСчетов	
		ИмяРек = Сред(ЗначениеПараметра, Найти(ЗначениеПараметра, ".")+1);
		Если Метаданные.ПланыСчетов.Найти(ИмяРек) = Неопределено Тогда
			Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Не найден план счетов: """+ЗначениеПараметра+""".",СтруктураИниФайла, СлужебнаяСтруктура, Метаданные.Справочники,"ПланыСчетов");
		КонецЕсли;	
		Возврат Метаданные.ПланыСчетов[ИмяРек];
	ИначеЕсли Найти(ЗначениеПараметра,"'")>0 Тогда	
		//значение параметра заключено в ' '
		Возврат Ложь;
	ИначеЕсли Найти(ЗначениеПараметра,"^")=1 Тогда	
		//значение параметра  - формула
		Возврат Ложь;
	ИначеЕсли нрег(ЗначениеПараметра)="истина" Или нрег(ЗначениеПараметра)="ложь" Тогда
		Возврат Ложь;
		//Иначе 
		//	Возврат сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,"Неподдерживаемый тип параметра."+Символы.ПС+"Если это строка - заключите её в одинарные кавычки.",СтруктураИниФайла, СлужебнаяСтруктура);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция		СбисТекстИсключениеПриПроверке(ИмяПараметра=Неопределено, ЗначениеПараметра=Неопределено, ТекстИсключения)
	СбисШаблонЗамены = "%Замена%";
	Если Найти(ТекстИсключения, СбисШаблонЗамены) Тогда
		Если ИмяПараметра = Неопределено Тогда
			Возврат (СтрЗаменить(ТекстИсключения, СбисШаблонЗамены, ""));			
		Иначе
			Возврат (СтрЗаменить(ТекстИсключения, СбисШаблонЗамены, СбисШаблонЗамены + ИмяПараметра + "."));
		КонецЕсли;
	Иначе
		//Возврат ("При обработке узла " + СбисШаблонЗамены + ИмяПараметра + " произошла неизвестная ошибка: " + ТекстИсключения);
		Возврат (ТекстИсключения + СбисШаблонЗамены + ИмяПараметра);
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция		СбисОшибкаПроверки(ИмяПараметра,ЗначениеПараметра,ТекстОшибки, Объект=Неопределено,ИмяОбъекта=Неопределено,ПолныйПуть = Неопределено)
	НоваяСтруктура = Новый Структура();
	НоваяСтруктура.Вставить("ИмяПараметра", ИмяПараметра);
	НоваяСтруктура.Вставить("ЗначениеПараметра", ЗначениеПараметра);
	НоваяСтруктура.Вставить("ТекстОшибки", ТекстОшибки);
	НоваяСтруктура.Вставить("ИмяОбъекта", ИмяОбъекта);
	НоваяСтруктура.Вставить("ПолныйПуть", ПолныйПуть);
	
	Если Объект = Неопределено Тогда
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", Объект);
	ИначеЕсли ТипЗнч(Объект) = Тип("ОбъектМетаданных") Тогда				
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", Объект.ПолноеИмя());
	ИначеЕсли ТипЗнч(Объект) = Тип("КоллекцияОбъектовМетаданных") Тогда	
		СтруктураОбъект = Новый Структура();		
		Для СчМет = 0 по Объект.Количество()-1 Цикл
			СтруктураОбъект.Вставить(Объект.Получить(СчМет).Имя, Объект.Получить(СчМет).ПолноеИмя());
		КонецЦикла;	
		НоваяСтруктура.Вставить("ИнформацияПоОбъекту", СтруктураОбъект);
	КонецЕсли;
	Возврат НоваяСтруктура;	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисЗаписатьОшибкуИниФайла(ИмяПараметра,ЗначениеПараметра,ТекстОшибки,СтруктураИниФайла, СлужебнаяСтруктура, Объект=Неопределено,ИмяОбъекта=Неопределено,ПолныйПуть = Неопределено)
	// добавляет в структуру файла настроек структуру с информацией об ошибке	
	
	НоваяСтруктура = СбисОшибкаПроверки(ИмяПараметра,ЗначениеПараметра,ТекстОшибки, Объект, ИмяОбъекта, ПолныйПуть);
	//СтруктураИниФайла.сбисОшибки.Добавить(НоваяСтруктура);
	Если ТипЗнч(СтруктураИниФайла[ИмяПараметра]) = Тип("Структура")
		И не СтруктураИниФайла[ИмяПараметра].Свойство("Ошибка") Тогда
		СлужебнаяСтруктура.Вставить("Ошибка", НоваяСтруктура);		
		СтруктураИниФайла[ИмяПараметра].Вставить("Ошибка", НоваяСтруктура);		
	КонецЕсли;
	Возврат Ложь;
КонецФункции	

&НаСервереБезКонтекста
Функция		ПроверитьЗначениеПараметраНаВычисление(ЗначениеПараметра)
	
	// Функция проверяет значение параметра, вычисляемого с помощью функции	
	ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
	ПозицияТочки = Найти(ЗначениеПараметра, ".");
	Если  Найти(ЗначениеПараметра, ";") > 0 Тогда
		//В строке на вычисление не может быть ";"
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция		ВернутьТипСправочника(ОбъектТип) 
	// Получает объект метаданных справочника по типу	
	ид=0;
	Пока 1=1 Цикл
		Попытка
			ОбъектСпр=Метаданные.Справочники[ид];
		Исключение
			прервать;
		КонецПопытки;	
		темпСтр=ОбъектСпр.ПолноеИмя();
		ИмяРек=прав(темпСтр,СтрДлина(темпСтр)-11);
		ТипСтр=Тип("СправочникСсылка."+ИмяРек);
		Если ОбъектТип.СодержитТип(ТипСтр) Тогда
			возврат ОбъектСпр;
		КонецЕсли;	
		ид=ид+1;
	КонецЦикла;
	возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция		СформироватьСтруктуруОшибкиУзла(Узел)
	// Рекурсивно проверяет, есть ли в узле структуры ошибка, формирует только структуру узлов, в которых есть ошибки	
	СтруктураОшибки	= Новый	Структура();
	ЕстьОшибка		= Ложь;
	
	Если ТипЗнч(Узел) <> Тип("Структура") Тогда
		Возврат СтруктураОшибки;
		//Возврат Ложь;
	КонецЕсли;
	
	Если Узел.Свойство("Ошибка") Тогда//ошибка, вернуть ошибочный узел
		Возврат	Узел;
		//Возврат Истина;
	КонецЕсли;	
	Для каждого ЭлементУзла из Узел Цикл		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда	
			Если ЭлементУзла.Значение.Свойство("Ошибка") Тогда
				СтруктураОшибки.Вставить(ЭлементУзла.Ключ, ЭлементУзла.Значение);
				Продолжить;
				//Возврат Истина;
			КонецЕсли;
			ВложенныеОшибки	=  СформироватьСтруктуруОшибкиУзла(ЭлементУзла.Значение);//Проверяем вложенный узел
			Если	ВложенныеОшибки.Количество()	Тогда 
				СтруктураОшибки.Вставить(ЭлементУзла.Ключ, ВложенныеОшибки);
			КонецЕсли;
			//Если СформироватьСтруктуруОшибкиУзла(ЭлементУзла.Значение) Тогда //Проверяем вложенный узел
			//	Возврат Истина;
			//КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат	СтруктураОшибки;
	
	//Возврат ЕстьОшибка;
	
КонецФункции

///////////////////////////////////////////////////
/////////////////Установка настроек////////////////
///////////////////////////////////////////////////

//Вызывает установку настроек в кэше. Если все установлено, истина, если не устанавливалось, ложь. При ошибке - СбисИсключение
&НаКлиенте
Функция СбисУстановитьВыбранныеНастройки(Кэш, ПараметрыУстановки, ДополнительныеПараметры, Отказ) Экспорт
	Если Не Кэш.ИниВПорядке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатУстановки = Неопределено;
	//Проверка пройдена успешно, установим настройки.
	Если ПараметрыУстановки.НеобходимоОбновление Тогда
		//Надо обновить данные. Перезаполним меню аккордеона, параметры главного окна, изменим печатные формы
		РезультатУстановки = Кэш.ФормаНастроек.СбисОбновитьДанныеПоНастройкам(Кэш, ДополнительныеПараметры, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФормаНастроекОбщее.СбисУстановитьВыбранныеНастройки");
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыУстановки.Свойство("ИниСтруктурыРазделов") Тогда
		РезультатУстановки = УстановитьИниРазделов(Кэш, ПараметрыУстановки.ИниСтруктурыРазделов, ДополнительныеПараметры, Отказ);
	Иначе
		РезультатУстановки = Кэш.ФормаНастроек.УстановитьИниРазделов(Кэш, ДополнительныеПараметры, Отказ);
	КонецЕсли;
	Если Отказ Тогда
		//Не удалось создать ини для формирования аккордеона и параметров главного окна
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФормаНастроекОбщее.СбисУстановитьВыбранныеНастройки");
	КонецЕсли;
	РезультатУстановки = Кэш.ФормаНастроек.УстановитьИниКонфигурации(Кэш, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатУстановки, "ФормаНастроекОбщее.СбисУстановитьВыбранныеНастройки");
	КонецЕсли;
	Возврат Истина;
КонецФункции

///////////////////////////////////////////////////
/////////////////Включение настроек////////////////
///////////////////////////////////////////////////

// Процедура проверяет наличие отмеченных файлов и при необходимости задает вопрос о замене 	
&НаКлиенте
Процедура	сбисУстановитьФайлыНастроек(Кэш)												Экспорт
	
	ГлавноеОкно		= Кэш.ГлавноеОкно;
	ТабДоступФайлы	= ГлавноеОкно.ТабДоступныеИниФайлы;	
	
	ПараметрыОтбора	= Новый Структура();
	ПараметрыОтбора.Вставить("Фл",				Истина);
	Если	Не	ТабДоступФайлы.НайтиСтроки(ПараметрыОтбора).Количество()	Тогда//Отмеченных для переноса ини нет
		ПараметрыОтбора.Удалить("Фл");
	КонецЕсли;
	ПараметрыОтбора.Вставить("ЕстьФайлНастроек",	Истина);
	
	СтрокиОтмеченыУстановлены	= ТабДоступФайлы.НайтиСтроки(ПараметрыОтбора);
	
	ПараметрыОтбора.Вставить("ЕстьФайлНастроек",	Ложь);
	СтрокиОтмеченыНеУстановлены	= ТабДоступФайлы.НайтиСтроки(ПараметрыОтбора);
				
	ДопПараметры	= Новый	Структура();
	ДопПараметры.Вставить("СтрокиОтмеченыУстановлены",		СтрокиОтмеченыУстановлены);
	ДопПараметры.Вставить("СтрокиОтмеченыНеУстановлены",	СтрокиОтмеченыНеУстановлены);
	ДопПараметры.Вставить("Кэш",					Кэш);
	Если СтрокиОтмеченыУстановлены.Количество() Тогда
		ТекстВопроса= "Заменить установленные файлы?";
		Кнопки		= РежимДиалогаВопрос.ДаНетОтмена;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Ответ	= Вопрос(ТекстВопроса, Кнопки);
			сбисУстановитьФайлыНастроекЗавершение(Ответ, ДопПараметры);
		#Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("сбисУстановитьФайлыНастроекЗавершение",ЭтаФорма,ДопПараметры),ТекстВопроса, Кнопки, 0);
		#КонецЕсли
	Иначе
		сбисУстановитьФайлыНастроекЗавершение(КодВозвратаДиалога.ДА, ДопПараметры)
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует структуру файлов для установки и вызывает серверную процедуру установки настроек 	
&НаКлиенте
Процедура	сбисУстановитьФайлыНастроекЗавершение(Ответ, ДопПараметры)								Экспорт
	
	Отказ	= Ложь;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиОтмеченыУстановлены	= ДопПараметры.СтрокиОтмеченыУстановлены;
	СтрокиОтмеченыНеУстановлены	= ДопПараметры.СтрокиОтмеченыНеУстановлены;
	Кэш				= ДопПараметры.Кэш;
	
	МассивФайловДляУстановки = Новый Массив;
	
	Для Каждого строка Из	СтрокиОтмеченыНеУстановлены	Цикл
		СтруктураДанныхДляУстановки = Новый Структура;
		СтруктураДанныхДляУстановки.Вставить("ИмяФайлаИсточника",	Строка.ПолноеИмя);
		СтруктураДанныхДляУстановки.Вставить("ИмяФайлаПриемника",	Строка.ИмяФайла);
		СтруктураДанныхДляУстановки.Вставить("ДобавлятьВАрхив",		Ложь);
		МассивФайловДляУстановки.Добавить(СтруктураДанныхДляУстановки);
	КонецЦикла;
	
	Если Ответ = КодВозвратаДиалога.Да	Тогда
		Для Каждого строка Из	СтрокиОтмеченыУстановлены	Цикл
			СтруктураДанныхДляУстановки = Новый Структура;
			СтруктураДанныхДляУстановки.Вставить("ИмяФайлаИсточника",	Строка.ПолноеИмя);
			СтруктураДанныхДляУстановки.Вставить("ИмяФайлаПриемника",	Строка.ИмяФайла);
			СтруктураДанныхДляУстановки.Вставить("ДобавлятьВАрхив",		Истина);
			МассивФайловДляУстановки.Добавить(СтруктураДанныхДляУстановки);
		КонецЦикла;
	КонецЕсли;	
	
	Кэш.ФормаНастроек.сбисУстановитьВыбранныеФайлыНастроек(МассивФайловДляУстановки, Кэш, Кэш.Парам.ИдентификаторНастроек, Отказ);
	
КонецПроцедуры

//Процедура формирует структуру для формирования аккордеона и заполнения фильтров
&НаКлиенте
Функция		сбисСформироватьСтруктуруРазделов(Кэш, СтруктураНастроек, сбисДополнительныеПараметры) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	ОбработатьТипы		= Ложь;
	КлючиДляТипов		= Новый Массив;
	ПараметрыДляТипов	= Новый Массив;
	КлючиДляТипов.Добавить(Неопределено);
	ПараметрыДляТипов.Добавить(Новый Структура("Значение", ""));
	Если сбисДополнительныеПараметры.Свойство("ОбработкаТипов") Тогда
		Для Каждого КлючИЗначение Из сбисДополнительныеПараметры.ОбработкаТипов Цикл
			КлючиДляТипов.Добавить(Тип(КлючИЗначение.Ключ));
			ПараметрыДляТипов.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;	
	Для Каждого ТипДокумента Из СтруктураНастроек Цикл
		НазваниеРазделаВИни = Кэш.ОбщиеФункции.РассчитатьЗначение("ДокументРаздел", ТипДокумента.Значение);
		Если Не ЗначениеЗаполнено(НазваниеРазделаВИни) Тогда
			НазваниеРазделаВИни = "БезРаздела";
		КонецЕсли;
		СтруктураКнопкиРаздела = Новый Структура;
		СтруктураКнопкиРаздела.Вставить("Реестр1С_Тип",									Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Тип",				ТипДокумента.Значение));
		СтруктураКнопкиРаздела.Вставить("Реестр1С_Название",							Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название",		ТипДокумента.Значение));
		СтруктураКнопкиРаздела.Вставить("Реестр1С_Меню",								Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Меню",			ТипДокумента.Значение));
		СтруктураКнопкиРаздела.Вставить("Реестр1С_МенюЗаголовок",						Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_МенюЗаголовок",	ТипДокумента.Значение));
		СтруктураКнопкиРаздела.Вставить("Реестр1С_МетодНаАктивацию",					Кэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_МетодНаАктивацию",ТипДокумента.Значение));
		СтруктураКнопкиРаздела.Вставить("РеестрПоУмолчанию",							Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрПоУмолчанию",		ТипДокумента.Значение)="1");
		СтруктураКнопкиРаздела.Вставить("РеестрСБИС_Тип",								Кэш.ОбщиеФункции.РассчитатьЗначение("РеестрСБИС_Тип",			ТипДокумента.Значение));
		СтруктураКнопкиРаздела.Вставить("Документ",										Кэш.ОбщиеФункции.РассчитатьЗначение("Документ",					ТипДокумента.Значение));
		СтруктураКнопкиРаздела.Вставить("ЕстьЗапросРеестра",		ЗначениеЗаполнено(	Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов",	ТипДокумента.Значение)));
		СтруктураКнопкиРаздела.Вставить("ЕстьСправочникТип",		ЗначениеЗаполнено(	Кэш.ОбщиеФункции.РассчитатьЗначение("СправочникТип",			ТипДокумента.Значение)));
		Для Каждого ЭлементРаздела Из СтруктураКнопкиРаздела Цикл
			сбисИндекс = КлючиДляТипов.Найти(ЭлементРаздела.Значение);
			Если сбисИндекс = Неопределено Тогда
				сбисИндекс = КлючиДляТипов.Найти(ТипЗнч(ЭлементРаздела.Значение));
			КонецЕсли;
			Если сбисИндекс = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПараметрЗамены = Неопределено;
			Если		ПараметрыДляТипов[сбисИндекс].Свойство("Значение", ПараметрЗамены) Тогда
				СтруктураКнопкиРаздела[ЭлементРаздела.Ключ] = ПараметрЗамены;
			ИначеЕсли	ПараметрыДляТипов[сбисИндекс].Свойство("Формат", ПараметрЗамены) Тогда
				СтруктураКнопкиРаздела[ЭлементРаздела.Ключ] = Формат(ЭлементРаздела.Значение, ПараметрЗамены);
			КонецЕсли;
		КонецЦикла;
				
		МассивРазделов = СтрЗаменить(НазваниеРазделаВИни,",", Символы.ПС);			
		Для НомерСтрокиРазделов = 1 По СтрЧислоСтрок(МассивРазделов) Цикл
			сбисИмяРаздела		= СокрЛП(СтрПолучитьСтроку(МассивРазделов, НомерСтрокиРазделов));
			сбисЗначениеРаздела	= Неопределено;
			Если Не СтруктураРезультат.Свойство(сбисИмяРаздела, сбисЗначениеРаздела) Тогда
				сбисЗначениеРаздела = Новый Структура("Параметры, Список", Новый Структура, Новый Структура);
				СтруктураРезультат.Вставить(сбисИмяРаздела, сбисЗначениеРаздела);
			КонецЕсли;
			сбисЗначениеРаздела.Список.Вставить(ТипДокумента.Ключ, СтруктураКнопкиРаздела);
		КонецЦикла;
	КонецЦикла;
	Возврат СтруктураРезультат;
	
КонецФункции

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктурасбисПараметров, ДополнительныеПараметры, Отказ) Экспорт
	
	//_ВремяОжидания = Кэш.ОбщиеФункции.РассчитатьЗначение("ВремяОжиданияОтвета", СтруктурасбисПараметров, Кэш);
	//Если ЗначениеЗаполнено(_ВремяОжидания) Тогда
	//	Если Не ТипЗнч(_ВремяОжидания) = Тип("Число") Тогда//Пробуем привести к числу
	//		Попытка
	//			_ВремяОжидания = Число(_ВремяОжидания);
	//		Исключение
	//			_ВремяОжидания = Неопределено;
	//		КонецПопытки;
	//	КонецЕсли;
	//	Если ТипЗнч(_ВремяОжидания) = Тип("Число") Тогда
	//		Кэш.Интеграция.сбисУстановитьВремяОжидания(Кэш, _ВремяОжидания);
	//	КонецЕсли;
	//КонецЕсли;
	Возврат Истина;
	
КонецФункции

///////////////////////////////////////////////////
////////////////Отключение настроек////////////////
///////////////////////////////////////////////////

&НаКлиенте
Функция		сбисОтключитьФайлыНастроек(Кэш, ФайлыУдалить=Неопределено)						Экспорт
	
	// Удаляет выбранные файлы настроек	
	Отказ			= Ложь;
	ПараметрыОтбора	= Новый Структура("Фл", Истина);
	
	Если ФайлыУдалить = Неопределено Тогда
		ФайлыУдалить = Кэш.ГлавноеОкно.ТабУстановленныеИниФайлы.НайтиСтроки(ПараметрыОтбора);
	КонецЕсли;
	Если Не ФайлыУдалить.Количество() Тогда
		ФайлыУдалить = Кэш.ГлавноеОкно.ТабУстановленныеИниФайлы;
	КонецЕсли;
	
	СписокИниКОтключению = Новый СписокЗначений;
	Для Каждого ИниФайл Из ФайлыУдалить Цикл
		СписокИниКОтключению.Добавить(ИниФайл.ИмяФайла,"sbis3");
		Если	ИниФайл.ЕстьИзменения
			И	Кэш.Парам.СпособХраненияНастроек = 0 Тогда
			СписокИниКОтключению.Добавить(СтрЗаменить(СтрЗаменить(ИниФайл.ИмяФайла, ".sbis3", ""), ".0", ""));
		КонецЕсли;							
	КонецЦикла;
	
	УстановленныеИни = Кэш.ФормаНастроек.сбисОтключитьВыбранныеФайлыНастроек(СписокИниКОтключению, Кэш, Кэш.Парам.ИдентификаторНастроек, Отказ);
	
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
	РезультатУстановкиНастроек = Кэш.ГлавноеОкно.сбисУстановитьНастройки(Кэш, УстановленныеИни, Истина, Отказ);
	Кэш.ГлавноеОкно.сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
		Отказ = Ложь;//Продолжим работу после сообщения об ошибке
	КонецЕсли;
	Кэш.ГлавноеОкно.сбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ)
	
КонецФункции

///////////////////////////////////////////////////
//////////////Пользовательские фильтры/////////////
///////////////////////////////////////////////////

//Функция заполняет пользовательские параметры в Кэш.ПараметрыФильтра для дальнейшей проверки настроек.
&НаКлиенте
Функция		СбисЗаполнитьДополнительныеПараметрыФильтра(Кэш, ДополнительныеПараметры, Отказ)Экспорт
	Перем СтруктураИни;
	Если Не ДополнительныеПараметры.Свойство("Ини", СтруктураИни) Тогда
		СтруктураИни = Кэш.Ини;
	КонецЕсли;
	Кэш.ПараметрыФильтра.Очистить();
	Если	ДополнительныеПараметры.Свойство("СформироватьРазделыПоДанным")
		И	ДополнительныеПараметры.СформироватьРазделыПоДанным Тогда
		СбисСтруктураРазделов = СбисСформироватьСтруктуруРазделов(Кэш, СтруктураИни, ДополнительныеПараметры);
	Иначе
		СбисСтруктураРазделов = Кэш.ФормаНастроек.ПолучитьСтруктуруРазделов(Кэш,,Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(сбисСтруктураРазделов, "ФайлыНастроекОбщее.сбисЗаполнитьДополнительныеПараметрыФильтра");
	КонецЕсли;
	Для Каждого Раздел Из СбисСтруктураРазделов Цикл
		Если Раздел.Ключ = "БезРаздела" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ПодРаздел Из Раздел.Значение.Список Цикл
			Если	Не	ПодРаздел.Значение.Свойство("ЕстьЗапросРеестра")
				Или	Не	ПодРаздел.Значение.ЕстьЗапросРеестра Тогда
				Продолжить;
			КонецЕсли;
			ФормаДопФильтра = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра", 
																	"Фильтр_Раздел_" + Раздел.Ключ + "_" + ПодРаздел.Ключ, 
																	"Фильтр_Раздел_" + Раздел.Ключ + "_Шаблон");
			Если ФормаДопФильтра = Ложь Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьДополнительныеПараметрыФильтра(Кэш, ФормаДопФильтра);	
		КонецЦикла;
	КонецЦикла;
	Возврат Кэш.ПараметрыФильтра;
	
КонецФункции

// Добавляет на форму главного окна все элементы пользовательских фильтров	
&НаКлиенте
Процедура	ДобавитьДополнительныеПараметрыФильтра(Кэш, ФормаДопФильтра) Экспорт
	
	Если Не ТипЗнч(Кэш.ГлавноеОкно) = ТипЗнч(ФормаДопФильтра) Тогда
		Возврат;
	//Управляемое приложение
	ИначеЕсли Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Кэш.ГлавноеОкно.ОчиститьДополнительныеПараметрыФильтра(ФормаДопФильтра);
	//Обычное приложение	
	Иначе
	    ОбработатьДопЭлементыФормыФильтра(Кэш, ФормаДопФильтра);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДопЭлементыФормыФильтра(Кэш, ФормаДопФильтра)
	
	СбисСписокЭлементовФильтра = ТаблицаДополнительныхЭлементов_ПолучитьТаблицуЭлементов(Кэш, ФормаДопФильтра);
	ДобавитьДополнительныеПараметрыФильтра_ОбычныеФормы(Кэш, ФормаДопФильтра, СбисСписокЭлементовФильтра);
	
КонецПроцедуры

//Для УФ сюда не попадаем. 
&НаКлиенте
Процедура	ДобавитьДополнительныеПараметрыФильтра_ОбычныеФормы(Кэш, ФормаДопФильтра, СбисСписокЭлементовФильтра)
	//Сперва заполним в Кэш.ПараметрыФильтра значения фильтра
	СписокДопФильтров	= СбисСписокЭлементовФильтра.Скопировать(СбисСписокЭлементовФильтра.НайтиСтроки(Новый Структура("ЭтоДопФильтр",		Истина)));
	Для Каждого СтрокаТаблицы Из СписокДопФильтров Цикл
		Элемент = СтрокаТаблицы.ЭлементФормы;
		Кэш.ПараметрыФильтра.Вставить(Элемент.Имя,Элемент.Значение);
	КонецЦикла;
	СписокДопЭлементов	= СбисСписокЭлементовФильтра.Скопировать(СбисСписокЭлементовФильтра.НайтиСтроки(Новый Структура("ЭтоДопЭлемент",	Истина)));
	Если СписокДопЭлементов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ГлавноеОкно = Кэш.ГлавноеОкно;

	//Отслеживаем появление бегунка на панели фильтра. На случай, если понадобится привести к одной границе остальные пользовательские фильтры	
	КонтрольныйЭлемент	= ГлавноеОкно.ЭлементыФормы.ФильтрПериод;
	КонтрольнаяШирина	= 219;//Прописана ширина элемента из конфигуратора. Если в какой-то момент она не равна значению элемента, то меняем ширину 
	ШиринаМенялась		= Ложь;
	
	СписокДопЭлементов.Сортировать("Верх");
	КрайнийЭлемент = СписокДопЭлементов[СписокДопЭлементов.Количество()-1];
	
	НижняяГраница = КрайнийЭлемент.Верх + КрайнийЭлемент.Высота + 7;
	Если ГлавноеОкно.ЭлементыФормы.ПанельУстановкиФильтра.Высота < НижняяГраница Тогда
		ГлавноеОкно.ЭлементыФормы.ПанельУстановкиФильтра.Высота = НижняяГраница;
	КонецЕсли;
	
	КэшДобавлений = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из СписокДопЭлементов Цикл
		ДопЭлемент = СтрокаТаблицы.ДопЭлемент;
		Попытка  // на случай, если один и тот же элемент используется в нескольких разделах
			Элемент = СтрокаТаблицы.ЭлементФормы;
			ГлавноеОкно.ЭлементыФормы.Добавить(ТипЗнч(Элемент), Элемент.Имя, Истина, ГлавноеОкно.ЭлементыФормы.ПанельУстановкиФильтра);
			Если СтрокаТаблицы.ЭтоДопФильтр Тогда
				ГлавноеОкно.ЭлементыФормы[Элемент.Имя].ТипЗначения = Элемент.ТипЗначения;
				ГлавноеОкно.ЭлементыФормы[Элемент.Имя].ЦветТекстаКнопки = Элемент.ЦветТекстаКнопки;
				ГлавноеОкно.ЭлементыФормы[Элемент.Имя].ЦветФонаКнопки = Элемент.ЦветФонаКнопки;
				ГлавноеОкно.ЭлементыФормы[Элемент.Имя].ЦветРамки = Элемент.ЦветРамки;
				Если ТипЗнч(Элемент) <> Тип("Флажок") Тогда
					ГлавноеОкно.ЭлементыФормы[Элемент.Имя].КнопкаВыбора = Элемент.КнопкаВыбора;
				КонецЕсли;
			КонецЕсли;
			Если		ТипЗнч(Элемент) = Тип("Флажок") Тогда
				ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Заголовок = Элемент.Заголовок;
			ИначеЕсли	ТипЗнч(Элемент) = Тип("ПолеВыбора") Тогда
				ГлавноеОкно.ЭлементыФормы[Элемент.Имя].СписокВыбора = Элемент.СписокВыбора;
			КонецЕсли;
						
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Значение = Элемент.Значение;
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Высота = СтрокаТаблицы.Высота;
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Ширина = Элемент.Ширина;
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Лево = Элемент.Лево;
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Верх = СтрокаТаблицы.Верх;
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].ЦветТекста = Элемент.ЦветТекста;
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Видимость = Ложь;
			ГлавноеОкно.ЭлементыФормы[Элемент.Имя].Шрифт = Элемент.Шрифт;
			Если СтрокаТаблицы.ЭтоДопФильтр Тогда
				ГлавноеОкно.ЭлементыФормы[Элемент.Имя].УстановитьПривязку(ГраницаЭлементаУправления.Право, ГлавноеОкно.ЭлементыФормы.ПанельУстановкиФильтра,ГраницаЭлементаУправления.Право);
			КонецЕсли;
			Если 	Не ШиринаМенялась
				И	Не КонтрольнаяШирина = КонтрольныйЭлемент.Ширина Тогда
				ШиринаМенялась = Истина;
				СЭлементаСжать = СтрокаТаблицы;
			КонецЕсли;
			Если СтрокаТаблицы.Добавляемый Тогда
				КэшДобавлений.Добавить(Элемент.Имя);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Если КэшДобавлений.Количество() Тогда
		Если	Кэш.Свойство("КэшНастроек")
			И	Кэш.КэшНастроек.Свойство("ДобавленыЭлементы") Тогда
			Для шаг = Кэш.КэшНастроек.ДобавленыЭлементы.Количество()-1 По КэшДобавлений.Количество()-1 Цикл
				Кэш.КэшНастроек.ДобавленыЭлементы.Добавить(КэшДобавлений.Получить(шаг));
			КонецЦикла;
		Иначе
			Кэш.КэшНастроек.Вставить("ДобавленыЭлементы", КэшДобавлений);
		КонецЕсли;
	КонецЕсли;
	Если ШиринаМенялась	Тогда//Добавленные программно элементы, надо сжать, если на форме появлися бегунок до их добавления на панель. Остальные ужимаются через привязку.
		Для шаг = СписокДопЭлементов.Индекс(СЭлементаСжать) По СписокДопЭлементов.Количество()-1 Цикл
			СтрокаТаблицы = СписокДопЭлементов[шаг];
			Если Не СтрокаТаблицы.КонтрольШирины Тогда
				Продолжить;
			КонецЕсли;
			Элемент = ГлавноеОкно.ЭлементыФормы[СтрокаТаблицы.ДопЭлемент.Значение];
			Элемент.Ширина = Элемент.Ширина - (КонтрольнаяШирина - КонтрольныйЭлемент.Ширина);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

//Формирует таблицу добавочных элементов для обычных форм.
&НаСервере
Функция		ТаблицаДополнительныхЭлементов_ПолучитьТаблицуЭлементов(Кэш, ФормаДопФильтра)
	//Обычное приложение
	СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Если СписокДопЭлементов.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ГлавноеОкно			= Кэш.ГлавноеОкно;
	ПараметрыЗаполнения = ТаблицаДополнительныхЭлементов_ПолучитьПараметрыЗаполнения(Кэш);
	ПараметрыЗаполнения.Вставить("ФормаДопФильтра", ФормаДопФильтра);
	
	Для Каждого ДопЭлемент Из СписокДопЭлементов Цикл
		ПараметрыЗаполнения.Вставить("ДопЭлемент", ДопЭлемент);
		ДанныеЭлемента = ТаблицаДополнительныхЭлементов_ПолучитьЭлементДляДобавления(Кэш, ПараметрыЗаполнения);
		//Сперва определим поля ввода фильтров. Так, как порядок передачи может идти вразнобой, а надписи надо равнять с полями
		Если		ДанныеЭлемента.Элемент = Неопределено
			Или	Не (	ТипЗнч(ДанныеЭлемента.Элемент) = Тип("ПолеВвода")
					Или ТипЗнч(ДанныеЭлемента.Элемент) = Тип("ПолеВыбора")
					Или ТипЗнч(ДанныеЭлемента.Элемент) = Тип("Флажок")) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеЭлемента.Вставить("ЭтоДопФильтр", Истина);//Это поле, управляющее данными на форме, а значит к ней должен быть подвязан фильтр.
		ТаблицаДополнительныхЭлементов_ДобавитьЭлемент(Кэш, ДанныеЭлемента, ПараметрыЗаполнения);
		Если	ДанныеЭлемента.ЭтоДопЭлемент
			И	ПараметрыЗаполнения.КрайнийЭлемент.Верх < ДанныеЭлемента.Элемент.Верх Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения.КрайнийЭлемент, ДанныеЭлемента.Элемент);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаполнения.Вставить("ДопФильтры", ПараметрыЗаполнения.Таблица.НайтиСтроки(Новый Структура("ЭтоДопФильтр", Истина)));
	Для Каждого ДопЭлемент Из СписокДопЭлементов Цикл
		ПараметрыЗаполнения.Вставить("ДопЭлемент", ДопЭлемент);
		ДанныеЭлемента = ТаблицаДополнительныхЭлементов_ПолучитьЭлементДляДобавления(Кэш, ПараметрыЗаполнения);
		//Надписи добавляем в последнюю очередь, когда все прочие элементы уже добавлены.
		Если	ДанныеЭлемента.Элемент = Неопределено
			Или	ТипЗнч(ДанныеЭлемента.Элемент) = Тип("ПолеВвода")
			Или ТипЗнч(ДанныеЭлемента.Элемент) = Тип("ПолеВыбора")
			Или ТипЗнч(ДанныеЭлемента.Элемент) = Тип("Флажок") Тогда
			Продолжить;
		КонецЕсли;
		ДанныеЭлемента.Вставить("ЭтоДопФильтр", Ложь);//Это поле, не управляющее данными на форме, а значит надпись.
		ТаблицаДополнительныхЭлементов_ДобавитьЭлемент(Кэш, ДанныеЭлемента, ПараметрыЗаполнения);
	КонецЦикла;
	ПараметрыЗаполнения.Таблица.Колонки.Удалить("Верх_было");
	
	Возврат ПараметрыЗаполнения.Таблица;
	
КонецФункции

//Определяет параметры заполнения для поиска и добавления новых элементов.
&НаСервере
Функция		ТаблицаДополнительныхЭлементов_ПолучитьПараметрыЗаполнения(Кэш)
	
	ПараметрыЗаполнения = Новый Структура("Таблица,СчетчикДобавочных,КрайнийЭлемент,Смещение");
	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ТаблицаСоответствияЭлементов = Новый ТаблицаЗначений;
	ТаблицаСоответствияЭлементов.Колонки.Добавить("Верх");
	ТаблицаСоответствияЭлементов.Колонки.Добавить("Высота");
	ТаблицаСоответствияЭлементов.Колонки.Добавить("Лево");			
	ТаблицаСоответствияЭлементов.Колонки.Добавить("Имя");           //Это данные элементов для поиска и позиционирования
	ТаблицаСоответствияЭлементов.Колонки.Добавить("Верх_было");		//Это старые координаты по высоте элемента, до его установки на новое место
	ТаблицаСоответствияЭлементов.Колонки.Добавить("ЭтоДопФильтр");	//Флаг, определяет то, что поле является элементом управления и ввода данных.
	ТаблицаСоответствияЭлементов.Колонки.Добавить("ЭтоДопЭлемент");	//Флаг, определяет необходимость добавления элемента на главное окно
	ТаблицаСоответствияЭлементов.Колонки.Добавить("ДопЭлемент");	//Элемент соответствия списку, возвращаемому из формы фильтра функцией сбисСписокДопПараметровФильтра
	ТаблицаСоответствияЭлементов.Колонки.Добавить("Добавляемый");	//Определяет число добавленных элементов по высоте для изменения размера панели фильтра
	ТаблицаСоответствияЭлементов.Колонки.Добавить("ЭлементФормы");	//Значение элемента формы либо главного окна, если уже есть, либо формы доп. фильтра если надо добавить.
	ТаблицаСоответствияЭлементов.Колонки.Добавить("КонтрольШирины");//Флаг управляет необходимостью сжать элементы при добавлении наформу, чтобы привести правую границу к одному виду при добавлении бегунка на панель
	//Сперва получим список стандартных фильтров.Так, как 1С не умеет получать элементы панели, то бежим все в цикле	
	ДобавленыЭлементы		= Неопределено;
	СписокЭлементовФильтра	= Неопределено;
	Если Не Кэш.КэшНастроек.Свойство("СписокЭлементовФильтра",СписокЭлементовФильтра) Тогда//Кэшируем список, чтобы каждый раз не бегать по всем элементам
		СписокЭлементовФильтра = Новый СписокЗначений;
	Для Каждого ЭлементГлавноеОкно	Из ГлавноеОкно.ЭлементыФормы	Цикл
		Если Не	(	Лев(ЭлементГлавноеОкно.Имя, 6) = "Фильтр"
				И	(	ТипЗнч(ЭлементГлавноеОкно) = Тип("ПолеВвода")
					Или	ТипЗнч(ЭлементГлавноеОкно) = Тип("ПолеВыбора")
					Или ТипЗнч(ЭлементГлавноеОкно) = Тип("Флажок")))Тогда
			Продолжить;
		КонецЕсли;
			СписокЭлементовФильтра.Добавить(ЭлементГлавноеОкно.Имя);
		КонецЦикла;
		Кэш.КэшНастроек.Вставить("СписокЭлементовФильтра",СписокЭлементовФильтра);
	КонецЕсли;	
	Для Каждого	ИмяОсновногоФильтра Из СписокЭлементовФильтра Цикл
		НовоеСоответствие = ТаблицаСоответствияЭлементов.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСоответствие, ГлавноеОкно.ЭлементыФормы[ИмяОсновногоФильтра.Значение]);
		НовоеСоответствие.ЭлементФормы = ГлавноеОкно.ЭлементыФормы[ИмяОсновногоФильтра.Значение];
	КонецЦикла;
	ТаблицаСоответствияЭлементов.ЗаполнитьЗначения(Ложь, "ЭтоДопФильтр,ЭтоДопЭлемент");
	ТаблицаСоответствияЭлементов.Сортировать("Верх Убыв");
	Если	Кэш.Свойство("КэшНастроек") 
		И	Кэш.КэшНастроек.Свойство("ДобавленыЭлементы",ДобавленыЭлементы) Тогда
		//Уберем из стандартных 
		Для Каждого ЭлементСписка Из ДобавленыЭлементы Цикл
			СтрокаВФильтрах = ТаблицаСоответствияЭлементов.Найти(ЭлементСписка.Значение, "Имя");
			Если СтрокаВФильтрах  = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ТаблицаСоответствияЭлементов.Удалить(СтрокаВФильтрах);
		КонецЦикла;
	КонецЕсли;
	ПараметрыЗаполнения.СчетчикДобавочных	= 0;
	ПараметрыЗаполнения.Смещение			= 0;
	ПараметрыЗаполнения.Таблица				= ТаблицаСоответствияЭлементов;
	ПараметрыЗаполнения.КрайнийЭлемент		= Новый Структура("Верх,Высота");//Крайний элемент стандартной панели фильтров для рассчета добавления новых элементов на панель в конце
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения.КрайнийЭлемент, ТаблицаСоответствияЭлементов[0].ЭлементФормы);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

//Ищем элемент доп.фильтра. Сперва на главном окне, если уже добавлен, а затем на форме доп фильтра для добавления.
&НаСервере
Функция		ТаблицаДополнительныхЭлементов_ПолучитьЭлементДляДобавления(Кэш, ПараметрыЗаполнения)
	
	Результат	= Новый Структура("ЭтоДопЭлемент, Элемент");
	ИмяЭлемента = ПараметрыЗаполнения.ДопЭлемент.Значение;
	Элемент = Кэш.ГлавноеОкно.ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		ПараметрыЗаполнения.Смещение = 24;
		Результат.ЭтоДопЭлемент = Истина;
		Попытка
			Элемент = ПараметрыЗаполнения.ФормаДопФильтра.ЭлементыФормы[ИмяЭлемента];//Получаем элемент на форме доп. фильтра.
		Исключение
			Сообщить("Отсутствует элемент " + ИмяЭлемента + " на форме пользовательского фильтра.");
			Возврат Результат;
		КонецПопытки;
	Иначе			
		ПараметрыЗаполнения.Смещение = 0;
		Результат.ЭтоДопЭлемент = Ложь;
	КонецЕсли;
	Результат.Элемент = Элемент;
	Возврат Результат;
	
КонецФункции

//Добавляем элемент в таблицу заполнения формы.
&НаСервере
Процедура	ТаблицаДополнительныхЭлементов_ДобавитьЭлемент(Кэш, ДанныеЭлемента, ПараметрыЗаполнения)
	
	Элемент = ДанныеЭлемента.Элемент;
	ИмяЭлемента = ПараметрыЗаполнения.ДопЭлемент.Значение;	
	
	СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Найти(ИмяЭлемента, "Имя");
	Если Не СоответствиеКоординат = Неопределено Тогда
		Возврат;//Такой элемент уже есть в таблице
	КонецЕсли;
	
	Если ДанныеЭлемента.ЭтоДопФильтр Тогда
		Если Элемент.Верх <= ПараметрыЗаполнения.КрайнийЭлемент.Верх Тогда//Накладывается поверх стандартного
			//Найдем фильтры, накладываемые поверх стандартных и определим параметры наложения
			Добавляемый = Ложь;
			Если СоответствиеКоординат = Неопределено Тогда
				СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Найти(Элемент.Верх, "Верх_было");
			КонецЕсли;
			Если ПараметрыЗаполнения.Смещение > 0 Тогда//Поиск по координатам со смещением, образовавшимся после добавления элемента.
				Если СоответствиеКоординат = Неопределено Тогда
					СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Найти(Элемент.Верх + ПараметрыЗаполнения.Смещение, "Верх_было");
				КонецЕсли;
				Если СоответствиеКоординат = Неопределено Тогда
					СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Найти(Элемент.Верх + ПараметрыЗаполнения.Смещение, "Верх");
				КонецЕсли;
			КонецЕсли;
			Если СоответствиеКоординат = Неопределено Тогда//По какой-то причине не удалось определить координаты, для наложения поверх. Добавим в конец панели.
				СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Добавить();
				СоответствиеКоординат.Верх = ПараметрыЗаполнения.КрайнийЭлемент.Верх + ПараметрыЗаполнения.КрайнийЭлемент.Высота + 7;
				ПараметрыЗаполнения.КрайнийЭлемент.Верх = СоответствиеКоординат.Верх;
				ПараметрыЗаполнения.КрайнийЭлемент.Высота = Элемент.Высота;
				Добавляемый = Истина;
			ИначеЕсли Не СоответствиеКоординат.Лево = Элемент.Лево Тогда//На случай, если на одном уровне находятся несколько элементов управления.
				НовоеСоответствиеКоординат = ПараметрыЗаполнения.Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеСоответствиеКоординат, СоответствиеКоординат);
				СоответствиеКоординат = НовоеСоответствиеКоординат;
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(СоответствиеКоординат, Элемент,,"Верх");
			СоответствиеКоординат.ДопЭлемент	= ПараметрыЗаполнения.ДопЭлемент;
			СоответствиеКоординат.Верх_было		= Элемент.Верх;
			СоответствиеКоординат.Добавляемый	= Добавляемый;
			СоответствиеКоординат.ЭлементФормы	= Элемент;
		Иначе
			//Если не стандартный, то просто добавим в конец панели
			СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СоответствиеКоординат, Элемент);
			СоответствиеКоординат.Верх			= ПараметрыЗаполнения.КрайнийЭлемент.Верх + ПараметрыЗаполнения.КрайнийЭлемент.Высота + 7;
			СоответствиеКоординат.Верх_было 	= Элемент.Верх;
			СоответствиеКоординат.Добавляемый	= Истина;
			СоответствиеКоординат.ДопЭлемент	= ПараметрыЗаполнения.ДопЭлемент;
			СоответствиеКоординат.ЭлементФормы	= Элемент;
			Если	Кэш.Свойство("КэшНастроек")
				И	Кэш.КэшНастроек.Свойство("ДобавленыЭлементы") Тогда
				Если Кэш.КэшНастроек.ДобавленыЭлементы.Количество()-1 > ПараметрыЗаполнения.СчетчикДобавочных Тогда
					ИмяДобавленного = Кэш.КэшНастроек.ДобавленыЭлементы.Получить(ПараметрыЗаполнения.СчетчикДобавочных).Значение;
					ЭлементОкна = Кэш.ГлавноеОкно.ЭлементыФормы[ИмяДобавленного];
					ЗаполнитьЗначенияСвойств(СоответствиеКоординат, ЭлементОкна,,"Имя");
				КонецЕсли;
			КонецЕсли;
			ПараметрыЗаполнения.СчетчикДобавочных = ПараметрыЗаполнения.СчетчикДобавочных + 1;
			ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения.КрайнийЭлемент, СоответствиеКоординат);
		КонецЕсли;
	Иначе
		СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Найти(Элемент.Имя, "Имя");
		Если	СоответствиеКоординат = Неопределено
			И	Кэш.ГлавноеОкно.ЭлементыФормы.Найти(Элемент.Имя) <> Неопределено Тогда//Проверить наличие элемента на главном окне
			Возврат;
		КонецЕсли;
		Если СоответствиеКоординат = Неопределено Тогда
			СоответствиеКоординат = ПараметрыЗаполнения.Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СоответствиеКоординат, Элемент);
			СоответствиеКоординат.ДопЭлемент	= ПараметрыЗаполнения.ДопЭлемент;
			СоответствиеКоординат.Добавляемый	= Ложь;
			СоответствиеКоординат.ЭлементФормы	= Элемент;
		КонецЕсли;
		Для Каждого ДопФильтр Из ПараметрыЗаполнения.ДопФильтры Цикл
			Если	ДопФильтр.Верх_Было + 5 > СоответствиеКоординат.Верх//Ищем соответствующий надписи доп. фильтр со смещением в +-5.
				И	ДопФильтр.Верх_Было - 5 < СоответствиеКоординат.Верх Тогда
				СоответствиеКоординат.Верх = СоответствиеКоординат.Верх + (ДопФильтр.Верх - ДопФильтр.Верх_было);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СоответствиеКоординат.ЭтоДопФильтр	= ДанныеЭлемента.ЭтоДопФильтр;
	СоответствиеКоординат.ЭтоДопЭлемент	= ДанныеЭлемента.ЭтоДопЭлемент;
	//Если правая граница элемента ближе, чем на 20 к границе панели, то смотрим необходимость ужать элемент
	Если Кэш.ГлавноеОкно.ЭлементыФормы.ПанельУстановкиФильтра.Ширина - (Элемент.Лево+Элемент.Ширина) < 20 Тогда
		СоответствиеКоординат.КонтрольШирины = Истина;
	Иначе
		СоответствиеКоординат.КонтрольШирины = Ложь;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////
////////////Сопоставление номенклатуры/////////////
///////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция		ПолучитьПараметрыСопоставленияНаСервере(СтруктураСБИСПараметров)
	
	Если	Метаданные.Константы.Найти("ИспользоватьХарактеристикиНоменклатуры")<>Неопределено
		И	Константы.ИспользоватьХарактеристикиНоменклатуры.Получить() = Истина Тогда 
		Возврат Новый Структура();
	КонецЕсли;
	
	Возврат	Новый Структура("РеквизитСопоставленияНоменклатуры", "Код");
	
КонецФункции

///////////////////////////////////////////////////
//////////////////Внешние функции//////////////////
///////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция		ПолучитьАдресВнешнихФункций(ИмяВнешнихФункций, МестаПоискаОбработки, ПараметрыСистемы)	Экспорт
	
	ИмяВременногоФайла		= ПолучитьИмяВременногоФайла(); 
	УправляемоеПриложение	= ПараметрыСистемы.Клиент.УправляемоеПриложение; 
	КодЯзыка				= ПараметрыСистемы.Конфигурация.ВстроенныйЯзык;
	
	ЗаписьМестаПоиска	= Новый Структура();
	ВнешняяОбработка	= Неопределено;
	
	Для Каждого МестоПоиска Из МестаПоискаОбработки Цикл
		ПутьПоиска		= МестоПоиска.Путь;
		АлгоритмПоиска	= МестоПоиска.Алгоритм;
		СтрокаОшибки	= "Не удалось подключить внешние функции из """ + ПутьПоиска + """ по причине: ";
		Если Не ЗначениеЗаполнено(АлгоритмПоиска) Тогда
			Если Булево(СтрЧислоВхождений(МестоПоиска, "\")) Тогда
				АлгоритмПоиска = "Каталог";
			Иначе
				АлгоритмПоиска = "Запрос";
			КонецЕсли;
		КонецЕсли;
				
		Если АлгоритмПоиска = "Каталог" Тогда//Это каталог, проверить наличие обработки
			ОбластьПоиска = ПутьПоиска + ИмяВнешнихФункций + ".epf";
			Попытка
				ФайлВнешнихФункций = Новый Файл(ОбластьПоиска);
				
				Если Не ФайлВнешнихФункций.Существует() Тогда//Такого файла нет
					Продолжить;
				КонецЕсли;
				
				ВнешняяОбработка = ВнешниеОбработки.Создать(ОбластьПоиска, Ложь);
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
		Иначе//Найти область по метаданным и проверить наличие обработки.
			МногоСтрочнаяЗапись = СтрЗаменить(ПутьПоиска, ".", Символы.ПС);
			Если СтрЧислоСтрок(МногоСтрочнаяЗапись) = 0 Тогда
				Сообщить(СтрокаОшибки	+ "Неверно передано место поиска!");
				Продолжить;
			КонецЕсли;
			
			СтрокаМетаданных= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1);
			СтрокаПоиска	= СтрПолучитьСтроку(МногоСтрочнаяЗапись, 2);
			Попытка
				ОбластьПоиска = Метаданные[СтрокаМетаданных];
			Исключение
				Сообщить(СтрокаОшибки + ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			ОбъектМетаданных = ОбластьПоиска.Найти(СтрокаПоиска);
			Если		ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			ИначеЕсли	ОбластьПоиска = Метаданные.Обработки
					И	АлгоритмПоиска = "Метаданные" Тогда//Конфигурация
				ОбработкаФункций = ОбластьПоиска.Найти(ИмяВнешнихФункций);
				Если ОбработкаФункций = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Если УправляемоеПриложение Тогда
					ЗаписьМестаПоиска.Вставить("Заплатки", НСтр("ru = 'Обработка.'; en = 'DataProcessor.'",КодЯзыка) + ИмяВнешнихФункций + НСтр("ru = '.Форма.'; en = '.Form.'",КодЯзыка));
				Иначе
					ЗаписьМестаПоиска.Вставить("Заплатки", Обработки[ИмяВнешнихФункций]);
				КонецЕсли;
				//Сразу, пока на сервере, определим клиентские формы
				СписокКлиентскихФорм = Новый СписокЗначений;
				Для Каждого Фрм Из ОбработкаФункций.Формы Цикл
					СписокКлиентскихФорм.Добавить(Фрм.Имя);
				КонецЦикла;
				ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм", СписокКлиентскихФорм);
				Прервать;
			ИначеЕсли	АлгоритмПоиска = "Запрос"  
					И	ОбластьПоиска = Метаданные.Справочники Тогда
				//Справочник обработок
				ОбластьПоиска = Справочники;
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				| ОбластьПоиска.Ссылка КАК ОбработкаФункций
				|ИЗ
				| " + Лев(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1), СтрДлина(СтрПолучитьСтроку(МногоСтрочнаяЗапись, 1))-1) + "." + СтрокаПоиска + " КАК ОбластьПоиска
				|ГДЕ
				| НЕ ОбластьПоиска.ПометкаУдаления
				| И ОбластьПоиска.Наименование ПОДОБНО &ИмяФайла");
				Если СтрокаПоиска = "ДополнительныеОтчетыИОбработки" Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Наименование","ИмяФайла");
					Запрос.УстановитьПараметр("ИмяФайла", ИмяВнешнихФункций + ".%");
					Если Не Метаданные.Перечисления.Найти("ВариантыПубликацииДополнительныхОтчетовИОбработок") = Неопределено Тогда
						Запрос.Текст = Запрос.Текст + "
						| И ОбластьПоиска.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
					КонецЕсли;
				Иначе
					Запрос.УстановитьПараметр("ИмяФайла", ИмяВнешнихФункций);
				КонецЕсли;
				РезультатЗапроса = Запрос.Выполнить().Выбрать();
				//Запросом тащим обработки из справочника, вытягиваем из хранилища и пробуем создать
				Пока РезультатЗапроса.Следующий() Цикл
					ОбработкаФункций = РезультатЗапроса.ОбработкаФункций;
					Если ОбработкаФункций = ОбластьПоиска[СтрокаПоиска].ПустаяСсылка() Тогда 
						Продолжить;                                   
					КонецЕсли;
					
					Если ОбработкаФункций.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
						РеквизитХранилище = "ХранилищеОбработки";
					Иначе
						РеквизитХранилище = "ХранилищеВнешнейОбработки";
					КонецЕсли;
					
					Попытка
						Если УправляемоеПриложение Тогда
							ИмяОбработки = ВнешниеОбработки.Подключить(ПолучитьНавигационнуюСсылку(ОбработкаФункций, РеквизитХранилище), ИмяВнешнихФункций,Ложь);
						Иначе
							ДвоичныеДанные = ОбработкаФункций[РеквизитХранилище].Получить();
							ДвоичныеДанные.Записать(ИмяВременногоФайла);
							ИмяОбработки = ИмяВременногоФайла
						КонецЕсли;
						ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяОбработки, Ложь);
						Прервать;
					Исключение
						Сообщить(СтрокаОшибки + ОписаниеОшибки());
						Продолжить;
					КонецПопытки;
				КонецЦикла;
			Иначе//Неизвестное место
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ВнешняяОбработка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если УправляемоеПриложение Тогда
			ПолноеИмяФормы = СтрЗаменить(НСтр("ru = 'ВнешняяОбработка.%func%.Форма.'; en = 'ExternalDataProcessor.%func%.Form.'",КодЯзыка), "%func%", ИмяВнешнихФункций);
			ЗаписьМестаПоиска.Вставить("Заплатки", ПолноеИмяФормы);
		Иначе
			ЗаписьМестаПоиска.Вставить("Заплатки", ВнешняяОбработка);
		КонецЕсли;
		//Сразу, пока на сервере, определим клиентские формы
		СписокКлиентскихФорм = Новый СписокЗначений;
		Для Каждого Фрм Из ВнешняяОбработка.Метаданные().Формы Цикл
			СписокКлиентскихФорм.Добавить(Фрм.Имя);
		КонецЦикла;
		ЗаписьМестаПоиска.Вставить("СписокКлиентскихФорм", СписокКлиентскихФорм);
		Прервать;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЗаписьМестаПоиска) Тогда
		Возврат ЗаписьМестаПоиска;
	Иначе//ничего не найдено
		Возврат Новый Структура("Заплатки, СписокКлиентскихФорм", Ложь, Новый СписокЗначений);
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////
///////////////////сбисПараметры///////////////////
///////////////////////////////////////////////////

&НаКлиенте
Функция		УстановитьсбисПараметры(Кэш, СтруктураНастроек, Идентификатор)	Экспорт
	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	Если СтруктураНастроек.Свойство("КоличествоПотоковОтправки") Тогда
		Кэш.Вставить("КоличествоПотоковОтправки", Число(СтруктураНастроек.КоличествоПотоковОтправки));
	КонецЕсли;
	//перенесено из главного окна, работа с сбисПараметрами
	Попытка
		// С версии 2.0.10 храним дату запроса статусов и ид последнего обработанного события в настройках пользователя "СБИС", а не для текущего пользователя
		Если ЗначениеЗаполнено(ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов) или ЗначениеЗаполнено(ГлавноеОкно.ИдентификаторПоследнегоСобытия) Тогда
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов", ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов,ГлавноеОкно.ИдентификаторПоследнегоСобытия);
			//Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,Идентификатор);
		ИначеЕсли ((Кэш.ОбщиеФункции.ЭтоНоваяВерсия("2.0.12", ГлавноеОкно.ПредВерсия) или Не ЗначениеЗаполнено(ГлавноеОкно.ПредВерсия)) И Идентификатор<>"") Тогда    // Если предыдущая версия обработки меньше 2.0.12 читаем настройки статусов из параметров пользователя
			СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов");
			СтруктураНастроек = Кэш.Интеграция.сбисПолучитьНастройки(СтруктураНастроек);
			//Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,Идентификатор);
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов	= СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия	= СтруктураНастроек.ИдентификаторПоследнегоСобытия;
		Иначе
			Если СтруктураНастроек = Неопределено	Тогда
				СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш,Идентификатор);
			КонецЕсли;
			ГлавноеОкно.ДатаПоследнегоЗапросаСтатусов	= СтруктураНастроек.ДатаПоследнегоЗапросаСтатусов;
			ГлавноеОкно.ИдентификаторПоследнегоСобытия	= СтруктураНастроек.ИдентификаторПоследнегоСобытия;
		КонецЕсли;
	Исключение
		СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов");
		//Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,Идентификатор);
	КонецПопытки;
	
	СтруктураСопоставления = ПолучитьПараметрыСопоставленияНаСервере(СтруктураНастроек);
	
	Для	Каждого	КлючИЗначение Из СтруктураСопоставления	Цикл
		СтруктураНастроек.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
	КонецЦикла;
	Если СтруктураНастроек.Свойство("РеквизитСопоставленияНоменклатуры") Тогда
		Кэш.КэшЗначенийИни.Вставить("РеквизитСопоставленияНоменклатуры", СтруктураНастроек.РеквизитСопоставленияНоменклатуры);
	КонецЕсли;
	
	//+++ МАИ 28.07.2021
	Если СтруктураНастроек.Свойство("ВремяОжиданияОтвета_Отправка") Тогда
		Попытка
			ВремяОжиданияОтвета_Отправка = Число(СтруктураНастроек.ВремяОжиданияОтвета_Отправка);
			Кэш.СБИС.ПараметрыИнтеграции.Вставить("ВремяОжиданияОтвета_Отправка", ВремяОжиданияОтвета_Отправка);		
		Исключение
		КонецПопытки; 
	КонецЕсли;
	//---
	
	Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,Идентификатор);
	
КонецФункции

&НаКлиенте
Функция		ОбработатьСтруктуруПараметров(СтруктураНастроек) Экспорт 
	
	Для Каждого Элемент Из СтруктураНастроек Цикл//Преобразование к дате
		СтрокаПроверки	= Элемент.Значение;
		Если	Сред(СтрокаПроверки,3,1)="."
			И	Сред(СтрокаПроверки,6,1)="."
			И	(	СтрДлина(СтрокаПроверки)=10
				Или	СтрДлина(СтрокаПроверки)=19)	Тогда
			Попытка
				СтруктураНастроек.Вставить(Элемент.Ключ, Дата(СтрокаПроверки));
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиенте
Процедура	сбисОчиститьКэшНастроек(Кэш, ПараметрыОчистки) Экспорт
	
	КлючиУдалить = "СписокЭлементовФильтра,ДобавленыЭлементы";
	Если ПараметрыОчистки.Свойство("КлючиУдалить") Тогда
		КлючиУдалить = КлючиУдалить + "," + ПараметрыОчистки.КлючиУдалить;
	КонецЕсли;
	КлючиУдалить = СтрЗаменить(КлючиУдалить, ",", Символы.ПС);
	Для шаг = 1 По СтрЧислоСтрок(КлючиУдалить) Цикл
		ПутьДоЗначения = СтрЗаменить(СтрПолучитьСтроку(КлючиУдалить, шаг), ".", Символы.ПС);
		ЗначениеОткудаУдалить = Кэш.КэшНастроек;
		Для шагУдалить = 1 По СтрЧислоСтрок(ПутьДоЗначения)-1 Цикл 
			лПуть = СтрПолучитьСтроку(ПутьДоЗначения, шагУдалить);
			ЗначениеОткудаУдалить = ЗначениеОткудаУдалить[лПуть];
		КонецЦикла;
		ЗначениеОткудаУдалить.Удалить(СтрПолучитьСтроку(ПутьДоЗначения, шагУдалить));
	КонецЦикла;
	
КонецПроцедуры

//Функция определяет необходимость проверки по СБИС параметрам
&НаКлиенте                                  
Функция		СбисОпределитьНеобходимостьПроверки(Кэш, СтруктураПараметров, сбисДополнительныеПараметры=Неопределено) Экспорт
	
	сбисРезультат			= Истина;
	сбисВерсияКонфигурации	= Неопределено;
	сбисВерсияОбработки		= Неопределено;
	СтруктураПараметров.Свойство("ВерсияКонфигурации",	сбисВерсияКонфигурации);
	СтруктураПараметров.Свойство("ВерсияОбработки",		сбисВерсияОбработки);
	
	Если	сбисВерсияКонфигурации	= Кэш.ПараметрыСистемы.Конфигурация.Версия
		И	сбисВерсияОбработки		= Кэш.ПараметрыСистемы.Обработка.Версия Тогда
		сбисРезультат = Ложь;
	КонецЕсли;
	//TODO39 убрать параметр через форму.
	Если Кэш.ФормаНастроек.ПараметрыРаботы.Свойство("ВыполнитьПроверку")Тогда
		сбисРезультат = ?(сбисРезультат, сбисРезультат, Кэш.ФормаНастроек.ПараметрыРаботы.ВыполнитьПроверку);
		Кэш.ФормаНастроек.ПараметрыРаботы.Удалить("ВыполнитьПроверку");
	КонецЕсли;
	Если	СтруктураПараметров.Свойство("ВыполнитьПроверку")
		И	СтруктураПараметров.ВыполнитьПроверку Тогда
		СтруктураПараметров.ВыполнитьПроверку = Ложь;
		сбисРезультат = Истина;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ВерсияКонфигурации",	Кэш.ПараметрыСистемы.Конфигурация.Версия);
	СтруктураПараметров.Вставить("ВерсияОбработки",		Кэш.ПараметрыСистемы.Обработка.Версия);

	Возврат сбисРезультат;
	
КонецФункции