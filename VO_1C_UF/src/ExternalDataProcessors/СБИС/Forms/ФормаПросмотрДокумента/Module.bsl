&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Процедура сбисУстановитьHTML(сбисТекстHTML)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(сбисТекстHTML);
	#Иначе
		ПолеHTMLДокумента = сбисТекстHTML;
	#КонецЕсли
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьНажатие(Элемент)
	// Процедура отправляет текущий пакет документов 	
	
	СоставПакета.Вставить("Примечание",ПакетКомментарий);
	МассивПодготовленныхПакетов = Новый Массив;
	МассивПодготовленныхПакетов.Добавить(СоставПакета);
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МестныйКэш.Вставить("РезультатОтправки", Новый Структура("ТипыОшибок,Отправлено,НеОтправлено,НеСформировано,Ошибок,ДетализацияОшибок,ВсегоПакетов,ОшибкиДоОтправки,ДанныеПоСтатусам,ПорНомер,КоличествоСвободныхПотоков,ФормаОтправки,ОтправленоСообщений,ПолученоОтветов,ВремяНачала,ВремяФормирования,ВремяОтправки,ДетализацияОтправки,ВремяЗаписиСтатусов,ВремяПолученияДанных,ВремяОжиданияОтвета, СформированныеПакеты", Новый СписокЗначений,0,0,0,0,Новый Соответствие,0,0,Новый Массив,0,30,"ФормаПросмотрДокумента",0,0,ВремяНачала,0,0, Новый Соответствие,0,0,0, Новый Соответствие));
	МестныйКэш.РезультатОтправки.Вставить("НаЗаписьСтатусов", Новый Структура("Ошибки, Ответы", Новый Соответствие, Новый Соответствие));
	
	сбисПолучитьФорму("Документ_Шаблон").ОтправитьПодготовленныеПакетыДокументы(МестныйКэш, МассивПодготовленныхПакетов);
КонецПроцедуры
&НаКлиенте
Процедура ПослеОтправки(Кэш) Экспорт
	// Если есть ошибки отправки, то выводим результат, иначе закрываем просмотр 	
	Если Кэш.РезультатОтправки.НеОтправлено>0 Тогда  // если есть ошибки при отправке, показываем окно результатов
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
		фрм.ПоказатьРезультатОтправки(Кэш);	
	Иначе    // если отправилось без ошибок, закрываем окно просмотра
		ОбновлятьГлавноеОкно = Истина;
		Если ЭтаФорма.Открыта() Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура СохранитьНаДискНажатие(Элемент) Экспорт
	// Процедура сохраняет текущий пакет на диск в zip-архив	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога; 
	ДиалогОткрытия = Новый ДиалогВыбораФайла(Режим); 
	ДиалогОткрытия.Каталог = ""; 
	ДиалогОткрытия.МножественныйВыбор = Ложь; 
	ДиалогОткрытия.Заголовок = "Выберите каталог"; 
	
	Если ДиалогОткрытия.Выбрать() Тогда 
		ПутьККаталогу = ДиалогОткрытия.Каталог; 
		Если СоставПакета.Свойство("Вложение") Тогда
			ИмяZIP= СтрЗаменить(ЗаголовокПакета,":",".");
			ИмяZIP= СтрЗаменить(ИмяZIP,"\","_");
			ИмяZIP= СокрЛП(СтрЗаменить(ИмяZIP,"/","_"));
			//ЗаписьZIP =  Новый ЗаписьZipФайла(ПутьККаталогу+"\"+ИмяZip+".zip");
			СоздатьКаталог(ПутьККаталогу+"\"+ИмяZip);
			
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если Вложение.Свойство("XMLДокумента") и Вложение.XMLДокумента <> "" Тогда
					ТД = Новый ТекстовыйДокумент;
					ТД.УстановитьТекст(Вложение.XMLДокумента);
					Если Вложение.Свойство("Файл") Тогда
						Если ТипЗнч(Вложение.Файл)=Тип("Структура") Тогда   // в SDK 1.1 файл стал не массивом, а объектом
							ИмяФайла = Вложение.Файл.Имя;
						Иначе
							ИмяФайла = Вложение.Файл[0].Имя;
						КонецЕсли;
					ИначеЕсли Вложение.Свойство("СтруктураФайла") и Вложение.СтруктураФайла.Свойство("Файл") Тогда
						ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
					КонецЕсли;
					ТД.Записать(ПутьККаталогу+"\"+ИмяZip+"\"+ИмяФайла, "windows-1251");
					//ЗаписьZIP.Добавить(ВремКаталог+"\"+ИмяФайла);
				ИначеЕсли Вложение.Свойство("ПолноеИмяФайла") Тогда
					//ЗаписьZIP.Добавить(Вложение.ПолноеИмяФайла);
					КопироватьФайл(Вложение.ПолноеИмяФайла, ПутьККаталогу+"\"+ИмяZip+"\"+Вложение.ИмяФайла);
				ИначеЕсли Вложение.Свойство("Файл") и ТипЗнч(Вложение.Файл)=Тип("Структура") и Вложение.Файл.Свойство("Ссылка") и Вложение.Файл.Свойство("Имя") Тогда
					МестныйКэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(МестныйКэш,Вложение.Файл.Ссылка,ПутьККаталогу+"\"+ИмяZip+"\"+Вложение.Файл.Имя);
				КонецЕсли;
			КонецЦикла;
			//ЗаписьZIP.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	// Процедура удаляет сопоставление номенклатуры	
	//Если Вопрос("Удалить сопоставление номенклатуры?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	ЗначениеПоиска = Неопределено;
	Если ТабЧасть.ТекущиеДанные<>Неопределено Тогда
		Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Идентификатор) Тогда
			ЗначениеПоиска = ТабЧасть.ТекущиеДанные.Идентификатор;
			ИмяПоиска = "Идентификатор";
		Иначе
			ЗначениеПоиска = ТабЧасть.ТекущиеДанные.Название;
			ИмяПоиска = "Название";
		КонецЕсли;
	КонецЕсли;
	ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,"","");
	ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
	фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, МестныйКэш.Парам.КаталогНастроек, МестныйКэш.Ини);
	НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
	ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
	ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
	ТаблДок[НомерПП].Вставить("Номенклатура", Неопределено);
	ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
	ЗаполнитьТаблицуДокументов(СоставПакета);
	Если ЗначениеПоиска <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура(ИмяПоиска, ЗначениеПоиска);
		Строка = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
		Если Строка.Количество() <> 0 Тогда
			НомерСтроки = Строка[0].ПолучитьИдентификатор();
			ТабЧасть.ТекущаяСтрока = НомерСтроки;
		КонецЕсли;	
	КонецЕсли;
	//Иначе
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураПриИзменении(Элемент)
	// Процедура записывает сопоставление номенклатуры	
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Номенклатура) Тогда
		ЗначениеПоиска = Неопределено;
		Если ТабЧасть.ТекущиеДанные<>Неопределено Тогда
			Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Идентификатор) Тогда
				ЗначениеПоиска = ТабЧасть.ТекущиеДанные.Идентификатор;
				ИмяПоиска = "Идентификатор";
			Иначе
				ЗначениеПоиска = ТабЧасть.ТекущиеДанные.Название;
				ИмяПоиска = "Название";
			КонецЕсли;
		КонецЕсли;
		ГлавноеОкно = МестныйКэш.ГлавноеОкно;
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,ТабЧасть.ТекущиеДанные.Номенклатура,"");
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, МестныйКэш.Парам.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить("Номенклатура", ТабЧасть.ТекущиеДанные.Номенклатура);
		ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
		ЗаполнитьТаблицуДокументов(СоставПакета);
		Если ЗначениеПоиска <> Неопределено Тогда
			ПараметрыОтбора = Новый Структура(ИмяПоиска, ЗначениеПоиска);
			Строка = ТабличнаяЧасть.НайтиСтроки(ПараметрыОтбора);
			Если Строка.Количество() <> 0 Тогда
				НомерСтроки = Строка[0].ПолучитьИдентификатор();
				ТабЧасть.ТекущаяСтрока = НомерСтроки;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьХарактеристикаПриИзменении(Элемент)
	// Процедура записывает сопоставление характеристики	
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Характеристика) Тогда
		ГлавноеОкно = МестныйКэш.ГлавноеОкно;
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,ТабЧасть.ТекущиеДанные.Номенклатура,ТабЧасть.ТекущиеДанные.Характеристика);
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, МестныйКэш.Парам.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", ТабЧасть.ТекущиеДанные.Характеристика);
		ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	// Процедура удаляет сопоставление номенклатуры	
	//Если Вопрос("Удалить сопоставление характеристики?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Код,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Код,ТабЧасть.ТекущиеДанные.Номенклатура, "");
	ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
	фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, МестныйКэш.Парам.КаталогНастроек, МестныйКэш.Ини);
	НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
	ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
	ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
	ТаблДок[НомерПП].Вставить("ХарактеристикаНоменклатуры", Неопределено);
	ЗаполнитьТаблицуДокументов(СоставПакета);
	//Иначе
	//	СтандартнаяОбработка = Ложь;
	//КонецЕсли;
КонецПроцедуры
//&НаКлиенте
//Процедура ТабличнаяЧастьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
//	НомерПП = Элемент.ТекущиеДанные.НомерПП;
//	Номенклатура = Элемент.ТекущиеДанные.Номенклатура;
//	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Номенклатура) Тогда
//		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура",Элемент.ТекущиеДанные.Название,Элемент.ТекущиеДанные.Идентификатор,Элемент.ТекущиеДанные.Номенклатура);
//		УстановитьСоответствиеНоменклатуры(ДанныеНоменклатуры);
//	КонецЕсли;
//	Вложение.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл[НомерПП].Вставить("Номенклатура", Номенклатура);
//	ЗаполнитьТаблицуДокументов(СоставПакета);
//КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьПрохождение(СоставПакета) Экспорт
	// Процедура заполняет вкладку Прохождение	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьПрохождение","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
	Если фрм<>Ложь Тогда
		СтруктураСобытий = фрм.ЗаполнитьПрохождение(СоставПакета);
		СБИССобытия.Очистить();
		Для Каждого Элемент Из СтруктураСобытий Цикл
			Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтр = СБИССобытия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура СинонимДокументаПриИзменении(Элемент)
	// Процедура устанавливает тип документа 1С, который будет загружен	
	ТипДокумента = СписокТиповДокументов.НайтиПоЗначению(СинонимДокумента).Представление;
	СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;
	СтруктураИниФайла = Ини.мДокумент[ТипДокумента];
	СтрокаТаблДок.Вложение[0].Значение.Вставить("СтруктураИниФайла", СтруктураИниФайла);
	СоставПакета.Вложение[СтрокаТаблДок.НомерВложенияВПакете].Вставить("СтруктураИниФайла", СтруктураИниФайла);
	Если СоставПакета.Свойство("Направление") Тогда // Исходящие пока не загружаем
		ЗаполнитьДокументДаннымиЭД(СоставПакета.Вложение[СтрокаТаблДок.НомерВложенияВПакете]);
	КонецЕсли;
	ЗаполнитьТаблицуДокументов(СоставПакета);
КонецПроцедуры
&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	// Процедура вызывает форму создания контрагента	
	СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьИзФайла","ФормаСозданияКонтрагента",,МестныйКэш);
	фрм.ЗаполнитьИзФайла(СтрокаТаблДок, СоставПакета, МестныйКэш);// alo загрузка из 3,03	
КонецПроцедуры
&НаКлиенте
Процедура ЗаполнитьДокумент1СВСоставеПакета(ИдентификаторВложения, Документ1С, СтруктураДокумента1С)
	// Процедура проставляет документы 1С на вложениях текущего пакета при загрузке документов
	сч = 0;
	Для Каждого Вложение Из СоставПакета[ИмяРеквизитаВложений] Цикл
		Если Вложение.Свойство("Идентификатор") и Вложение.Идентификатор = ИдентификаторВложения Тогда
			Если СоставПакета[ИмяРеквизитаВложений][сч].Документы1С.НайтиПоЗначению(Документ1С) = Неопределено Тогда
				СоставПакета[ИмяРеквизитаВложений][сч].Документы1С.Добавить(Документ1С); 
			КонецЕсли;
			сбисЗаполнитьДанныеВложения(СоставПакета[ИмяРеквизитаВложений][сч], СтруктураДокумента1С);
		КонецЕсли;
		сч = сч + 1;
	КонецЦикла;		
КонецПроцедуры
&НаКлиенте
Процедура ДобавитьВложение(Команда)
	// Процедура добавляет внешний файл в состав пакета
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	ДиалогОткрытияФайла.МножественныйВыбор = Истина;
	ДиалогОткрытияФайла.Заголовок = "Выберите файлы";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Шифровать = Ложь;
		Если (	МестныйКэш.Парам.СпособОбмена = 5 Или МестныйКэш.Парам.СпособОбмена = 7)
			И 	МестныйКэш.Парам.ШифроватьВыборочно = Истина и МестныйКэш.Свойство("КаталогЗашифрованных") и Лев(ДиалогОткрытияФайла.Каталог, СтрДлина(МестныйКэш.КаталогЗашифрованных)) = МестныйКэш.КаталогЗашифрованных Тогда
			Шифровать = Истина;	
		КонецЕсли;
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			Файл = Новый Файл(ИмяФайла);
			СоставПакета.Вложение.Добавить(Новый Структура("ПолноеИмяФайла,ИмяФайла,Название,Шифрование",Файл.ПолноеИмя, Файл.Имя, Файл.Имя, ?(Шифровать, Истина, Ложь)));
		КонецЦикла;	
		ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура УдалитьВложение(Команда)
	// Процедура удаляет вложение из пакета
	Если сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные<>Неопределено Тогда
		СоставПакета.Вложение.Удалить(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.НомерВложенияВПакете);
		ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////

////////////////////// Управляемое приложение/////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
&НаКлиенте
Процедура ПоказатьДокумент(Кэш, Пакет) Экспорт
	// Процедура открывает форму просмотра пакета документов	
	СоставПакета = Пакет;
	ДокументРазобран = Ложь;
	ДокументУчетаРазобран = Ложь;
	ВложенияУчетаРазобраны = Ложь;
	ОбновлятьГлавноеОкно = Ложь;
	ТулБар = сбисЭлементФормы(ЭтаФорма,"ТулБар");
	ТулБар.Видимость = Истина;
	сбисЭлементФормы(ЭтаФорма,"ПодготовитьКЗагрузке").Видимость = Истина;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьНаВложении").Видимость = Ложь;
	сбисЭлементФормы(ЭтаФорма,"ПереключитьТипВложений").Видимость = СоставПакета.Свойство("ВложениеУчета") и СоставПакета.ВложениеУчета.Количество()>0;
	ЗаголовокПакета="";     //Никифоров - начало
	ПакетОрганизация="";  //
	ПакетКонтрагент="";   //Никифоров - конец
	ТаблицаДокументов.Очистить();
	сбисУстановитьHTML("<html></html>");
	ЭтаФорма.Открыть();
	МестныйКэш = Кэш;
	ЕстьВходящиеВложения = Ложь;
	
	ЭтоПустойПакет	= Ложь;
	ОткрытьПакет	= Истина;
	Если Не	СоставПакета.Вложение.Количество() Тогда
		ЭтоПустойПакет = Истина;
		Если Не СоставПакета.Свойство("ДобавочныеСтроки") Тогда
			ОткрытьПакет = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОткрытьПакет И Не Кэш.Парам.Меркурий Тогда // alo Меркурий
		Сообщить("В пакете отсутствуют вложения.");
		Возврат;
	КонецЕсли;
	
	ТекущийРаздел = МестныйКэш.Разделы["р"+МестныйКэш.Текущий.Раздел];
	Если Не ЭтоПустойПакет Тогда
		Попытка
			Если Кэш.Ини.Конфигурация.Свойство("Номенклатура") Тогда
				ИмяСправочникаНоменклатуры = СокрЛП(Сред(Кэш.Ини.Конфигурация.Номенклатура.Значение, Найти(Кэш.Ини.Конфигурация.Номенклатура.Значение, ".")+1));
				ТипСправочникаНоменклатуры = "СправочникСсылка."+ИмяСправочникаНоменклатуры;
			Иначе
				ТипСправочникаНоменклатуры = "СправочникСсылка.Номенклатура";
			КонецЕсли;
			ЭтаФорма.Элементы.ТабличнаяЧастьНоменклатура.ОграничениеТипа = Новый ОписаниеТипов(ТипСправочникаНоменклатуры);
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		ЭтаФорма.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьХарактеристика.Видимость=Ложь;
		
	КонецЕсли;
	Если Кэш.Ини.Конфигурация.Свойство("ИмяОтбораХарактеристики") Тогда
		ИмяОтбораХарактеристики = СокрЛП(СтрЗаменить(Кэш.Ини.Конфигурация.ИмяОтбораХарактеристики.Значение,"'", ""));
	Иначе
		ИмяОтбораХарактеристики = "Номенклатура";
	КонецЕсли;
	ИмяРеквизитаКонтрагентаВДоговоре = "Контрагент";
	Если Кэш.Ини.Конфигурация.Свойство("Договоры_Контрагент") Тогда
		ИмяРеквизитаКонтрагентаВДоговоре = СокрЛП(Сред(Кэш.Ини.Конфигурация.Договоры_Контрагент.Значение, Найти(Кэш.Ини.Конфигурация.Договоры_Контрагент.Значение, ".")+1));	
	КонецЕсли;
	Договор1СУстановитьОтбор(ИмяРеквизитаКонтрагентаВДоговоре);
	
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("УстановитьВидимостьЭлементовВформеПросмотра","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
	фрм.УстановитьВидимостьЭлементовВформеПросмотра(ЭтаФорма, СоставПакета, Кэш.Парам);
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисСписокДополнительныхОпераций","Раздел_"+ТекущийРаздел+"_"+МестныйКэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",МестныйКэш);	
	СписокДопОпераций = фрм.сбисСписокДополнительныхОпераций(Кэш, ЭтаФорма);
	ЗаполнитьПрохождение(СоставПакета);
	
	ЭтаФорма.Элементы.Контент.ТекущаяСтраница = ЭтаФорма.Элементы.Контент.ПодчиненныеЭлементы.Просмотр;
	Если СоставПакета.Свойство("НашаОрганизация") Тогда
		Если СоставПакета.НашаОрганизация.Свойство("СвЮЛ") Тогда
			ПакетОрганизация = СоставПакета.НашаОрганизация.СвЮЛ.Название;
		ИначеЕсли СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
			ПакетОрганизация = СоставПакета.НашаОрганизация.СвФЛ.Фамилия+" "+СоставПакета.НашаОрганизация.СвФЛ.Имя+?(СоставПакета.НашаОрганизация.СвФЛ.Свойство("Отчество")," "+СоставПакета.НашаОрганизация.СвФЛ.Отчество,"");
		КонецЕсли;
	КонецЕсли;
	Если СоставПакета.Свойство("Контрагент") Тогда
		Если СоставПакета.Контрагент.Свойство("СвЮЛ") Тогда
			ПакетКонтрагент = СоставПакета.Контрагент.СвЮЛ.Название;
		ИначеЕсли СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
			ПакетКонтрагент = СоставПакета.Контрагент.СвФЛ.Фамилия+" "+СоставПакета.Контрагент.СвФЛ.Имя+?(СоставПакета.Контрагент.СвФЛ.Свойство("Отчество")," "+СоставПакета.Контрагент.СвФЛ.Отчество,"");
		КонецЕсли;
	КонецЕсли;
	Если СоставПакета.Свойство("Примечание") Тогда
		ПакетКомментарий = СоставПакета.Примечание;
	Иначе
		ПакетКомментарий = "";
	КонецЕсли;
	ИмяРеквизитаВложений = "Вложение";
	сбисЭлементФормы(ЭтаФорма,"ПереключитьТипВложений").Заголовок = "Показать вложения СБИС";
	ЗаполнитьТаблицуДокументов(Пакет);
	ЭтаФорма.Элементы.ТаблицаДокументов.Обновить();
	Если ТаблицаДокументов.Количество() Тогда // alo Меркурий
		НомерСтроки = ТаблицаДокументов[0];
		Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			НомерСтроки = НомерСтроки.ПолучитьИдентификатор();
		КонецЕсли;
		сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущаяСтрока = НомерСтроки;
	КонецЕсли;									// alo Меркурий
	ТаблицаДокументовПриАктивизацииЯчейки(сбисЭлементФормы(ЭтаФорма, "ТаблицаДокументов"));
	ЭтаФорма.ОбновитьОтображениеДанных();
	
КонецПроцедуры
&НаКлиенте
Процедура ТаблицаДокументовПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	сбисУстановитьHTML(Элемент.ТекущиеДанные.ТекстHTML);
	Вложение = Элемент.ТекущиеДанные.Вложение[0].Значение;
	ДокРазобран = (ДокументУчетаРазобран И ИмяРеквизитаВложений = "ВложениеУчета") или (ДокументРазобран И ИмяРеквизитаВложений = "Вложение");
	Если ДокРазобран Тогда
		Если Вложение.Свойство("Направление") Тогда 
			ЗаполнитьДокументДаннымиЭД(Вложение);
			//НГС Выводим на экран тип загружаемого документа
			Если Вложение.Свойство("СтруктураИниФайла") Тогда
				Ини = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, Вложение.ИмяИни);
				ИмяТекущее = МестныйКэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Название",Вложение.СтруктураИниФайла, МестныйКэш));
				
				сбисЭлементФормы(ЭтаФорма, "СинонимДокумента").СписокВыбора.Очистить();
				Для Каждого ТипДокумент Из Ини.мДокумент Цикл
					Название = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Название",ТипДокумент.Значение,МестныйКэш);
					Имя = ТипДокумент.Ключ;
					СписокТиповДокументов.Добавить(Название, Имя);
					сбисЭлементФормы(ЭтаФорма, "СинонимДокумента").СписокВыбора.Добавить(Название);
					Если Название = ИмяТекущее Тогда
						СинонимДокумента = Название; 	
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОчиститьВкладкуЗагрузка();
			КонецЕсли;
			//КНГС
			Если Вложение.Свойство("Договор1С") Тогда
				Договор1С = Вложение.Договор1С;
			иначе
				Договор1С = "";
			КонецЕсли;
			Если Вложение.Свойство("Дата1С") Тогда
				Дата1С = Вложение.Дата1С;
			иначе
				Дата1С = "";
			КонецЕсли;
			Если Вложение.Свойство("Контрагент1С") Тогда
				Контрагент1С = Вложение.Контрагент1С;
			иначе
				Контрагент1С = "";
			КонецЕсли;
		ИначеЕсли Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
			сбиЗаполнитьТаблицуНоменклатуры(Вложение);
		Иначе
			ТабличнаяЧасть.Очистить();
		КонецЕсли;
		Если Найти(Элемент.ТекущиеДанные.Статус, "Не найден контрагент") Тогда
			сбисЭлементФормы(ЭтаФорма,"НеНайденКонтрагент").Видимость = Истина;
		Иначе
			сбисЭлементФормы(ЭтаФорма,"НеНайденКонтрагент").Видимость = Ложь;
		КонецЕсли;
	Иначе
		ОчиститьВкладкуЗагрузка();
	КонецЕсли;
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры
&НаКлиенте
Процедура ОчиститьВкладкуЗагрузка()
	ТабличнаяЧасть.Очистить();
	сбисЭлементФормы(ЭтаФорма, "СинонимДокумента").СписокВыбора.Очистить();
	СинонимДокумента = "";
	Договор1С = "";
	Дата1С = "";
	Контрагент1С = "";	
КонецПроцедуры
&НаКлиенте
Функция ЗаполнитьДокументДаннымиЭД(Вложение) Экспорт
	// Заполняется вкладка Загрузка (тип документа, табличная часть) по данным из файла
	СтруктураФайла = Вложение.СтруктураФайла;
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	Если Не Вложение.Свойство("СтруктураИниФайла") Тогда
		//сбисЭлементФормы(ЭтаФорма,"Загрузка").Видимость = Ложь;
		//Предупреждение("Отсутствует настройка для загрузки файла "+СтруктураФайла.Файл.Формат+"_"+СтрЗаменить(СтруктураФайла.Файл.ВерсияФормата,".", "_"));
		Возврат Ложь;
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма,"Загрузка").Видимость = Истина;
	КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
	
	//НГС Проверяем Контрагента только если есть такая роль
	Если КонтрагентРоль <> Неопределено Тогда
		Попытка
			ПутьКонтрагента = Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Данные;
			СтрКонтрагента = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
		Исключение
			СтрКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(КонтрагентРоль),СтруктураФайла.Файл.Документ[КонтрагентРоль], Неопределено);
		КонецПопытки;
		Если СтрКонтрагента = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		//ИНН = ?(СтрКонтрагента.Свойство("СвЮЛ"), СтрКонтрагента.СвЮЛ.ИНН, СтрКонтрагента.СвФЛ.ИНН);
	КонецЕсли;
	//КНГС
	
	ТабличнаяЧасть.Очистить();
	Если Найти(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Статус, "Сопоставление не требуется")=0 Тогда
		
		Если Вложение.СтруктураИниФайла.Свойство("мТаблДок") Тогда
			Для Каждого Элемент Из Вложение.СтруктураИниФайла.мТаблДок Цикл
				Если Элемент.Значение.Свойство("ТаблДок") и Элемент.Значение.ТаблДок.Свойство("Данные") Тогда
					ПутьТаблДок = Элемент.Значение.ТаблДок.Данные;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// << alo загрузка 3.03
		Если не ЗначениеЗаполнено(ПутьТаблДок) Тогда
			попытка
				ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
			исключение
			конецпопытки;
		конецесли;
		// alo загрузка 3.03 >>
		
		сч = 0;
		//фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		//НашаНоменклатура = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, МестныйКэш);
		Если ЗначениеЗаполнено(ПутьТаблДок) Тогда
			ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
		Иначе
			ТаблДок = СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТаблДок) Тогда
			Для Каждого СтрТабл Из ТаблДок Цикл
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.НомерПП = сч;
				СтрТабл.Свойство("Название", НоваяСтрока.Название);
				Если СтрТабл.Свойство("Характеристика") Тогда
					Если ТипЗнч(СтрТабл.Характеристика) = Тип("Структура") Тогда
						СтрТабл.Характеристика.Свойство("Значение", НоваяСтрока.ХарактеристикаПоставщика);
					ИначеЕсли ТипЗнч(СтрТабл.Характеристика) = Тип("Массив") Тогда
						Для Каждого Элемент Из СтрТабл.Характеристика Цикл
							Элемент.Свойство("Значение", НоваяСтрока.ХарактеристикаПоставщика);
							Прервать;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				СтрТабл.Свойство("Код", НоваяСтрока.Код);
				СтрТабл.Свойство("ЕдИзм", НоваяСтрока.ЕдИзм);
				СтрТабл.Свойство("ОКЕИ", НоваяСтрока.ОКЕИ);
				СтрТабл.Свойство("Кол_во", НоваяСтрока.Количество);
				СтрТабл.Свойство("Цена", НоваяСтрока.Цена);
				СтрТабл.Свойство("СуммаБезНал", НоваяСтрока.СуммаБезНал);
				Если СтрТабл.Свойство("НДС") Тогда
					СтрТабл.НДС.Свойство("Сумма", НоваяСтрока.СуммаНДС);
					СтрТабл.НДС.Свойство("Ставка", НоваяСтрока.СтавкаНДС);
				КонецЕсли;
				СтрТабл.Свойство("Сумма", НоваяСтрока.Сумма);
				СтрТабл.Свойство("Идентификатор", НоваяСтрока.Идентификатор);
				СтрТабл.Свойство("Номенклатура", НоваяСтрока.Номенклатура);
				СтрТабл.Свойство("ХарактеристикаНоменклатуры", НоваяСтрока.Характеристика);
				сч = сч+1;
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбиЗаполнитьТаблицуНоменклатуры(Вложение) Экспорт
	// Заполняется таблица сопоставления номенклатуры по данным из файла
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисЗаполнитьДанныеНоменклатурыНаСервере","РаботаСДокументами1С","", МестныйКэш);
	
	ТабличнаяЧасть.Очистить();
	сч = 0;
	ТаблДок = Вложение.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл;
	Для Каждого СтрТабл Из ТаблДок Цикл
		ДанныеНоменклатуры = фрм.сбисЗаполнитьДанныеНоменклатурыНаСервере(СтрТабл.Идентификатор);
		Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока.НомерПП = сч;
			
			НоваяСтрока.Номенклатура = ДанныеНоменклатуры.Номенклатура;
			Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
				НоваяСтрока.Характеристика = ДанныеНоменклатуры.Характеристика;
			КонецЕсли;
			НоваяСтрока.Идентификатор = СтрТабл[Вложение.НоменклатураКодКонтрагента];
		КонецЕсли;
		сч = сч+1;
	КонецЦикла;	
КонецФункции
&НаКлиенте
Процедура ВыборЗакладки(Элемент)
	// Процедура осуществляет переход по вкладкам формы	
	Элементы.Контент.ТекущаяСтраница = Элементы.Загрузка;
КонецПроцедуры
&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаДокументовДокументы1СНазвания" и Элемент.ТекущиеДанные.Документы1С.Количество()>0 Тогда
		Для Каждого Документ1С из Элемент.ТекущиеДанные.Документы1С Цикл
			ПоказатьЗначение(,Документ1С.Значение);
		КонецЦикла;
	ИначеЕсли Поле.Имя = "ТаблицаДокументовУдалить"  Тогда
		УдалитьВложение("");
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	// Если это не написать, то при закрытии формы с активной вкладкой Загрузка в следующий раз форма открывается с пустым Просмотром
	ЭтаФорма.Элементы.Контент.ТекущаяСтраница = ЭтаФорма.Элементы.Просмотр;
	ПолеHTMLДокумента = ""; // без этого при повторном открытии одного документа УПД двоились линии в визуализации
КонецПроцедуры
&НаКлиенте
Процедура Отклонить(Команда)
	ОтклонитьУтвердитьНажатие(Новый Структура("Имя","Отклонить"));
КонецПроцедуры
&НаКлиенте
Процедура Утвердить(Команда)
	ОтклонитьУтвердитьНажатие(Новый Структура("Имя","Утвердить"));
КонецПроцедуры

&НаКлиенте
Процедура ТабличнаяЧастьХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	Если ЗначениеЗаполнено(Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура) Тогда
		Если МестныйКэш.Ини.Конфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
			ИмяСправочникаХарактеристикиНоменклатуры = СокрЛП(Сред(МестныйКэш.Ини.Конфигурация.ХарактеристикиНоменклатуры.Значение, Найти(МестныйКэш.Ини.Конфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
		Иначе
			ИмяСправочникаХарактеристикиНоменклатуры="ХарактеристикиНоменклатуры";
		КонецЕсли;
		П = Новый Структура();
		Если Лев(ИмяОтбораХарактеристики,6) = "Отбор." Тогда
			ИмяОтбора = Сред(ИмяОтбораХарактеристики,7);
			П.Вставить("Отбор", Новый Структура(ИмяОтбора,Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура));
		Иначе
			П.Вставить(ИмяОтбораХарактеристики, Элементы.ТабличнаяЧасть.ТекущиеДанные.Номенклатура);
		КонецЕсли;
		Форма=ПолучитьФорму("Справочник."+ИмяСправочникаХарактеристикиНоменклатуры+".ФормаВыбора",П, Элемент);
		Форма.Открыть();
	Иначе
		Сообщить("Заполните номенклатуру");
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура СформироватьРасхождениеНажатие(Элемент) Экспорт
	// Процедура формирует файл расхождения по полученному документу от контрагента и фактически поступившему/заказанному товару
	// Расхождение строится по вложению с минимальным весом
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	СписокВесов = Новый СписокЗначений;
	ЕстьДокументы1С = Ложь;
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		Если СтрокаТаблДок.Документы1С.Количество()>0 Тогда
			ЕстьДокументы1С = Истина;
			Вложение = СтрокаТаблДок.Вложение[0].Значение;
			Если Вложение.Свойство("СтруктураФайла") и Вложение.Свойство("СтруктураИниФайла") Тогда
				СтруктураФайлаКонтрагента = Вложение.СтруктураФайла;
				
				Документ1С = СтрокаТаблДок.Документы1С[0].Значение;
				ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
				Если Вложение.СтруктураИниФайла.Свойство("ФайлНастроекРасхождения") Тогда
					Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла,СоставПакета,ИниКонфигурация", Вложение.СтруктураИниФайла, Документ1С, Новый Структура, СтруктураФайлаКонтрагента,СоставПакета,МестныйКэш.Ини.Конфигурация);
					ИмяДокумента = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение("ФайлНастроекРасхождения",Контекст,МестныйКэш);
					//ИмяДокумента = СтрЗаменить(Вложение.СтруктураИниФайла.ФайлНастроекРасхождения.Значение,"'","");
				КонецЕсли;
				Если НЕ МестныйКэш.ини.Свойство(ИмяДокумента) Тогда
					Продолжить;
				КонецЕсли;
				ДокументОтклонения = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ДокументОтклонения", МестныйКэш.ФормаНастроек.Ини(МестныйКэш, ИмяДокумента), МестныйКэш);
				Если ЗначениеЗаполнено(ДокументОтклонения) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
// << alo Меркурий
	Если НЕ ЕстьДокументы1С Тогда	// нет сопоставление с вложениями - проверим сопоставление с пакетом
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ДокументыПоИдПакета",МестныйКэш.ФормаРаботыСоСтатусами,"",МестныйКэш);
		если фрм <> ложь тогда
			списокДокументы1С= фрм.ДокументыПоИдПакета(СоставПакета.Идентификатор, МестныйКэш.Ини.Конфигурация);
			Если списокДокументы1С.Количество()>0 Тогда
				ЕстьДокументы1С = Истина;
				для каждого Документ1С из списокДокументы1С цикл
					ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
					Если МестныйКэш.ини.Свойство(ИмяДокумента) Тогда
						ДокументОтклонения = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ДокументОтклонения", МестныйКэш.ФормаНастроек.Ини(МестныйКэш, ИмяДокумента), МестныйКэш);
						СтруктураФайлаКонтрагента = новый структура("Файл", Новый структура("ВерсияФормата","3.01")); // пустая структура документа в формате 3.01
						СтруктураФайлаКонтрагента.Файл.Вставить("Документ", новый структура("Дата,Номер,ТаблДок",СоставПакета.Дата,СоставПакета.Номер,новый Структура));
						СтруктураФайлаКонтрагента.Файл.Документ.ТаблДок.Вставить("СтрТабл", новый Массив);
					КонецЕсли;
				конеццикла;
			конецесли;
		конецесли;
	конецесли;	// alo Меркурий >>
	Если НЕ ЕстьДокументы1С Тогда
		Сообщить("Для формирования расхождения необходимо сначала загрузить документы в 1С и внести в них необходимые изменения по фактически принятым/заказанным позициям.");
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(ДокументОтклонения) Тогда
		Сообщить("Нет подходящих документов для формирования расхождения.");
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	МестныйКэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	Контекст.Вставить("Документ", Документ1С);
	Контекст.Вставить("ДокументДанные", МестныйКэш.ОбщиеФункции.ПолучитьДанныеДокумента1С(МестныйКэш.ФормаНастроек.Ини(МестныйКэш, ИмяДокумента), Документ1С, МестныйКэш.КэшЗначенийИни, МестныйКэш.Парам));  // alo Меркурий
	
	Если Не Контекст.ДокументДанные.Свойство("мФайл") Тогда
		Сообщить("Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента);
		Возврат;		
	КонецЕсли;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент","Документ_"+ИмяДокумента,"Документ_Шаблон", МестныйКэш);
	Если Не фрм.ПрочитатьДокумент(МестныйКэш,Контекст) Тогда
		Возврат;
	КонецЕсли;
	Если Контекст.СоставПакета.Вложение.Количество() = 0 Тогда
		Сообщить("Отсутствует настройка для формирования расхождения по документу "+ИмяДокумента);
		Возврат;	
	КонецЕсли;
	СтруктураФайлаНаша = Контекст.СоставПакета.Вложение[0].СтруктураДокумента;
	
	// Формируем расхождение
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("СформироватьРасхождение","Файл_"+ДокументОтклонения,"Файл_Шаблон", МестныйКэш);
	Попытка
		ВложениеРасхождение = фрм.СформироватьРасхождение(Новый Структура("СтруктураФайлаКонтрагента, ВложениеНаше", СтруктураФайлаКонтрагента, Контекст.СоставПакета.Вложение[0]), МестныйКэш);
	Исключение
		// ветка для тех, у кого вынесено формирование расхождения во внешние функции
		Ошибка = ОписаниеОшибки();
		ВложениеРасхождение = фрм.СформироватьРасхождение(СтруктураФайлаКонтрагента, СтруктураФайлаНаша, МестныйКэш);
	КонецПопытки;
	Если ВложениеРасхождение.Свойство("ЕстьРасхождения") и ВложениеРасхождение.ЕстьРасхождения Тогда
		СоставПакета.Вставить("ЕстьРасхождения", Истина);
	КонецЕсли;
	СоставПакета.Вложение.Добавить(ВложениеРасхождение);
	ЗаполнитьТаблицуДокументов(СоставПакета);
КонецПроцедуры
&НаКлиенте
Процедура ТабличнаяЧастьИдентификаторПриИзменении(Элемент)
	// Процедура записывает сопоставление номенклатуры	
	ТабЧасть = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧасть");
	Если ЗначениеЗаполнено(ТабЧасть.ТекущиеДанные.Номенклатура) Тогда
		ГлавноеОкно = МестныйКэш.ГлавноеОкно;
		ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура,Характеристика",ТабЧасть.ТекущиеДанные.Название,ТабЧасть.ТекущиеДанные.Идентификатор,ТабЧасть.ТекущиеДанные.Номенклатура,ТабЧасть.ТекущиеДанные.Характеристика);
		ПутьКонтрагента = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьКонтрагента;
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",МестныйКэш.ФормаРаботыСНоменклатурой,"", МестныйКэш);
		фрм.УстановитьСоответствиеНоменклатуры(МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, Вложение.СтруктураФайла), ДанныеНоменклатуры, МестныйКэш.Парам.КаталогНастроек, МестныйКэш.Ини);
		НомерПП = ТабЧасть.ТекущиеДанные.НомерПП;
		ПутьТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.ПутьТаблДок;
		ТаблДок = МестныйКэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, Вложение.СтруктураФайла);
		ТаблДок[НомерПП].Вставить(Вложение.НоменклатураКодКонтрагента, ТабЧасть.ТекущиеДанные.Идентификатор);
		НоменклатураСопоставлена = Истина;
		Для Каждого СтрТабл Из ТаблДок Цикл
			Если Не СтрТабл.Свойство(Вложение.НоменклатураКодКонтрагента) или Не ЗначениеЗаполнено(СтрТабл[Вложение.НоменклатураКодКонтрагента])  Тогда
				НоменклатураСопоставлена = Ложь;	
			КонецЕсли;
		КонецЦикла;
		Если НоменклатураСопоставлена Тогда
			СоставПакета.Удалить("Ошибка");
			Вложение.XMLДокумента = МестныйКэш.ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктуры(Вложение,МестныйКэш.XSLT);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии()
	// Обновляет контент на главном окне.
	ФормаГлавногоОкна = МестныйКэш.ГлавноеОкно;
	Если ФормаГлавногоОкна.Открыта() и ОбновлятьГлавноеОкно = Истина Тогда
		ФормаГлавногоОкна.ОбновитьКонтент();
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма,"НеНайденКонтрагент").Видимость = Ложь;
	
	фрм = ФормаГлавногоОкна.сбисНайтиФормуФункции("сбисПослеЗакрытияФормыПросмотра","РаботаСДокументами1С","", МестныйКэш);
	Если фрм<>Ложь Тогда
		фрм.сбисПослеЗакрытияФормыПросмотра(МестныйКэш); 
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПолеHTMLДокументаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия.Element.id = "Открыть" Тогда
		Если сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.Свойство("ПолноеИмяФайла") Тогда // файл добавлен в пакет для отправки (вручную или во внешних функциях) 
			ПолноеИмяФайла = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.ПолноеИмяФайла;
		Иначе
			ПолноеИмяФайла = КаталогВременныхФайлов()+ сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.Файл.Имя;   // файл с онлайна
			МестныйКэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(МестныйКэш,сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение.Файл.Ссылка,ПолноеИмяФайла);
		КонецЕсли;
		ЗапуститьПриложение(ПолноеИмяФайла);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ПодготовитьКЗагрузке(Команда)
	// Вставить содержимое обработчика.
	сбисРазобратьДокумент("");
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		
		Вложение = СтрокаТаблДок.Вложение[0].Значение;
		Если СтрокаТаблДок.МожемЗагрузитьВ1С <=0 Тогда					//Если на вложение нет ИНИшки для загрузки то ничего не делаем
			Продолжить             
		КонецЕсли;
		ТипДокумента = МестныйКэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Документ", Вложение.СтруктураИниФайла, МестныйКэш));
		Вложение.Вставить("ТипДокумента", ТипДокумента);
		фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента","Документ_"+Вложение.ТипДокумента,"Документ_Шаблон",МестныйКэш);
		СтруктураДокОбъект = Новый Структура; // Структура с названиями полей, как у создаваемого документа 1С
		СтруктураФайла = Вложение.СтруктураФайла;
		СтруктураДанныхДокумента = Новый Структура;
		МестныйКэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(СтруктураДанныхДокумента, Вложение.СтруктураИниФайла);
		фрм.ЗаполнитьДаннымиСтруктурыФайлаСтруктуруДокумента(МестныйКэш, Вложение.СтруктураФайла, СтруктураДанныхДокумента, СтруктураДокОбъект, Новый Массив,СоставПакета,Вложение);
		сбисЗаполнитьДанныеВложения(Вложение, СтруктураДокОбъект);
	КонецЦикла;
	сбисЭлементФормы(ЭтаФорма,"ПодготовитьКЗагрузке").Видимость = Ложь;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьНаВложении").Видимость = Истина;
КонецПроцедуры
&НаКлиенте
Процедура сбисЗаполнитьДанныеВложения(Вложение, СтруктураДокОбъект)
	Попытка
		Если Вложение.СтруктураИниФайла.Свойство("Договор") и Вложение.СтруктураИниФайла.Договор.Свойство("Значение") Тогда
			ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.Договор.Значение, Найти(Вложение.СтруктураИниФайла.Договор.Значение,".")+1);
			Если СтруктураДокОбъект.Свойство(ИмяРеквизита) Тогда
				Вложение.Вставить("Договор1С",СтруктураДокОбъект[ИмяРеквизита]);
			КонецЕсли;
		КонецЕсли;
		Если Вложение.СтруктураИниФайла.Свойство("Документ_Дата") и Вложение.СтруктураИниФайла.Документ_Дата.Свойство("Значение") Тогда
			ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.Документ_Дата.Значение, Найти(Вложение.СтруктураИниФайла.Документ_Дата.Значение,".")+1);
			Если СтруктураДокОбъект.Свойство(ИмяРеквизита) Тогда
				Вложение.Вставить("Дата1С",СтруктураДокОбъект[ИмяРеквизита]);
			КонецЕсли;
		КонецЕсли;
		Если Вложение.СтруктураИниФайла.Свойство("Контрагент_Роль") и Вложение.СтруктураИниФайла.Контрагент_Роль.Свойство("Значение") Тогда
			КонтрагентРоль=МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Контрагент_Роль", Вложение.СтруктураИниФайла, МестныйКэш);
			Если Вложение.СтруктураИниФайла.мСторона.Свойство(КонтрагентРоль) Тогда
				ИмяРеквизита = Сред(Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение, Найти(Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Значение,".")+1);
				Если СтруктураДокОбъект.Свойство(ИмяРеквизита) Тогда
					Вложение.Вставить("Контрагент1С",СтруктураДокОбъект[ИмяРеквизита]);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Договор1СПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Вложение = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение;
	Вложение.Вставить("Договор1С",Договор1С);
	Вложение.Вставить("РучноеИзменение",Истина);
КонецПроцедуры

&НаКлиенте
Процедура Контрагент1СПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Вложение = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение;
	Вложение.Вставить("Контрагент1С",Контрагент1С);
	Вложение.Вставить("РучноеИзменение",Истина);
КонецПроцедуры

&НаКлиенте
Процедура Дата1СПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Вложение = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Вложение[0].Значение;
	Вложение.Вставить("Дата1С",Дата1С);
	Вложение.Вставить("РучноеИзменение",Истина);
КонецПроцедуры

/////////////////////////////////////////
//AU Переделано для совместимости ОФ УФ//

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, ПараметрыВыбора) Экспорт
	Кэш = ПараметрыВыбора.Кэш;
	// Обработка выбранного элемента
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДокРазобран = (ДокументУчетаРазобран И ИмяРеквизитаВложений = "ВложениеУчета") или (ДокументРазобран И ИмяРеквизитаВложений = "Вложение");
	Если Не ДокРазобран Тогда
		СбисВыполнитьРазбор(ПараметрыВыбора);
	КонецЕсли;
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ИмяФункции = ВыбранныйЭлемент.Значение;
	ИмяФункцииСПараметрами = ВыбранныйЭлемент.Значение; 
	Поз = Найти(ИмяФункции, "(");
	Если Поз>0 Тогда
		ИмяФункции = Лев(ИмяФункции, Поз-1);
	Иначе
		ИмяФункцииСПараметрами = ВыбранныйЭлемент.Значение+"(Кэш,ЭтаФорма)";
	КонецЕсли;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон",Кэш);	
	// << alo доп операции из инишки Сервис
	Если фрм = Ложь Тогда
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С");	
	КонецЕсли;
	// alo доп операции из инишки Сервис >>
	Результат = Вычислить("фрм."+ИмяФункцииСПараметрами);
КонецПроцедуры

&НаКлиенте
Процедура СбисВыполнитьРазбор(ПараметрыРазбора)
	Кэш = ПараметрыРазбора.Кэш;
	СоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(СоставПакета, Кэш, ИмяРеквизитаВложений);
	Если ИмяРеквизитаВложений = "Вложение" Тогда
		ДокументРазобран = Истина;
	Иначе
		ДокументУчетаРазобран = Истина;
	КонецЕсли;
	сбисУстановитьВидимостьЭлементов(Кэш);
	ЗаполнитьТаблицуДокументов(СоставПакета);
	
КонецПроцедуры
&НаКлиенте
Процедура сбисУстановитьВидимостьЭлементов(Кэш)
	ВидимостьЭлементов = (ДокументУчетаРазобран И ИмяРеквизитаВложений = "ВложениеУчета") или (ДокументРазобран И ИмяРеквизитаВложений = "Вложение"); 
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		//Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "Контент.Загрузка").Видимость = ВидимостьЭлементов;
		Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "ТаблицаДокументов.ТаблицаДокументовСтатус").Видимость = ВидимостьЭлементов;
		Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "ТаблицаДокументов.ТаблицаДокументовСтатусКартинка").Видимость = ВидимостьЭлементов;
	Иначе
		//Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "Загрузка").Видимость = ВидимостьЭлементов;
		Кэш.ОбщиеФункции.СбисПолучитьЭлементФормы(Кэш, ЭтаФорма, "ТаблицаДокументов.Статус").Видимость = ВидимостьЭлементов;
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма,"ПодготовитьКЗагрузке").Видимость = Не ВидимостьЭлементов;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьНаВложении").Видимость = ВидимостьЭлементов;
КонецПроцедуры

&НаКлиенте
Процедура СбисПечатьСоставаПакета(СбисПакет, ПараметрыПечати) Экспорт
	Кэш = ПараметрыПечати.Кэш;
	СписокПакетов = Новый СписокЗначений;
	СписокПакетов.Добавить(Новый Структура("СоставПакета", СбисПакет));
	СписокДляВыбора = Кэш.ОбщиеФункции.ПолучитьВложенияПакетовНаПечать(СписокПакетов, ПараметрыПечати);
	Если Не СписокДляВыбора.Количество() Тогда
		Сообщить("В пакете отсутствуют файлы, для которых возможна печать");
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если СписокДляВыбора.ОтметитьЭлементы("Выберите файлы на печать") Тогда
			СбисПечатьСоставаПакета_ПослеВыбора(СписокДляВыбора, ПараметрыПечати);
		КонецЕсли;
	#Иначе
		СписокДляВыбора.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("СбисПечатьСоставаПакета_ПослеВыбора", ЭтаФорма, ПараметрыПечати), "Выберите файлы на печать");
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура СбисПечатьСоставаПакета_ПослеВыбора(СписокРезультат, ДополнительныеПараметры) Экспорт
	Если СписокРезультат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Кэш = ДополнительныеПараметры.Кэш;
	ОбъектыПечати = Новый Массив;
	Для Каждого СтрокаРезультат Из СписокРезультат Цикл
		Если Не СтрокаРезультат.Пометка Тогда
			Продолжить;
		КонецЕсли;
		ФайлВложения = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("pdf");
		РезультатЗаписи = Кэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(Кэш, СтрокаРезультат.Значение.СсылкаНаPDF, ФайлВложения);
		Если РезультатЗаписи = Ложь Тогда
			Возврат;
			//СбисОшибка = Кэш.ОбщиеФункции.сбисИсключение(, сбисИмяКоманды="СбисПечатьСоставаПакета", 100, "Неизвестная ошибка системы", "Не удалось сохранить pdf для печати", Новый Структура("Ссылка", ВложениеПакета.СсылкаНаPDF)); 
		КонецЕсли;
		ОбъектПечати = Новый Структура("Тип,Путь", "Файл", ФайлВложения);
		ОбъектыПечати.Добавить(ОбъектПечати);
	КонецЦикла;
	
	Кэш.ОбщиеФункции.СбисПечатьДокументов(ОбъектыПечати, ДополнительныеПараметры);	
КонецПроцедуры

//Команды

&НаКлиенте
Процедура СбисПечать(Команда) Экспорт
	СбисПечатьСоставаПакета(СоставПакета, Новый Структура("Кэш,ВФоне", МестныйКэш, Истина));
КонецПроцедуры

&НаКлиенте
Процедура сбисРазобратьДокумент(Команда) Экспорт
	СбисВыполнитьРазбор(Новый Структура("Кэш", МестныйКэш));
КонецПроцедуры

&НаКлиенте
Процедура ДопОперации(Команда)
	СбисПараметрыВызова = Новый Структура("Кэш", МестныйКэш);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаДопОперации = сбисПолучитьФорму("ФормаДопОперации");
		ВыбранныйЭлемент = ФормаДопОперации.Показать(МестныйКэш, СписокДопОпераций);
		ПослеВыбораИзМеню(ВыбранныйЭлемент, СбисПараметрыВызова);
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтаФорма, СбисПараметрыВызова);
		ПоказатьВыборИзМеню(Оповещение, СписокДопОпераций, Элементы.ДопОперации);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтрагентаОнлайнПоСсылке(Команда) Экспорт
	Перем сбисДополнительныеПараметры;
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		сбисДополнительныеПараметры = Новый Структура("ФормаВладелец", ЭтаФорма);
	#КонецЕсли
	МестныйКэш.ОбщиеФункции.сбисОткрытьКонтрагентаОнлайнПоСсылке(МестныйКэш, Контрагент1С, сбисДополнительныеПараметры);
КонецПроцедуры

// Процедура открывает документ на онлайне	
&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда) Экспорт
	МестныйКэш.ГлавноеОкно.ОткрытьДокументОнлайнПоПакету(СоставПакета, МестныйКэш);
КонецПроцедуры

//Загрузка

&НаКлиенте
Процедура ДокументооборотПерейти(Команда)
	
	ВыбратьДействиеСПакетом();
	
КонецПроцедуры

//Открывает форму для определения действия с пакетом.
&НаКлиенте
Процедура ВыбратьДействиеСПакетом(ВыбранноеДействие=Неопределено)
	ПараметрыПереходов = Новый Структура("СоставПакета, Конфигурация, ЕстьАннулирование, ВыбранноеДействие", СоставПакета, МестныйКэш.Ини.Конфигурация, (Не МестныйКэш.Парам.СпособОбмена = 1));
	ФормаПереходов = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПереходы",,,ЭтаФорма);
	Если ФормаПереходов = Ложь Тогда
		Возврат;
	КонецЕсли;
	ФормаПереходов.МестныйКэш = МестныйКэш;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПрехода = ФормаПереходов.сбисВыбратьДействие(МестныйКэш, ПараметрыПереходов);
		сбисПослеВыбораПерехода(РезультатПрехода, Новый Структура);
	#Иначе
		ФормаПереходов.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеВыбораПерехода",ЭтаФорма);
		ФормаПереходов.сбисВыбратьДействие(МестныйКэш, ПараметрыПереходов);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВ1С(Команда) Экспорт   				     		
	МестныйКэш.ОбщиеФункции.РезультатДействия_Получить(МестныйКэш, Новый Структура("ПредставлениеОперации, ФормаВызова", "ЗагрузкаДокумента", "ФормаПросмотрДокумента"), Истина);
	ДокументРазобранДоЗагрузки = Истина;
	ДокРазобран = (ДокументУчетаРазобран И ИмяРеквизитаВложений = "ВложениеУчета") или (ДокументРазобран И ИмяРеквизитаВложений = "Вложение");
	Если Не ДокРазобран Тогда
		ДокументРазобранДоЗагрузки = Ложь;
		сбисРазобратьДокумент("");
		ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
	КонецЕсли;
	СоставПакета = МестныйКэш.ОбщиеФункции.ЗаполнитьРеквизитыОснованийПакета(СоставПакета, МестныйКэш); // пока SDK не возвращает дату, номер док. основания
	Если СоставПакета.НоменклатураСопоставлена Тогда //Если номенклатура сопоставлена
		ЗагрузитьВложения(0);  						 //Загружаем  в обычном режиме	
	Иначе                     						 //Иначе справшиваем хотим ли загружать автоматически 
		Если МестныйКэш.Парам.СпособЗагрузки = 1 Тогда // Мусихина: убрала форму выбора, если в настройках заранее выбрали способ загрузки 1 (создавать карточки номенклатуры для несопоставленных позиций)
			ЗагрузитьВ1СВыбраннымСпособом(1);
		ИначеЕсли ДокументРазобранДоЗагрузки Тогда // Если документ разобрали только что, то ничего не спрашиваем, сразу показываем вкладку с сопоставлением
			МассивОтмеченных = ТаблицаДокументов.НайтиСтроки(Новый Структура("Отмечен", Истина));
			Если МассивОтмеченных.Количество() = 0 Тогда
				Сообщить("Не отмечны документы для загрузки!");
				Возврат;
			КонецЕсли;
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ФормаВариантЗагрузки = сбисПолучитьФорму("ФормаВариантЗагрузки");
				сбисЭлементФормы(ФормаВариантЗагрузки,"СпособЗагрузки").Заголовок = "Отменить загрузку. Перейти к сопоставлению номенклатуры";
				Ответ = ФормаВариантЗагрузки.ОткрытьМодально();
				ЗагрузитьВ1СВыбраннымСпособом(Ответ);
			#Иначе
				Режим = Новый СписокЗначений();
				Режим.Добавить(0,"Отменить загрузку. Перейти к сопоставлению номенклатуры");
				Режим.Добавить(1,"Продолжить загрузку. Для несопоставленных позиций создавать карточки номенклатуры.");
				Режим.Добавить(2,"Загружать все документы, при этом в табличную часть загружать только сопоставленную номенклатуру.");                             
				ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.ФормаВариантЗагрузки",Новый Структура("Режим",Режим),,"ФормаВариантЗагрузки",,,Новый ОписаниеОповещения("ЗагрузитьВ1СВыбраннымСпособом",ЭтаФорма));  
			#КонецЕсли
		КонецЕсли;	
	КонецЕсли;
	ОбновлятьГлавноеОкно = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВ1СВыбраннымСпособом(Ответ, Параметры=Неопределено) Экспорт  				     	
	Если Ответ = 0 или Ответ = Неопределено Тогда
		ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
	Иначе
		ЗагрузитьВложения(Ответ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложения(РежимНоменклатуры)
	Для каждого СтрокаТаблДок из ТаблицаДокументов Цикл
		Если СтрокаТаблДок.Документы1С.Количество() И СтрокаТаблДок.МожемЗагрузитьВ1С>0 И СтрокаТаблДок.Отмечен Тогда
			Режим = Новый СписокЗначений();
			Режим.Добавить(0,"Перезаполнить");
			Режим.Добавить(1,"Создать новые");
			Режим.Добавить(2,"Отменить");
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ЗагрузитьВложенияСоздатьПерезаполнить(Вопрос("Есть сопоставленные документы. Выберите вариант загрузки.", Режим, 0), РежимНоменклатуры);
			#Иначе
				ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьВложенияСоздатьПерезаполнить",ЭтаФорма, РежимНоменклатуры),"Есть сопоставленные документы. Выберите вариант загрузки.", Режим, 0);
			#КонецЕсли
			Возврат;
		КонецЕсли;	
	КонецЦикла;
	ЗагрузитьВложенияСоздатьПерезаполнить(1, РежимНоменклатуры);	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВложенияСоздатьПерезаполнить(РежимДокументов, РежимНоменклатуры) Экспорт
	
	ПараметрыОбработки = Новый Структура("Кэш", МестныйКэш);
	ПараметрыЗагрузки = Новый Структура("РежимДокументов, РежимНоменклатуры", РежимДокументов, РежимНоменклатуры);
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СтрокаПоУмолчанию", сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные);
	//Делаем для диалога в процессе загрузки: должны попасть в обработку результата даже в случае показа форм, вопросов и пр. 
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		ДополнительныеПараметры.Вставить("ОбработчикРезультата", Новый ОписаниеОповещения("СозданиеДокуметов_ОбработатьРезультат", ЭтаФорма, ПараметрыОбработки));
	#КонецЕсли
	МассивОтмеченных = ТаблицаДокументов.НайтиСтроки(Новый Структура("Отмечен", Истина));
	Если МассивОтмеченных.Количество() = 0 Тогда
		Сообщить("Не отмечны документы для загрузки!");
		Возврат;
	КонецЕсли;
	РезультатЗагрузки = МестныйКэш.ОбщиеФункции.СоздатьПерезаполнитьДокументы(МестныйКэш, СоставПакета, МассивОтмеченных, ПараметрыЗагрузки, ДополнительныеПараметры);
	СозданиеДокуметов_ОбработатьРезультат(РезультатЗагрузки, ПараметрыОбработки);
	
КонецПроцедуры
		
// Процедура заполняет таблицу вложений пакета 	
&НаКлиенте
Процедура ЗаполнитьТаблицуДокументов(СоставПакета) Экспорт
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	ЗначениеПоиска = ?(сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные<>Неопределено,сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.НомерВложенияВПакете, Неопределено);
	ТаблицаДокументов.Очистить();
	СоставПакета.Вставить("НоменклатураСопоставлена",Истина);
	Если СоставПакета.Свойство("ДобавочныеСтроки") Тогда
		Для Каждого ДобавочнаяСтрока Из СоставПакета.ДобавочныеСтроки Цикл
			НоваяСтр = ТаблицаДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, ДобавочнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	сч = 0;
	ЕстьХарактеристики = Ложь;
	Для Каждого Вложение Из СоставПакета[ИмяРеквизитаВложений] Цикл
		НоваяСтр = ТаблицаДокументов.Добавить();
		НоваяСтр.НомерВложенияВПакете = сч;
		сч = сч+1;
		Если Вложение.Свойство("Название") Тогда
			НоваяСтр.Название = Вложение.Название;
		КонецЕсли;
		Если Вложение.Свойство("Идентификатор") Тогда
			НоваяСтр.Идентификатор = Вложение.Идентификатор;
		КонецЕсли;
		Если Вложение.Свойство("Шифрование") Тогда
			НоваяСтр.Шифрование = Вложение.Шифрование;
		КонецЕсли;
		Если Вложение.Свойство("Документы1С") Тогда
			НоваяСтр.Документы1С = Вложение.Документы1С;
			НоваяСтр.Документы1СНазвания = "";
			Для Каждого Документ1С Из Вложение.Документы1С Цикл
				НоваяСтр.Документы1СНазвания = НоваяСтр.Документы1СНазвания + строка(Документ1С.Значение)+Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		Если Вложение.Свойство("Подпись") Тогда
			Для Каждого Подпись Из Вложение.Подпись Цикл
				НоваяСтр.Подпись = НоваяСтр.Подпись+Подпись.Сертификат.ФИО+", "+?(Подпись.Сертификат.Свойство("Должность"), Подпись.Сертификат.Должность, "")+", "+Подпись.Сертификат.Название+Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		Если Вложение.Свойство("ТекстHTML") и ЗначениеЗаполнено(Вложение.ТекстHTML) Тогда
			НоваяСтр.ТекстHTML = Вложение.ТекстHTML;
		Иначе
			НоваяСтр.ТекстHTML = "<HTML><BODY scroll=no><table cellspacing=0 cellpadding=0 WIDTH=100%><tr><td id=Открыть><ins id=Открыть>Открыть в другой программе</ins></td></tr></table></BODY></HTML>";
		КонецЕсли;
		НоваяСтр.Вложение.Добавить(Вложение);
		
		ДанныеДляЗагрузки = МестныйКэш.ОбщиеФункции.ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(МестныйКэш,СоставПакета,Вложение);
		НоваяСтр.МожемЗагрузитьВ1С	= Число(ДанныеДляЗагрузки.МожемЗагрузитьВ1С);
		НоваяСтр.Статус				= ДанныеДляЗагрузки.Статус;
		НоваяСтр.СтатусКартинка		= ДанныеДляЗагрузки.СтатусКартинка;
		Если Вложение.Свойство("Отмечен")  Тогда
			НоваяСтр.Отмечен = Вложение.Отмечен;
		Иначе
			НоваяСтр.Отмечен = Истина;
		КонецЕсли;
		Если ДанныеДляЗагрузки.Свойство("ТекстОшибки") Тогда
			Сообщить(ДанныеДляЗагрузки.ТекстОшибки);
		КонецЕсли;
		ДанныеДляЗагрузки.Свойство("ПутьТаблДок",		НоваяСтр.ПутьТаблДок);
		ДанныеДляЗагрузки.Свойство("ПутьКонтрагента",	НоваяСтр.ПутьКонтрагента);
		
		Если Не ЕстьХарактеристики
			И	ДанныеДляЗагрузки.Свойство("ПараметрыНоменклатуры") Тогда
			ЕстьХарактеристики = ДанныеДляЗагрузки.ПараметрыНоменклатуры.ЕстьХарактеристики;
		КонецЕсли;
	КонецЦикла;
	ЭлементФормыХарактеристика = сбисЭлементФормы(ЭтаФорма,"ТабличнаяЧастьХарактеристика");
	Если Не МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ЭлементФормыХарактеристика = ЭтаФорма.ЭлементыФормы.ТабличнаяЧасть.Колонки.Характеристика;
	КонецЕсли; 
	ЭлементФормыХарактеристика.Видимость = ЕстьХарактеристики;
	
	Если ЗначениеПоиска <> Неопределено Тогда
		ПараметрыОтбора = Новый Структура("НомерВложенияВПакете", ЗначениеПоиска);
		Строка = ТаблицаДокументов.НайтиСтроки(ПараметрыОтбора);
		//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
		Если Строка.Количество() Тогда
			НомерСтроки = Строка[0];
			Если МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
				НомерСтроки = НомерСтроки.ПолучитьИдентификатор();
			КонецЕсли;
			сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущаяСтрока = НомерСтроки;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьУтвердитьНажатие(Элемент)
	// Процедура отклоняет/утверждает текущий пакет	
	ГлавноеОкно = МестныйКэш.ГлавноеОкно;
	Если Элемент.Имя = "Утвердить" Тогда
		ВыбранноеДействие = СоставПакета.Этап[0].Действие[0];
	Иначе
		ВыбранноеДействие = СоставПакета.Этап[0].Действие[1];
	КонецЕсли;
	
	Если	ВыбранноеДействие.ТребуетКомментария = "Да"
		Или	(	ВыбранноеДействие.Свойство("ТребуетИсполнителя")
			И	ВыбранноеДействие.ТребуетИсполнителя = "Да")	Тогда                                             //aa.uferov При выполнении действия с исполнителем, требуется ини конфигурации
		ВыбратьДействиеСПакетом(ВыбранноеДействие);
	Иначе
		сбисПослеВыбораПерехода(Новый Структура("Действие,Комментарий",ВыбранноеДействие, ""), "");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СозданиеДокуметов_ОбработатьРезультат(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
		
	Если РезультатЗагрузки = Неопределено Тогда
		//В процессе был диалог, а значит для УФ с результатом попадём уже после выбора и последующей обработки. Для ОФ уже попадали
		Возврат Неопределено;
	КонецЕсли;
	
	//Заполняем данные формы в зависимости от результата.
	Для Каждого КлючИЗначение Из РезультатЗагрузки.Ошибки.ДетализацияОшибок Цикл
		Для Каждого СтрокаДетализации Из КлючИЗначение.Значение Цикл
			Если Найти(СтрокаДетализации.Сообщение, "Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации") Тогда
				ВыборЗакладки(сбисЭлементФормы(ЭтаФорма,"Загрузка"));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого КлючИЗначение Из РезультатЗагрузки.Действие.ДетализацияВыполнено Цикл
		Для Каждого СтрокаДетализации Из КлючИЗначение.Значение Цикл
			Для Каждого СтрокаРасшифровки Из СтрокаДетализации.ОбработаныОбъекты1С Цикл
				Если Не СтрокаРасшифровки.Свойство("СтруктураДокумента1С") Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьДокумент1СВСоставеПакета(СтрокаДетализации.ИдентификаторВложения, СтрокаРасшифровки.Ссылка, СтрокаРасшифровки.СтруктураДокумента1С);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	ПараметрыСообщить = Новый Структура("СообщитьНеВыполнено", Ложь);
	МестныйКэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатЗагрузки, ПараметрыСообщить);
	
	ЗаполнитьТаблицуДокументов(СоставПакета);	
	сбисЭлементФормы(ЭтаФорма,"ПодготовитьКЗагрузке").Видимость = Ложь;
	сбисЭлементФормы(ЭтаФорма,"ЗагрузитьНаВложении").Видимость = Истина;
	
КонецФункции

&НаКлиенте
Функция сбисПослеВыбораПерехода(Результат, ДополнительныеПараметры) Экспорт
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыЗавершенияПерехода = Новый Структура("Кэш, РезультатВыбораПерехода, СчСерт, СписокСертификатов", МестныйКэш, Результат, 0);

	Если Результат.Действие.ТребуетПодписания = "Да" Тогда
		СписокИНН = Новый СписокЗначений;
		ИННОрг = ?(СоставПакета.НашаОрганизация.Свойство("СвФЛ"),СоставПакета.НашаОрганизация.СвФЛ.ИНН,СоставПакета.НашаОрганизация.СвЮЛ.ИНН);
		СписокИНН.Добавить(ИННОрг);
		
		ПараметрыЗавершенияПерехода.СписокСертификатов = МестныйКэш.Интеграция.ПолучитьСертификатыДляАктивации(МестныйКэш, СписокИНН);
		Для Каждого Элемент Из ПараметрыЗавершенияПерехода.СписокСертификатов Цикл
			Сертификат		= Элемент.Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				МестныйКэш.Интеграция.ПолучитьКодАктивацииСертификата(МестныйКэш, Сертификат);				
			КонецЕсли;
			ФормаВводаПинкода = сбисПолучитьФорму("ФормаВводаПинкода");
			ПараметрыВвода = Новый Структура("СертификатИмя", МестныйКэш.ОбщиеФункции.СформироватьЗаголовокСертификатаДляФормыВвода(МестныйКэш, Сертификат));
			//Всегда активируется первый сертификат списка готовых для активации
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				сбисРезультатВвода = ФормаВводаПинкода.Показать(ПараметрыВвода);
				Если Не ЗначениеЗаполнено(сбисРезультатВвода)
					Или сбисРезультатВвода.ПинКод = "" Тогда
					Сообщить("Не активирован сертификат для подписания документов.");
					Возврат Ложь;	
				КонецЕсли;
				Возврат сбисВыполнитьПереходЗавершение(сбисРезультатВвода, ПараметрыЗавершенияПерехода);
			#Иначе
				ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисВыполнитьПереходЗавершение",ЭтаФорма,ПараметрыЗавершенияПерехода);
				ФормаВводаПинкода.Показать(ПараметрыВвода);
				Возврат Неопределено;
			#КонецЕсли
		КонецЦикла;	
	Иначе
		ПараметрыЗавершенияПерехода.СписокСертификатов = Новый СписокЗначений;
	КонецЕсли;
	Возврат сбисВыполнитьПереходЗавершение(Истина, ПараметрыЗавершенияПерехода);
КонецФункции

&НаКлиенте
Функция сбисВыполнитьПереходЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Кэш = ДополнительныеПараметры.Кэш;
	Если Результат = Неопределено Тогда   // не ввели пин-код
		Возврат Ложь;
	КонецЕсли;
	
	// ввели пин-код или не требуется активация
	РезультатВыбораПерехода	= ДополнительныеПараметры.РезультатВыбораПерехода;
	СписокСертификатов		= ДополнительныеПараметры.СписокСертификатов;
	СчСерт					= ДополнительныеПараметры.СчСерт;
	ДействиеВыполнить		= РезультатВыбораПерехода.Действие;
	Если СписокСертификатов.Количество() Тогда
		СертификатДляДействия = СписокСертификатов[СчСерт].Значение;
		СертификатДляДействия.Вставить("КодАктивации", Результат.ПинКод);
	КонецЕсли;
	РезультатАктивации = Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов);			
	
	Если РезультатВыбораПерехода.Свойство("Исполнитель") Тогда
		СоставПакета.Этап[0].Вставить("Исполнитель", РезультатВыбораПерехода.Исполнитель);
	КонецЕсли;
	ЭтапВыполнить = Неопределено;
	Если Не РезультатВыбораПерехода.Свойство("Этап", ЭтапВыполнить) Тогда 
		ЭтапВыполнить = СоставПакета.Этап[0];
	КонецЕсли;
	ДействиеВыполнено = МестныйКэш.Интеграция.сбисВыполнитьДействие(МестныйКэш, СоставПакета, ЭтапВыполнить, ДействиеВыполнить, РезультатВыбораПерехода.Комментарий, "");
	Если ДействиеВыполнено = Истина Тогда
		ОбновлятьГлавноеОкно = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ТабличнаяЧастьНоменклатураНачалоВыбора(Элемент, Параметр1, Параметр2=Неопределено)
	СтандартнаяОбработка = Параметр2;
	Если Не МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		СтандартнаяОбработка = Параметр1;
	КонецЕсли;
	фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисТабличнаяЧастьНоменклатураНачалоВыбора","ФормаПросмотрДокумента","", МестныйКэш);
	Если Не фрм = Ложь Тогда
		фрм.сбисТабличнаяЧастьНоменклатураНачалоВыбора(МестныйКэш, ЭтаФорма, Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

// << alo Меркурий
&НаКлиенте
Процедура СБИСЗаписатьВложение(Кнопка)
	ТабДок = сбисЭлементФормы(ЭтаФорма, "ТаблицаДокументов");
	Если ТабДок.ТекущиеДанные = неопределено тогда
		Сообщить("Нет вложения для записи.");
	Иначе
		Вложение = СоставПакета.Вложение[ТабДок.ТекущиеДанные.НомерВложенияВПакете];
		МестныйКэш.Интеграция.СБИСЗаписатьВложения(МестныйКэш,СоставПакета, Вложение);
	КонецЕсли;
КонецПроцедуры// alo Меркурий >>
// << alo EDI_ДозаписьЮЗДО

&НаКлиенте
Функция СервисДопОперацияПросмотра(СписокДопОпераций) Экспорт 
	Перем ИниСервис;
	Если Не МестныйКэш.Ини.Свойство("Сервис" ,ИниСервис) Тогда
		Возврат Неопределено;
	ИначеЕсли ИниСервис = Неопределено Тогда
		ИниСервис = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, "Сервис");
	КонецЕсли;
	Если Не (	ИниСервис.Свойство("ДопОперацияПросмотра")
			И	СоставПакета.Свойство("Регламент")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекРегламент = СоставПакета.Регламент;
	Если СоставПакета.Свойство("Этап") И СоставПакета.Этап.Количество() Тогда
		ТекЭтап = СоставПакета.Этап[0].Название;
	Иначе
		ТекЭтап = "";
	КонецЕсли;
	Для Каждого ДопОперация Из ИниСервис.ДопОперацияПросмотра Цикл
		Если Не	(	ДопОперация.Значение.Свойство("Регламент")
				И	ДопОперация.Значение.Свойство("Операция")
				И	ДопОперация.Значение.Операция.Свойство("Функция1С")) Тогда
				Продолжить;
		КонецЕсли;
		Если ДопОперация.Значение.Регламент.Свойство("Идентификатор") И ТекРегламент.Свойство("Идентификатор") Тогда
			РегламентСовпал = (ДопОперация.Значение.Регламент.Идентификатор = ТекРегламент.Идентификатор) ;
		ИначеЕсли ТекРегламент.Свойство("Название") Тогда
			РегламентСовпал = (ДопОперация.Значение.Регламент.Значение = ТекРегламент.Название) ;
		Иначе
			РегламентСовпал = Ложь ;
		КонецЕсли;
		Если Не РегламентСовпал Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтапСовпал =(	ДопОперация.Значение.Свойство("Этап")
					И	ЗначениеЗаполнено(ТекЭтап)
					И	ДопОперация.Значение.Этап.Значение = ТекЭтап);
		ВложениеСовпало = Ложь;
		Если Не ЭтапСовпал И ДопОперация.Значение.Свойство("Вложение") Тогда
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				Если    Вложение.Свойство("Тип")
					И	Вложение.Тип = ДопОперация.Значение.Вложение.Значение Тогда
					ВложениеСовпало = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ЭтапСовпал Или ВложениеСовпало или (НЕ ДопОперация.Значение.Свойство("Этап") И НЕ ДопОперация.Значение.Свойство("Вложение")) Тогда
			СписокДопОпераций.Добавить(ДопОперация.Значение.Операция.Функция1С+?(ДопОперация.Значение.Операция.Свойство("Параметры"), "("+ДопОперация.Значение.Операция.Параметры+")", ""), ДопОперация.Значение.Операция.Значение);
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовШифрованиеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные<>Неопределено Тогда
		СоставПакета.Вложение[сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.НомерВложенияВПакете].Вставить("Шифрование", сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные.Шифрование);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Договор1СУстановитьОтбор(ИмяРеквизитаКонтрагента)
	// Вставить содержимое обработчика.
	ПараметрыОтбора =Новый массив;
	ПараметрыОтбора.Добавить(Новый СвязьПараметраВыбора("Отбор."+ИмяРеквизитаКонтрагента, "Контрагент1С"));
	ЭтаФорма.Элементы.Договор1С.СвязиПараметровВыбора = Новый ФиксированныйМассив(ПараметрыОтбора);
КонецПроцедуры


&НаКлиенте
Процедура ПереключитьТипВложений(Команда)
	// Вставить содержимое обработчика.
	Если ИмяРеквизитаВложений = "Вложение" Тогда
		Если Не СоставПакета.Свойство("ВложениеУчета") Тогда
			Сообщить("Отсутствуют вложения учета. Возможно в личном кабинете СБИС учет не ведется.");
			Возврат;
		КонецЕсли;
		ИмяРеквизитаВложений = "ВложениеУчета";
		сбисЭлементФормы(ЭтаФорма,"ПереключитьТипВложений").Заголовок = "Показать вложения ЭДО";
		Если Не ВложенияУчетаРазобраны Тогда
			ВложенияУчетаРазобраны = Истина;
			сч = 0;
			фрмСтатусы = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоИдВложенияСБИС",МестныйКэш.ФормаРаботыСоСтатусами,"",МестныйКэш);
			Для Каждого ВложениеУчета Из СоставПакета.ВложениеУчета Цикл
				СоставПакета.ВложениеУчета[сч].Вставить("Направление", СоставПакета.Направление);
				СоставПакета.ВложениеУчета[сч].Вставить("Идентификатор", ВложениеУчета.Тип+ВложениеУчета.Подтип+ВложениеУчета.ВерсияФормата+ВложениеУчета.ПодверсияФормата);
				ТекстHTML = МестныйКэш.Интеграция.ПолучитьHTMLВложения(МестныйКэш, СоставПакета.Идентификатор, ВложениеУчета);
				СоставПакета.ВложениеУчета[сч].Вставить("ТекстHTML",ТекстHTML);
				ДанныеДокумента1С = фрмСтатусы.НайтиДокументы1СПоИдВложенияСБИС(СоставПакета.Идентификатор, ВложениеУчета.Идентификатор, МестныйКэш.Ини, МестныйКэш.ГлавноеОкно.КаталогНастроек);
				СоставПакета.ВложениеУчета[сч].Вставить("Документы1С", Новый СписокЗначений);
				СоставПакета.ВложениеУчета[сч].Вставить("Документ1СПроведен");
				СоставПакета.ВложениеУчета[сч].Вставить("Отмечен", Истина);
				Если ЗначениеЗаполнено(ДанныеДокумента1С) Тогда
					СоставПакета.ВложениеУчета[сч].Документы1С=ДанныеДокумента1С.Ссылки;
					СоставПакета.ВложениеУчета[сч].Документ1СПроведен=ДанныеДокумента1С.Проведен;
				КонецЕсли;
				сч = сч+1;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ИмяРеквизитаВложений = "Вложение";
		сбисЭлементФормы(ЭтаФорма,"ПереключитьТипВложений").Заголовок = "Показать вложения СБИС";
	КонецЕсли;
	ЗаполнитьТаблицуДокументов(СоставПакета);
	сбисУстановитьВидимостьЭлементов(МестныйКэш);
	ЭтаФорма.Элементы.ТаблицаДокументов.Обновить();
	ТаблицаДокументовПриАктивизацииЯчейки(сбисЭлементФормы(ЭтаФорма, "ТаблицаДокументов"));
	ЭтаФорма.ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовОтмеченПриИзменении(Элемент)
	СтрокаТаблДок = сбисЭлементФормы(ЭтаФорма,"ТаблицаДокументов").ТекущиеДанные;
	СоставПакета[ИмяРеквизитаВложений][СтрокаТаблДок.НомерВложенияВПакете].Вставить("Отмечен", СтрокаТаблДок.Отмечен);
КонецПроцедуры


// alo EDI_ДозаписьЮЗДО >>
МассивЗакладок = Новый Массив;
МассивЗакладок.Добавить("Документы");
МассивЗакладок.Добавить("Загрузка");
МассивЗакладок.Добавить("Прохождение");