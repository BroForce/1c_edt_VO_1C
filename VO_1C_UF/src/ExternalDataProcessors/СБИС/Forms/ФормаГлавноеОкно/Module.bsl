&НаКлиенте
перем Кэш Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(знач ИмяФормы, Объект1С = Неопределено, ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		//Это нужно для совместимости со старыми версиями 1С, когда не было свойства ЭтотОбъект
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Если Объект1С = Неопределено Тогда
			ПолноеИмяФормы  = "ВнешняяОбработка.СБИС.Форма."+ИмяФормы;
		Иначе
			ПолноеИмяФормы = Объект1С+ИмяФормы;
		КонецЕсли;	
		БезопасноеИмяФормы = СтрЗаменить(ПолноеИмяФормы, ".","_");
		фрм = Неопределено;
		Если Не Кэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, фрм) Тогда
			Попытка
				Если (Кэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(ИмяФормы)<>Неопределено и Объект1С = Неопределено) или (Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(ИмяФормы)<>Неопределено и Объект1С <> Неопределено) Тогда
					фрм = ПолучитьФорму(ПолноеИмяФормы,ПараметрыФормы,ВладелецФормы);
				Иначе
					фрм = Ложь;
				КонецЕсли;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				фрм = Ложь;
			КонецПопытки;			
			Кэш.ТекущийСеанс.Формы.Получены.Вставить(БезопасноеИмяФормы, фрм);
		//AU при передаче владельца, заполняем его в кэшированную форму.	
		ИначеЕсли Не фрм = Ложь Тогда
			фрм.ВладелецФормы = ВладелецФормы;
		КонецЕсли;
		Возврат фрм;
	Иначе
		Если Объект1С = Неопределено Тогда
			БезопасноеИмяФормы = СтрЗаменить(ИмяФормы, ".","_");
			фрм = Неопределено;
			Если Не Кэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, фрм) Тогда
				фрм = ЭтотОбъект.ПолучитьФорму(ИмяФормы,ВладелецФормы);
				Кэш.ТекущийСеанс.Формы.Получены.Вставить(БезопасноеИмяФормы, фрм);
			ИначеЕсли Не фрм = Ложь Тогда
				фрм.ВладелецФормы = ВладелецФормы;
			КонецЕсли;
			Возврат фрм;
		Иначе
			Возврат Объект1С.ПолучитьФорму(ИмяФормы,ВладелецФормы);
		КонецЕсли;	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Функция сбисПолучитьЭлементыДерева(Элемент) Экспорт
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Возврат Элемент.ПолучитьЭлементы();
	КонецЕсли;
	Возврат Элемент.Строки;
КонецФункции
Функция сбисПолучитьМакет(ИмяМакета)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда		
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета)");
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение="") Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
//------------------------------------------------------

&НаКлиенте
Функция ПолучитьПредставлениеПакетаДляОшибки(Строка) Экспорт
	// Функция возвращает представление пакета. Используется при выводе ошибки.
	Попытка
		ПредставлениеПакета = "Пакет документов: " + СокрЛП(Строка.Значение.Вложения) + "; ";
	Исключение
		ПредставлениеПакета = "Пакет документов: " + Строка.Значение.СоставПакета[0].Значение.Название + "; ";
	КонецПопытки;
	Возврат ПредставлениеПакета;
	
КонецФункции	

// Сопоставление
&НаКлиенте
Процедура СопоставитьДокументы(Команда)
	// Процедура вызывает форму сопоставления документов	
	Обновить = Ложь;
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументами1С");
		Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
		//закомментировано, т.к. теперь сопоставление идет по вложениям
		//ИначеЕсли СписокОтмеченныхДокументов.Количество()=1 Тогда	 
		//	фрм = сбисПолучитьФорму("ФормаСопоставитьСДокументом1С");
		//	Обновить = фрм.Показать(Кэш,СписокОтмеченныхДокументов);
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	//Если Обновить=Истина Тогда
	//	ОбновитьКонтент();
	//КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ТаблДокПолучитьВыбранныеСтроки() Экспорт
	// Функция формирует список отмеченных строк таблицы с документами	
	СписокСтрок = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы из ЭтаФорма[Кэш.ТаблДок.Имя] Цикл
		Если СтрокаТаблицы.Отмечен Тогда
			СписокСтрок.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	Если СписокСтрок.Количество()=0 и Кэш.ТаблДок.ТекущаяСтрока<>Неопределено Тогда
		СписокСтрок.Добавить(Кэш.ТаблДок.ТекущиеДанные);
	КонецЕсли;
	Возврат СписокСтрок;
КонецФункции
&НаКлиенте
Процедура УдалитьСопоставление(Команда)
	// Процедура удаляет сопоставление документов СБИС и 1С	
	СписокСтрок = ТаблДокПолучитьВыбранныеСтроки();
	
	//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 11 +
	МассивСтатусРегламент = Новый Массив;
	Если Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
	   И (Кэш.Парам.СпособОбмена = 0 ИЛИ Кэш.Парам.СпособОбмена = 3)
	   И Кэш.Ини.Конфигурация.Свойство("СтатусРегламент") Тогда
			МассивСтатусРегламент = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.Ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)

	Если СписокСтрок.Количество()>0 Тогда
		фрм = сбисНайтиФормуФункции("УдалитьПараметрыДокументаСБИСПарам",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус,ДокументСБИС_СтатусГос");	 // alo СтатусГос
		Для Каждого Строка из СписокСтрок Цикл
			
			
			Если Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
				Если МассивСтатусРегламент.Количество()>0 Тогда  // для разделов Продажа/Покупка мы не знаем для какого регламента удалить сопоставление 
					Сообщить("При ведении статусов документов в разрезе регламентов удаление сопоставления из разделов Продажа/Покупка недоступно. Удалите сопоставление вручную из дополнительных реквизитов документа 1С.");
					Возврат;
				КонецЕсли;
				Префикс = "";
				Для каждого Док1С из Строка.Значение.СоставПакета Цикл
					фрм.УдалитьПараметрыДокументаСБИСПарам(СтруктураСвойств, Док1С.Значение, Кэш.Ини, КаталогНастроек,Новый Структура("Регламент",Префикс));
				КонецЦикла;
			Иначе
				//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 12  +
				//в параметры выносной функции УдалитьПараметрыДокументаСБИС не передать регламент
				Префикс = "";
				Если Строка.Значение.СоставПакета.Количество() > 0 Тогда
					СоставПакета = Строка.Значение.СоставПакета[0].Значение;
					Если НРЕГ(СоставПакета.Направление) = "исходящий" 
						И СоставПакета.Свойство("Регламент") 
						И СоставПакета.Регламент.Свойство("Название") 
						И НЕ МассивСтатусРегламент.Найти(СоставПакета.Регламент.Название)=Неопределено Тогда
						Префикс = СоставПакета.Регламент.Название;	
					КонецЕсли;
				КонецЕсли;
				//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) 
				
				Для каждого Вложение из Строка.Значение.Документы1С Цикл
					Если Вложение.Значение = Неопределено Тогда
						Продолжить;
					КонецЕсли;	
										
					//KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ)--> 13 +
					фрм.УдалитьПараметрыДокументаСБИСПарам(СтруктураСвойств, Вложение.Значение, Кэш.Ини, КаталогНастроек,Новый Структура("Регламент",Префикс));
					//<-- KES 050751151 Статусы в разрезе регламентов (СОПОСТАВЛЕНИЕ) 

					Вложение.Значение = Неопределено;
				КонецЦикла;	
			КонецЕсли;
		КонецЦикла;	
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ПараметрыСтатусовПриИзменении(Элемент)
	// Процедура записывает параметры запроса статусов. При следующем запросе статусов в фильтре будут указаны данные параметры	
	СтруктураНастроек = Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия", ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия);
	Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,Кэш.Парам.ИдентификаторНастроек);
КонецПроцедуры

// Отправка
&НаКлиенте
Процедура ОтправитьДокументы(Команда)
	// Процедура запускает отправку документов по отмеченным записям	
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьВыбранныеДокументы",ЭтаФорма),"Отправить документы только с текущей страницы или все документы списка?", Кнопки);
	Иначе
		ОтправитьВыбранныеДокументы(1, Неопределено);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьВыбранныеДокументы(Ответ, СбисДополнительныеПараметры) Экспорт
	// Процедура запускает отправку документов по отмеченным записям	
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		ИмяРеестра="";	Ини="";
		Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
			Возврат;
		КонецЕсли;
		Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон", Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьДокументыТурбоРежим(Команда)
	Если ОтметитьВсе = Истина и ЗаписейНаСтранице1С<>"все" и (ФильтрСтраница<>1 или ФильтрЕстьЕще) Тогда // отмечены все записи на странице и есть еще страницы
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, "С текущей страницы");
		Кнопки.Добавить(2, "Все документы");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьВыбранныеДокументыТурбоРежим",ЭтаФорма),"Отправить документы только с текущей страницы или все документы списка?", Кнопки);
	Иначе
		ОтправитьВыбранныеДокументыТурбоРежим(1, Неопределено);
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ОтправитьВыбранныеДокументыТурбоРежим(Ответ, СбисДополнительныеПараметры) Экспорт
	// Процедура запускает отправку документов по отмеченным записям	
	Если Ответ = 2 Тогда
		ВсеДокументы = Истина;
		ИмяРеестра="";	Ини="";
		Если Кэш.Разделы.Продажа.Свойство(Кэш.Текущий.Имя,ИмяРеестра)=Ложь Тогда
			Возврат;
		КонецЕсли;
		Если Кэш.ини.Свойство(ИмяРеестра,Ини)=Ложь Тогда
			Возврат;
		ИначеЕсли Ини = Неопределено Тогда
			Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяРеестра);
		КонецЕсли;
		СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисОбновитьРеестрДокументов1С(Ини, Кэш);
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.ЗагрузитьЗначения( СтруктураДляОбновленияФормы.Таблица_РеестрДокументов);
	Иначе
		СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	КонецЕсли;
	ВсеДокументы = Ложь;
	ИмяДокумента = Кэш.Текущий.ТипДок;
	фрм = сбисНайтиФормуФункции("ОтправитьДокументы","ExtCom1C",, Кэш);
	фрм.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ПросуммироватьВыделенные(Кнопка)
	// Процедура считает суммы документов сбис и сопоставленных им документов 1С	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СуммыПоВложениям = Новый Структура;
	Суммы1С = Новый Структура;
	Если СписокОтмеченныхДокументов.Количество()>0 Тогда
		Для Каждого Строка Из СписокОтмеченныхДокументов Цикл
			СоставПакета = Строка.Значение.СоставПакета[0].Значение;
			Если СоставПакета.Свойство("Вложение") Тогда
				Для Каждого Вложение Из СоставПакета.Вложение Цикл
					Если Не Вложение.Свойство("Служебный") или Вложение.Служебный = "Нет" Тогда
						Если ЗначениеЗаполнено(Вложение.Тип) Тогда
							Если Не СуммыПоВложениям.Свойство(Вложение.Тип) Тогда
								Название = Лев(Вложение.Название, Найти(Вложение.Название,"№")-2);
								Если Не ЗначениеЗаполнено(Название) Тогда
									Название = Вложение.Тип;	
								КонецЕсли;
								СуммыПоВложениям.Вставить(Вложение.Тип, Новый Структура("Название,Сумма",Название,0));
							КонецЕсли;
							Попытка
								Сумма = Число(Вложение.Сумма);
							Исключение
								Сумма=0;
							КонецПопытки;
							СуммыПоВложениям[Вложение.Тип].Сумма = СуммыПоВложениям[Вложение.Тип].Сумма+Сумма;
							Если Вложение.Свойство("Документы1С") и Вложение.Документы1С.Количество()>0 Тогда
								ИниЗагрузки = Кэш.ОбщиеФункции.сбисИниЗагрузкиПоДокументу1С(Кэш, Вложение.Документы1С[0].Значение);
								ИмяРеквизитаСуммы = Кэш.ОбщиеФункции.сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки);
								ЗаполнитьСуммыДокументов1С(Суммы1С, Вложение.Документы1С[0].Значение, ИмяРеквизитаСуммы);	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	ТекстСообщения = "Сумма документов СБИС:"+Символы.ПС;
	Для Каждого Элемент Из СуммыПоВложениям Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	ТекстСообщения = ТекстСообщения + "   "+Символы.ПС+"Сумма документов 1С:"+Символы.ПС;
	Для Каждого Элемент Из Суммы1С Цикл
		ТекстСообщения = ТекстСообщения + Элемент.Значение.Название+": "+Элемент.Значение.Сумма+Символы.ПС;
	КонецЦикла;
	Сообщить(ТекстСообщения);	
	//СуммаДокументовСБИС = 0;
	//СуммаДокументов1С   = 0;
	//СуммаДельта         = 0;
	//СписокДокументов = ТаблДокПолучитьВыбранныеСтроки();
	//Для Каждого СтрокаДокумента из СписокДокументов Цикл 
	//		СуммаДокументовСБИС = СуммаДокументовСБИС + СтрокаДокумента.Значение.Сумма; 
	//	Попытка
	//		СуммаДокументов1С   = СуммаДокументов1С+СтрокаДокумента.Значение.Документ1С.СуммаДокумента;
	//	Исключение
	//	КонецПопытки;
	//КонецЦикла;	
	//СуммаДельта = СуммаДокументовСБИС - СуммаДокументов1С;
	//СуммаДельта = ?(СуммаДельта<0,-СуммаДельта,СуммаДельта); 
	//Предупреждение("Сумма документов СБИС: "+строка(СуммаДокументовСБИС)+Символы.ПС+"Сумма документов 1С: "+строка(СуммаДокументов1С)+Символы.ПС+"Отклонение: "+строка(СуммаДельта));
КонецПроцедуры
Процедура ЗаполнитьСуммыДокументов1С(Суммы1С, Документ1С, ИмяРеквизитаСуммы)
	//Процедура заполняет суммы документов 1С в структуре по типам документов
	Тип = Документ1С.Метаданные().Имя;
	Название = Документ1с.Метаданные().Синоним;
	Если Не Суммы1С.Свойство(Тип) Тогда
		Суммы1С.Вставить(Тип, Новый Структура("Название,Сумма",Название,0));
	КонецЕсли;
	Попытка
		Сумма = Документ1С[ИмяРеквизитаСуммы];
	Исключение
		Сумма=0;
	КонецПопытки;
	Суммы1С[Тип].Сумма = Суммы1С[Тип].Сумма+Сумма;								
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьСтатусы(Команда)
	// Процедура запускает обработку служебных документов и получение статусов	
	Кэш.Интеграция.ОбработкаСлужебныхДокументов(Кэш);
	Кэш.Интеграция.ПолучитьСписокИзменений(Кэш);
	ОбновитьКонтент();
	Кэш.Интеграция.УстановитьВидимостьОбновитьСтатусы(Кэш);
КонецПроцедуры
&НаКлиенте
Процедура ВестиЛогПриИзменении(Элемент)
	// Включает/выключает логирование SDK	
	ПараметрыПриИзменении(Элемент);
	Если ВестиЛог Тогда
		Если ЗначениеЗаполнено(КаталогЛогов) Тогда
			Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 9);
		Иначе
			КаталогЛоговНачалоВыбора(сбисЭлементФормы(ЭтаФорма, "КаталогЛогов"),"", Истина);
		КонецЕсли;
	Иначе
		Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 0);
		КаталогЛогов = "";
		Кэш.Парам.КаталогЛогов = "";
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость = ВестиЛог;
	
КонецПроцедуры
&НаКлиенте
Процедура КаталогЛоговНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// открывает диалог выбора каталога логирования	
	Если ЗначениеЗаполнено(КаталогЛогов) Тогда
		Сообщить("Нельзя изменить каталог при запущенном логировании. Для изменения каталога снимите галку ""Вести протоколирование"", перезапустите 1C Предприятие, включите протоколирование и укажите новый каталог.");
		Возврат;
	КонецЕсли;
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог для хранения логов"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогЛогов = ДиалогОткрытия.Каталог; 
	КонецЕсли;
	КаталогЛоговПриИзменении(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура КаталогЛоговПриИзменении(Элемент)
	// меняет каталог логирования	
	Если Не ЗначениеЗаполнено(КаталогЛогов) Тогда
		Кэш.Интеграция.ВключитьЛогирование(Кэш, Кэш.Парам.КаталогЛогов, 0);
		ВестиЛог = Ложь;
		ПараметрыПриИзменении(сбисЭлементФормы(ЭтаФорма, "ВестиЛог"));
	ИначеЕсли ВестиЛог Тогда
		Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 9);
	КонецЕсли;
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура сбисПереслатьДляОзнакомления(Кнопка)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисПолучитьФорму("ФормаПересылкаПакетов");
	фрм.Показать(Кэш,СписокОтмеченныхДокументов);
КонецПроцедуры
&НаКлиенте
Процедура СпособОбменаПриИзменении(Элемент)
	// При изменении способа обмена (SDK, API, каталог)	"перезапускаем" обработку
	ПараметрыПриИзменении(Элемент);
	ПерезапуститьГлавноеОкно(,Ложь);
	
КонецПроцедуры
&НаКлиенте
Процедура КаталогОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// открывает диалог выбора каталога обмена	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог обмена документами"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		КаталогОбмена = ДиалогОткрытия.Каталог; 
	КонецЕсли;
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры
//////////////////////////////////////////////////////////////////////////////////

////////////////////// Управляемое приложение/////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Аккордеон = Новый Структура();
	Для Сч = 1 по 8 Цикл
		Аккордеон.Вставить("Аккордеон" + Сч, РеквизитФормыВЗначение("Объект").ПолучитьМакет("Аккордеон" + Сч).ПолучитьТекст());
	КонецЦикла;	
	
	МакетТень  = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Тень");
	Тень = Новый Картинка(МакетТень, Ложь);	
	
	АккордеонHTML  = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Аккордеон1").ПолучитьТекст();
КонецПроцедуры //ПриСозданииНаСервере()
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	АккордеонУстановитьТени();
	ЭтаФорма.ПодключитьОбработчикОжидания("ПослеОткрытия",0.1,Истина);
КонецПроцедуры
&НаКлиенте
Процедура ЗаписейНаСтраницеПриИзменении(Элемент)
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
Процедура ОбновитьПоляФормы(Знач СтруктураДляОбновленияФормы)
	Если ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			Если ТипЗнч(ЭтаФорма.РеквизитФормыВЗначение(Элемент.Ключ)) = Тип("ТаблицаЗначений") Тогда
				ТаблицаДанных = МассивСтруктурВТаблицуЗначений(Элемент.Значение);
				ЭтаФорма[Элемент.Ключ].Загрузить(ТаблицаДанных);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура РазделПриИзменении(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Попытка 
		ИДКнопки = ДанныеСобытия.Element.id;
		Если ПустаяСтрока(ИДКнопки) Тогда
			Возврат;
		КонецЕсли;
		ПерейтиВРаздел(ИДКнопки);
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
КонецПроцедуры
&НаКлиенте
Функция ПерейтиВРаздел(Имя) Экспорт
	
	Если Не Кэш.Свойство("ОбщиеФункции") Тогда
		Сообщить("При запуске обработки произошла ошибка. Переход по разделам заблокирован");
		Возврат Ложь;
	КонецЕсли;
	Если ПустаяСтрока(Имя) Тогда
		Имя	= сбисПолучитьРазделПоУмолчанию(РазделПоУмолчанию);
	КонецЕсли;
	
	Выбор = сбисСтруктураВыбранногоРаздела(Кэш, Имя);
	//При переходе в раздел настроек проверяем, менялись ли настройки. Предлагаем сохранить.
	Если		кэш.КэшНастроек.Свойство("ИзмененияВНастройках")
		И		кэш.КэшНастроек.ИзмененияВНастройках
		И Не	Имя = "АккордеонФайлыНастроек55" Тогда
		ТекстВопроса	= "Сохранить настройки?";
		КнопкиДиалога	= РежимДиалогаВопрос.ДаНетОтмена;
		ПараметрыДиалога = Неопределено;
		Если кэш.КэшНастроек.Свойство("ИзмененияВНастройках_ПараметрыДиалога",ПараметрыДиалога) Тогда
			ТекстВопроса	= ПараметрыДиалога.ТекстВопроса;
			Если ПараметрыДиалога.Свойство("КнопкиДиалога") Тогда
				КнопкиДиалога	= ПараметрыДиалога.КнопкиДиалога;
			КонецЕсли;
		КонецЕсли;
		ДопПараметры	= Новый	Структура("Имя", Имя);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Ответ	= Вопрос(ТекстВопроса,	КнопкиДиалога);
			ПерейтиВРаздел_ПослеДиалога(Ответ, ДопПараметры);
		#Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ПерейтиВРаздел_ПослеДиалога", ЭтаФорма, ДопПараметры),ТекстВопроса,КнопкиДиалога,,);
		#КонецЕсли
		Возврат	Ложь;
	ИначеЕсли Не Кэш.ИниВПорядке и Выбор.Имя<>"АккордеонФайлыНастроек55" Тогда //есть проблемы с ини файлами
		// Если в настройках ошибки, нельзя переходить в другие разделы
		ПерейтиВРаздел("АккордеонФайлыНастроек55");
		ЭтаФорма.ТекущийЭлемент = сбисЭлементФормы(ЭтаФорма,кэш.КэшНастроек.ПараметрыНастроек.ЭлементФормы);
		Сообщить("Обнаружены ошибки в настройках. Переход в другие разделы заблокирован.");
		Возврат Истина;	
		//Очищаем кэш настроек как только уходим из раздела работы с настройками. 	
	ИначеЕсли Кэш.КэшНастроек.ПараметрыНастроек.Свойство("ПоследнийРаздел") Тогда
		Если		Кэш.КэшНастроек.ПараметрыНастроек.ПоследнийРаздел = "ФайлыНастроек" 
			И	Не	Выбор.ТипДок = "ФайлыНастроек" Тогда
			ЭтаФорма.ПодключитьОбработчикОжидания("сбисОчиститьКэшНастроек", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	//Сохраняем последовательность переходов по разделам на случай, если при невозможности перехода понадобится вернуться.	
	Если Кэш.Текущий.Раздел = Выбор.Раздел Тогда
		Если Кэш.Разделы["р"+Кэш.Текущий.Раздел] = Кэш.Текущий.ТипДок Тогда//Текущий - основной раздел. Берем его как предыдущий
			Выбор.ПредыдущийРаздел = Кэш.Текущий;
			Выбор.ПредыдущийРаздел.ПредыдущийРаздел = Неопределено;//Чистим на случай, если переход был между разделами и в предыдущем что-то осталось
		ИначеЕсли Не Кэш.Текущий.ПредыдущийРаздел = Неопределено Тогда//Переход был между подразделами. Взять предыдущий от текущего
			Выбор.ПредыдущийРаздел = Кэш.Текущий.ПредыдущийРаздел;
			Выбор.ПредыдущийРаздел.ПредыдущийРаздел = Неопределено;//Чистим на всякий случай
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Кэш.Текущий.Раздел)
			И Не Кэш.Разделы["р"+Выбор.Раздел] = Выбор.ТипДок	Тогда
		Выбор.ПредыдущийРаздел = Новый Структура("Форма,ПредыдущийРаздел,Раздел,ТекущийРаздел,Имя,ТипДок");
		ЗаполнитьЗначенияСвойств(Выбор.ПредыдущийРаздел, Кэш.Текущий,,"ПредыдущийРаздел");//Чтобы не хранить всю историю, не берем предыдущий раздел от текущего.
	КонецЕсли;
	
	Если(Выбор.Форма=Ложь) Тогда //нет отдельной формы функции для этого раздела
		Возврат Ложь;
	КонецЕсли;
	
	// Если обмен через каталог и не указан каталог, нельзя переходить в другие разделы	
	Если Кэш.Парам.СпособОбмена = 1 и Не ЗначениеЗаполнено(Кэш.Парам.КаталогОбмена) и Выбор.Имя<>"АккордеонНастройки55" и Выбор.Имя<>"АккордеонФайлыНастроек55" Тогда
		ПерейтиВРаздел("АккордеонНастройки55");	
		Сообщить("Укажите каталог обмена документами");
		Возврат Истина;
	КонецЕсли;
	
	Предыдущий = Кэш.Текущий;
	ПредыдущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	ФильтрСтраница = 1;
	Если Выбор.Раздел <> Кэш.Текущий.ТекущийРаздел Тогда //переходим в другую категрию
		Аккордеон.Свойство("Аккордеон" + Выбор.Раздел, АккордеонHTML);
		Кэш.Текущий = Выбор;
		Кэш.Текущий.ТекущийРаздел = Кэш.Текущий.Раздел; //меняем текущий раздел
		Кэш.Текущий.Имя = "Аккордеон"+Кэш.Текущий.ТипДок+Кэш.Текущий.ТекущийРаздел+Кэш.Текущий.Раздел; //заменяем ссылку на текущий раздел
		Выбор.Форма.НаСменуРаздела(Кэш);
	иначе
		Кэш.Текущий = Выбор;
		АккордеонОбновить();
	КонецЕсли;	
	
	// Обновляем данные на форме главного окна
	Попытка
		СтруктураДляОбновленияФормы = Выбор.Форма.ОбновитьКонтент(Кэш);
		Если СтруктураДляОбновленияФормы = Ложь Тогда //если не смогли обновить таблицу - откатываем назад
			Если Предыдущий.Раздел = "" Тогда
				ПерейтиВРаздел("АккордеонФайлыНастроек55");
				Возврат Истина;
			Иначе
				Кэш.Текущий = Предыдущий;
				Кэш.Текущий.Форма.НаСменуРаздела(Кэш);
				Аккордеон.Свойство("Аккордеон" + Кэш.Текущий.ТекущийРаздел, АккордеонHTML);
				сбисВосстановитьФильтр(Кэш, ПредыдущийФильтр);
				ФильтрОбновитьПанель();
				Если Кэш.Текущий.Имя = "АккордеонФайлыНастроек55" Тогда
					ЭтаФорма.ОтключитьОбработчикОжидания("сбисОчиститьКэшНастроек");
                КонецЕсли;
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Выбор.Форма.НастроитьКолонки(Кэш);
			Выбор.Форма.НавигацияУстановитьПанель(Кэш);
			ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
			Если Выбор.ТипДок <> Кэш.Текущий.ТипДок Тогда //была переадресация
				Возврат Истина;		
			КонецЕсли
		КонецЕсли;			
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ФильтрОбновитьПанель();
	фрм = сбисНайтиФормуФункции("сбисОформлениеДопПолейРеестра","Раздел_"+Кэш.Разделы["р"+Выбор.Раздел]+"_"+Выбор.ТипДок,"Раздел_"+Кэш.Разделы["р"+Выбор.Раздел]+"_Шаблон", Кэш);
	Если фрм<>Ложь Тогда
		фрм.сбисОформлениеДопПолейРеестра(Кэш);
	КонецЕсли;
	Возврат Истина;
КонецФункции
&НаКлиенте
Процедура АккордеонОбновить()
	
	Если ЗначениеЗаполнено(Кэш) и Кэш.Текущий.Имя <> "" Тогда
		
		Выбор = ОпределитьРаздел(Кэш.Текущий.Имя);
		
		Табл = Элементы.АккордеонHTML.Документ.all("Табл");
		//Табл = Элементы.АккордеонHTML.Документ.GetElementById("Табл");
		Если Табл = Неопределено Тогда
			//Сообщить(ОписаниеОшибки());
		Иначе	
			СтрокаТаблицы = Табл.firstChild.firstChild;
			Пока СтрокаТаблицы<>Неопределено Цикл
				
				Кнопка = СтрокаТаблицы.firstChild;
				Если Кнопка = Неопределено Тогда
					Прервать;
				КонецЕсли;	
				Если Кнопка.id = "" Тогда
					Прервать;
				КонецЕсли;	
				а = Кнопка.id;
				врРаздел = ОпределитьРаздел(а);
				Если Кнопка.className = "group_passive" Тогда
					Прервать;
				КонецЕсли;
				Если Кэш.Текущий.ТекущийРаздел = врРаздел.ТекущийРаздел Тогда //кнопка принадлежит активной панели 
					Если (Выбор.Имя = врРаздел.Имя) Тогда
						Кнопка.style.cssText = "border:1px solid #ff7033;"; 
					иначеЕсли Выбор.Раздел = врРаздел.Раздел  Тогда //это пассивный раздел  
						Кнопка.style.cssText = "border:1px solid #f7f3f0"; 	
					КонецЕсли;
				КонецЕсли; 
				
				СтрокаТаблицы = СтрокаТаблицы.NextSibling;
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли;	
	
КонецПроцедуры
Процедура АккордеонУстановитьТени()
	СсылкаТень = ПоместитьВоВременноеХранилище(Тень, УникальныйИдентификатор);
	
	Для СчМакетов = 1 по 8 Цикл //рисуем тени под кнопками.
		ТекстHTML = "";
		Аккордеон.Свойство("Аккордеон" + СчМакетов, ТекстHTML);
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		ПостроительDOM = Новый ПостроительDOM();
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);			
		
		ЯчейкиТаблицы = ДокументDOM.ПолучитьЭлементыПоИмени("td");
		Для СчЯчеек = 0 по ЯчейкиТаблицы.Количество()-1 Цикл
			ЯчейкаТаблицы = ЯчейкиТаблицы.Элемент(СчЯчеек);
			Если (ЯчейкаТаблицы.ИмяКласса = "group_passive") или (ЯчейкаТаблицы.ИмяКласса = "group_down") Тогда
				Для СчАтр = 0 по ЯчейкаТаблицы.Атрибуты.Количество()-1 Цикл
					Если ЯчейкаТаблицы.Атрибуты.Элемент(СчАтр).Имя = "style" Тогда
						ЯчейкаТаблицы.Атрибуты.Элемент(СчАтр).ЗначениеУзла = "background-image: url('" + СсылкаТень + "'); background-repeat:no-repeat;";
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;	
		
		ЗаписьDOM = Новый ЗаписьDOM;  
		ЗаписьHTML = Новый ЗаписьHTML;
		ЗаписьHTML.УстановитьСтроку();
		ЗаписьDOM.Записать(ДокументDOM,ЗаписьHTML);
		Аккордеон.Вставить("Аккордеон" + СчМакетов, ЗаписьHTML.Закрыть());	
	КонецЦикла;
КонецПроцедуры
&НаСервереБезКонтекста
Функция МассивСтруктурВТаблицуЗначений(МассивСтруктур)
	Результат = Новый ТаблицаЗначений;
	Если МассивСтруктур = Неопределено Или МассивСтруктур.Количество() = 0 Тогда
		Возврат Результат;
	Иначе 
		Образец = МассивСтруктур[0];
		Для Каждого  Стр из Образец Цикл
			Результат.Колонки.Добавить(Стр.Ключ );
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из МассивСтруктур Цикл
		СтрТ = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТ, Стр);		
	КонецЦикла;
	Возврат Результат;
КонецФункции
//Панель фильра
&НаКлиенте
Процедура ФильтрОткрытьПанельУстановки(Элемент)
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	Если Кэш.Заплатки<>Ложь Тогда
		Если Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению("Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок)<>Неопределено Тогда
			ОткрытьФорму("ВнешняяОбработка.ВнешниеФункции_Клиент.Форма.Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,,ЭтаФорма,,,,Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма));
		ИначеЕсли Кэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению("Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон")<>Неопределено Тогда
			ОткрытьФорму("ВнешняяОбработка.ВнешниеФункции_Клиент.Форма.Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон",,ЭтаФорма,,,,Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма));
		Иначе
			ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтра",,,ЭтаФорма);
			ФормаФильтра.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма);
			ФормаФильтра.Открыть();
		КонецЕсли;
	Иначе
		ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтра",,,ЭтаФорма);
		ФормаФильтра.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеУстановкиФильтра",ЭтаФорма);
		ФормаФильтра.Открыть();
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция сбисПослеУстановкиФильтра(Результат, Параметры) Экспорт
	Если Результат<>Неопределено Тогда
		ФильтрОбновитьПанель();	
		сбисСохранитьФильтрРаздела(Кэш);
		ОбновитьКонтент();
	КонецЕсли
КонецФункции
&НаКлиенте
Процедура ТекущееЗначениеФильтраНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ФильтрОткрытьПанельУстановки("");
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОчистить(Элемент) Экспорт
	Кэш.Текущий.Форма.ФильтрОчистить(Кэш);
	ФильтрОбновитьПанель();	
	сбисСохранитьФильтрРаздела(Кэш);
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ФильтрОбновитьПанель() Экспорт
	ТекущееЗначениеФильтра="";
	Если ФильтрПериод="За период" Тогда
		ТекущееЗначениеФильтра = ФильтрПериод+" "+ФильтрПериодПрописью(ФильтрДатаНач, ФильтрДатаКнц);	//Сюда код который делает строку как онлайне
	ИначеЕсли ФильтрПериод="За весь период" Тогда
		ТекущееЗначениеФильтра = "";
	Иначе
		ТекущееЗначениеФильтра = ФильтрПериод;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагент) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагент);	
	КонецЕсли;
	если ЗначениеЗаполнено(ФильтрТипыДокументов) И (кэш.текущий.типДок="Отправленные" или кэш.текущий.типДок="Полученные") тогда // Фильтр заполнен и в этом разделе будет действовать
		списокТипДок="";
		для каждого типДок из ФильтрТипыДокументов цикл 
			списокТипДок=списокТипДок+типДок.представление+",";
		конеццикла;
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + лев(списокТипДок,СтрДлина (списокТипДок)-1);	
	конецесли;
	Если ФильтрСостояние<>"Все документы" Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", "+ФильтрСостояние;	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОрганизация);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрОтветственный) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрОтветственный);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрКонтрагентПодключен) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрКонтрагентПодключен);	
	КонецЕсли;
	Если ЗначениеЗаполнено(ФильтрМаска) Тогда
		ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(ФильтрМаска);	
	КонецЕсли;	
	//Добавим дополнительные параметры фильтра для текущего раздела
	Если Не ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Возврат;
	КонецЕсли;
	НазваниеРаздела = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	ФормаДопФильтра = сбисНайтиФормуФункции("сбисСписокДопПараметровФильтра","Фильтр_Раздел_"+НазваниеРаздела+"_"+Кэш.Текущий.ТипДок,"Фильтр_Раздел_"+НазваниеРаздела+"_Шаблон", Кэш);
	Если ФормаДопФильтра<>ложь Тогда
		СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
		Для Каждого Элемент Из СписокДопЭлементов Цикл
			Если Кэш.ПараметрыФильтра.Свойство(Элемент.Значение) и ЗначениеЗаполнено(Кэш.ПараметрыФильтра[Элемент.Значение]) Тогда
				ТекущееЗначениеФильтра = ТекущееЗначениеФильтра + ", " + строка(Кэш.ПараметрыФильтра[Элемент.Значение]);				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Лев(ТекущееЗначениеФильтра, 2) = ", " Тогда
		ТекущееЗначениеФильтра = Сред(ТекущееЗначениеФильтра,3);
	КонецЕсли;
	
	Если ТекущееЗначениеФильтра="" тогда
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтраНет"];		
	иначе
		Элементы.ПанельФильтра.ТекущаяСтраница = Элементы.ПанельФильтра.ПодчиненныеЭлементы["ФильтрЕсть"];		
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура сбисСохранитьФильтрРаздела(Кэш) Экспорт
	ТекущийФильтр = сбисСохранитьТекущийФильтр(Кэш);
	Если ЗначениеЗаполнено(Кэш.Текущий.Раздел) Тогда
		Кэш.Парам.ФильтрыПоРазделам.Вставить(Кэш.Разделы["р"+Кэш.Текущий.Раздел], ТекущийФильтр);
	КонецЕсли;
КонецПроцедуры
// Навигация
&НаКлиенте
Процедура НавигацияПерваяСтраница(Команда)
	ФильтрСтраница = 1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПредыдущаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница-1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияСледующаяСтраница(Команда)
	ФильтрСтраница = ФильтрСтраница+1;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура НавигацияПоследняяСтраница(Команда)
	ФильтрСтраница = 0;
	ОбновитьКонтент();
КонецПроцедуры
&НаКлиенте
Процедура ОтметитьВсе()
	ОтметитьВсе = Не ОтметитьВсе;
	Для Каждого Строка Из ЭтаФорма[Кэш.ТаблДок.Имя] Цикл
		Строка.Отмечен = ОтметитьВсе;
	КонецЦикла;
КонецПроцедуры

// Утверждение/Отклонение
&НаКлиенте
Процедура КонтекстноеМенюПолученныеУтвердитьОтклонить(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	фрм = сбисНайтиФормуФункции("сбисУтвердитьОтклонить","РаботаСДокументами1С","",Кэш);
	фрм.сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, Команда);
КонецПроцедуры
&НаКлиенте
Процедура УтвердитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Утвердить");
КонецПроцедуры
&НаКлиенте
Процедура ОтклонитьВыделенные(Команда)
	КонтекстноеМенюПолученныеУтвердитьОтклонить("Отклонить");
КонецПроцедуры
&НаКлиенте
Функция ОбновитьКонтент() Экспорт
	// Обновляет данные на главном окне	
	Если Кэш.ТаблДок = "" Тогда   // Если открыта сама обработка, а отправку делаем из карточки документа 1С, то ничего не обновляем
		Возврат "";
	КонецЕсли;
	//Получим имя и значение реквизита по которому будем искать текущую строку
	ЗначениеПоиска = Неопределено;
	Если ТипЗнч(Кэш.ТаблДок.ТекущиеДанные) <> Тип("Неопределено") Тогда
		Если Кэш.ТаблДок.Имя = "Таблица_РеестрДокументов" Тогда
			РеквизитПоиска = "Документ1С";
		Иначе
			РеквизитПоиска = "ИдСБИС";
		КонецЕсли;	
		Кэш.ТаблДок.ТекущиеДанные.Свойство(РеквизитПоиска, ЗначениеПоиска);
	КонецЕсли;
	
	СтруктураДляОбновленияФормы = Кэш.Текущий.Форма.ОбновитьКонтент(Кэш);
	ОбновитьПоляФормы(СтруктураДляОбновленияФормы);
	
	//Найдем строку в новой таблице по имени и значению реквизита
	Если ЗначениеПоиска <> Неопределено и ТипЗнч(СтруктураДляОбновленияФормы) = Тип("Структура") Тогда
		Для Каждого Элемент Из СтруктураДляОбновленияФормы Цикл
			ТаблПоиска = ЭтаФорма[Элемент.Ключ];
			ПараметрыОтбора = Новый Структура(РеквизитПоиска, ЗначениеПоиска);
			Строка = ТаблПоиска.НайтиСтроки(ПараметрыОтбора);
			//Берем первую строку из массива (Т.к. поиск по документу или по ИдСБИС, то строка единственная в таблице)
			Если Строка.Количество() <> 0 Тогда
				НомерСтроки = Строка[0].ПолучитьИдентификатор(); 
				Кэш.ТаблДок.ТекущаяСтрока = НомерСтроки;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура СохранитьПакет(Элемент) 
	// Сохраняет пакеты документов на диск (+ pdf файлы вложений)	
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	СписокПакетов = Новый массив;
	Для Каждого Элемент Из СписокОтмеченныхДокументов Цикл
		СписокПакетов.Добавить(Элемент.Значение.СоставПакета[0].Значение);
	КонецЦикла;
	Кэш.ОбщиеФункции.СохранитьПакетыНаДиск(Кэш, СписокПакетов);	
КонецПроцедуры
//&НаКлиенте
//Функция ДобавитьСбисДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
//	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
//	Для Каждого Элемент Из СписокДопЭлементов Цикл
//		Кэш.ПараметрыФильтра.Вставить(Элемент.Значение);
//	КонецЦикла;
//	
//КонецФункции

&НаКлиенте
Функция Печать(ИдентификаторКоманды, ОбъектыНазначения) Экспорт
	#Если ВебКлиент Тогда 
		Если ПодключитьРасширениеРаботыСФайлами()=Ложь Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("сбисПечатьПослеУстановкиРасширенияРаботыСФайлами",ЭтаФорма,ОбъектыНазначения));
		Иначе
			сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения);   // alo Меркурий
		КонецЕсли;
	#Иначе
		сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения);	// alo Меркурий
	#КонецЕсли
	
КонецФункции
&НаКлиенте
Функция сбисПечатьПослеУстановкиРасширенияРаботыСФайлами(ИдентификаторКоманды, ОбъектыНазначения) Экспорт	// alo Меркурий
	ГлавноеОкно = ЭтаФорма;	
	
	#Если ВебКлиент Тогда
		ПодключитьРасширениеРаботыСФайлами();
	#КонецЕсли
	
	ЗаполнитьСписокФорм();
	КэшПодготовить();
	СбисПолучитьПарам();
	
	ВсеВключилось = ОпределитьИнтеграциюРабочиеФормы(Кэш,Кэш.Парам);
	Если Не ВсеВключилось Тогда//Не удалось включить интеграцию, либо форма хранения настроек недоступна
		Возврат Ложь;
	//ИначеЕсли Кэш.Парам.СпособОбмена = 1 Тогда
	//	Возврат Неопределено;//Для каталога авторизация не проводится
	КонецЕсли;	

	формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	Если (Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьСертификат) или (НЕ Кэш.Парам.ВходПоСертификату и Кэш.Парам.ЗапомнитьПароль) или Кэш.Парам.СпособОбмена = 1 Тогда
		УспешнаяАвторизация = формаАвторизации.Авторизоваться(Кэш);
	КонецЕсли;
	// << alo Меркурий
	СбисДополнительныеПараметры  = Новый Структура("ИдентификаторКоманды, Документ",ИдентификаторКоманды, ОбъектыНазначения[0]);
	Если УспешнаяАвторизация = Истина Тогда
		сбисПечатьПослеАвторизации(Истина, СбисДополнительныеПараметры);
	Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПечатьПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
	// alo Меркурий >>
		формаАвторизации.Открыть();
	КонецЕсли;				
	
КонецФункции
&НаКлиенте
Функция сбисПечатьПослеАвторизации(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Кэш.Текущий.Раздел = "3";
	Кэш.Текущий.ТипДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Параметры.Документ, "Имя");  // alo Меркурий
	сбисПолучитьУстановитьНастройки(Кэш,Ложь);
	Если Не Кэш.ИниВПорядке Тогда
		Возврат Неопределено;
	КонецЕсли;
	Документ = Параметры.Документ;  // alo Меркурий
	//Для каждого Документ из ОбъектыНазначения Цикл
	ИмяДокумента = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
	
	//Получим настройки документа
	СписокИни = Новый СписокЗначений;
	Отказ = Ложь;
	сбисСтруктураРазделов = Кэш.ФормаНастроек.ПолучитьСтруктуруРазделов(Кэш,,Отказ);
	Для Каждого сбисРаздел Из сбисСтруктураРазделов Цикл
		Если сбисРаздел.Ключ = "БезРаздела" Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого сбисПодРаздел Из сбисРаздел.Значение.Список Цикл
			Если Не	(	ЗначениеЗаполнено(сбисПодРаздел.Значение.Реестр1С_Тип)
				И	сбисПодРаздел.Значение.ЕстьЗапросРеестра
				И	сбисПодРаздел.Значение.Реестр1С_Тип = ИмяДокумента) Тогда
				Продолжить;
			КонецЕсли;
			ИмяИни = сбисПодРаздел.Значение.Реестр1С_Название;
			Если Не ЗначениеЗаполнено(ИмяИни) Тогда
				ИмяИни = ИмяДокумента;
			ИначеЕсли СписокИни.НайтиПоЗначению(сбисПодРаздел.Ключ) = Неопределено Тогда 
				СписокИни.Добавить(сбисПодРаздел.Ключ, ИмяИни);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СписокИни.Количество() = 0 тогда
		Если Кэш.ини.Свойство(ИмяДокумента) Тогда	
			СписокИни.Добавить(ИмяДокумента, ИмяДокумента);
		Иначе
			Сообщить("Выгрузка данного типа документов не поддерживается!");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокИни.Количество() = 1 Тогда
	// << alo Меркурий
		сбисКомандаПослеВыбораИни(СписокИни[0].Значение, Параметры);
	Иначе
		Оповещение = Новый ОписаниеОповещения("сбисКомандаПослеВыбораИни", ЭтаФорма, Параметры);
		ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.Форма_ВыборИзСписка",Новый Структура("СписокДляВыбора, Заголовок",СписокИни, "Выберите настройку для формирования документов"),,,,,Оповещение);
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисКомандаПослеВыбораИни(Результат, Параметры) Экспорт
	Если Параметры.ИдентификаторКоманды = "sbis1cПогаситьВСД" Тогда
		сбисПогаситьВСД(Результат, Параметры.Документ);
	иначе 
		сбисПечатьПослеВыбораИни(Результат, Параметры);
	Конецесли;
КонецФункции 		// alo Меркурий >>
&НаКлиенте
Функция сбисПечатьПослеВыбораИни(Результат, Параметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Документ = Параметры.Документ;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, Результат);
	Кэш.Текущий.ТипДок = Результат;
	
		
	//Подготовим фильтр для запроса документов
	ПараметрыФильтра = Новый Структура;
	ПараметрыФильтра.Вставить( "ФильтрДокумент", Документ); 		
	// << alo Меркурий 
	Контекст=новый структура("ини",Новый структура("Документ",новый структура("РассчитанноеЗначение", Документ)));
	РеквизитДата = "";
	РеквизитОтветственный = "";
	Для Каждого мФайл Из Ини.мФайл Цикл
		Если мФайл.Значение.Свойство("Документ_Дата") Тогда
			РеквизитДата = мФайл.Значение.Документ_Дата.Значение;
		КонецЕсли;
		Если мФайл.Значение.Свойство("Ответственный") Тогда
			РеквизитОтветственный = мФайл.Значение.Ответственный.Значение;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(РеквизитДата) Тогда
		ДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДата,Контекст);
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", ДатаНач); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ДатаНач); 
	иначе
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", ФильтрДатаНач); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ФильтрДатаКнц); 
	КонецЕсли;
	ПараметрыФильтра.Вставить( "ФильтрКонтрагент", "");
	ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", "");
	ПараметрыФильтра.Вставить( "ФильтрОрганизация", "");
	ПараметрыФильтра.Вставить( "ФильтрСостояние", "Все документы");
	ИниКонфигурация = Кэш.ФормаНастроек.Ини(Кэш, "Конфигурация");
	Если ИниКонфигурация.Свойство("Ответственные") Тогда
		ИмяСправочника = СокрЛП(Сред(ИниКонфигурация.Ответственные.Значение, Найти(ИниКонфигурация.Ответственные.Значение, ".")+1));
		ТипСправочника = "СправочникСсылка." + ИмяСправочника;
	Иначе
		ТипСправочника = "СправочникСсылка.Пользователи";
	КонецЕсли;
	ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
	ПараметрыФильтра.Вставить( "ФильтрОтветственный", ОписаниеТипа.ПривестиЗначение()); // alo Меркурий >>
	ПараметрыФильтра.Вставить( "ФильтрМаска", "");
	ПараметрыФильтра.Вставить( "РазмерСтраницы", 1 ); 
	ПараметрыФильтра.Вставить( "Страница", 1 );
	ПараметрыФильтра.Вставить( "ВсеДокументы", Истина );
	ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
	
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	//Получим массив выгружаемых документов по запросу
	ТекстЗапроса = Кэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", Ини, Кэш);
	
	МассивДокументов1С = Кэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, КаталогНастроек);
	//Подготовим список документов
	СписокОтмеченныхДокументов = Новый СписокЗначений;
	Для каждого СтрокаТЗ из МассивДокументов1С Цикл
		СписокОтмеченныхДокументов.Добавить(СтрокаТЗ);
		ТекущаяСтрока = СтрокаТЗ;
		ТекущийРаздел = Ини.ДокументРаздел.Значение;
		//Откроем пакет документов
		ПозЗпт = Найти(ТекущийРаздел, ",");
		Если ПозЗпт>0 Тогда
			ТекущийРаздел = Лев(ТекущийРаздел, ПозЗпт-1);	
		КонецЕсли;				
		фрм = сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+СтрЗаменить(ТекущийРаздел, "'", "")+"_Шаблон",, Кэш);
		//ГлавноеОкно.Кэш.ГлавноеОкно = ГлавноеОкно;
		фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);	
		
	КонецЦикла;	
		
		//Отправим документы			
		//фрм = ГлавноеОкно.сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+ИмяДокумента,"Документ_Шаблон");
		//фрм.ОтправитьДокументы(ГлавноеОкно.Кэш, СписокОтмеченныхДокументов);
		
		//КонецЦикла;
КонецФункции
// << alo Меркурий
&НаКлиенте
Функция сбисПогаситьВСД(ИмяИни, Документ)
	Кэш.Текущий.Раздел = "1";
	ПолучилосьАвтоматически = Ложь;
	Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
	Если ЗначениеЗаполнено(Ини) И Ини.свойство("мФайл") И Ини.мФайл.свойство("АктРасхождение") Тогда
		РеквизитДатаВх = ?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, ""));
		РеквизитНомерВх = ?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, ""));
		Если ЗначениеЗаполнено(РеквизитДатаВх) ИЛИ ЗначениеЗаполнено(РеквизитНомерВх) Тогда
			filter1с = Новый Структура("СписокСостояний, ФильтрТипыДокументов, ФильтрКонтрагентСФилиалами, ФильтрОрганизация, ФильтрМаска, ЗаписейНаСтранице, ФильтрСтраница, ФильтрДатаНач, ФильтрДатаКнц",
										новый СписокЗначений, новый СписокЗначений, Ложь, "", "", 2, 1 );
			Контекст=новый структура("ини, Документ",Ини,Документ);
			
			Если Ини.Свойство("Контрагент_Роль") Тогда
				РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
				Если ЗначениеЗаполнено(РольКонтрагента) И Ини.мСторона.Свойство(РольКонтрагента) Тогда
					ФильтрКонтрагент = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольКонтрагента].Сторона.Значение,Контекст);
					Если ЗначениеЗаполнено(ФильтрКонтрагент) Тогда
						filter1с.Вставить("ФильтрКонтрагент",ФильтрКонтрагент);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			РольОрганизации = ""; 
			Если Ини.Свойство("Организация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'","");
			ИначеЕсли Ини.Свойство("НашаОрганизация_Роль") Тогда
				РольОрганизации = СтрЗаменить(Ини.НашаОрганизация_Роль.Значение,"'","");
			КонецЕсли;
			Если ЗначениеЗаполнено(РольОрганизации) И Ини.мСторона.Свойство(РольОрганизации) Тогда
				ФильтрОрганизация = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(Ини.мСторона[РольОрганизации].Сторона.Значение,Контекст);
				Если ЗначениеЗаполнено(ФильтрОрганизация) Тогда
					filter1с.ФильтрОрганизация = ФильтрОрганизация;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитДатаВх) Тогда
				ФильтрДатаНач = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитДатаВх,Контекст);
				Если ЗначениеЗаполнено(ФильтрДатаНач) Тогда
					filter1с.Вставить("ФильтрДатаНач", ФильтрДатаНач);
					filter1с.Вставить("ФильтрДатаКнц", ФильтрДатаНач);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитНомерВх) Тогда
				ФильтрМаска = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере(РеквизитНомерВх,Контекст);
				Если ЗначениеЗаполнено(ФильтрМаска) Тогда
					filter1с.Вставить("ФильтрМаска", ФильтрМаска);
				КонецЕсли;
			КонецЕсли;
				
			БазоваяИнтеграция = ?(Кэш.ИнтеграцияИмя = "ExtSDK2", Кэш.СБИС.ДанныеИнтеграции.Объекты.Форма_ExtSDK, Кэш.Интеграция);
	
			filter = БазоваяИнтеграция.ПолучитьФильтр(filter1с, Новый Структура("Тип", "ДокОтгрВх"));
			ПакетыСБИС = Кэш.Интеграция.сбисПолучитьСписокДокументовПоФильтру(Кэш, filter, Кэш.ГлавноеОкно); 
			Если ЗначениеЗаполнено(ПакетыСБИС) И ПакетыСБИС.Таблица_РеестрДокументов.количество()=1 Тогда
				ПакетСБИС = ПакетыСБИС.Таблица_РеестрДокументов[0];
				фрм = сбисНайтиФормуФункции("ЗаписатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
						СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения", ПакетСБИС.ИдСБИС,"");
				фрм.ЗаписатьПараметрыДокументаСБИС(СтруктураСвойств, Документ, Кэш.Ини.Конфигурация, КаталогНастроек);
				
				ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ПакетСБИС.ИдСБИС);
				
				фрм = сбисНайтиФормуФункции("СформироватьРасхождениеНажатие","ФормаПросмотрДокумента","", Кэш);
				фрм.МестныйКэш = Кэш;
				фрм.СоставПакета = Кэш.ОбщиеФункции.РазобратьСтруктуруДокументаСбис(ПолныйСоставПакета, Кэш);
				фрм.ЗаполнитьТаблицуДокументов(фрм.СоставПакета);
				фрм.СформироватьРасхождениеНажатие(неопределено);
				Если фрм.СоставПакета.Вложение.количество()>0 Тогда	
					Вложение = фрм.СоставПакета.Вложение[фрм.СоставПакета.Вложение.количество()-1];
					Если Вложение.Тип = "АктРасхождение" Тогда
						Кэш.Интеграция.СБИСЗаписатьВложения(Кэш, фрм.СоставПакета, Вложение);
						Сообщить("Обновлен документ "+фрм.СоставПакета.Название);
						ОткрытьДокументОнлайнПоПакету(фрм.СоставПакета, Кэш);
						ПолучилосьАвтоматически= Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если не ПолучилосьАвтоматически Тогда    // открыть форму для ручной работы и инструкцию
		ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/vsd?tb=tab2");
		ПерейтиВРаздел("АккордеонДокОтгрВх11");
		Кэш.ГлавноеОкно.Открыть();
	КонецЕсли;
КонецФункции	// alo Меркурий >>

&НаКлиенте
Процедура ВерсияНажатие(Элемент, СтандартнаяОбработка)
	// Открывает хистори обработки.
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul/history/");
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


Процедура сбисЗаполнитьСписокСправочника(Ини) Экспорт
	// Заполняет дерево значений по справочнику
	ИмяСправочника = СокрЛП(Сред(Ини.СправочникТип.Значение, Найти(Ини.СправочникТип.Значение, ".")+1));
	Если Ини.Свойство("ЗапросСпискаЭлементов") Тогда
		ТекстЗапроса = СокрЛП(Ини.ЗапросСпискаЭлементов.Значение);
		Запрос = Новый Запрос(Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса)-2));
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаписьСправочника.Ссылка,ЗаписьСправочника.Наименование,ЗаписьСправочника.Код, Ложь КАК Отмечен ИЗ Справочник."+ИмяСправочника+" КАК ЗаписьСправочника ГДЕ (НЕ(ЗаписьСправочника.ЭтоГруппа) и НЕ ЗаписьСправочника.ПометкаУдаления)ИТОГИ ПО ЗаписьСправочника.Ссылка ТОЛЬКО ИЕРАРХИЯ");
	КонецЕсли;
	Дерево = РеквизитФормыВЗначение("Таблица_РеестрСправочников"); // заполняем Дерево 
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(Дерево, "Таблица_РеестрСправочников");
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	// Отмечает вложенные записи дерева значений при отметке группы
	ТекущиеДанные = Элементы.Таблица_РеестрСправочников.ТекущиеДанные;
	ПроставитьПометкиВниз(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	// Отмечает вложенные записи дерева значений при отметке группы (рекурсивно)
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Отмечен;
	Для каждого Потомок из Потомки Цикл
		Потомок.Отмечен = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВыбранныеСтроки(СписокОтмеченных, Потомки)
	// Получает выбранные строки дерева значений
	Для каждого Потомок из Потомки Цикл
		ПотомкиПотомка = Потомок.ПолучитьЭлементы();
		Если ПотомкиПотомка.Количество()=0 Тогда
			Если Потомок.Отмечен Тогда
				СписокОтмеченных.Добавить(Потомок.Ссылка);
			КонецЕсли;
		Иначе
			ПолучитьВыбранныеСтроки(СписокОтмеченных,ПотомкиПотомка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеДерево(Команда)
	// Отмечает все записи в дереве значений
	ОтметитьВсе = Не ОтметитьВсе;
	Потомки = Таблица_РеестрСправочников.ПолучитьЭлементы();
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Отмечен = ОтметитьВсе;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаписьСправочника(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// открывает карточку справочника
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

//Список клиентских форм формируется при подключении заплаток
&НаКлиенте
Процедура ОтправитьКорреспонденцию(Команда)
	фрм = сбисНайтиФормуФункции("ПоказатьФорму","ФормаОтправкиКорреспонденции","",Кэш);	
	фрм.ПоказатьФорму(Кэш);
КонецПроцедуры

&НаСервере
Процедура НастроитьКолонкиНаСервере(имяТаблицы, Знач ВидимыеКолонки, Ини) экспорт  // alo СтатусГос
	// Создание ТаблицыЗначений с описанием колонок
	ЭлементТаблица = Элементы[имяТаблицы];
		
	МассивРеквизитовФормы = Новый Массив;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Колонка.Элемент = ЭлементТаблица.ПодчиненныеЭлементы.Найти(имяТаблицы+Колонка.Имя);
		если ини.Свойство("Реестр1С_"+Колонка.Имя) Тогда
			Колонка.Ини = ини["Реестр1С_"+Колонка.Имя];
		КонецЕсли;
		Если Колонка.Элемент = Неопределено Тогда
			ОписаниеТипа = Неопределено;
			Если Колонка.Ини.Свойство("Тип") Тогда
				Если Колонка.Ини.Тип = "Строка" Тогда
		 			КвалификаторыСтроки = Новый КвалификаторыСтроки;
	    			ОписаниеТипа = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);
				Иначе
	    			ОписаниеТипа = Новый ОписаниеТипов(Колонка.Ини.Тип);	// например "СправочникСсылка.Сотрудники"
	 			КонецЕсли;
	 		КонецЕсли;
			Если ОписаниеТипа <> Неопределено Тогда
				МассивРеквизитовФормы.Добавить(Новый РеквизитФормы(Колонка.Имя, ОписаниеТипа, имяТаблицы));
			Иначе
				Сообщить("Необходимо описание типа поля "+Колонка.Имя);
			Конецесли;
		Конецесли;
    КонецЦикла;
    ИзменитьРеквизиты(МассивРеквизитовФормы);	    // Добавление в реквизитов колонок ТаблицыЗначений
		
	индекс = 0;
	Для Каждого Колонка Из ВидимыеКолонки Цикл
		Если Колонка.Элемент = Неопределено Тогда
			СледующийЭлемент = Неопределено;
			Если индекс+1 < ВидимыеКолонки.Количество() Тогда
				СледующийЭлемент = ВидимыеКолонки[индекс+1].Элемент;
			КонецЕсли;
			Колонка.Элемент = Элементы.Вставить(имяТаблицы+Колонка.Имя, Тип("ПолеФормы"),ЭлементТаблица, СледующийЭлемент);
			Колонка.Элемент.Ширина = 10;//Колонка.Элемент.ШиринаЭлемента = 10;
		КонецЕсли;
		Колонка.Элемент.Видимость = Истина;
		Если Колонка.Ини.Свойство("Ширина") Тогда
			Попытка	// у существующих поле переключателей и картинок такого свойства нет
				Колонка.Элемент.Ширина = Колонка.Ини.Ширина;
			Исключение;
			КонецПопытки
		КонецЕсли;
		Если Колонка.Ини.Свойство("Заголовок") Тогда
			Колонка.Элемент.Заголовок = Колонка.Ини.Заголовок;
		КонецЕсли;
		Если Колонка.Ини.Свойство("Значение") И не ЗначениеЗаполнено(Колонка.Элемент.ПутьКДанным) Тогда
			Колонка.Элемент.ПутьКДанным = имяТаблицы+"."+Колонка.Ини.Значение;
		КонецЕсли;
		индекс = индекс +1;
	КонецЦикла;	
КонецПроцедуры

////////////////////////////////////////////////////
//////////Переделано для совместимости ОФ УФ////////

&НаКлиенте
Функция СбисСписокСерверов(ЛокальныйКэш=Неопределено) Экспорт
	СписокДоступныхСерверов = Новый СписокЗначений;
	СписокДоступныхСерверов.Добавить("https://online.sbis.ru/", "online.sbis.ru");
	СписокДоступныхСерверов.Добавить("https://fix-online.sbis.ru/", "fix-online.sbis.ru");
	Если Не ЛокальныйКэш = Неопределено Тогда
		Если ЛокальныйКэш.Парам.РежимОтладки Тогда
			СписокДоступныхСерверов.Добавить("https://test-online.sbis.ru/", "test-online.sbis.ru");
		КонецЕсли;
		Если ЛокальныйКэш.СБИС.ПараметрыИнтеграции.РезервныйДомен Тогда//Допоним список резервными доменами
			СписокДоступныхСерверов.Вставить(1, "https://online.saby.ru/", "online.saby.ru");
			СписокДоступныхСерверов.Добавить("https://fix-online.saby.ru/", "fix-online.saby.ru");
		КонецЕсли;
	КонецЕсли;
	Возврат СписокДоступныхСерверов;
КонецФункции

//Функция заполняет структуру с данными о текущем разделе
&НаКлиенте
Функция ОпределитьРаздел(Имя) Экспорт
	Текущий = Новый Структура();
	врДл = СтрДлина(Имя);
	идРаздел = Прав(Имя,2);
	ТекущийРаздел = Лев(идРаздел,1);
	Раздел = Прав(идРаздел,1);
	ТипДок = Сред(Имя,10,врДл-11);
	
	Текущий.Вставить("Имя", Имя);
	Текущий.Вставить("ТекущийРаздел", ТекущийРаздел);
	Текущий.Вставить("Раздел", Раздел);
	Текущий.Вставить("ТипДок", ТипДок);
	Текущий.Вставить("ПредыдущийРаздел", Неопределено);//Для отслеживания вложенности разделов. При не удачном переходе, возвращаемся по пути обратно
	
	Возврат Текущий;	
КонецФункции

//Процедура открывает карточку документа на сайте online.sbis.ru	
&НаКлиенте
Функция ОткрытьДокументОнлайнПоПакету(Пакет, Кэш) Экспорт
	
	//KES 050751151 Статусы в разрезе регламентов (ОТКРЫТЬ ДОКУМЕНТ ОНЛАЙН) --> 9 +
	МассивСтатусРегламент = Новый Массив;
	Если  (Кэш.Парам.СпособОбмена = 0 ИЛИ Кэш.Парам.СпособОбмена = 3)
	   И Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
	   И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
	   	   МассивСтатусРегламент = Кэш.ОбщиеФункции.РазбитьСтрокуВМассивНаКлиенте(Кэш.Ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТКРЫТЬ ДОКУМЕНТ ОНЛАЙН)
	Ссылка = "";
	Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" или Кэш.Текущий.Раздел = "8" или Кэш.Текущий.Раздел = "7" Тогда
		Ссылка = Пакет.СсылкаДляНашаОрганизация;
		ОткрытьДокументОнлайнПоПакетуЗавершение(Ссылка, Пакет, Кэш);
	ИначеЕсли Кэш.Текущий.Раздел = "3" или Кэш.Текущий.Раздел = "4" Тогда
		фрм = сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		
		//KES 050751151 Статусы в разрезе регламентов (ОТКРЫТЬ ДОКУМЕНТ ОНЛАЙН) --> 10
		СтатусРегламент = "";
		Если ЗначениеЗаполнено(МассивСтатусРегламент) Тогда 
			ИниРеестра = Кэш.Ини[Кэш.Текущий.ТипДок].мФайл;
			//первый ини
			Для Каждого Файл из ИниРеестра Цикл
				РегламентНазвание = Кэш.ОбщиеФункции.РассчитатьЗначение("Регламент_Название",Файл.Значение,Кэш);
				Если НЕ МассивСтатусРегламент.Найти(РегламентНазвание) = Неопределено Тогда 
					СтатусРегламент = РегламентНазвание;
				КонецЕсли;
				Прервать;
			КонецЦикла;
	    КонецЕсли;
		
		ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(Пакет,КаталогНастроек,СтатусРегламент+"ДокументСБИС_Ид",Кэш.Ини);
		//<-- KES 050751151 Статусы в разрезе регламентов (ОТКРЫТЬ ДОКУМЕНТ ОНЛАЙН)

		Если ЗначениеЗаполнено(ИдДок) Тогда
			СоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш,ИдДок);
			Если типЗнч(СоставПакета)= тип("Структура") И СоставПакета.Свойство("СсылкаДляНашаОрганизация") Тогда // alo
				Ссылка = СоставПакета.СсылкаДляНашаОрганизация;
			КонецЕсли;
			ОткрытьДокументОнлайнПоПакетуЗавершение(Ссылка, Пакет, Кэш);
		ИначеЕсли Кэш.Парам.СпособОбмена <> 1 Тогда
			// загружаем пакет в кабинет без отправки << alo Меркурий 
			лРежимДиалога = РежимДиалогаВопрос.ДаНет;
			лТекстДиалога = "Документ не сопоставлен со СБИС. Создать черновик?";
			сбисПараметрыСоздания= Новый Структура("Кэш,фрм, Пакет",Кэш, фрм, Пакет);
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				СоздатьЧерновик(Вопрос(лТекстДиалога, лРежимДиалога, , КодВозвратаДиалога.Да), сбисПараметрыСоздания);
			#Иначе
				ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьЧерновик", ЭтаФорма, сбисПараметрыСоздания), лТекстДиалога, лРежимДиалога, 0, КодВозвратаДиалога.Да);
			#КонецЕсли
			// alo Меркурий >>
		Иначе
			ОткрытьДокументОнлайнПоПакетуЗавершение(Ссылка, Пакет, Кэш);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЧерновик(Ответ, сбисПараметрыСоздания) Экспорт
	Ссылка = "";
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ИниТекущегоРеестра = сбисПараметрыСоздания.Кэш.Текущий.ТипДок;
		ЗначениеИниТекущегоРеестра = сбисПараметрыСоздания.Кэш.ФормаНастроек.Ини(сбисПараметрыСоздания.Кэш, ИниТекущегоРеестра);
		если ЗначениеИниТекущегоРеестра.свойство("НеЗапускатьВДокументооборот") тогда
			СохранитьНеЗапускатьВДокументооборот=ЗначениеИниТекущегоРеестра.НеЗапускатьВДокументооборот;
		иначе
			СохранитьНеЗапускатьВДокументооборот=неопределено;
		конецесли;
		ЗначениеИниТекущегоРеестра.Вставить("НеЗапускатьВДокументооборот", Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
		СписокОтмеченныхДокументов = Новый СписокЗначений;
		СписокОтмеченныхДокументов.Добавить(сбисПараметрыСоздания.Кэш.ТаблДок.ТекущиеДанные);
		фрмОД = сбисНайтиФормуФункции("ОтправитьДокументы","Документ_"+сбисПараметрыСоздания.Кэш.Текущий.ТипДок,"Документ_Шаблон",сбисПараметрыСоздания.Кэш);
		фрмОД.ОтправитьДокументы(Кэш,СписокОтмеченныхДокументов);
		если СохранитьНеЗапускатьВДокументооборот=неопределено тогда
			ЗначениеИниТекущегоРеестра.удалить("НеЗапускатьВДокументооборот");
		иначе
			ЗначениеИниТекущегоРеестра.НеЗапускатьВДокументооборот=СохранитьНеЗапускатьВДокументооборот;
		конецесли;
		Если сбисПараметрыСоздания.Кэш.РезультатОтправки.отправлено > 0 Тогда
			ИдДок = сбисПараметрыСоздания.фрм.ПрочитатьПараметрыДокументаСБИС(сбисПараметрыСоздания.Пакет,КаталогНастроек,"ДокументСБИС_Ид", сбисПараметрыСоздания.Кэш.Ини);
			Если ЗначениеЗаполнено(ИдДок) Тогда
				СоставПакета = сбисПараметрыСоздания.Кэш.Интеграция.ПрочитатьДокумент(сбисПараметрыСоздания.Кэш,ИдДок);
				Если типЗнч(СоставПакета)= тип("Структура") И СоставПакета.Свойство("СсылкаДляНашаОрганизация") Тогда
					Ссылка = СоставПакета.СсылкаДляНашаОрганизация;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОткрытьДокументОнлайнПоПакетуЗавершение(Ссылка, сбисПараметрыСоздания.Пакет, сбисПараметрыСоздания.Кэш);
КонецПроцедуры
&НаКлиенте
Функция ОткрытьДокументОнлайнПоПакетуЗавершение(Ссылка, Пакет, Кэш) Экспорт
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Сообщить("Не удалось получить ссылку на документ");
		Возврат Ложь;
	КонецЕсли;
	Если	Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение
		И	Кэш.Текущий.Раздел = "8" Тогда
		//Для ОФ временно не доступно
		Отказ = Ложь;
		фрм = СбисНайтиФормуФункцииОбработки(Кэш,"ПоказатьДокументОнлайн","ФормаHTML",Новый Структура,Отказ);
		Если Отказ Тогда
			СбисСообщитьОбОшибке(Кэш, фрм);
			Возврат Ложь;
		ИначеЕсли фрм = Ложь Тогда
			Сообщить("Не удалось получить форму просмотра документа");
			Возврат Ложь;
		КонецЕсли;
		фрм.ПоказатьДокументОнлайн(Кэш, Ссылка, Пакет);
	Иначе
		ЗапуститьПриложение(Ссылка);
	КонецЕсли;
КонецФункции
//Процедура инициирует перезапуск главной формы.
//Флаги характеризуют глубину перезапуска.
//Флаг изменения интеграции означает, чтонеобходима повторная авторизация
//Флаг изменения формы настроек означает сброс собранных настроек для повторной обработки, переустановку параметров и проверку необходимости авторизации, если там что-то изменено.
&НаКлиенте
Процедура ПерезапуститьГлавноеОкно(ИзмененаИнтеграция=Истина,ИзмененаФормаНастроек=Истина)	Экспорт
		
	ПовторАвторизации = Ложь;
	ПараметрыИнтеграции = Новый Структура("АдресСервера, СпособОбмена, СпособХраненияНастроек, ВремяОжиданияОтвета", Кэш.СБИС.АдресСервера);
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, Кэш.Парам);
	
	Если ИзмененаИнтеграция Тогда
		ПовторАвторизации = Истина;
		Если СпособОбмена = 1 и Не ЗначениеЗаполнено(КаталогОбмена) Тогда
			КаталогОбменаНачалоВыбора(сбисЭлементФормы(ЭтаФорма, "КаталогОбмена"),"", Истина);
		КонецЕсли;
		СбисДополнительныеПараметры = Новый Структура("ВызыватьРекурсивно", Ложь);
		ОпределитьИнтеграциюРабочиеФормы(Кэш, ПараметрыИнтеграции, СбисДополнительныеПараметры);  
	Иначе//Интеграцию не меняли, однако могли быть изменены параметры обмена, настроек и сервера в сбисПараметрах. Проверить параметры и запустить авторизацию, если надо
		Если ИзмененаФормаНастроек Тогда
			ОпределитьФормуРаботыСНастройками(Кэш, ПараметрыИнтеграции.СпособОбмена, ПараметрыИнтеграции.СпособХраненияНастроек);
		КонецЕсли;
		Кэш.ФормаНастроек.УстановитьПараметрыИнтеграции_ДоВключения(Кэш, ПараметрыИнтеграции, Новый Структура("ВызыватьРекурсивно", Истина), ПовторАвторизации);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Кэш.Парам, ПараметрыИнтеграции);
	Если Не ИзмененаФормаНастроек Тогда
		ИзмененаФормаНастроек = (Не СпособХраненияНастроек = Кэш.Парам.СпособХраненияНастроек);
	КонецЕсли;
	//Если в процессе поменялось в параметрах, то отображаем и на Главном окне
	СпособОбмена			= Кэш.Парам.СпособОбмена;
	СпособХраненияНастроек	= Кэш.Парам.СпособХраненияНастроек;
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ПовторныйЗапуск",			Истина);
	ПараметрыЗавершения.Вставить("ИзмененаФормаНастроек",	ИзмененаФормаНастроек);
	ПараметрыЗавершения.Вставить("РазделДо",				Кэш.Текущий.ТипДок);

	Если ПовторАвторизации Тогда
		ПослеОткрытияАвторизация(ПараметрыЗавершения);
	Иначе
		Если ИзмененаФормаНастроек Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПослеОткрытияЗавершение(ПараметрыЗавершения);
	КонецЕсли;

	Если Не ИзмененаФормаНастроек Тогда
		Если Кэш.Парам.СпособХраненияНастроек = 1 Тогда
			ФормаАвторизации = СбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
			Если ФормаАвторизации.Открыта() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		СтруктураНастроек = Кэш.ФормаНастроек.ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек);
		Если СтруктураНастроек.Свойство("СпособОбмена") Тогда
			Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш,Новый Структура("СпособОбмена", СпособОбмена), Кэш.Парам.ИдентификаторНастроек);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Определяет, что делать после диалога о необходимости сохранить внесенные в настройки изменения
&НаКлиенте
Процедура ПерейтиВРаздел_ПослеДиалога(Результат, СбисДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	ПродолжитьВыполнение = Истина;
	Если		Результат = КодВозвратаДиалога.Да Тогда
		Кэш.ФормаНастроек.сбисСохранитьВыбранныеНастройки(Кэш,Отказ,ПродолжитьВыполнение);
	ИначеЕсли	Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		Конфигурация = "";
		Кэш.ФормаНастроек.сбисОчиститьВыбранныеНастройки(Кэш,Отказ);
		сбисПолучитьУстановитьНастройки(Кэш, Ложь, Отказ);
	КонецЕсли;
	Если	Не	Отказ
		И		ПродолжитьВыполнение
		И	Не	Кэш.КэшНастроек.ИзмененияВНастройках Тогда
		ПерейтиВРаздел(СбисДополнительныеПараметры.Имя);
	КонецЕсли;
	
КонецПроцедуры

//Функция открывает окно диалога выбора папки
&НаКлиенте
Функция сбисВыбратьКаталог(лТекущийКаталог, Отказ=Ложь) Экспорт
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог		= лТекущийКаталог;
	ДиалогОткрытия.Заголовок	= "Выберите каталог"; 
	Если ДиалогОткрытия.Выбрать() Тогда 
		Возврат сбисФорматКаталога(ДиалогОткрытия.Каталог);
	Иначе
		Отказ = Истина;
		Возврат лТекущийКаталог;
	КонецЕсли;
КонецФункции

//Дописывает окончание к выбранному каталогу.
&НаКлиенте
Функция сбисФорматКаталога(лТекущийКаталог) Экспорт
	Возврат лТекущийКаталог + ?(Прав(лТекущийКаталог, 1) = "\", "", "\");	
КонецФункции

//Процедура завершает текущую сессию на онлайне и предлагает авторизоваться, в случае авторизации обновляет информацию на главном окне	
&НаКлиенте
Процедура сбисВыйти()
	Кэш.Парам.ЗапомнитьПароль		= Ложь;
	Кэш.Парам.ЗапомнитьСертификат	= Ложь;
	Кэш.Парам.Пароль				= "";
	Кэш.Интеграция.ЗакрытьСессию(Кэш);
	
	СбисДополнительныеПараметры	= Новый Структура("ПовторныйЗапуск, РазделДо", Истина, Кэш.Текущий.ТипДок);
	формаАвторизации		= сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Результат = формаАвторизации.ОткрытьМодально();
		сбисПослеАвторизации(Результат, СбисДополнительныеПараметры);
	#Иначе
		формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
		формаАвторизации.Открыть();
	#КонецЕсли
КонецПроцедуры

// Процедура проверяет структуру настроек, обновляет данные на форме об установленных настройках, заполняет разделы Продажа и Покупка подразделами	
&НаКлиенте
Процедура СбисОбновитьИнформациюНастроекНаГлавномОкне(ЛокальныйКэш, УстановленныеИниФайлы=Неопределено, Отказ=Ложь) Экспорт
	Если ЛокальныйКэш.ТихийРежим Тогда
		Возврат;
	КонецЕсли;
	сбисОбновитьТаблицыИниФайлов(ЛокальныйКэш, УстановленныеИниФайлы, Отказ);
	сбисОбновитьЭлементы_РазделНастроек(ЛокальныйКэш);
КонецПроцедуры

//Процедура управляет отображением элементов на вкладке файлов настроек
&НаКлиенте
Процедура сбисОбновитьЭлементы_РазделНастроек(ЛокальныйКэш)
	СбисЭлементВидимость = сбисЭлементФормы(ЭтаФорма, "ИнтеграцияAPIВызовыНаКлиенте");
	Если Не СбисЭлементВидимость = Неопределено Тогда
		#Если ВебКлиент Тогда
			СбисЭлементВидимость.Видимость = Ложь;
		#Иначе
			СбисЭлементВидимость.Видимость = (СпособОбмена = 3);
		#КонецЕсли
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость				= (СпособОбмена=1);
	сбисЭлементФормы(ЭтаФорма, "СпособХраненияНастроек").Видимость		= ЛокальныйКэш.Интеграция.ДоступныСерверныеНастройки();
	
	ОбычнаяФорма = Не ЛокальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение;
	АктивныСерверныеНастройки = СпособХраненияНастроек	= 1;
	ЗаголовокНазвания = ?(АктивныСерверныеНастройки, "Выбранные настройки", "Каталог настроек");
	ЗаголовокНазвания = ЗаголовокНазвания + ?(ОбычнаяФорма, ":", "");
	ДобавитьКЗаголовку = "";
	ТипНастроек = Неопределено;
	ВыбраныНастройки = Неопределено;
	Если	АктивныСерверныеНастройки
		И	ЛокальныйКэш.КэшНастроек.Свойство("ВыбранныеНастройки", ВыбраныНастройки)
		И	ВыбраныНастройки.ПараметрыРаботы.Свойство("ТипНастроек", ТипНастроек) Тогда
		ДобавитьКЗаголовку = ?(ТипНастроек = Неопределено, "", ТипНастроек);
		Если ЛокальныйКэш.КэшНастроек.ИзмененияВНастройках Тогда
			ДобавитьКЗаголовку = ДобавитьКЗаголовку + "*";
		КонецЕсли;
		НастройкиНазвание = ВыбраныНастройки.Название;
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма, "КаталогНастроек").Видимость			= Не АктивныСерверныеНастройки;
	сбисЭлементФормы(ЭтаФорма, "НастройкиНазвание").Видимость		= АктивныСерверныеНастройки;
	сбисЭлементФормы(ЭтаФорма, "ДействияСНастройками").Видимость	= АктивныСерверныеНастройки;
	сбисЭлементФормы(ЭтаФорма, "ХранениеНастроек_Сервер").Видимость = АктивныСерверныеНастройки;
	Если ОбычнаяФорма	Тогда
		сбисЭлементФормы(ЭтаФорма, "НадписьНастройки").Заголовок	= ЗаголовокНазвания + " " + ДобавитьКЗаголовку;
	ИначеЕсли АктивныСерверныеНастройки Тогда
		сбисЭлементФормы(ЭтаФорма, "НастройкиНазвание").Заголовок	= ЗаголовокНазвания + " " + ДобавитьКЗаголовку;
	КонецЕсли;
	
	//СпособОбмена = 4 (ExtSDK)
	//СпособОбмена = 5 (ExtSDKCrypto)
	//СпособОбмена = 6 (ExtSDK2)
	//СпособОбмена = 7 (ExtSDK2Crypto)
	
	//Если СпособОбмена = 4 ИЛИ СпособОбмена = 5 ИЛИ СпособОбмена = 6 ИЛИ СпособОбмена = 7 Тогда
	Если СпособОбмена = 6 Тогда
		сбисЭлементФормы(ЭтаФорма, "ИспользоватьГенератор").Видимость = Ложь; //TODO сделать видимым
	Иначе
		сбисЭлементФормы(ЭтаФорма, "ИспользоватьГенератор").Видимость = Ложь;
		ИспользоватьГенератор 				= Ложь;
		Кэш.Парам["ИспользоватьГенератор"] 	= Ложь;
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура сбисОбновитьТаблицыИниФайлов(ЛокальныйКэш, УстановленныеИниФайлы=Неопределено, Отказ=Ложь)
	
	Если Отказ Тогда
		ОбновитьПоляФормы(Новый Структура("ТабУстановленныеИниФайлы", Новый Массив()));
		Возврат;
	КонецЕсли;
	
	//Обновим таблицу доступных инишек
	Если	ЛокальныйКэш.Свойство("Конфигурация")
		И	ЛокальныйКэш.Текущий.ТипДок	= "ФайлыНастроек"	Тогда//Получаем список ини в левую колонку только когда находимся в разделе файлов настроек 
		СтруктураКонфигурации	= ЛокальныйКэш.ФормаНастроек.сбисПолучитьСтруктуруКонфигурации(ЛокальныйКэш, ЛокальныйКэш.Конфигурация, Конфигурация);
		ДоступныеИниФайлы		= ЛокальныйКэш.ФормаНастроекОбщее.СформироватьМассивТабДоступныеИниФайлыОбновить(СтруктураКонфигурации,?(УстановленныеИниФайлы=Неопределено,ТабУстановленныеИниФайлы,УстановленныеИниФайлы));
	Иначе
		ДоступныеИниФайлы = Новый Массив();
	КонецЕсли;
	ОбновитьПоляФормы(Новый Структура("ТабДоступныеИниФайлы", ДоступныеИниФайлы));
	
	//Если есть чем, то установленных инишек
	Если Не	УстановленныеИниФайлы = Неопределено Тогда
		ОбновитьПоляФормы(Новый Структура("ТабУстановленныеИниФайлы", УстановленныеИниФайлы));
	КонецЕсли;
	
КонецПроцедуры

//Проверяет, что строка является каталогом и открывает его в проводнике
&НаКлиенте
Процедура сбисОткрытьКаталог(ВыбранныйКаталог) Экспорт
	Попытка
		Файл = Новый Файл(ВыбранныйКаталог);
		Если Файл.ЭтоКаталог() Тогда
			ЗапуститьПриложение(ВыбранныйКаталог);
		Иначе
			Сообщить("Неверно указан путь к каталогу настроек.");
		КонецЕсли;
	Исключение
		Сообщить("Не удалось открыть каталог настроек.");
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура сбисПереключитьКонфигурацию(ЛокальныйКэш, НазваниеКонфигурации) Экспорт
	
	СтруктураКонфигурации	= Кэш.ФормаНастроек.сбисПолучитьСтруктуруКонфигурации(ЛокальныйКэш, ЛокальныйКэш.Конфигурация, НазваниеКонфигурации);
	ДоступныеИниФайлы		= Кэш.ФормаНастроекОбщее.СформироватьМассивТабДоступныеИниФайлыОбновить(СтруктураКонфигурации, ТабУстановленныеИниФайлы);
	ОбновитьПоляФормы(Новый Структура("ТабДоступныеИниФайлы", ДоступныеИниФайлы));
	
КонецПроцедуры

//Функция для вызова проверки обновления через обработчик ожидания.
&НаКлиенте
Процедура сбисПроверитьНаличиеОбновленийАвто() Экспорт
	СбисПроверитьНаличиеОбновлений(Новый Структура("Режим", "Авто"));
КонецПроцедуры

//Выполняет вызов проверки автообновления
&НаКлиенте
Процедура СбисПроверитьНаличиеОбновлений(ПараметрыПроверки)
	сбисПоказатьСостояние("Проверка наличия обновлений", ЭтаФорма);
	Кэш.ОбщиеФункции.СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыПроверки);
	сбисСпрятатьСостояние(ЭтаФорма);
КонецПроцедуры

//Процедура вызывает очистку сохраненного кэша настроек ини
&НаКлиенте
Процедура сбисОчиститьКэшНастроек() Экспорт 
	Кэш.ФормаНастроек.сбисОчиститьКэшНастроек(Кэш);
КонецПроцедуры

// Функция возвращает название раздела в аккордеоне по красивому названию.
&НаКлиенте
Функция сбисПолучитьРазделПоУмолчанию(РазделПоУмолчанию) Экспорт
	Если РазделПоУмолчанию = "Полученные" Тогда
		Возврат "АккордеонПолученные11";
	ИначеЕсли РазделПоУмолчанию = "Отправленные" Тогда
		Возврат "АккордеонОтправленные22";
	ИначеЕсли РазделПоУмолчанию = "Продажа" Тогда
		Возврат "АккордеонПродажа33";
		//НГС
	ИначеЕсли РазделПоУмолчанию = "Учет" Тогда
		Возврат "АккордеонУчет77";
		//КНГС
	ИначеЕсли	РазделПоУмолчанию = "Задачи"
			И	(Кэш.Парам.СпособОбмена	= 3 Или Кэш.Парам.СпособОбмена	= 4 Или Кэш.Парам.СпособОбмена = 5  Или Кэш.Парам.СпособОбмена = 6 Или Кэш.Парам.СпособОбмена = 7) Тогда
		Возврат "АккордеонЗадачи88";
	Иначе
		Возврат "АккордеонПокупка44";
	КонецЕсли;
	
КонецФункции

//Вызов получения и установки настроек
&НаКлиенте
Процедура СбисПолучитьУстановитьНастройки(ЛокальныйКэш, СказатьЧтоВсеХорошо, Отказ=Ложь) Экспорт
	ПродолжитьУстановку = Истина;//Флаг для отслеживания необходимости установки ини и обновления окна. Для того, чтобы в некоторых случаях не выполнялось повторно.
	//Настройки устанавливаются если ещё не были применены, либо если изменились параметры работы обработки. В остальных случаях, настройки не переустанавливаются
	УстановленныеИниФайлы = ЛокальныйКэш.ФормаНастроек.сбисПолучитьНастройки(ЛокальныйКэш, Отказ, ПродолжитьУстановку);
	Если	Не Отказ
		И	(	ПродолжитьУстановку
			Или	СказатьЧтоВсеХорошо) Тогда
		сбисПоказатьСостояние("Установка настроек", ЭтаФорма);
		РезультатУстановкиНастроек = СбисУстановитьНастройки(ЛокальныйКэш, УстановленныеИниФайлы, СказатьЧтоВсеХорошо, Отказ);
		сбисСпрятатьСостояние(ЭтаФорма);
		Если Отказ Тогда
			СбисСообщитьОбОшибке(ЛокальныйКэш, РезультатУстановкиНастроек, Новый Структура("ФормаВладелец", ЭтаФорма));
		КонецЕсли;
	КонецЕсли;	
	сбисОбновитьИнформациюНастроекНаГлавномОкне(ЛокальныйКэш, УстановленныеИниФайлы, Отказ);
	ФильтрУстановитьТипыПолей(Кэш);
	Если	Не	Кэш.Ини.Свойство("Конфигурация")
		Или		Кэш.Ини.Конфигурация = Неопределено Тогда
		Возврат;
	ИначеЕсли Кэш.Ини.Конфигурация.Свойство("ИспользоватьОбработчикиСобытий") Тогда
		Кэш.ИспользоватьОбработчикиСобытий = Кэш.ОбщиеФункции.РассчитатьЗначение("ИспользоватьОбработчикиСобытий", Кэш.Ини.Конфигурация, Кэш);	
	КонецЕсли;
КонецПроцедуры

//Процедура управляет включением/отключением вывода логов
&НаКлиенте
Процедура сбисПереключитьОтладку(сбисПараметрыОтладки)
	Если РежимОтладки Тогда
		лПараметрТест = Неопределено;
		Если КаталогОтладки = "" Тогда
			Если	сбисПараметрыОтладки.Свойство("РежимВыбора", лПараметрТест)
				И	лПараметрТест Тогда
				ОтказОтВыбора = Ложь;
				л_КаталогОтладки = сбисВыбратьКаталог(сбисПараметрыОтладки.КаталогТест, ОтказОтВыбора);
				Если ОтказОтВыбора Тогда
					РежимОтладки = Ложь;
					сбисПараметрыОтладки.Удалить("РежимВыбора");
					сбисПереключитьОтладку(сбисПараметрыОтладки);
					Возврат;
				КонецЕсли;
				КаталогОтладки = л_КаталогОтладки;
			Иначе
				РежимОтладки = Ложь;
			КонецЕсли;
			сбисПереключитьОтладку(сбисПараметрыОтладки);
			Возврат;
		//Каталог менялся руками, проверить что такой есть
		Иначе
			л_КаталогОтладки = сбисФорматКаталога(КаталогОтладки);
			Файл = Новый Файл(КаталогОтладки);
			Если Не Файл.Существует() Или Не Файл.ЭтоКаталог() Тогда
				сбисПараметрыОтладки.Вставить("КаталогТест", КаталогОтладки);
				сбисПараметрыОтладки.Вставить("РежимВыбора", Истина);
				КаталогОтладки = "";
				сбисПереключитьОтладку(сбисПараметрыОтладки);
				Возврат;
			КонецЕсли;
			КаталогОтладки = л_КаталогОтладки;
		КонецЕсли;
	КонецЕсли;
	Кэш.Парам.РежимОтладки	= РежимОтладки;
	Кэш.Парам.КаталогОтладки= КаталогОтладки;
	сбисЭлементФормы(ЭтаФорма, "КаталогОтладки").Видимость = РежимОтладки;
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	сбисЭлементФормы(ЭтаФорма, "АдресСервисаОбновлений").Видимость = РежимОтладки;
	Если НЕ РежимОтладки ИЛИ АдресСервисаОбновлений = "" Тогда
		АдресСервисаОбновлений = "update.sbis.ru";
		Кэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
	КонецЕсли;
	//--- МАИ 09.09.2021
КонецПроцедуры

//Формирует структуру раздела по его имени из аккордеона. Вынесено в отделную функцию для внешнего интерфейса.
&НаКлиенте
Функция сбисСтруктураВыбранногоРаздела(ЛокальныйКэш, ИмяВыбранногоРаздела) Экспорт
	Выбор = ОпределитьРаздел(ИмяВыбранногоРаздела);
	НазваниеРаздела = ЛокальныйКэш.Разделы["р"+Выбор.Раздел];
	фрм = сбисНайтиФормуФункции("ОбновитьКонтент","Раздел_"+НазваниеРаздела+"_"+Выбор.ТипДок,"Раздел_"+НазваниеРаздела+"_Шаблон", ЛокальныйКэш);
	Выбор.Вставить("Форма", фрм);
	Возврат Выбор;
КонецФункции

//Процедура вынесена из extSDK для возможности вызова сообщения об ошибке не зависимо, от способа обмена.
//СтруктураОшибки - структура с полями "message, details, code"
&НаКлиенте
Процедура СбисСообщитьОбОшибке(ЛокальныйКэш, СтруктураОшибки, ПараметрыОшибки=Неопределено) Экспорт
	
	Если		ЛокальныйКэш.ТихийРежим
		Или	Не	ТипЗнч(СтруктураОшибки) = Тип("Структура")
		Или	Не	СтруктураОшибки.Свойство("message") Тогда//В качестве ошибки пришло неизвестно что, ничего не делать
		Возврат;
	КонецЕсли;
	ТекстОшибки = Строка(СтруктураОшибки.message) + ?(СтруктураОшибки.Свойство("details") И СтруктураОшибки.message <> СтруктураОшибки.details, " (" + СтруктураОшибки.details + ")", "");		
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		фрм						= сбисПолучитьФорму("ФормаОшибка", ЭтотОбъект,,ЭтаФорма);
		фрм.ТекстОшибки			= ТекстОшибки;
		фрм.ИнформацияОбОшибке	= "";
		фрм.ОткрытьМодально(60);
	#Иначе
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстОшибки;
		Если	Не	ПараметрыОшибки = Неопределено//Устанавливаем объект привязки сообщения
			И		ПараметрыОшибки.Свойство("ФормаВладелец") Тогда
			Сообщение.ИдентификаторНазначения = ПараметрыОшибки.ФормаВладелец.УникальныйИдентификатор;
		КонецЕсли;
		Сообщение.Сообщить();
	#КонецЕсли
	//Если не отключено, то отправим информацию о возникшей ошибке
	Если	Не	(	СтруктураОшибки.Свойство("code")
				И	СтруктураОшибки.code = 775)	
		И	(		ПараметрыОшибки = Неопределено
			Или	Не	ПараметрыОшибки.Свойство("Отправлять")
			Или	 	ПараметрыОшибки.Отправлять) Тогда	
		сбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Ошибка", СтруктураОшибки);
		ЛокальныйКэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(ЛокальныйКэш, сбисПараметрыСтатистики, Ложь)
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура сбисПослеПросмотраНовости(Результат, СбисДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат = Ложь Тогда
		ПрочитаннаяНовость = Версия;
		Кэш.Парам.ПрочитаннаяНовость = Версия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СбисУстановитьНастройки(ЛокальныйКэш, УстановленныеИниФайлы, СказатьЧтоВсеХорошо=Ложь, Отказ=Ложь, СбисДополнительныеПараметры=Неопределено) Экспорт
	Перем СтруктураПараметровСбис, СтруктураПараметровСбисИсходная, ИдентификаторНастроек;
	Если УстановленныеИниФайлы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры.Свойство("ИдентификаторНастроек", ИдентификаторНастроек);
		СбисДополнительныеПараметры.Свойство("СтруктураНастроек", СтруктураПараметровСбис);
	КонецЕсли;
	Если ИдентификаторНастроек = Неопределено Тогда
		ИдентификаторНастроек = ЛокальныйКэш.Парам.ИдентификаторНастроек;
	КонецЕсли;
	Если СтруктураПараметровСбис = Неопределено Тогда
		СтруктураПараметровСбис = ЛокальныйКэш.ФормаНастроек.ПолучитьПараметрыСБИС(ЛокальныйКэш, ИдентификаторНастроек, Отказ);
		Если Отказ Тогда
			Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(СтруктураПараметровСбис, "ГлавноеОкно.СбисУстановитьНастройки");
		КонецЕсли;
	КонецЕсли;
	НужнаПроверкаПоИзменениям =		ЛокальныйКэш.ФормаНастроек.СбисОпределитьНеобходимостьПроверки(ЛокальныйКэш, УстановленныеИниФайлы, СтруктураПараметровСбис)
								Или	СказатьЧтоВсеХорошо = Истина;
	
	ПараметрыУстановки = Новый Структура("НеобходимоОбновление", НужнаПроверкаПоИзменениям);
	Если НужнаПроверкаПоИзменениям Тогда
		УстановленныеИниФайлы = ЛокальныйКэш.ФормаНастроек.сбисПроверитьУстановленныеНастройки(ЛокальныйКэш, УстановленныеИниФайлы, ЛокальныйКэш.Ини, СтруктураПараметровСбис, ИдентификаторНастроек);
	Иначе// если не проверяем, то считаем, что с ини все хорошо
		ЛокальныйКэш.ИниВПорядке = Истина;
	КонецЕсли;
	
	ЛокальныйКэш.ФормаНастроек.УстановитьПараметрыИнтеграции_УстановкаНастроек(ЛокальныйКэш, СтруктураПараметровСбис, СбисДополнительныеПараметры, Отказ);
	Если Не ЛокальныйКэш.ИниВПорядке Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = ЛокальныйКэш.ФормаНастроекОбщее.СбисУстановитьВыбранныеНастройки(ЛокальныйКэш, ПараметрыУстановки, СбисДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		ЛокальныйКэш.ИниВПорядке = Ложь;
		Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(Результат, "ГлавноеОкно.СбисУстановитьНастройки");
	Иначе
		Кэш.ФормаНастроек.СохранитьПараметрыСБИС(Кэш, СтруктураПараметровСбис, ИдентификаторНастроек);
		Кэш.Интеграция.УстановитьВидимостьОбновитьСтатусы(Кэш);
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Процедура удаляет установленные файлы настроек	
&НаКлиенте
Процедура УдалитьУстИнифайл(Команда)
	
	Кэш.ФормаНастроекОбщее.сбисОтключитьФайлыНастроек(Кэш);
	
КонецПроцедуры

// процедура устанавливает файлы настроек, выбранные в списке доступных настроек	
&НаКлиенте
Процедура УстановитьНастройки(Команда)
	
	Кэш.ФормаНастроекОбщее.сбисУстановитьФайлыНастроек(Кэш);
	
КонецПроцедуры

//Функция меняет в указанной таблице колонки
&НаСервере
Процедура УстановитьТаблицуФормы(СтруктраДляОбновленияФормы) Экспорт
	
	СтруктураПолей	= СтруктраДляОбновленияФормы.СтруктураПолей;
	КолонкиТаблицы	= ЭтаФорма;
	ПутьККолонкам	= СтрЗаменить(СтруктраДляОбновленияФормы.ПутьККолонкам, ".",	Символы.ПС);
	Для	шаг = 1 По СтрЧислоСтрок(ПутьККолонкам)	Цикл
		КолонкиТаблицы	= КолонкиТаблицы[СтрПолучитьСтроку(ПутьККолонкам,шаг)];
	КонецЦикла;
	
	Если	СтруктураПолей.Свойство("КолонкиИзменить")	Тогда
		Для	Каждого ДанныеКолонки	Из	СтруктураПолей.КолонкиИзменить	Цикл
			ИмяКолонки		= ДанныеКолонки.ПолноеИмяКолонки;
			КолонкаТаблицы	= КолонкиТаблицы.Найти(ИмяКолонки);
			Если	КолонкаТаблицы = Неопределено	Тогда
				Продолжить;
			КонецЕсли;
			
			Для	Каждого	ПараметрРеактировать Из ДанныеКолонки.ПараметрыИзменить	Цикл
				Попытка
					КолонкаТаблицы[ПараметрРеактировать.Ключ]	= ПараметрРеактировать.Значение;
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

/////работа с сохраняемыми значениями/////

//Выполняет запись текущих настроек обработки
//Возвращает истина при успехе, структуру ошибки при неудаче.
&НаКлиенте
Функция СбисСохранитьЗначения(ПараметрыЗаписи, Отказ = Ложь) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		СохранитьЗначение("сбисПарам", ПараметрыЗаписи.Парам);
	#Иначе
		//Делаем через внешний интерфейс.
		Если ПараметрыЗаписи.ВыполнитьВручную Тогда
			Возврат СбисСохранитьЗначенияНаСервере(ПараметрыЗаписи, Отказ);
		//Если делаем вызов перед закрытием, то просто записываем в реквизиты и платформа делает сама стандартым механизмом.
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыЗаписи.Парам, "ТипПрокси, ПроксиЛогин, ПроксиПароль, ПроксиПорт, ПроксиСервер, ВходПоСертификату, ЗапомнитьПароль, ЗапомнитьСертификат, Логин, Пароль, Сертификат, ВремяОжиданияОтвета, ФильтрыПоРазделам");
		КонецЕсли;
	#КонецЕсли
	Возврат Истина;
	
КонецФункции

//Выполняет дозапись указанных настроек в ручном режиме. Необходимо для работы ВИ, без открытия формы
&НаСервере
Функция СбисСохранитьЗначенияНаСервере(ПараметрыЗаписи, Отказ)
	Попытка
		СоответствиеНастроек = ХранилищеСистемныхНастроек.Загрузить(ЭтаФорма.ИмяФормы+"/ТекущиеДанные");
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка чтения из хранилища настроек: " + ОписаниеОшибки());
	КонецПопытки;
	Если СоответствиеНастроек = Неопределено Тогда
		СоответствиеНастроек = Новый Соответствие;
	КонецЕсли;
	Для Каждого КлючИЗначениеОбновить Из ПараметрыЗаписи.Парам Цикл
		СоответствиеНастроек.Вставить(КлючИЗначениеОбновить.Ключ, КлючИЗначениеОбновить.Значение);
	КонецЦикла;
	Попытка
		ХранилищеСистемныхНастроек.Сохранить(ЭтаФорма.ИмяФормы+"/ТекущиеДанные",,СоответствиеНастроек);	
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка записи в хранилище настроек: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина
	
КонецФункции

//Формирует начальную структуру кэша для его дальнейшего заполнения
&НаКлиенте
Функция сбисВосстановитьЗначения(ПараметрыВосстановления=Неопределено, Отказ = Ложь) Экспорт
	НовыйКэш = Кэш;
	Если НовыйКэш = Неопределено Тогда
		НовыйКэш = Новый Структура("СБИС, Парам, ТихийРежим", СформироватьСтруктуруКэшСБИС(Новый Структура("АдресСервера", АдресСервера)), Новый Структура, Ложь);
	КонецЕсли;
	Если	ЗначениеЗаполнено(ПараметрыВосстановления)
		И	ПараметрыВосстановления.Свойство("ТихийРежим") Тогда
		НовыйКэш.ТихийРежим = ПараметрыВосстановления.ТихийРежим;
	КонецЕсли;

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		НовыйКэш.Парам = ВосстановитьЗначение("сбисПарам");
		Если ЗначениеЗаполнено(НовыйКэш.Парам) Тогда//Параметры есть. Заполним предверсию на форме для определения параметров запуска.
			ПредВерсия = НовыйКэш.Парам.ПредВерсия;
		КонецЕсли;
	#КонецЕсли
	Возврат НовыйКэш;
КонецФункции		

/////Вывод списка/////

&НаКлиенте
Процедура сбисВывестиДанныеВТаблДок(Кнопка)
	
	фрм = сбисНайтиФормуФункции("сбисВывестиСписок","Форма_ВывестиСписок","Форма_ВывестиСписок",Кэш);	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		фрм.сбисВывестиСписок(Кэш, ВывестиСписокСфромироватьКонтекстНаСервере(Кэш.ТаблДок.Имя));
	Иначе
		фрм.сбисВывестиСписок(Кэш);
	КонецЕсли;
	
КонецПроцедуры

//УФ функция формирует контекст для вывода списка управляемых форм.
//&НаСервере
Функция ВывестиСписокСфромироватьКонтекстНаСервере(ТабличнаяЧасть)
	
	Контекст	= Новый	Структура();
	КолонкиНеДобавлять	= Новый	Массив;
	
	//На форме списка не выйдет обратиться к колонкам другой формы, поэтому данные по колонкам собираем заранее, на сервере в главном окне.
	Колонки			= ЭтаФорма.Элементы[ТабличнаяЧасть].ПодчиненныеЭлементы;
	
	СтруктураЗаголовков		= Новый	Структура("Видимые, Невидимые", Новый	Структура, Новый	Структура);
	Для	Каждого	Колонка	Из	Колонки	Цикл
		МногострочныйПуть	= СтрЗаменить(Колонка.ПутьКДанным,".",Символы.ПС);
		Если	Колонка.Видимость
			И	Колонка.Доступность	Тогда
			СтруктураЗаголовков.Видимые.Вставить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)), Колонка.Заголовок);
		Иначе
			Если	Колонка.Доступность	Тогда
				СтруктураЗаголовков.Невидимые.Вставить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)), Колонка.Заголовок);
			Иначе
				КолонкиНеДобавлять.Добавить(СтрПолучитьСтроку(МногострочныйПуть,СтрЧислоСтрок(МногострочныйПуть)));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Проверим невидимые элементы
	ТабличнаяЧастьКолонкиВсе = ЭтаФорма.РеквизитФормыВЗначение(ТабличнаяЧасть, Тип("ТаблицаЗначений")).СкопироватьКолонки();
	Для	Каждого	Колонка	Из	ТабличнаяЧастьКолонкиВсе.Колонки	Цикл
		Если	СтруктураЗаголовков.Видимые.Свойство(Колонка.Имя)
			Или		СтруктураЗаголовков.Невидимые.Свойство(Колонка.Имя)
			Или	Не	КолонкиНеДобавлять.Найти(Колонка.Имя)=Неопределено Тогда
			Продолжить;
		Иначе
			СтруктураЗаголовков.Невидимые.Вставить(Колонка.Имя, Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;
	
	Если	Не	СтруктураЗаголовков.Видимые.Количество()
		И	Не	СтруктураЗаголовков.Невидимые.Количество()	Тогда
		СтруктураЗаголовков	= Неопределено;
	КонецЕсли;
	
	Контекст.Вставить("СтруктураЗаголовков",	СтруктураЗаголовков);
	Контекст.Вставить("ТабличнаяЧасть",			ТабличнаяЧасть);
	Контекст.Вставить("Данные", ЗначениеВСтрокуВнутр(ЭтаФорма[ТабличнаяЧасть].Выгрузить()));
	
	Возврат	Контекст;
	
КонецФункции

/////Аккордеон/////

&НаСервере
Процедура РазделЗаполнитьНаСервере(Знач НазваниеРаздела, Знач НомерРаздела, Знач МассивНазванийКнопок) Экспорт 
	
	ЧтениеHTML		= Новый ЧтениеHTML;
	ЗаписьHTML		= Новый ЗаписьHTML;
	ЗаписьDOM		= Новый ЗаписьDOM;  
	ПостроительDOM	= Новый ПостроительDOM;
	
	ТекстHTML = ПолучитьТекстHTML(НомерРаздела);
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	ЗаписьHTML.УстановитьСтроку();
	
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	ИмяКнопкиПодраздела	= "Аккордеон" + НазваниеРаздела + НомерРаздела + НомерРаздела;
	КнопкаПодраздела	= ДокументDOM.ПолучитьЭлементПоИдентификатору(ИмяКнопкиПодраздела); 
	
	//Удалим кнопки-подразделы перед заполнением
	ПроверяемаяСтрока	= КнопкаПодраздела.РодительскийУзел.СледующийСоседний;
	Родитель			= ПроверяемаяСтрока.РодительскийУзел;
	Пока Найти(ПроверяемаяСтрока.ПервыйДочерний.Идентификатор, "Аккордеон" + НазваниеРаздела + "Док") Цикл
		УдаляемыйУзел		= ПроверяемаяСтрока;
		ПроверяемаяСтрока	= ПроверяемаяСтрока.СледующийСоседний;
		Родитель.УдалитьДочерний(УдаляемыйУзел);
	КонецЦикла;	
	
	КнопкаСледПодраздела= КнопкаПодраздела.РодительскийУзел.СледующийСоседний;
	УзелТаблицы			= КнопкаПодраздела.РодительскийУзел.РодительскийУзел;
	
	КолРазделов	= МассивНазванийКнопок.Количество();
	сч			= 0;
	Пока сч < КолРазделов Цикл
		НовыйУзел		= ДокументDOM.СоздатьЭлемент("tr");
		УзелНоваяСтрока	= УзелТаблицы.ВставитьПеред(НовыйУзел, КнопкаСледПодраздела);
		
		НовыйУзел = ДокументDOM.СоздатьЭлемент("td");
		НовыйУзел.ТекстовоеСодержимое	= МассивНазванийКнопок[сч];
		НовыйУзел.Идентификатор			= "Аккордеон" + НазваниеРаздела + "Док" + строка(сч) + НомерРаздела + НомерРаздела;
		НовыйУзел.ИмяКласса				= "item";
		
		УзелНоваяЯчейка = УзелНоваяСтрока.ДобавитьДочерний(НовыйУзел);
		
		сч = сч + 1;
	КонецЦикла;
	
	ЗаписьDOM.Записать(ДокументDOM,ЗаписьHTML);
	ЭтаФорма.Аккордеон.Вставить("Аккордеон" + НомерРаздела, ЗаписьHTML.Закрыть());	
	
КонецПроцедуры

//Устанавливаем видимость вкладок в зависимости от способа обмена	
&НаКлиенте
Процедура УстановитьВидимостьЭлементовПоСпособуОбмена()
	ПолученныеОтправленныеВидимость = Истина;
	Если		СпособОбмена = 1 Тогда// Каталог
		МассовыеОперацииВидимость = Ложь;
		сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость	= Истина;
		сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость	= Ложь;
		сбисЭлементФормы(ЭтаФорма, "ВестиЛог").Видимость		= Ложь;
	ИначеЕсли	СпособОбмена = 3 Тогда// апи
		сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость	= Ложь;
		сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость	= Ложь;
		сбисЭлементФормы(ЭтаФорма, "ВестиЛог").Видимость		= Ложь;
	Иначе// SDK, EXTSDK
		сбисЭлементФормы(ЭтаФорма, "КаталогОбмена").Видимость	= Ложь;
		сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость	= Истина;
		сбисЭлементФормы(ЭтаФорма, "ВестиЛог").Видимость		= Истина;
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма, "ШифроватьВыборочно").Видимость = (СпособОбмена=5 Или СпособОбмена=7);
	сбисЭлементФормы(ЭтаФорма, "ВремяОжиданияОтвета").Видимость = СпособОбмена=0 Или СпособОбмена=4 Или СпособОбмена=5 Или СпособОбмена=6 Или СпособОбмена=7;
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		УстановитьВидимостьЭлементовПоСпособуОбменаНаСервере();
		//Мог быть изменен состав кнопок, поэтому нужно обновить их сразу, не дожидаясь перехода.
		Если ЗначениеЗаполнено(Кэш.Текущий) Тогда
			ЭтаФорма.Аккордеон.Свойство("Аккордеон" + Кэш.Текущий.Раздел, ЭтаФорма.АккордеонHTML);
		КонецЕсли;
	Иначе
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные3").Видимость = ПолученныеОтправленныеВидимость;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные4").Видимость = ПолученныеОтправленныеВидимость;	
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные5").Видимость = ПолученныеОтправленныеВидимость;
		сбисЭлементФормы(ЭтаФорма, "ПанельПолученныеОтправленные6").Видимость = ПолученныеОтправленныеВидимость;
	КонецЕсли;
КонецПроцедуры

//Формирует HTML строки для отрисовки аккордеона на УФ
&НаСервере
Процедура УстановитьВидимостьЭлементовПоСпособуОбменаНаСервере()
	
	Для Шаг = 1 По 7 Цикл
		НомерРаздела = Строка(Шаг);
		ТекстHTML = ПолучитьТекстHTML(НомерРаздела);
		Если СпособОбмена = 1 Тогда
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонДокОтгрВх11",	"<tr style=""display: none;""><td id=""АккордеонДокОтгрВх11");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонКоррВх11",	"<tr style=""display: none;""><td id=""АккордеонКоррВх11");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонАктСверВх11",	"<tr style=""display: none;""><td id=""АккордеонАктСверВх11");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонДоговорВх11",	"<tr style=""display: none;""><td id=""АккордеонДоговорВх11");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонЗаказВх11",	"<tr style=""display: none;""><td id=""АккордеонЗаказВх11");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонСчетВх11",	"<tr style=""display: none;""><td id=""АккордеонСчетВх11");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонОтправленные","<tr style=""display: none;""><td id=""АккордеонОтправленные");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<tr><td id=""АккордеонУчет",		"<tr style=""display: none;""><td id=""АккордеонУчет");
		Иначе
			ТекстHTML = СтрЗаменить(ТекстHTML,"<tr style=""display: none;""><td id=""АккордеонПолученные",	"<tr><td id=""АккордеонПолученные");
			ТекстHTML = СтрЗаменить(ТекстHTML,"<tr style=""display: none;""><td id=""АккордеонОтправленные","<tr><td id=""АккордеонОтправленные");
			ТекстHTML = СтрЗаменить(ТекстHTML,"<tr style=""display: none;""><td id=""АккордеонУчет",		"<tr><td id=""АккордеонУчет");
			
		КонецЕсли;
		ВключитьЗадачи = СпособОбмена=3 Или СпособОбмена=4 Или СпособОбмена=5 Или СпособОбмена=6 Или СпособОбмена=7;
		ШаблонЗадачиВключить	= "<tr><td id=""АккордеонЗадачи";
		ШаблонЗадачиВыключить	= "<tr style=""display: none;""><td id=""АккордеонЗадачи";
		СтрокаЗамены2	= ?(ВключитьЗадачи, ШаблонЗадачиВключить, ШаблонЗадачиВыключить);
		СтрокаЗамены1	= ?(ВключитьЗадачи, ШаблонЗадачиВыключить, ШаблонЗадачиВключить);
		ТекстHTML = СтрЗаменить(ТекстHTML, СтрокаЗамены1, СтрокаЗамены2);
		
		ЭтаФорма.Аккордеон.Вставить("Аккордеон" + НомерРаздела, ТекстHTML);		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстHTML(НомерРаздела)
	Возврат ЭтаФорма.Аккордеон["Аккордеон" + НомерРаздела];
КонецФункции

////////////////////////////////////////////////////
////////////////Запуск, установка кэш///////////////
////////////////////////////////////////////////////

// Процедура заполняет структуру Кэша	
&НаКлиенте
Функция КэшПодготовить(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	сбисПоказатьСостояние("Установка параметров", ЭтаФорма);
	
	Кэш = сбисВосстановитьЗначения(СбисДополнительныеПараметры);
	
	сбисПараметрыСистемы = ПолучитьПараметрыСистемы(Отказ);
	Если Отказ Тогда
		Возврат сбисПараметрыСистемы;
	КонецЕсли;
	Кэш.Вставить("ПараметрыСистемы", сбисПараметрыСистемы);
	Версия = Кэш.ПараметрыСистемы.Обработка.Версия;
	
	КэшТекущегоСеанса = Новый Структура("Формы, Функции, РасчитанныеЗначения", Новый Структура("Получены", Новый Структура), Новый Структура, Новый Структура);
	КэшТекущегоСеанса.Формы.Вставить("Клиентские",	Новый СписокЗначений);
	КэшТекущегоСеанса.Формы.Вставить("Стандартные",	ЗаполнитьСписокФорм());
	Кэш.Вставить("ТекущийСеанс", КэшТекущегоСеанса);
	
	СбисОбщиеФункции = СбисПолучитьФорму("РаботаСДокументами1С"); 
	Если сбисОбщиеФункции = Ложь Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 776, "Запуск программы/функции/метода не удался", "Не удалось определить модули для работы внешней обработки. Обратитесь в техническую поддержку.");
	КонецЕсли;
	сбисОбщиеФункции.МестныйКэш = Кэш;
	
	Кэш.Вставить("Заплатки", Ложь);
	Кэш.Вставить("ВИ", сбисПолучитьФорму("SDK2"));
	Кэш.Вставить("Плагин", Неопределено);//Делать через Кэш.Интеграция при включенном ExtSDK.
	Кэш.Вставить("Текущий",Новый Структура());
	Кэш.Текущий.Вставить("Раздел","");
	Кэш.Текущий.Вставить("ТекущийРаздел","");
	Кэш.Текущий.Вставить("Имя","");
	Кэш.Текущий.Вставить("ТипДок","");
	Кэш.Текущий.Вставить("ПредыдущийРаздел",Неопределено);
	
	Кэш.Вставить("ТаблДок","");
	Кэш.Вставить("ГлавноеОкно",ЭтаФорма);
	Кэш.Вставить("ФормаНастроекОбщее",	сбисПолучитьФорму("ФайлыНастроекОбщее"));
	Кэш.Вставить("ОбщиеФункции",		сбисОбщиеФункции);
	Кэш.Вставить("РаботаСJSON",			сбисПолучитьФорму("РаботаСJSON"));
	Кэш.Вставить("ИниВПорядке",Ложь);//ини файлы есть и в них нет ошибок.
	//Кэш.С1.Вставить("ДокументСБИС_Ид",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Ид"));
	//Кэш.С1.Вставить("ДокументСБИС_Статус",Кэш.ОбщиеФункции.ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Статус"));
	
	Кэш.Вставить("Разделы",Новый Структура());
	Кэш.Разделы.Вставить("р1","Полученные");
	Кэш.Разделы.Вставить("р2","Отправленные");
	Кэш.Разделы.Вставить("р3","Продажа");
	Кэш.Разделы.Вставить("р4","Покупка");
	Кэш.Разделы.Вставить("р5","Настройки");
	Кэш.Разделы.Вставить("р6","Справочники");
	Кэш.Разделы.Вставить("р7","Учет");
	Кэш.Разделы.Вставить("р8","Задачи");
	
	Кэш.Разделы.Вставить("Продажа",Новый Структура());
	Кэш.Разделы.Вставить("Покупка",Новый Структура());
	Кэш.Разделы.Вставить("Справочники",Новый Структура());
	Кэш.Вставить("МенюРазделов", Новый Структура());
	
	Если Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Кэш.Вставить("ПараметрыФильтра", Новый Структура);
	КонецЕсли;
	Кэш.Вставить("ТипыПолейФильтра", Новый Структура);
	Кэш.Вставить("ИспользоватьОбработчикиСобытий", Ложь);
	
	Кэш.Вставить("ини",Новый Структура());
	Кэш.Вставить("Цвет",Новый Структура());
	Кэш.Цвет.Вставить("АктивныйПункт",Новый Цвет(255,112,51));
	Кэш.Цвет.Вставить("ФонАктивныйРаздел",Новый Цвет(247,243,240));
	Кэш.Цвет.Вставить("ФонПассивныйРаздел",Новый Цвет(251,251,251));
	Кэш.Цвет.Вставить("ТекстАктивныйРаздел",Новый Цвет(0,0,0));
	Кэш.Цвет.Вставить("ТекстПассивныйРаздел",Новый Цвет(153,153,153));
	Кэш.Цвет.Вставить("ФонОшибки",Новый Цвет(255,209,209));
	
	Кэш.Вставить("Реестры",Новый Структура());
	Кэш.Вставить("КэшЗначенийИни",Новый Структура());
	Кэш.Вставить("КэшСертификатов",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("ТекущийПакет",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("Организации",Новый Структура());
	Кэш.КэшЗначенийИни.Вставить("РеквизитСопоставленияНоменклатуры","");
	Кэш.КэшЗначенийИни.Вставить("ИниЗагрузки",Новый Структура);
	// Пользовательские фильтры
	Кэш.Вставить("ПараметрыФильтра", Новый Структура());
	Кэш.Вставить("ФормаРаботыСоСтатусами","Статусы_Регистры");
	// Дополнительные вложения, прикладываются к каждому отправляемому пакету
	Кэш.Вставить ("ДопВложение",Новый Массив);
	Кэш.Вставить("СписокНоменклатуры",Новый СписокЗначений);
	Кэш.Вставить("КоличествоВОтправке", 100);
	Кэш.Вставить("КоличествоПотоковОтправки", 10);
	Кэш.Вставить("ПодготовленныеКОтправке", Новый Массив);
	Кэш.Вставить("НеобработанныеОтветыОтправки", Новый Массив);
	//Кэш.Вставить("СБИС.ДанныеИнтеграции.Плагин.НеобработанныеОтветы", Новый Структура);
	Кэш.Вставить("КэшНастроек", Новый Структура);
	Кэш.Вставить("СовместимостьМетодов", сбисСовместимостьМетодов(Кэш));
	
	Если ЗначениеЗаполнено(СбисДополнительныеПараметры) Тогда
		Для Каждого КлючИЗначение Из СбисДополнительныеПараметры Цикл
			Если КлючИЗначение.Ключ = "Парам" Тогда
				Продолжить;
			КонецЕсли;
			Кэш.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат Кэш;
КонецФункции

//Устанавливает в Кэш формы для работы с настройками и методами работы с сервисом
&НаКлиенте
Функция ОпределитьИнтеграциюРабочиеФормы(Кэш, ПараметрыИнтеграции, СбисДополнительныеПараметры=Неопределено)	Экспорт
	
	#Если ВебКлиент Тогда
		// для веб ставим всегда АПИ
		ПараметрыИнтеграции.СпособОбмена = 3;
	#КонецЕсли
	
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВызыватьРекурсивно") Тогда
		СбисДополнительныеПараметры.Вставить("ВызыватьРекурсивно", Истина);
	КонецЕсли;
	Если НЕ СбисДополнительныеПараметры.Свойство("ВключатьОбмен") Тогда
		СбисДополнительныеПараметры.Вставить("ВключатьОбмен", Истина);
	КонецЕсли;
	
	//Переделал передачу параметров на структуру, чтобы нормально добавить адрес сервера и его дальнейшую передачу
	ПараметрыИнтеграции_До = Новый Структура("СпособОбмена, СпособХраненияНастроек, АдресСервера");
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции_До, ПараметрыИнтеграции);
	
	сбисПоказатьСостояние("Подключение SDK", ЭтаФорма);
	ОпределитьФормуИнтеграции(Кэш, ПараметрыИнтеграции.СпособОбмена);
	ОпределитьФормуРаботыСНастройками(Кэш, ПараметрыИнтеграции.СпособОбмена, ПараметрыИнтеграции.СпособХраненияНастроек);	
	
	ВключениеВыполнено = Ложь;
	Если СбисДополнительныеПараметры.ВызыватьРекурсивно Тогда
		Результат = Кэш.ФормаНастроек.УстановитьПараметрыИнтеграции_ДоВключения(Кэш,ПараметрыИнтеграции,СбисДополнительныеПараметры,ВключениеВыполнено);
		Если ВключениеВыполнено Тогда//Если менялись параметры соединения, например, изменен в каталоге изменен адрес сервера, то включение уже выполнялось через рекурсивный вызов и повторно делать незачем
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Кэш.Вставить("ФормаОтправки", Кэш.Интеграция);
	
	Если Не Кэш.ТихийРежим//Включаем интеграцию сразу, только если не вызов извне и запуск не был отменен специально
		И	СбисДополнительныеПараметры.ВключатьОбмен Тогда
		ОбменВключен	= Кэш.Интеграция.Включить(Кэш, ПараметрыИнтеграции);
		ВерсияИнтеграции= Кэш.СБИС.ПараметрыИнтеграции.Версия;
		Если Не ОбменВключен = Истина Тогда
			сбисСпрятатьСостояние(ЭтаФорма);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	//Дошли досюда, значит всё должно быть включено. Проверим, что в процессе включения ничего не поменялось 
	УспешноУстнановлено = Истина;
	ЗначениеПараметра = Неопределено;
	Для Каждого КлючИЗначение Из ПараметрыИнтеграции_До Цикл
		Если Не ПараметрыИнтеграции.Свойство(КлючИЗначение.Ключ, ЗначениеПараметра) 
			Или ЗначениеПараметра= КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		УспешноУстнановлено = Ложь;
		Прервать;
	КонецЦикла;
	сбисСпрятатьСостояние(ЭтаФорма);
	Возврат УспешноУстнановлено;	
	
КонецФункции

//Устанавливает в Кэш форму, в зависимости от установленного способа обмена
&НаКлиенте
Процедура ОпределитьФормуИнтеграции(ЛокальныйКэш,ВидОбмена) Экспорт
	// кладем в кэш форму интеграции в зависимости от способа обмена
	// удалить
	ЛокальныйКэш.Вставить("КоличествоВОтправке", 100);
	//
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		НадписьSDK = "ВерсияИнтеграции";
	Иначе
		НадписьSDK = "НадписьВерсияИнтеграции";
	КонецЕсли;
	ИнтеграцияЗаголовок = "";
	Если ВидОбмена=0 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","SDK2");
		ИнтеграцияЗаголовок = "SDK2";
	ИначеЕсли ВидОбмена=2 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("SDK2Шифрование"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","SDK2Шифрование");
		ИнтеграцияЗаголовок = "SDK2";
	ИначеЕсли ВидОбмена=3 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("API"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","API");
		ИнтеграцияЗаголовок = "API";
	ИначеЕсли ВидОбмена=1 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ИнтеграцияКаталог"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ИнтеграцияКаталог");
		ИнтеграцияЗаголовок = "Каталог";
	ИначеЕсли ВидОбмена=4 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK");
		ИнтеграцияЗаголовок = "ExtSDK";
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
	ИначеЕсли ВидОбмена=5 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDKCrypto"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDKCrypto");
		ИнтеграцияЗаголовок = "ExtSDKCrypto";
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
	ИначеЕсли ВидОбмена=6 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK2"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK2");
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
		ИнтеграцияЗаголовок = "ExtSDK2";
	ИначеЕсли ВидОбмена=7 Тогда
		ЛокальныйКэш.Вставить("Интеграция",сбисПолучитьФорму("ExtSDK2Crypto"));
		ЛокальныйКэш.Вставить("ИнтеграцияИмя","ExtSDK2Crypto");
		ЛокальныйКэш.Вставить("КоличествоВОтправке", 1);
		ИнтеграцияЗаголовок = "ExtSDK2Crypto";
	КонецЕсли;
	Если Не ЛокальныйКэш.ТихийРежим Тогда
		сбисЭлементФормы(ЭтаФорма, НадписьSDK).Заголовок = ИнтеграцияЗаголовок;
	КонецЕсли;
	
	ЛокальныйКэш.Вставить("ФормаОтправки", ЛокальныйКэш.Интеграция);
КонецПроцедуры

//Устанавливает в Кэш форму, в зависимости от выбранного способа хранения настроек
&НаКлиенте
Процедура ОпределитьФормуРаботыСНастройками(ЛокальныйКэш, ВидОбмена, ВидХраненияНастроек) Экспорт
	
	Если ВидХраненияНастроек = 1 Тогда
		Если ЛокальныйКэш.Интеграция.ДоступныСерверныеНастройки() Тогда
			ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекСервер"));
		Иначе
			ВидХраненияНастроек	= 0;
			//Сообщить("Не удалось включить получение настроек с сервера! Для указанного способа обмена отсутствует возможность!", СтатусСообщения.Информация);
			ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекКаталог"));
		КонецЕсли;
	Иначе
		ЛокальныйКэш.Вставить("ФормаНастроек",сбисПолучитьФорму("ФайлыНастроекКаталог"));
	КонецЕсли;
	ЛокальныйКэш.ФормаНастроек.ПараметрыРаботы = Новый Структура;
	ЛокальныйКэш.ФормаНастроек.ИнициализироватьКэшНастроек(ЛокальныйКэш);
	ЛокальныйКэш.Парам.ИдентификаторНастроек = ЛокальныйКэш.ФормаНастроек.сбисПолучитьИдентификаторНастроек(ЛокальныйКэш);		
	
КонецПроцедуры

// Начальное заполнение всех необходимых для работы объектов	
&НаКлиенте
Функция ПослеОткрытияЗаполнитьКэш(СбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	ПодключитьРасширениеРаботыСФайлами();
	РезультатПодготовки = КэшПодготовить(СбисДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат РезультатПодготовки;
	КонецЕсли;
	СбисПолучитьПарам(СбисДополнительныеПараметры);
	ОпределитьИнтеграциюРабочиеФормы(Кэш, Кэш.Парам);
	
	СпособОбмена			= Кэш.Парам.СпособОбмена;
	СпособХраненияНастроек	= Кэш.Парам.СпособХраненияНастроек;
	Возврат Кэш;
КонецФункции

// Начально заполнение всех необходимых для работы объектов	
&НаКлиенте
Процедура ПослеУстановитьРасширениеРаботыСФайлами(Результат=Неопределено) Экспорт
	ОтказЗапуска = Ложь;
	РезультатЗапуска = ПослеОткрытияЗаполнитьКэш(,ОтказЗапуска);
	Если ОтказЗапуска Тогда
		сбисСообщитьОбОшибке(Кэш, РезультатЗапуска);
	Иначе
		ПослеОткрытияАвторизация();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияАвторизация(СбисДополнительныеПараметры=Неопределено) Экспорт
	// Включаем логирование
	сбисЭлементФормы(ЭтаФорма, "КаталогЛогов").Видимость = ВестиЛог;
	Если ВестиЛог Тогда
		Кэш.Интеграция.ВключитьЛогирование(Кэш, КаталогЛогов, 9);
	КонецЕсли;
	Если СбисДополнительныеПараметры = Неопределено Тогда
		СбисДополнительныеПараметры = Новый Структура;
	КонецЕсли;

	Если Кэш.Парам.СпособОбмена = 1 Тогда//Для каталога пропускаем авторизацию.
		ПослеОткрытияЗавершение(СбисДополнительныеПараметры);
	Иначе
		// Авторизация
		сбисПоказатьСостояние("Авторизация", ЭтаФорма);
		формаАвторизации = сбисПолучитьФорму("ФормаАвторизация",,,ЭтаФорма);
		Если	(	Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьСертификат)
			Или (Не Кэш.Парам.ВходПоСертификату И Кэш.Парам.ЗапомнитьПароль) Тогда
			формаАвторизации.ЗагрузитьПараметрыАвторизации(Кэш);
			УспешнаяАвторизация = формаАвторизации.Авторизоваться();
		КонецЕсли;
		Если УспешнаяАвторизация = Истина Тогда
			сбисПослеАвторизации(УспешнаяАвторизация,СбисДополнительныеПараметры);
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Результат = формаАвторизации.ОткрытьМодально();
				сбисПослеАвторизации(Результат,СбисДополнительныеПараметры);
			#Иначе
				формаАвторизации.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеАвторизации",ЭтаФорма,СбисДополнительныеПараметры);
				формаАвторизации.Открыть();
			#КонецЕсли
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияЗавершение(СбисДополнительныеПараметры=Неопределено)
	// Начально заполнение всех необходимых для работы объектов	
	ПовторныйЗапуск = Ложь;//Проверим необходимость выполнения всех операций.
	Отказ = Ложь;
	Если Не	СбисДополнительныеПараметры = Неопределено Тогда
		Если СбисДополнительныеПараметры.Свойство("ПовторныйЗапуск") Тогда
			ПовторныйЗапуск = СбисДополнительныеПараметры.ПовторныйЗапуск;
		КонецЕсли;
	КонецЕсли;
	
	СбисПолучитьУстановитьНастройки(Кэш, Ложь, Отказ);	

	УстановитьВидимостьЭлементовПоСпособуОбмена();
	ВсеДокументы = Ложь;
	ФильтрСтраница = 1;
	
	Если Не ПовторныйЗапуск Тогда
		Если Кэш.ПараметрыСистемы.Обработка.НоваяВерсия Тогда
			ОшибкаПриОбновлении = Ложь;
			Кэш.ОбщиеФункции.СбисДействияПриОбновленииВерсии(Кэш, Кэш.Парам.ПредВерсия, Версия, ОшибкаПриОбновлении);
			Если Не ОшибкаПриОбновлении Тогда
				ПредВерсия			= Версия;
				Кэш.Парам.ПредВерсия= Версия;
				Кэш.ПараметрыСистемы.Обработка.НоваяВерсия = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если	Не ЗначениеЗаполнено(Кэш.Текущий.ТекущийРаздел)
			Или	Не Кэш.Текущий.ТекущийРаздел = "5"	Тогда
			Если Отказ Тогда
				сбисЗначениеРаздела = "АккордеонФайлыНастроек55";
			ИначеЕсли СпособОбмена = 1 Тогда
				сбисЗначениеРаздела = "АккордеонПродажа33";
			Иначе
				сбисЗначениеРаздела = сбисПолучитьРазделПоУмолчанию(РазделПоУмолчанию);
			КонецЕсли;
			ПерейтиВРаздел(сбисЗначениеРаздела);
		КонецЕсли;
		ФильтрОбновитьПанель();
		Если ПроверятьОбновления Тогда
			//Для корректного отображения окна диалога, вызываем проверку обновления после запуска
			ЭтаФорма.ПодключитьОбработчикОжидания("сбисПроверитьНаличиеОбновленийАвто", 0.1, Истина);
		КонецЕсли;
		Если ПрочитаннаяНовость <> Версия Тогда
			ФормаНовости = сбисПолучитьФорму("ФормаНовости",,,ЭтаФорма);
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ФормаНовости.Показать(Кэш);
			#Иначе
				ФормаНовости.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисПослеПросмотраНовости",ЭтаФорма,СбисДополнительныеПараметры);
				ФормаНовости.Открыть();
			#КонецЕсли
		КонецЕсли;
		сбисПоследняяВерсия(Кэш);
	ИначеЕсли	СбисДополнительныеПараметры.Свойство("ИзмененаФормаНастроек")
			И	СбисДополнительныеПараметры.Свойство("РазделДо")
			И	СбисДополнительныеПараметры.ИзмененаФормаНастроек
			И	СбисДополнительныеПараметры.РазделДо = Кэш.Текущий.ТипДок
			И	Кэш.Текущий.ТипДок = "ФайлыНастроек" Тогда
		ПерейтиВРаздел("АккордеонФайлыНастроек55");
	ИначеЕсли	СбисДополнительныеПараметры.Свойство("ОбновитьКонтент")
			И	СбисДополнительныеПараметры.ОбновитьКонтент Тогда 
		ОбновитьКонтент();
	КонецЕсли;
	
 	сбисСпрятатьСостояние(ЭтаФорма);				

КонецПроцедуры

&НаКлиенте
Процедура сбисПоследняяВерсия(Кэш)
	Отказ = Ложь;
	сбисПараметрыОбновления = Кэш.ОбщиеФункции.сбисПараметрыСервисаОбновления(Кэш);
	сбисПараметрыОбновления.Вставить("ИмяФайла", КаталогВременныхФайлов() + "version.tmp");
	сбисПараметрыОбновления.URL = сбисПараметрыОбновления.URL + "version"  + ?(Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение, "_UF", "") + ".txt";
	РезультатЧтения = Кэш.Интеграция.сбисПолучитьПараметрыАктуальнойВерсии(Кэш, сбисПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	сбисВерсияНаСервере = Новый ЧтениеТекста(сбисПараметрыОбновления.ИмяФайла);
	сбисВерсияНаСервере = сбисВерсияНаСервере.ПрочитатьСтроку();
	Если Кэш.ОбщиеФункции.ЭтоНоваяВерсия(сбисВерсияНаСервере, Кэш.ПараметрыСистемы.Обработка.Версия) Тогда
		ЭлементВерсия = сбисЭлементФормы(ЭтаФорма, "Версия");
		ЭлементВерсия.Подсказка = "Есть более свежая версия обработки (" + сбисВерсияНаСервере +")";
		ЭлементВерсия.Шрифт = Новый Шрифт(,,Истина);
		ЭлементВерсия.ЦветТекста = Новый Цвет(255,0,0);
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет сохраняемые параметры обработки	
&НаКлиенте
Процедура СбисПолучитьПарам(СбисДополнительныеПараметры=Неопределено) Экспорт
	ЗначПоУмолчанию = Новый Структура;
	ЗначПоУмолчанию.Вставить("Логин","");
	ЗначПоУмолчанию.Вставить("Пароль","");
	ЗначПоУмолчанию.Вставить("Сертификат","");
	ЗначПоУмолчанию.Вставить("ТипПрокси","Автоматически");
	ЗначПоУмолчанию.Вставить("ПроксиЛогин","");
	ЗначПоУмолчанию.Вставить("ПроксиПароль","");
	ЗначПоУмолчанию.Вставить("ПроксиПорт","");
	ЗначПоУмолчанию.Вставить("ПроксиСервер","");
	ЗначПоУмолчанию.Вставить("ЗапомнитьПароль",Ложь);
	ЗначПоУмолчанию.Вставить("ЗапомнитьСертификат",Ложь);
	ЗначПоУмолчанию.Вставить("ВходПоСертификату",Ложь);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице",50);
	ЗначПоУмолчанию.Вставить("ЗаписейНаСтранице1С",50);
	ЗначПоУмолчанию.Вставить("РежимСопоставления",1);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоСумме",0);
	ЗначПоУмолчанию.Вставить("СопоставлениеПоНомеру","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоДате","Точное совпадение");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоКонтрагенту","По ИНН/КПП");
	ЗначПоУмолчанию.Вставить("СопоставлениеПоОрганизации","Не использовать");
	ЗначПоУмолчанию.Вставить("СопоставлениеПериод","Дата документа");
	ЗначПоУмолчанию.Вставить("СопоставлятьПередЗагрузкой",Истина);
	ЗначПоУмолчанию.Вставить("ПроверятьОбновления",Истина);
	ЗначПоУмолчанию.Вставить("КаталогОтладки", "");
	//ЗначПоУмолчанию.Вставить("ОбновлятьСтатусы",Ложь);
	//ЗначПоУмолчанию.Вставить("ОбрабатыватьСлужебные",Ложь);
	ЗначПоУмолчанию.Вставить("ПредВерсия","");
	//ЗначПоУмолчанию.Вставить("ДатаПоследнегоЗапросаСтатусов","");
	//ЗначПоУмолчанию.Вставить("ИдентификаторПоследнегоСобытия", "");
	ЗначПоУмолчанию.Вставить("ВариантВыгрузкиОтвПодр", 0);
	ЗначПоУмолчанию.Вставить("КолПакетовВОтправке", 0);
	ЗначПоУмолчанию.Вставить("ВестиЛог",Ложь);
	ЗначПоУмолчанию.Вставить("КаталогЛогов","");
	ЗначПоУмолчанию.Вставить("КаталогНастроек","");
	ЗначПоУмолчанию.Вставить("ИдентификаторыНастроекВСБИС",Новый СписокЗначений);
	ЗначПоУмолчанию.Вставить("ИдентификаторНастроек","");
	ЗначПоУмолчанию.Вставить("СпособОбмена",4);
	ЗначПоУмолчанию.Вставить("СпособХраненияНастроек",0);
	ЗначПоУмолчанию.Вставить("КаталогОбмена","");
	ЗначПоУмолчанию.Вставить("УдалятьПрефиксИнформационнойБазы",Ложь);
	ЗначПоУмолчанию.Вставить("УдалятьПользовательскийПрефикс",Ложь);
	ЗначПоУмолчанию.Вставить("РазделПоУмолчанию","Полученные");
	ЗначПоУмолчанию.Вставить("ОтправлятьНоменклатуруСДокументами",Истина);
	ЗначПоУмолчанию.Вставить("СпособЗагрузки",0);
	ЗначПоУмолчанию.Вставить("ИдентификаторСессии","");
	ЗначПоУмолчанию.Вставить("ПрочитаннаяНовость","");
	ЗначПоУмолчанию.Вставить("СостояниеЭД",Ложь);	// alo
	ЗначПоУмолчанию.Вставить("Меркурий",Ложь);	// alo Меркурий
	ЗначПоУмолчанию.Вставить("ПолнаяВерсияПродукта", Кэш.ПараметрыСистемы.Обработка.ПолнаяВерсия);
	ЗначПоУмолчанию.Вставить("ЧтениеНастроекПоТребованию",	Истина);
	ЗначПоУмолчанию.Вставить("ШифроватьВыборочно", Ложь);
	ЗначПоУмолчанию.Вставить("АдресСервера", СбисСписокСерверов()[0].Значение);
	ЗначПоУмолчанию.Вставить("НастройкиАвтообновление", Истина);
	ЗначПоУмолчанию.Вставить("ИнтеграцияAPIВызовыНаКлиенте", Ложь);
	ЗначПоУмолчанию.Вставить("ФорматУКД2020", Ложь);
	ЗначПоУмолчанию.Вставить("ВремяОжиданияОтвета", 60);//Время ожидания ответа (для плагина)
	ФильтрыПоРазд = Новый Структура();
	ФильтрыПоРазд.Вставить("Полученные", Новый Структура);
	ФильтрыПоРазд.Вставить("Отправленные", Новый Структура);
	ФильтрыПоРазд.Вставить("Продажа", Новый Структура);
	ФильтрыПоРазд.Вставить("Покупка", Новый Структура);
	ФильтрыПоРазд.Вставить("Задачи", Новый Структура);
	ФильтрыПоРазд.Вставить("Учет", Новый Структура);
	ЗначПоУмолчанию.Вставить("ФильтрыПоРазделам", ФильтрыПоРазд);
	ЗначПоУмолчанию.Вставить("ИспользоватьГенератор", Ложь);
	
	//Если первый запуск происходит на серверной БД с Линуксом
	Если	ЗначениеЗаполнено(Кэш.ПараметрыСистемы)
		И	Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск
		И	Кэш.ПараметрыСистемы.Сервер.ЭтоLinux Тогда
		ЗначПоУмолчанию.СпособХраненияНастроек = 1;
	КонецЕсли;
	Если ВремяОжиданияОтвета = 0 Тогда
		ВремяОжиданияОтвета = ЗначПоУмолчанию["ВремяОжиданияОтвета"];
	КонецЕсли;
	Если ТипЗнч(Кэш.Парам) = Тип("Структура") Тогда
		Для Каждого Поле Из ЗначПоУмолчанию Цикл
			Если НЕ(Кэш.Парам.Свойство(Поле.Ключ)) Тогда
				#Если Не ТолстыйКлиентОбычноеПриложение Тогда
					Попытка 
						Если	ЗначениеЗаполнено(ЭтаФорма[Поле.Ключ])
							Или (	Не Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск
								И		ТипЗнч(Поле.Значение) = Тип("Число")) Тогда
							Кэш.Парам.Вставить(Поле.Ключ,ЭтаФорма[Поле.Ключ]);
							Продолжить;
						КонецЕсли;
					Исключение
					КонецПопытки;
				#КонецЕсли
				Кэш.Парам.Вставить(Поле.Ключ,Поле.Значение);
				Попытка
					ЭтаФорма[Поле.Ключ] = Поле.Значение;
				Исключение
				КонецПопытки;
				Продолжить;
			Иначе
				Попытка
					ЭтаФорма[Поле.Ключ] = Кэш.Парам[Поле.Ключ];
				Исключение
				КонецПопытки;	
			КонецЕсли;
		КонецЦикла;
	Иначе
		Кэш.Парам = ЗначПоУмолчанию;
	КонецЕсли;
	//Отладка при запуске всегда ложь. 
	Кэш.Парам.Вставить("РежимОтладки", Ложь);
	Кэш.Парам.Вставить("ПолнаяВерсияПродукта", Кэш.ПараметрыСистемы.Обработка.ПолнаяВерсия);
	Если Не	СбисДополнительныеПараметры = Неопределено
		И	СбисДополнительныеПараметры.Свойство("Парам") Тогда
		Для Каждого КлючИЗначение Из СбисДополнительныеПараметры.парам Цикл 
			Кэш.Парам.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск Тогда
		//При первом запуске, установить флаг автообновления ини
		Кэш.Парам.НастройкиАвтообновление = Истина;
		НастройкиАвтообновление = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура сбисПослеАвторизации(Результат, СбисДополнительныеПараметры) Экспорт
	//Если результат неопределен, то форма авторизации была просто закрыта.
	Если Результат = Неопределено Тогда
		Кэш.Парам.ЗапомнитьПароль = Ложь;
		Кэш.Парам.ЗапомнитьСертификат = Ложь;
		ЭтаФорма.Закрыть();
		Возврат;
	КонецЕсли;
	
	Пользователь_До	= Пользователь;
	Пользователь	= Кэш.Интеграция.ИнформацияОТекущемПользователе(Кэш);
	
	ЕстьИзмененияОбмена			= Не (СпособОбмена			= Кэш.Парам.СпособОбмена);
	ЕстьИзмененияНастроек		= Не (СпособХраненияНастроек= Кэш.Парам.СпособХраненияНастроек);
	ЕстьИзмененияПользователя	= Не (Пользователь_До		= Пользователь);
	
	Если	СбисДополнительныеПараметры.Свойство("ИзмененаФормаНастроек")
		И	СбисДополнительныеПараметры.ИзмененаФормаНастроек Тогда
		ЕстьИзмененияНастроек = Истина;
	КонецЕсли;
	Если ЕстьИзмененияНастроек Тогда
		//был изменен способ хранения настроек. Нужно будет перечитать список доступных конфигураций, если соберёмся в раздел файлов.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзмененаФормаНастроек", Истина);
		СбисДополнительныеПараметры.Вставить("ИзмененаФормаНастроек", Истина);
	КонецЕсли;
	Если ЕстьИзмененияПользователя Тогда
		//был изменен пользователь. Для серверных настроек понадобится перечитать подключение.
		Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ИзменениеПользователя", Истина);
	КонецЕсли;
	
	СпособХраненияНастроек		= Кэш.Парам.СпособХраненияНастроек;
	СпособОбмена				= Кэш.Парам.СпособОбмена;
	КаталогОбмена				= Кэш.Парам.КаталогОбмена;
	ШифроватьВыборочно			= Кэш.Парам.ШифроватьВыборочно;
	КаталогНастроек				= Кэш.Парам.КаталогНастроек;
	ИнтеграцияAPIВызовыНаКлиенте= Кэш.Парам.ИнтеграцияAPIВызовыНаКлиенте;
	
	Если	ЕстьИзмененияНастроек
		Или	ЕстьИзмененияПользователя Тогда
		СбисДополнительныеПараметры.Вставить("ОбновитьКонтент", Истина);
	КонецЕсли;
	
	ПослеОткрытияЗавершение(СбисДополнительныеПараметры);
	
КонецПроцедуры

//Устанавливает кэш обмена
&НаКлиенте
Функция	СформироватьСтруктуруКэшСБИС(СбисДополнительныеПараметры=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СбисДополнительныеПараметры) Тогда
		Если СбисДополнительныеПараметры.Свойство("АдресСервера") Тогда
			сбисАдресСервера = СбисДополнительныеПараметры.АдресСервера;
		КонецЕсли;
	КонецЕсли;
	СбисПредставлениеСервера = СтрЗаменить(СтрЗаменить(СокрЛП(сбисАдресСервера), "https:", ""), "/", "");
	
	ДанныеВозврата = Новый	Структура;
	ДанныеВозврата.Вставить("Ини",					Новый Структура);
	ДанныеВозврата.Вставить("ДанныеИнтеграции",		Новый Структура);
	ДанныеВозврата.Вставить("ПараметрыИнтеграции",	Новый Структура("Версия, РезервныйДомен, ПредставлениеСервера", "", Ложь, СбисПредставлениеСервера));
	ДанныеВозврата.Вставить("ОбменВключен",			Ложь);
	ДанныеВозврата.Вставить("Авторизован",			Ложь);
	ДанныеВозврата.Вставить("АдресСервера",			сбисАдресСервера);
	ЭтаФорма.Заголовок = СбисПредставлениеСервера;
	Возврат	ДанныеВозврата;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокФорм()
	СписокФорм = Новый СписокЗначений;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		МетаданныеФорм = ЭтотОбъект.Метаданные().Формы;
	#Иначе
		МетаданныеФорм = РеквизитФормыВЗначение("Объект").Метаданные().Формы;
	#КонецЕсли	
	Для Каждого Фрм Из МетаданныеФорм Цикл
		СписокФорм.Добавить(Фрм.Имя);	
	КонецЦикла;
	Возврат СписокФорм;
КонецФункции

////////////////////////////////////////////////////
//////////////////////Системное/////////////////////
////////////////////////////////////////////////////

//Проверяет наличие функции в форме	
&НаКлиенте
Функция ПроверитьНаличиеФункцииВФорме(Обработка,ИмяФормы,ИмяФункции) Экспорт 
	Попытка
		фрм = сбисПолучитьФорму(ИмяФормы, Обработка);
		Попытка
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Выполнить("фрм."+ИмяФункции+"();");
			#Иначе
				сбисТест = Вычислить("фрм."+ИмяФункции+"()");
			#КонецЕсли
		Исключение
			лОписаниеОшибки = ОписаниеОшибки();
			Если Найти(лОписаниеОшибки, НСтр("ru='Метод объекта не обнаружен'; en='Object method not found'", Кэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык)+" ("+ИмяФункции+")") Тогда//функции нет
				Возврат Ложь;
			КонецЕсли;
		КонецПопытки;
	Исключение//форма не найдена
		Возврат Ложь;
	КонецПопытки;
	Возврат фрм;
КонецФункции

//Определяет, какую форму необходимо использовать при вызове определенной функции	
&НаКлиенте
Функция сбисНайтиФормуФункции(сбисИмяФункции, сбисИмяОсновнойФормы, сбисИмяДополнительнойФормы="",ВходящийКэш="") Экспорт
	Если Не ВходящийКэш = "" Тогда
		Кэш = ВходящийКэш;
	КонецЕсли;
	//Проверим закэшированное значение
	фрм = Неопределено;
	Если Кэш.ТекущийСеанс.Функции.Свойство(сбисИмяФункции + "_" + сбисИмяОсновнойФормы, фрм) Тогда 
		Возврат фрм;
	КонецЕсли;	
	фрм = сбисНайтиФункциюНаФорме(сбисИмяФункции, сбисИмяОсновнойФормы);
	Если	фрм = Ложь
		И	Не ПустаяСтрока(сбисИмяДополнительнойФормы) Тогда
		фрм = сбисНайтиФункциюНаФорме(сбисИмяФункции, сбисИмяДополнительнойФормы);
	КонецЕсли;	
	//Закэшируем результат
	Кэш.ТекущийСеанс.Функции.Вставить(сбисИмяФункции + "_" + сбисИмяОсновнойФормы, фрм);	
	Возврат фрм;
КонецФункции

//Вынесен дублирующийся код
&НаКлиенте
Функция сбисНайтиФункциюНаФорме(сбисИмяФункции, сбисИмяФормы)
	//Проверим в внешних функциях
	фрм = ?(Кэш.Заплатки = Ложь, Ложь, ПроверитьНаличиеФункцииВФорме(Кэш.Заплатки, сбисИмяФормы, сбисИмяФункции));
	Если фрм = Ложь Тогда//Проверим в обработке
		фрм = ПроверитьНаличиеФункцииВФорме(Неопределено, сбисИмяФормы, сбисИмяФункции);
	КонецЕсли;	
	Возврат фрм;
КонецФункции

//Определяет, какую форму необходимо использовать при вызове определенной функции. Работает на Фреш. Постепенно перевести получение форм на новые функции.
//Возможные параметры:
//	ВспомогательныеФормы	- массив строк с именами форм для поиска функции в порядке их приоритета.
//  КэшироватьФункцию		- определяет необходимость кэширования найденной формы за определяемой функцией. Если не указано, то включено.
//	ПроверятьВФК			- определяет необходимость проверки наличия функции в внешних функциях. Если не указано, то включено.
//	ПроверятьВО				- определяет необходимость проверки наличия функции в основной обработке. Если не указано, то включено. 
&НаКлиенте
Функция СбисНайтиФормуФункцииСеанса(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ) Экспорт
	Перем Результат;
	//Проверим закэшированное значение
	Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ);
	Если Не Результат = Ложь Тогда
		Возврат Результат;
	КонецЕсли;
	//В случае необходимости поиска по нескольким формам отдаем массивом строк
	Если СбисДополнительныеПараметры.Свойство("ВспомогательныеФормы") Тогда
		Для Каждого СбисВспомогательнаяФорма Из СбисДополнительныеПараметры.ВспомогательныеФормы Цикл
			Результат = СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисВспомогательнаяФорма, СбисДополнительныеПараметры, Отказ);
			Если Результат = Ложь Тогда
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат Результат;
	
КонецФункции

//Делает проверку функции на указанной форме с учетом заплаток и возможностью получения либо только в ВФК, или только на в основном коде.	
&НаКлиенте
Функция СбисНайтиФормуФункцииОбработки(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ)
	Перем Результат;
	
	Результат = Ложь;
	Если	(	Не	СбисДополнительныеПараметры.Свойство("ПроверятьВФК")
			Или		СбисДополнительныеПараметры.ПроверятьВФК)
		И	Не ЛокальныйКэш.Заплатки = Ложь Тогда
		Результат = СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, Новый Структура("Объект1С, Ключ", ЛокальныйКэш.Заплатки, "ВФК"), Отказ);
		Если Отказ Тогда
			Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(Результат, "СбисНайтиФормуФункцииОбработки");
		КонецЕсли;
	КонецЕсли;
	Если	(	Не	СбисДополнительныеПараметры.Свойство("ПроверятьВО")
			Или		СбисДополнительныеПараметры.ПроверятьВО)
		И	Результат = Ложь Тогда
		Результат = СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, Новый Структура("Ключ", "ВО"), Отказ);
		Если Отказ Тогда
			Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(Результат, "СбисНайтиФормуФункцииОбработки");
		КонецЕсли;
	КонецЕсли;	
	Возврат Результат;
	
КонецФункции

//Проверка наличия функции на форме с пробросом ошибок 
&НаКлиенте
Функция СбисНайтиФункциюНаФорме_2(ЛокальныйКэш, СбисИмяФункции, СбисИмяФормы, СбисДополнительныеПараметры, Отказ)
	СбисКлючФункции = СбисДополнительныеПараметры.Ключ + "_" + СбисИмяФункции + "_" + СбисИмяФормы;
	Если ЛокальныйКэш.ТекущийСеанс.Функции.Свойство(СбисКлючФункции) Тогда
		Возврат ЛокальныйКэш.ТекущийСеанс.Функции[СбисКлючФункции];
	КонецЕсли;
	фрм = СбисПолучитьФормуОбработки(ЛокальныйКэш, СбисИмяФормы, СбисДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат ЛокальныйКэш.ОбщиеФункции.СбисИсключение(фрм, "СбисНайтиФункциюНаФорме_2");
	ИначеЕсли Не фрм = Ложь Тогда
		Результат = ПроверитьНаличиеФункцииВФорме_2(ЛокальныйКэш, фрм, СбисИмяФункции);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	Если	Не	СбисДополнительныеПараметры.Свойство("КэшироватьФункцию")
			Или	СбисДополнительныеПараметры.КэшироватьФункцию Тогда
		ЛокальныйКэш.ТекущийСеанс.Функции.Вставить(СбисКлючФункции, Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции
	
//Проверяет наличие функции в форме	
&НаКлиенте
Функция ПроверитьНаличиеФункцииВФорме_2(ЛокальныйКэш, СбисФормаОбработки, СбисИмяФункции)
	//Попытка
	СбисКодЯзыка = ЛокальныйКэш.ПараметрыСистемы.Конфигурация.ВстроенныйЯзык;
	Попытка
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Выполнить("СбисФормаОбработки."+СбисИмяФункции+"();");
		#Иначе
			сбисТест = Вычислить("СбисФормаОбработки."+СбисИмяФункции+"()");
		#КонецЕсли
	Исключение
		лОписаниеОшибки = ОписаниеОшибки();
		Если Найти(лОписаниеОшибки, НСтр("ru='Метод объекта не обнаружен'; en='Object method not found'", СбисКодЯзыка)+" ("+СбисИмяФункции+")") Тогда//функции нет
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки;
	Возврат СбисФормаОбработки;
КонецФункции

//Возвращает запрашиваемую форму при успехе, структуру ошибки при неудаче Ложь, если форма нет найдено.
&НаКлиенте
Функция СбисПолучитьФормуОбработки(ЛокальныйКэш, ИмяФормы, СбисДополнительныеПараметры, Отказ) Экспорт 
	Перем СбисОбъект1С, СбисПараметрыФормы, СбисВладелецФормы, СбисОписаниеОшибки, ПолноеИмяФормы, КэшироватьПолученную, ПолучитьНовую, Результат;
	СбисДополнительныеПараметры.Свойство("Параметры", СбисПараметрыФормы);
	Если Не СбисДополнительныеПараметры.Свойство("КэшироватьФорму", КэшироватьПолученную) Тогда
		//Для возможности получить форму без её запоминания
		КэшироватьПолученную = Истина;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("ПолучитьНовую", ПолучитьНовую) Тогда
		//Для возможности получить новую форму не из кэша
		ПолучитьНовую = Ложь;
	КонецЕсли;
	Если Не СбисДополнительныеПараметры.Свойство("Владелец", СбисВладелецФормы) Тогда
		//Попробуем по-умолчанию ставить владельцем главное окно, если не указано обратное.
		СбисВладелецФормы = ЭтаФорма;
	КонецЕсли;	
	Стандартная = Истина;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если Не СбисДополнительныеПараметры.Свойство("Объект1С", СбисОбъект1С) Тогда
			СбисОбъект1С	= ЭтотОбъект;
			ПолноеИмяФормы	= "СБИС." + ИмяФормы;//Имя для кэширования
		Иначе
			Стандартная = Ложь;
			ПолноеИмяФормы = "ВФК." + ИмяФормы;//Кэширование для форм внешних функций
		КонецЕсли;
	#Иначе
		Если Не СбисДополнительныеПараметры.Свойство("Объект1С", СбисОбъект1С) Тогда			
			СбисОбъект1С	= ЛокальныйКэш.ПараметрыСистемы.Обработка.ПолноеИмя;
			ПолноеИмяФормы	= ЛокальныйКэш.ПараметрыСистемы.Обработка.ПолноеИмя + ЛокальныйКэш.ПараметрыСистемы.Обработка.КлючФорм + ИмяФормы;
		Иначе
			Стандартная = Ложь;
			ПолноеИмяФормы = СбисОбъект1С + ИмяФормы;
		КонецЕсли;
	#КонецЕсли
	БезопасноеИмяФормы = СтрЗаменить(ПолноеИмяФормы, ".", "_");
	Если		ПолучитьНовую
		Или	Не	Кэш.ТекущийСеанс.Формы.Получены.Свойство(БезопасноеИмяФормы, Результат) Тогда
		Если		Стандартная И ЛокальныйКэш.ТекущийСеанс.Формы.Стандартные.НайтиПоЗначению(ИмяФормы) <> Неопределено
			Или	Не	Стандартная И ЛокальныйКэш.ТекущийСеанс.Формы.Клиентские.НайтиПоЗначению(ИмяФормы) <> Неопределено Тогда
			//Не должно быть исключения при получении формы, это считаем ошибкой. Отсеиваем несуществующие формы по списку форм.
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Попытка
					Результат = СбисОбъект1С.ПолучитьФорму(ИмяФормы, СбисВладелецФормы);
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка получения формы " + ПолноеИмяФормы + ". Метод ПолучитьФорму() вернул ошибку: " + ОписаниеОшибки());
				КонецПопытки;
			#Иначе
				Попытка
					Результат = ПолучитьФорму(ПолноеИмяФормы, СбисПараметрыФормы, СбисВладелецФормы);
					Если Результат = Неопределено Тогда
						Отказ = Истина;
						Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Неизвестная ошибка события формы " + ПолноеИмяФормы + " ПриСозданииНаСервере.");
					КонецЕсли;
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка получения формы " + ПолноеИмяФормы + ". Метод ПолучитьФорму() вернул ошибку: " + ОписаниеОшибки());
				КонецПопытки;
			#КонецЕсли
		Иначе
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли Не Результат = Ложь Тогда
		Результат.ВладелецФормы = СбисВладелецФормы;
	КонецЕсли;
	Если КэшироватьПолученную Тогда
		ЛокальныйКэш.ТекущийСеанс.Формы.Получены.Вставить(БезопасноеИмяФормы, Результат);
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////
///////////////////////Фильтры//////////////////////
////////////////////////////////////////////////////

/////////////////////Стандартный////////////////////

//Функция складывает в структуру текущие значения фильтра для последующего их восстановления	
&НаКлиенте
Функция сбисСохранитьТекущийФильтр(Кэш) Экспорт
	ТекущийФильтр = Новый Структура;
	ТекущийФильтр.Вставить("ФильтрПериод", ФильтрПериод);
	ТекущийФильтр.Вставить("ФильтрДатаНач", ФильтрДатаНач);
	ТекущийФильтр.Вставить("ФильтрДатаКнц", ФильтрДатаКнц);
	ТекущийФильтр.Вставить("ФильтрСостояние", ФильтрСостояние);
	ТекущийФильтр.Вставить("ФильтрКонтрагент", ФильтрКонтрагент);
	ТекущийФильтр.Вставить("ФильтрКонтрагентПодключен", ФильтрКонтрагентПодключен);
	ТекущийФильтр.Вставить("ФильтрКонтрагентСФилиалами", ФильтрКонтрагентСФилиалами);
	ТекущийФильтр.Вставить("ФильтрОрганизация", ФильтрОрганизация);
	ТекущийФильтр.Вставить("ФильтрСтраница", ФильтрСтраница);
	ТекущийФильтр.Вставить("ФильтрОтветственный", ФильтрОтветственный);
	ТекущийФильтр.Вставить("ФильтрТипыДокументов", ФильтрТипыДокументов);
	ТекущийФильтр.Вставить("ФильтрМаска", ФильтрМаска);
	
	//Заполним дополнительные параметры фильтра
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ТекущийФильтр.Вставить("ПараметрыФильтра", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ТекущийФильтр.ПараметрыФильтра.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Возврат ТекущийФильтр;
КонецФункции

//Функция складывает в структуру текущие значения фильтра для последующего их восстановления	
&НаКлиенте
Функция сбисВосстановитьФильтр(Кэш, СтруктураФильта) Экспорт
	ФильтрПериод = СтруктураФильта.ФильтрПериод;
	// если изменилась текущая дата, надо обновить период
	Если(ФильтрПериод="За сегодня") Тогда
		ФильтрДатаНач = ТекущаяДата();
		ФильтрДатаКнц = ТекущаяДата();
	ИначеЕсли(ФильтрПериод = "За последний месяц") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-1);
	ИначеЕсли(ФильтрПериод = "За последние полгода") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-6);
	ИначеЕсли(ФильтрПериод = "За последний год") Тогда
		ФильтрДатаКнц = ТекущаяДата();
		ФильтрДатаНач = ДобавитьМесяц(ФильтрДатаКнц,-12);
	Иначе
		ФильтрДатаНач = СтруктураФильта.ФильтрДатаНач;
		ФильтрДатаКнц = СтруктураФильта.ФильтрДатаКнц;
	КонецЕсли;
	ФильтрСостояние = СтруктураФильта.ФильтрСостояние;
	ФильтрКонтрагент = СтруктураФильта.ФильтрКонтрагент;
	ФильтрКонтрагентПодключен = СтруктураФильта.ФильтрКонтрагентПодключен;
	ФильтрКонтрагентСФилиалами = ?(СтруктураФильта.Свойство("ФильтрКонтрагентСФилиалами"), СтруктураФильта.ФильтрКонтрагентСФилиалами, Ложь);
	ФильтрОрганизация = СтруктураФильта.ФильтрОрганизация;
	ФильтрСтраница = СтруктураФильта.ФильтрСтраница;
	ФильтрОтветственный = СтруктураФильта.ФильтрОтветственный;
	ФильтрТипыДокументов = СтруктураФильта.ФильтрТипыДокументов;
	ФильтрМаска = СтруктураФильта.ФильтрМаска;
	
	//Заполним дополнительные параметры фильтра
	Если СтруктураФильта.Свойство("ПараметрыФильтра") Тогда
		Для Каждого Элемент Из СтруктураФильта.ПараметрыФильтра Цикл
			Кэш.ПараметрыФильтра.Вставить(Элемент.Ключ,Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
КонецФункции

//Функция формирует период прописью	
&НаКлиенте
Функция ФильтрПериодПрописью(ДатНач, ДатКнц)
	Если Год(ДатНач)<>Год(ДатКнц) Тогда
		Возврат Формат(ДатНач, "ДФ=""д ММММ гггг""") + " - " + Формат(ДатКнц, "ДФ=""д ММММ гггг""");
	Иначе
		Если Месяц(ДатНач)<>Месяц(ДатКнц) Тогда
			Возврат Формат(ДатНач, "ДФ=""д ММММ""") + " - " + Формат(ДатКнц, "ДФ=""д ММММ""") + " " + Формат(Год(ДатКнц),"ЧГ=0");	
		Иначе
			Если ДатНач=ДатКнц Тогда
				Возврат Формат(ДатКнц, "ДФ=""д ММММ гггг""")
			Иначе
				Возврат строка(День(ДатНач)) + " - " + Формат(ДатКнц, "ДФ=""д ММММ""") + " "+ Формат(Год(ДатКнц),"ЧГ=0");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

//Функция устанавливает типы полей Организация, Контрагент, Ответственный в форме фильтра по инишке конфигурации	
&НаКлиенте
Процедура ФильтрУстановитьТипыПолей(Кэш)
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ПутьКЭлементам = "Элементы";
		ФормаФильтра = сбисПолучитьФорму("ФормаУстановкиФильтра",,,ЭтаФорма);
	Иначе
		ПутьКЭлементам = "ЭлементыФормы";
		ФормаФильтра = ЭтаФорма;
	КонецЕсли;
	
	Если	Не	Кэш.Ини.Свойство("Конфигурация")
		Или		Кэш.Ини.Конфигурация = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	Если Кэш.Ини.Конфигурация.Свойство("Организации") и нрег(Лев(Кэш.Ини.Конфигурация.Организации.Значение, 10)) = "справочник" Тогда
		ИмяСправочника = СокрЛП(Сред(Кэш.Ини.Конфигурация.Организации.Значение, Найти(Кэш.Ини.Конфигурация.Организации.Значение, ".")+1));
		ТипСправочника = "СправочникСсылка." + ИмяСправочника;
	Иначе
		ТипСправочника = "СправочникСсылка.Организации";
	КонецЕсли;
	Попытка
		ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
		Кэш.ТипыПолейФильтра.Вставить("ФильтрОрганизация", ОписаниеТипа);
		ФормаФильтра[ПутьКЭлементам].ФильтрОрганизация.ОграничениеТипа= ОписаниеТипа;
		ФормаФильтра[ПутьКЭлементам].ФильтрОрганизация.ВыбиратьТип	= Ложь;
		ФормаФильтра.ФильтрОрганизация = ОписаниеТипа.ПривестиЗначение();
	Исключение
	КонецПопытки;
	
	Если Кэш.Ини.Конфигурация.Свойство("Контрагенты") и нрег(Лев(Кэш.Ини.Конфигурация.Контрагенты.Значение, 10)) = "справочник" Тогда
		ИмяСправочника = СокрЛП(Сред(Кэш.Ини.Конфигурация.Контрагенты.Значение, Найти(Кэш.Ини.Конфигурация.Контрагенты.Значение, ".")+1));
		ТипСправочника = "СправочникСсылка." + ИмяСправочника;
	Иначе
		ТипСправочника = "СправочникСсылка.Контрагенты";
	КонецЕсли;
	Попытка
		ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
		Кэш.ТипыПолейФильтра.Вставить("ФильтрКонтрагент", ОписаниеТипа);
		ФормаФильтра[ПутьКЭлементам].ФильтрКонтрагент.ОграничениеТипа= ОписаниеТипа;
		ФормаФильтра[ПутьКЭлементам].ФильтрКонтрагент.ВыбиратьТип	= Ложь;
		ФормаФильтра.ФильтрКонтрагент = ОписаниеТипа.ПривестиЗначение();
	Исключение
	КонецПопытки;
	
	Если Кэш.Ини.Конфигурация.Свойство("Ответственные") Тогда
		ИмяСправочника = СокрЛП(Сред(Кэш.Ини.Конфигурация.Ответственные.Значение, Найти(Кэш.Ини.Конфигурация.Ответственные.Значение, ".")+1));
		ТипСправочника = "СправочникСсылка." + ИмяСправочника;
	Иначе
		ТипСправочника = "СправочникСсылка.Пользователи";
	КонецЕсли;
	ОписаниеТипа = Новый ОписаниеТипов(ТипСправочника);
	Кэш.ТипыПолейФильтра.Вставить("ФильтрОтветственный", ОписаниеТипа);
	ФормаФильтра[ПутьКЭлементам].ФильтрОтветственный.ОграничениеТипа= ОписаниеТипа;
	ФормаФильтра[ПутьКЭлементам].ФильтрОтветственный.ВыбиратьТип	= Ложь;
	ФормаФильтра.ФильтрОтветственный = ОписаниеТипа.ПривестиЗначение();
	ФильтрОтветственный = ФормаФильтра.ФильтрОтветственный;
	ФильтрКонтрагент = ФормаФильтра.ФильтрКонтрагент;
	ФильтрОрганизация = ФормаФильтра.ФильтрОрганизация;
КонецПроцедуры


///////////////////Пользователський/////////////////

// Очищает в Кэше значения пользовательских фильтров для текущего раздела	
&НаКлиенте
Функция ОчиститьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	ПараметрыУстановки = Новый Структура("ФормаДопФильтра, ДопЭлемент", ФормаДопФильтра);
	Отказ = Ложь;
	Для Каждого ДопЭлемент Из СписокДопЭлементов Цикл
		ПараметрыУстановки.ДопЭлемент = ДопЭлемент;
		РезультатУстановки = УстановитьЗначениеЭлементаФильтра(Кэш, ПараметрыУстановки, Отказ);
		Если Отказ Тогда
			сбисСообщитьОбОшибке(Кэш, РезультатУстановки);
			Отказ = Ложь;
		КонецЕсли;
	КонецЦикла;
КонецФункции

//Устанавливает значение для элемента фильтра.
//ЛокальныйКэш
//	Структура инициированного кэша с отвязкой от ГП.
//ПараметрыФильтра
//	Структура с полями "ФормаДопФильтра", "ДопЭлемент" - элемент, возвращаемый формой в списке пользовательских фильтров
//Отказ
//	Булево. Флаг ошибок в процессе установки и возврата структуры ошибки
//Возвращает
//	В случае ошибки, структура описания ошибки.
//	В случае, если это не элемент фильтра - Ложь.
//	В случае успешной установки - Истина;
&НаКлиенте
Функция УстановитьЗначениеЭлементаФильтра(ЛокальныйКэш, ПараметрыФильтра, Отказ) Экспорт
	
	ФормаДопФильтра = ПараметрыФильтра.ФормаДопФильтра;
	ДопЭлемент		= ПараметрыФильтра.ДопЭлемент;
	Попытка
		Если ЛокальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
			ДопЭлемент_Значение	= ФормаДопФильтра[ДопЭлемент.Значение];
		Иначе
			ДопЭлемент_Элемент	= ЭтаФорма.ЭлементыФормы[ДопЭлемент.Значение];
			ДопЭлемент_Тип		= ТипЗнч(ДопЭлемент_Элемент);
			Если Не	(	ДопЭлемент_Тип = Тип("ПолеВвода")
					Или	ДопЭлемент_Тип = Тип("ПолеВыбора")
					Или	ДопЭлемент_Тип = Тип("Флажок")) Тогда
				Возврат Ложь;
			КонецЕсли;
			ДопЭлемент_Значение	= ДопЭлемент_Элемент.Значение;
		КонецЕсли;
	Исключение
		СтруктураОшибки = Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Ошибка при определении дополнительного элемента фильтра " + ДопЭлемент.Значение + ": " + ОписаниеОшибки());
		Возврат СтруктураОшибки;
	КонецПопытки;
	
	ДопЭлемент_Значение_Тип = ТипЗнч(ДопЭлемент_Значение);
	ПараметрФильтра = "";//По-умолчанию, оставляем строку, как было.
	Если		ДопЭлемент_Значение_Тип = Тип("Дата") Тогда
		ПараметрФильтра = '0001.01.01';
	ИначеЕсли	ДопЭлемент_Значение_Тип = Тип("Число") Тогда
		ПараметрФильтра = 0;
	ИначеЕсли	ДопЭлемент_Значение_Тип = Тип("Булево") Тогда
		ПараметрФильтра = Ложь;
	ИначеЕсли	ДопЭлемент_Значение_Тип = Тип("СписокЗначений") Тогда
		ПараметрФильтра = Новый СписокЗначений;
		ПараметрФильтра.ТипЗначения = ДопЭлемент_Значение.ТипЗначения;//Ограничение типа тоже перенести.
	КонецЕсли;
	
	ЛокальныйКэш.ПараметрыФильтра.Вставить(ДопЭлемент.Значение, ПараметрФильтра);
	Если Не ЛокальныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ДопЭлемент_Элемент.Значение = ПараметрФильтра;
	КонецЕсли;
	Возврат Истина;

КонецФункции

// ОФ Показывает на форме элементы пользовательских фильтров	
&НаКлиенте
Функция ПоказатьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов = ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	ЭтаФорма.ЭлементыФормы.ПанельУстановкиФильтра.Высота = ФормаДопФильтра.ЭлементыФормы.ПанельУстановкиФильтра.Высота;
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			ЭтаФорма.ЭлементыФормы[Элемент.Значение].Видимость = Истина;
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецФункции

// ОФ Скрывает на форме элементы пользовательских фильтров	
&НаКлиенте
Функция СкрытьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			ЭтаФорма.ЭлементыФормы[Элемент.Значение].Видимость = Ложь;
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецФункции

// ОФ Записывает в Кэш значения пользовательских фильтров для текущего раздела	
&НаКлиенте
Функция УстановитьДополнительныеПараметрыФильтра(ФормаДопФильтра) Экспорт
	СписокДопЭлементов =  ФормаДопФильтра.сбисСписокДопПараметровФильтра();
	Для Каждого Элемент Из СписокДопЭлементов Цикл
		Попытка  
			Если ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВвода") или ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("ПолеВыбора") или ТипЗнч(ЭтаФорма.ЭлементыФормы[Элемент.Значение]) = Тип("Флажок") Тогда
				Кэш.ПараметрыФильтра.Вставить(Элемент.Значение,ЭтаФорма.ЭлементыФормы[Элемент.Значение].Значение);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;	
КонецФункции

////////////////////////////////////////////////////
////////////////////Работа Формы////////////////////
////////////////////////////////////////////////////

//////////////////События формы/////////////////////

&НаКлиенте
Процедура ПередЗакрытием(Отказ=Ложь, СтандартнаяОбработка=Истина)
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Оповестить("ЗакрытьСБИС");
	#КонецЕсли
	ОшибкаЗавершения = Ложь;
	Попытка
		СбисСохранитьЗначения(Новый Структура("ВыполнитьВручную,Парам", Ложь, Кэш.Парам));
		РезультатЗавершения = Кэш.ОбщиеФункции.СбисЗавершениеРаботы(Кэш, ОшибкаЗавершения);
	Исключение
		ТекстОшибки = "Возникла неизвестная ошибка при завершении работы обработки. Детально: " + ОписаниеОшибки();
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстОшибки);
		#Иначе
			ПоказатьПредупреждение(,ТекстОшибки);
		#КонецЕсли
		ОшибкаЗавершения = Ложь;
	КонецПопытки;
	
	Если ОшибкаЗавершения Тогда
		//Запишем ошибку завершения если вернулся ExtSysException
		сбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Запись ошибки", РезультатЗавершения);
		Попытка
			Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, сбисПараметрыСтатистики, Ложь);
		Исключение
			ТекстОшибки = "Возникла неизвестная ошибка при завершении работы обработки. Детально: " + ОписаниеОшибки();
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				Предупреждение(ТекстОшибки);
			#Иначе
				ПоказатьПредупреждение(,ТекстОшибки);
			#КонецЕсли
		КонецПопытки;
	КонецЕсли;
	Кэш = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия()
	// Начально заполнение всех необходимых для работы объектов	
	#Если ВебКлиент Тогда 
		Если ПодключитьРасширениеРаботыСФайлами()=Ложь Тогда
			НачатьУстановкуРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ПослеУстановитьРасширениеРаботыСФайлами",ЭтаФорма));
		Иначе
			ПослеУстановитьРасширениеРаботыСФайлами("");
		КонецЕсли;
	#Иначе
		ПослеУстановитьРасширениеРаботыСФайлами("");
	#КонецЕсли	
	
КонецПроцедуры

////////////////События элементов///////////////////

&НаКлиенте
Процедура ВремяОжиданияОтветаПриИзменении(Элемент)
	Кэш.Интеграция.сбисУстановитьВремяОжидания(Кэш, ВремяОжиданияОтвета);
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КаталогНастроекНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОтказОтВыбора = Ложь;
	КаталогНастроек = сбисВыбратьКаталог(КаталогНастроек, ОтказОтВыбора);
	Если Не ОтказОтВыбора Тогда
		КаталогНастроекПриИзменении();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КаталогНастроекОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	сбисОткрытьКаталог(КаталогНастроек);
КонецПроцедуры

&НаКлиенте
Процедура КаталогНастроекПриИзменении(Элемент=Неопределено) Экспорт
	ПараметрыПриИзменении(сбисЭлементФормы(ЭтаФорма, "КаталогНастроек"));
	Кэш.Парам.ИдентификаторНастроек = Кэш.ФормаНастроек.сбисПолучитьИдентификаторНастроек(Кэш);		
	ПроверкаНастроекНажатие();
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтладкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	КаталогОтладки = сбисВыбратьКаталог(КаталогОтладки);
	сбисПереключитьОтладку(Новый Структура);
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтладкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	сбисОткрытьКаталог(КаталогОтладки);
КонецПроцедуры

&НаКлиенте
Процедура КаталогОтладкиПриИзменении(Элемент)
	сбисПереключитьОтладку(Новый Структура("КаталогТест", КаталогОтладки))
КонецПроцедуры

&НаКлиенте
Процедура КонфигурацияПриИзменении(Элемент)
	сбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш);
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНазваниеПриИзменении(Элемент)
	
	Кэш.КэшНастроек.ИзмененияВНастройках = Истина;
	Кэш.КэшНастроек.ВыбранныеНастройки.Название	= НастройкиНазвание;
	сбисОбновитьЭлементы_РазделНастроек(Кэш);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНазваниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Кэш.ФормаНастроек.сбисВыбратьСоединение(Кэш);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАвтообновлениеПриИзменении(Элемент)
	Кэш.ФормаНастроек.АвтообновлениеПриИзменении(Кэш, НастройкиАвтообновление);
	СбисОбновитьЭлементы_РазделНастроек(Кэш);
КонецПроцедуры

// << alo Меркурий
&НаКлиенте
Процедура МеркурийПриИзменении(Элемент=Неопределено) Экспорт
	ПараметрыПриИзменении(сбисЭлементФормы(ЭтаФорма, "Меркурий"));
	
	ИмяФайлаОбработки = Кэш.ОбщиеФункции.сбисПолноеИмяФайла(Кэш.ПараметрыСистемы);
	Если Лев(ИмяФайлаОбработки, 5) <> "e1cib" Тогда //Заглушка на обновление ПФ из хранилища. В случае необходимости, доработать
		СписокДокументов = Новый СписокЗначений;
		Для Каждого Ини Из Кэш.Ини Цикл
			ЗначениеИни = Кэш.ФормаНастроек.Ини(Кэш, Ини.Ключ);
			Если ЗначениеИни.Свойство("мФайл") И ЗначениеИни.мФайл.Свойство("АктРасхождение") Тогда
				СписокДокументов.Добавить(Ини.Ключ);
			КонецЕсли;
		КонецЦикла;
		ВидДопОбработокПечатнаяФорма = неопределено;
		Если Кэш.Ини.Конфигурация.Свойство("ВидДопОбработокПечатнаяФорма") Тогда
			ВидДопОбработокПечатнаяФорма = Кэш.ОбщиеФункции.РассчитатьЗначениеНаСервере("ВидДопОбработокПечатнаяФорма", Новый Структура("Ини", Кэш.Ини.Конфигурация));
		КонецЕсли;
		ПараметрыФормированияНаСервере = Новый Структура("ПометкаУдаления, ПредставлениеПФ, ИдентификаторКоманды, УправляемоеПриложение, СписокДокументов, ВидДопОбработокПечатнаяФорма", 
				(Не Меркурий), "Погасить ВСД", "sbis1cПогаситьВСД", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение, СписокДокументов, ВидДопОбработокПечатнаяФорма);
		Попытка
			ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ИмяФайлаОбработки);
			Кэш.ФормаНастроекОбщее.сбисДобавитьПечатныеФормыНаСервере(ДвоичныеДанныеОбработки, ПараметрыФормированияНаСервере);	
		Исключение
			РезультатОбновления = Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекОбщее.СбисДобавитьПечатныеФормы", 700, "Неизвестная ошибка подключения", ОписаниеОшибки());
			СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Запись ошибки", РезультатОбновления);
			Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, СбисПараметрыСтатистики, Ложь);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры // alo Меркурий >>

//Процедура записывает в Кэш измененный параметр	
&НаКлиенте
Процедура ПараметрыПриИзменении(Элемент)
	ПутьКДаннымФормы			= Сред(Элемент.Имя, Найти(Элемент.Имя, "_")+1);
	Кэш.Парам[ПутьКДаннымФормы] = ЭтаФорма[ПутьКДаннымФормы];
КонецПроцедуры

&НаКлиенте
Процедура ШифроватьВыборочноПриИзменении(Элемент)
	ПараметрыПриИзменении(Элемент);
	Отказ = Ложь;
	Кэш.Интеграция.ПолучитьНастройкиПлагина(Кэш, Новый Структура("СообщатьПриОшибке, ВернутьОшибку", Ложь, Ложь), Отказ);
КонецПроцедуры

&НаКлиенте
Процедура РежимОтладкиПриИзменении(Элемент)
	сбисПереключитьОтладку(Новый Структура("РежимВыбора,КаталогТест", Истина, ?(ЗначениеЗаполнено(КаталогОтладки), КаталогОтладки, КаталогНастроек)));
КонецПроцедуры

&НаКлиенте
Процедура СпособХраненияНастроекПриИзменении(Элемент)
	
	// При изменении варианта хранения настроек	"перезапускаем" обработку
	ИзмениласьФормаНастроек = (Кэш.Парам.СпособХраненияНастроек <> СпособХраненияНастроек);
	Если	СпособХраненияНастроек	= 0				Тогда
		ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
		ДиалогОткрытия.Каталог = КаталогНастроек;
		ДиалогОткрытия.Заголовок = "Выберите каталог"; 
		Если ДиалогОткрытия.Выбрать() Тогда 
			КаталогНастроек = ДиалогОткрытия.Каталог;
			ПараметрыПриИзменении(сбисЭлементФормы(ЭтаФорма, "КаталогНастроек"));
		Иначе//Вернуть как было
			СпособХраненияНастроек	= Кэш.Парам.СпособХраненияНастроек;
			Возврат;
		КонецЕсли;
		ПараметрыПриИзменении(Элемент);
		ПерезапуститьГлавноеОкно(Ложь,ИзмениласьФормаНастроек);
	ИначеЕсли	СпособХраненияНастроек	= 1
			И	Кэш.Интеграция.ДоступныСерверныеНастройки() Тогда
		ПараметрыПриИзменении(Элемент);
		ПерезапуститьГлавноеОкно(Ложь,ИзмениласьФормаНастроек);
	Иначе
		ТекстСообщения	= "Хранение настроек на сервере не доступно для выбранного способа обмена!";
		ТаймАут			= 60;
		ТекстЗаголовка	= "Невозможно изменить способ хранения настроек!";
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение(ТекстСообщения, ТаймАут, ТекстЗаголовка);
		#Иначе
			ПоказатьПредупреждение(,ТекстСообщения, ТаймАут, ТекстЗаголовка);
		#КонецЕсли
		СпособХраненияНастроек	= 0;
		ПараметрыПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Таблица_СервисВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//alo
	ТекущиеДанныеСтроки = ВыбраннаяСтрока;
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
	КонецЕсли;
	Контекст = Новый структура(ТекущиеДанныеСтроки.Ключ, ТекущиеДанныеСтроки.Команда);
	Контекст.Вставить("Кэш",Кэш);
	Кэш.ОбщиеФункции.РассчитатьЗначение(ТекущиеДанныеСтроки.Ключ,Контекст,Кэш);
КонецПроцедуры

&НаКлиенте
Процедура УдалятьПрефиксыПриИзменении(Элемент)
	ПараметрыПриИзменении(Элемент);
	Кэш.ОбщиеФункции.сбисОчиститьЗначениеРассчитанногоОбъекта(Кэш, Новый Структура("Тип, Ключ", "ПользовательскиеЗначения.Функции", "НомерДокумента"))
КонецПроцедуры

//////////////////////Кнопки////////////////////////

&НаКлиенте
Процедура ВыйтиНажатие(Команда)
	сбисВыйти();
КонецПроцедуры

&НаКлиенте
Процедура ДействияСНастройками_ЗагрузитьИзКаталогаНажатие(Команда)
	
	Кэш.ФормаНастроек.сбисЗагрузитьНастройкиИзКаталога(Кэш);
	сбисОбновитьЭлементы_РазделНастроек(Кэш);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСНастройками_ВыгрузитьВКаталогНажатие(Команда)
	
	Кэш.ФормаНастроек.сбисВыгрузитьНастройкиВКаталог(Кэш);
	сбисОбновитьЭлементы_РазделНастроек(Кэш);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСНастройками_СохранитьИзмененияНастроекНажатие(Команда)
	
	ОбновитьРаздел = Истина;
	Кэш.ФормаНастроек.сбисСохранитьВыбранныеНастройки(Кэш,Ложь,ОбновитьРаздел);
	Если ОбновитьРаздел Тогда 
		сбисОбновитьЭлементы_РазделНастроек(Кэш);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСНастройками_ПеречитатьНастройки(Команда)
	
	Кэш.ФормаНастроек.сбисПеречитатьНастройки(Кэш, Новый Структура("Идентификатор", Кэш.Парам.ИдентификаторНастроек));
	сбисОбновитьЭлементы_РазделНастроек(Кэш);	
	
КонецПроцедуры

// Процедура запускает загрузку документов по отмеченным записям	
&НаКлиенте
Процедура ЗагрузитьВ1С(Команда)
	
	РезультатЗагрузки = Кэш.ОбщиеФункции.РезультатДействия_Получить(Кэш,Новый Структура("ПредставлениеОперации", "ЗагрузкаДокумента"),Истина);
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	Всего = СписокОтмеченныхДокументов.Количество();
	ОбновитьКонтент = Ложь;
	Если Всего>0 Тогда
		фрм = сбисНайтиФормуФункции("ЗагрузитьДокументыВ1С","Документ_Шаблон", "", Кэш);
		РезультатЗагрузки = фрм.ЗагрузитьДокументыВ1С(Кэш, СписокОтмеченныхДокументов, Новый Структура("РежимНоменклатуры", Кэш.Парам.СпособЗагрузки));
		Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
			ПараметрыСообщить = Новый Структура("СообщитьНеВыполнено", Ложь);
			Кэш.ОбщиеФункции.РезультатДействия_СообщитьРезультат(РезультатЗагрузки, ПараметрыСообщить);
			
			Сообщить("Загружено комплектов "+строка(РезультатЗагрузки.Всего.Выполнено)+" из "+строка(Всего));
			ОбновитьКонтент = Булево(РезультатЗагрузки.Всего.Выполнено);
		Иначе//Если пришли не структура, то ЗагрузитьДокументыВ1С вынесена. Поддержка старых функций
			ОбновитьКонтент = РезультатЗагрузки;
		КонецЕсли;
	Иначе 
		Сообщить("Не выбран ни один документ");
	КонецЕсли;
	Кэш.Удалить("РезультатДействия");
	Если ОбновитьКонтент Тогда
		ОбновитьКонтент();
	КонецЕсли;

КонецПроцедуры

// Открывает помощь на sbis.ru
&НаКлиенте
Процедура НадписьНужнаПомощьНажатие(Команда)
	ЗапуститьПриложение("https://sbis.ru/help/integration/1C_set/modul");
КонецПроцедуры

//Нажатие на кнопку проверки обновлений
&НаКлиенте
Процедура ОбновитьОбработку(Команда)	
	сбисПроверитьНаличиеОбновлений(Новый Структура("Режим", "Ручной"));	
КонецПроцедуры	

//Процедура открывает форму просмотра документа	
&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	ТекущийРаздел = Кэш.Разделы["р"+Кэш.Текущий.Раздел];
	фрм = сбисНайтиФормуФункции("ПоказатьДокумент","Раздел_"+ТекущийРаздел+"_"+Кэш.Текущий.ТипДок,"Раздел_"+ТекущийРаздел+"_Шаблон", Кэш);	
	фрм.ПоказатьДокумент(Кэш, ТекущаяСтрока);
КонецПроцедуры

//Открывает документы 1С по текущей строке таблицы документов	
&НаКлиенте
Процедура ОткрытьДокумент1С(Кнопка) Экспорт
	ТекущаяСтрока		= Кэш.ТаблДок.ТекущиеДанные;
	сбисДанныеОткрыть	= Новый Структура("Документ1С, Документы1С");
	сбисСписокОткрыть	= Новый Массив;
	ЗаполнитьЗначенияСвойств(сбисДанныеОткрыть, ТекущаяСтрока);
	Если ЗначениеЗаполнено(сбисДанныеОткрыть.Документ1С) Тогда
		сбисСписокОткрыть.Добавить(сбисДанныеОткрыть.Документ1С);
	КонецЕсли;
	Если ЗначениеЗаполнено(сбисДанныеОткрыть.Документы1С) Тогда
		Для Каждого СтрокаДокумент1С Из сбисДанныеОткрыть.Документы1С Цикл
			Если Не ЗначениеЗаполнено(СтрокаДокумент1С.Значение) Тогда
				Продолжить;
			КонецЕсли;
			сбисСписокОткрыть.Добавить(СтрокаДокумент1С.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Не сбисСписокОткрыть.Количество() Тогда
		Сообщить("Нет связанных документов 1С");
		Возврат;
	КонецЕсли;
	Для Каждого сбисДокументОткрыть Из сбисСписокОткрыть Цикл
		Попытка
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ОткрытьЗначение(сбисДокументОткрыть);
			#Иначе
				ПоказатьЗначение(,сбисДокументОткрыть);
			#КонецЕсли
		Исключение
			Сообщить(ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

//Процедура открывает карточку документа на сайте online.sbis.ru	
&НаКлиенте
Процедура ОткрытьДокументОнлайн(Команда)
	ТекущаяСтрока = Кэш.ТаблДок.ТекущиеДанные;
	Если ТекущаяСтрока<>Неопределено Тогда
		фрм = сбисНайтиФормуФункции("ОткрытьДокументОнлайнПоПакету","ФормаГлавноеОкно","",Кэш);
		фрм.ОткрытьДокументОнлайнПоПакету(ТекущаяСтрока.СоставПакета[0].Значение, Кэш);
	КонецЕсли;
КонецПроцедуры

//Нажатие на кнопку проверки настроек
&НаКлиенте
Процедура ПроверкаНастроекНажатие(Команда=Неопределено)
	Кэш.ФормаНастроек.ПараметрыРаботы.Вставить("ВыполнитьПроверку", Истина);
	сбисПолучитьУстановитьНастройки(Кэш, Истина);
КонецПроцедуры

/////////////////Генерируемые кнопки/////////////////

//Функция добавляет кнопку на командную панель главного окна. Вызов функции происходит через поиск в Кэш.МенюРазделов по текущему разделу и идентификатору(имени) кнопки
&НаСервере
Функция сбисДобавитьКнопку(Знач ПараметрыКнопки, Отказ) Экспорт
	Попытка
		Если ПараметрыКнопки.УправляемоеПриложение Тогда
			Если ЭтаФорма.Команды.Найти(ПараметрыКнопки.Имя) = Неопределено Тогда
				НоваяКоманда			= ЭтаФорма.Команды.Добавить(ПараметрыКнопки.Имя);
				НоваяКоманда.Действие	= "сбисВыполнитьКомандуГенерируемойКнопки";//Имя процедуры
				НоваяКоманда.Заголовок	= ПараметрыКнопки.Заголовок;
			КонецЕсли;	
			НовыйЭлемент = ЭтаФорма.Элементы.Добавить(ПараметрыКнопки.Имя,
					                                 Тип("КнопкаФормы"),
													 ЭтаФорма.Элементы[ПараметрыКнопки.Панель]);
			НовыйЭлемент.ИмяКоманды = ПараметрыКнопки.Имя;
		Иначе
			сбисКнопкиПанели = ЭтаФорма.ЭлементыФормы[ПараметрыКнопки.Панель].Кнопки;
			сбисКнопкиПанели.Добавить(ПараметрыКнопки.Имя, Вычислить("ТипКнопкиКоманднойПанели.Действие"), ПараметрыКнопки.Заголовок, Вычислить("Новый Действие(""сбисВыполнитьКомандуГенерируемойКнопки"")"));
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка при добавлении кнопки " + ПараметрыКнопки.Имя + " на форму главного окна: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
КонецФункции

//Функция очищает панель кнопок (КО)
&НаСервере
Функция сбисОчиститьПанельКнопок(Знач ПараметрыПанели, Отказ) Экспорт
	
	Попытка
		Если ПараметрыПанели.УправляемоеПриложение Тогда
			ЭлементыУдалить = ЭтаФорма.Элементы[ПараметрыПанели.Имя].ПодчиненныеЭлементы;
			Пока ЭлементыУдалить.Количество() Цикл
				ЭтаФорма.Элементы.Удалить(ЭлементыУдалить[0]);
			КонецЦикла;
		Иначе
			ЭтаФорма.ЭлементыФормы[ПараметрыПанели.Имя].Кнопки.Очистить();
		КонецЕсли;                                                                                                                   
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", "Ошибка при удалении кнопок панели " + ПараметрыПанели.Имя + " главного окна: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
		
КонецФункции

&НаКлиенте
Процедура СбисКомандаПанелиПечать(Команда)
	СписокОтмеченныхДокументов = ТаблДокПолучитьВыбранныеСтроки();
	ПараметрыПечати = Новый Структура("Кэш, ВФоне,ФормаВызова", Кэш, Истина, ЭтаФорма);
	СписокДляВыбора = Кэш.ОбщиеФункции.ПолучитьВложенияПакетовНаПечать(СписокОтмеченныхДокументов, ПараметрыПечати);
	РезультатПечати = Кэш.ОбщиеФункции.СбисМассоваяПечать(СписокДляВыбора, ПараметрыПечати);
КонецПроцедуры

//Функция делает вызов в зависимости от того, какая команда из должна быть выполнена
&НаКлиенте
Функция сбисВыполнитьКомандуГенерируемойКнопки(Команда) Экспорт 
	
	//Найдем действие, которое требуется выполнить при нажатии.
	РазделКнопки = Неопределено;
	Если	(	Кэш.МенюРазделов.Свойство(Кэш.Текущий.ТипДок,					РазделКнопки)
			Или	Кэш.МенюРазделов.Свойство(Кэш.Текущий.ПредыдущийРаздел.ТипДок,	РазделКнопки))
		И	РазделКнопки.Свойство(Кэш.Текущий.Имя, РазделКнопки) Тогда
		Для Каждого сбисКнопка Из РазделКнопки Цикл
			Если Не сбисКнопка.ИмяКнопки = Команда.Имя Тогда 
				Продолжить;
			КонецЕсли;
			фрм = сбисНайтиФормуФункции(сбисКнопка.МетодАктивации, "РаботаСДокументами1С", "ФормаГлавноеОкно");
			Если Не фрм = Ложь Тогда
				РезультатФункции = Вычислить("фрм." + сбисКнопка.МетодАктивации + "(Кэш, Команда)");
			КонецЕсли;
			Прервать;
		КонецЦикла;
	Иначе
		Сообщить("Не удалось найти вызываемый метод");
	КонецЕсли;
КонецФункции

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ОтправитьПрайс(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если		Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте номенклатуру, для которой необходимо сформировать прайс-лист");
		Возврат Неопределено;
	ИначеЕсли	Не ЗначениеЗаполнено(ТипЦен) Тогда
		Сообщить("Укажите тип цен номенклатуры");
		Возврат Неопределено;
	ИначеЕсли	Не (	ИниНоменклатуры.Свойство("мФайл")
					И	ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования прайса.");
		Возврат Неопределено;
	КонецЕсли;
	ДанныеКаталога	= Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога);
	фрм				= сбисНайтиФормуФункции("сбисСформироватьКаталогТоваров","РаботаСДокументами1С");
	//В методе формирования прайса укажем, что ожидаем структуру результата, без записи в файл
	ПараметрыПрайса = Новый Структура(	"РеквизитСопоставленияНоменклатуры,								ТипЦенНоменклатуры,	ДатаЦен,	ТипCML,	ОжидаемыйРезультат", 
										ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры,	ТипЦен,				ДатаЦен,	"Прайс","СтруктураФайла");
	сбисПрайс		= фрм.сбисСформироватьКаталогТоваров(ДанныеКаталога, ИниНоменклатуры.мФайл.Номенклатура, ПараметрыПрайса);
	//Для сохранения совместимости со старым функционалом: если пришёл текст, то обрабатываем рассылку старым механизмом, без XSLT
	ПараметрыФайлаПрайса= Новый Структура;
	ПараметрыФайлаПрайса.Вставить("Имя",		"ПрайсЛист от " + Формат(ТекущаяДата(), "ДФ=""дд_ММ_гггг"""));
	ПараметрыФайлаПрайса.Вставить("Расширение",	"xml");
	ПараметрыФайлаПрайса.Вставить("Кодировка",	"UTF-16");
	Если ТипЗнч(сбисПрайс) = Тип("Строка") Тогда
		ПараметрыФайлаПрайса.Вставить("Данные", сбисПрайс);
		ОшибкаЗаписи = Ложь;
		ОписаниеФайлаПрайса = Кэш.ОбщиеФункции.сбисЗаписатьФайл_Клиент(Кэш, ПараметрыФайлаПрайса, ОшибкаЗаписи);
		Если ОшибкаЗаписи Тогда
			сбисСообщитьОбОшибке(Кэш, ОписаниеФайлаПрайса);
			Возврат Ложь;
		КонецЕсли;
	Иначе
		сбисПараметрыФайла = Новый СписокЗначений;
		сбисПараметрыФайла.Добавить(Новый Структура("СтруктураФайла, Тип, ОписаниеФайла", сбисПрайс, "PriceMatchingIn", ПараметрыФайлаПрайса), "Вложение");
		
		ОписаниеФайлаПрайса	= Новый Структура;
		ОписаниеФайлаПрайса.Вставить("ИмяФайла",		ПараметрыФайлаПрайса.Имя);
		ОписаниеФайлаПрайса.Вставить("ПараметрыФайла",	сбисПараметрыФайла);
	КонецЕсли;
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(ОписаниеФайлаПрайса);
	
	фрм = сбисНайтиФормуФункции("ПоказатьФорму", "ФормаОтправкиКорреспонденции");	
	фрм.ПоказатьФорму(ЛокальныйКэш, Новый Структура("СписокФайлов, Организация, ТипПакета", МассивФайлов, ВладелецКаталога, "PriceMatchingIn"));
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ОтправитьКаталог(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт 
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	// Формирует и отправляет на онлайн каталог товаров
	Если ЛокальныйКэш.Парам.СпособОбмена = 1 Тогда // каталог
		Сообщить("Отправить каталог товаров можно только при способе обмена SDK или API. Способ обмена указывается в разделе Настройки");
		Возврат Неопределено;
	КонецЕсли;
	ИниНоменклатуры = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Номенклатура");
	Если НЕ (ИниНоменклатуры.Свойство("мФайл") И ИниНоменклатуры.мФайл.Свойство("Номенклатура")) Тогда
		Сообщить("В файле настроек Номенклатура отсутствует настройка для формирования каталога.");
		Возврат Неопределено;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	ДанныеКаталога = Новый Структура("СписокНоменклатуры, Организация", СписокОтмеченных, ВладелецКаталога);
	ИниНоменклатура = Новый Структура;
	ЛокальныйКэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(ИниНоменклатура, ИниНоменклатуры.мФайл.Номенклатура);
	КаталогОтправлен = ЛокальныйКэш.ОбщиеФункции.сбисСформироватьОтправитьКаталогТоваров(ЛокальныйКэш, ДанныеКаталога,ИниНоменклатура,Новый Структура("РеквизитСопоставленияНоменклатуры", ЛокальныйКэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры));
	Если КаталогОтправлен <> Ложь Тогда
		Сообщить("Каталог товаров успешно отправлен");
	КонецЕсли;
	ОтметитьВсе = Ложь;
	ОбновитьКонтент();
	Возврат Истина;
КонецФункции

//Функция генерируемой кнопки отправки в справочниках (Раздел_Справочники_Шаблон.НаСменуРаздела)
&НаКлиенте
Функция ЗагрузитьСотрудниковВСБИС(ЛокальныйКэш=Неопределено, сбисПараметрыОбработчика=Неопределено) Экспорт
	Если ЛокальныйКэш = Неопределено Тогда
		//Для поиска функции без возникновения исключения, просто выйдем.
		Возврат Истина;
	КонецЕсли;
	СписокОтмеченных = Новый СписокЗначений;
	ПолучитьВыбранныеСтроки(СписокОтмеченных, сбисПолучитьЭлементыДерева(Таблица_РеестрСправочников));
	Ини = ЛокальныйКэш.ФормаНастроек.Ини(ЛокальныйКэш, "Сотрудники");
	Если Не СписокОтмеченных.Количество() Тогда
		Сообщить("Отметьте сотрудников, которых необходимо загрузить в СБИС");
		Возврат Неопределено;
	КонецЕсли;
	Если Не (Ини.Свойство("мФайл") И Ини.мФайл.Свойство("Сотрудники")) Тогда
		Сообщить("Отсутствует настройка для загрузки сотрудников в СБИС");
		Возврат Неопределено;
	КонецЕсли;
	Ини = Ини.мФайл.Сотрудники;
	сбисПоказатьСостояние("Формирование данных по сотрудникам", ЭтаФорма);
	фрм	= сбисНайтиФормуФункции("сбисСформироватьДанныеСотрудников","РаботаСДокументами1С");
	ДанныеСотрудников = фрм.сбисСформироватьДанныеСотрудников(ЛокальныйКэш, СписокОтмеченных, Ини);
	сбисПоказатьСостояние("Загрузка сотрудников в СБИС", ЭтаФорма);
	Отказ = Ложь;
	РезультатОтправки = ЛокальныйКэш.Интеграция.сбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ);
	сбисСпрятатьСостояние(ЭтаФорма);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	РезультатОтправки.НеОтправлено = РезультатОтправки.Ошибок;
	РезультатОтправки.Вставить("ЗаголовкиФормыРезультатов", Новый Структура("Форма, ПоложительныйРезультат, ОтрицательныйРезультат, Объект1С, ТиповыеОшибки", "Результат загрузки", "Загружено", "Не загружено", "Сотрудник" ""));
	Кэш.Вставить("РезультатОтправки", РезультатОтправки);
	фрм = сбисНайтиФормуФункции("ПоказатьРезультатОтправки","ФормаРезультатОтправки","", Кэш);
	фрм.ПоказатьРезультатОтправки(Кэш);
	Кэш.Удалить("РезультатОтправки");
	Возврат Истина;
КонецФункции

//////////////////////Прочее////////////////////////

&НаСервере
Функция сбисУстановитьКонтекстноеМеню(ИмяЭлемента, ИмяМеню) Экспорт
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Для Каждого ЭлементМеню Из ЭтаФорма.Элементы[ИмяЭлемента].КонтекстноеМеню.ПодчиненныеЭлементы Цикл
			Если Найти(ЭлементМеню.Имя, ИмяМеню) = 1 Тогда 
				сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, Истина);
			Иначе
				сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, Ложь);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭтаФорма.ЭлементыФормы[ИмяЭлемента].КонтекстноеМеню=ЭтаФорма.ЭлементыФормы[ИмяМеню];
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция сбисУстановитьВидимостьЭлементаМеню(ЭлементМеню, ВидимостьЭлемента)
	ЭлементМеню.Видимость = ВидимостьЭлемента;
	Если ТипЗнч(ЭлементМеню) = Тип("ГруппаФормы") Тогда
		Для Каждого ПодЭлемент Из ЭлементМеню.ПодчиненныеЭлементы Цикл
			сбисУстановитьВидимостьЭлементаМеню(ПодЭлемент, ВидимостьЭлемента);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СбисПоказатьЗначение(ЛокальныйКэш, ОбъектСсылкаПоказать) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ЛокальныйКэш.СовместимостьМетодов.Объекты1С.ПоказатьЗначение Тогда
			СбисСтрокаВыполнить = "ПоказатьЗначение(,ОбъектСсылкаПоказать)";
		Иначе
			СбисСтрокаВыполнить = "ОткрытьЗначение(ОбъектСсылкаПоказать)";
		КонецЕсли;
		Выполнить(СбисСтрокаВыполнить);
	#Иначе
		ПоказатьЗначение(,ОбъектСсылкаПоказать);
	#КонецЕсли
КонецПроцедуры

////////////////////////////////////////////////////
//////////////////Параметры системы/////////////////
////////////////////////////////////////////////////

//Структура с описанием текущей системы. Параметры получаются для текущей конфы.
//Вынесено в общее для сбора сразу всех данных на сервере
&НаКлиенте
Функция ПолучитьПараметрыСистемы(Отказ) Экспорт
	
	СистемнаяИнформацияКлиент = Новый СистемнаяИнформация;
	ПараметрыСистемы = Новый Структура("Сервер,Клиент,Конфигурация,Обработка",Новый Структура, Новый Структура, Новый Структура, Новый Структура);
	Попытка
		//Данные о сервере
		ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы);
		//Данные о конфигурации
		ПараметрыСистемы.Конфигурация.Вставить("URL",		СтрокаСоединенияИнформационнойБазы());
		ПараметрыСистемы.Конфигурация.Вставить("Файловая",	Булево(Найти(ПараметрыСистемы.Конфигурация.URL, "File=")));
		//Данные о клиенте
		ПараметрыСистемы.Клиент.Вставить("УправляемоеПриложение",	ТипЗнч(ЭтаФорма)=Тип("УправляемаяФорма"));
		ПараметрыСистемы.Клиент.Вставить("ВерсияПриложения",		СистемнаяИнформацияКлиент.ВерсияПриложения);
		ПараметрыСистемы.Клиент.Вставить("ТипОС", 					ТипПлатфтормыКлиент(СистемнаяИнформацияКлиент));
		ПараметрыСистемы.Клиент.Вставить("ЭтоLinux",				НРег(Лев(ПараметрыСистемы.Клиент.ТипОС, 5)) = "linux");	
		//Данные о обработке
		СбисВерсия = "2.43.2";
		ВерсияОбработкиКратко = СтрЗаменить(СбисВерсия, ".", Символы.ПС);
		ВерсияОбработкиКратко = СтрПолучитьСтроку(ВерсияОбработкиКратко, 1) + "." + СтрПолучитьСтроку(ВерсияОбработкиКратко, 2);
		ВерсияПлатформыКратко = СтрЗаменить(ПараметрыСистемы.Клиент.ВерсияПриложения, ".", Символы.ПС);
		ВерсияПлатформыКратко = СтрПолучитьСтроку(ВерсияПлатформыКратко, 1) + СтрПолучитьСтроку(ВерсияПлатформыКратко, 2);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СбисИмяОбработки = Строка(ЭтаФорма.ОбработкаОбъект);
			СбисПутьКФормам = "";
		#Иначе
			СбисИмяФормы = СтрЗаменить(ЭтаФорма.ИмяФормы, ".", Символы.ПС);
			СбисИмяОбработки = СтрПолучитьСтроку(СбисИмяФормы, 1) + ".";
			Шаг = 2;
			Пока Шаг < СтрЧислоСтрок(СбисИмяФормы) - 1 Цикл
				СбисИмяОбработки = СбисИмяОбработки + СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
				Шаг = Шаг + 1;
			КонецЦикла;
			СбисПутьКФормам = СтрПолучитьСтроку(СбисИмяФормы, Шаг) + ".";
		#КонецЕсли
		ПараметрыСистемы.Обработка.Вставить("Версия",		СбисВерсия);
		ПараметрыСистемы.Обработка.Вставить("ПолнаяВерсия",	"1C" + ПараметрыСистемы.Сервер.ВерсияПриложения + "_VO");
		ПараметрыСистемы.Обработка.Вставить("ПервыйЗапуск", Не ЗначениеЗаполнено(ПредВерсия));
		ПараметрыСистемы.Обработка.Вставить("НоваяВерсия",	СбисНоваяВерсия(ПараметрыСистемы.Обработка.Версия, ПредВерсия));
		ПараметрыСистемы.Обработка.Вставить("ПолноеИмя",	СбисИмяОбработки);
		ПараметрыСистемы.Обработка.Вставить("КлючФорм",		СбисПутьКФормам);
		ПараметрыСистемы.Обработка.Вставить("КраткаяВерсия","VO" + ВерсияПлатформыКратко + ?(ПараметрыСистемы.Клиент.УправляемоеПриложение, "UF", "OF") + ВерсияОбработкиКратко);
		
		ПараметрыСистемы.Обработка.ПолнаяВерсия = ПараметрыСистемы.Обработка.ПолнаяВерсия + ВерсияОбработкиКратко;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Ошибка определения параметров текущей системы.", ОписаниеОшибки());
	КонецПопытки;
	Попытка
		//Для определения ангийского языка, сделаем заведомо ошибочный вызов и проверим исключение
		СбисТестИсключение = Новый Структура("1");
	Исключение
		СбисОшибка = ОписаниеОшибки();
		Если Найти(СбисОшибка, "calling constructor") Тогда
			ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
		КонецЕсли;
	Конецпопытки;
		
	Возврат	ПараметрыСистемы;	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПараметрыСистемыНаСервере(ПараметрыСистемы)
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	ПараметрыСистемы.Конфигурация.Вставить("Имя",					Метаданные.Имя);
	ПараметрыСистемы.Конфигурация.Вставить("КраткаяИнформация",		Метаданные.КраткаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("ПодробнаяИнформация",	Метаданные.ПодробнаяИнформация);
	ПараметрыСистемы.Конфигурация.Вставить("Версия",				Метаданные.Версия);
	ПараметрыСистемы.Конфигурация.Вставить("ВстроенныйЯзык",		"ru");
	//Для анлгоязычных систем переопределим язык для проверки функций
	Если Найти(Строка(Метаданные), "Metadata") Тогда
		ПараметрыСистемы.Конфигурация.ВстроенныйЯзык = "en";
	КонецЕсли;
	//На толстом клиенте пока берем системную информацию клиента.
	ПараметрыСистемы.Сервер.Вставить("ТипОС", 			ТипПлатфтормыСервер(СистемнаяИнформация));
	ПараметрыСистемы.Сервер.Вставить("ВерсияПриложения",СистемнаяИнформация.ВерсияПриложения);
	ПараметрыСистемы.Сервер.Вставить("ЭтоLinux",		НРег(Лев(ПараметрыСистемы.Сервер.ТипОС, 5)) = "linux");	
	
КонецПроцедуры

//Возвращает строковое представление типа платформы сервера.
&НаСервереБезКонтекста
Функция ТипПлатфтормыСервер(Знач СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция сбисНоваяВерсия(Знач ВерсияНовая, Знач ВерсияТекущая, Знач ДопПараметры = Неопределено) Экспорт 
	
	Если		Не ЗначениеЗаполнено(ВерсияНовая) Тогда
		Возврат Ложь;
	ИначеЕсли	Не ЗначениеЗаполнено(ВерсияТекущая) Тогда
		Возврат Истина;
	КонецЕсли;
	Версия1Разделить = СтрЗаменить(ВерсияНовая, ".", Символы.ПС);
	Версия2Разделить = СтрЗаменить(ВерсияТекущая, ".", Символы.ПС);
	Размер = Макс(СтрЧислоСтрок(Версия1Разделить), СтрЧислоСтрок(Версия2Разделить));
	Результат = Ложь;
	Для Индекс = 1 По Размер Цикл
		Число1Сравнить = 0;
		Число2Сравнить = 0;
		Если СтрЧислоСтрок(Версия1Разделить) >= Индекс Тогда
			Число1Сравнить = Число(СтрПолучитьСтроку(Версия1Разделить, Индекс));
		КонецЕсли;
		Если СтрЧислоСтрок(Версия2Разделить) >= Индекс Тогда
			Число2Сравнить = Число(СтрПолучитьСтроку(Версия2Разделить, Индекс));
		КонецЕсли;
		Если		Число1Сравнить = Число2Сравнить Тогда
			Продолжить;
		ИначеЕсли	Число1Сравнить > Число2Сравнить Тогда
			Результат = Истина;
			Прервать;
		ИначеЕсли	Число1Сравнить < Число2Сравнить Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции	

//Возвращает строковое представление типа платформы клиента.
&НаКлиенте
Функция ТипПлатфтормыКлиент(СистемнаяИнформация)
	
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
	Иначе//Смотрим версию. Если ниже 8.3.7.1845, то маков нет
		Если сбисНоваяВерсия(СистемнаяИнформация.ВерсияПриложения, "8.3.7.1844") Тогда
			Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 Тогда
				Возврат "MacOS_x86";
			ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
				Возврат "MacOS_x86_64";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////
////////////////Совместимость методов///////////////
////////////////////////////////////////////////////

//Функция заполняет параметры для совместимости вызова изменившихся методов на новых релизах платформы 
&НаКлиенте
Функция СбисСовместимостьМетодов(ЛокальныйКэш, ДопПараметры=Неопределено,Отказ=Ложь) Экспорт
	СбисСооветстветствиеВерсий = сбисСоответствиеВерсийМетодов(ДопПараметры);
	СбисЗаполнитьСоответствиеВерсий(ЛокальныйКэш, СбисСооветстветствиеВерсий, Новый Структура("ВспомогательныйРазделитель", "."));
	Возврат СбисСооветстветствиеВерсий;
КонецФункции

&НаКлиенте
Процедура СбисЗаполнитьСоответствиеВерсий(ЛокальныйКэш, сбисСоответствиеВерсий, СбисДополнительныеПараметры)
	Для Каждого КлючИЗначение Из сбисСоответствиеВерсий Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			сбисЗаполнитьСоответствиеВерсий(ЛокальныйКэш, КлючИЗначение.Значение, СбисДополнительныеПараметры);
			Продолжить;
		КонецЕсли;
		лВерсияАктивации = ЛокальныйКэш.ОбщиеФункции.СериализоватьВерсию(КлючИЗначение.Значение, "Дозаполнить", СбисДополнительныеПараметры);
		СбисСоответствиеВерсий[КлючИЗначение.Ключ] = СбисНоваяВерсия(ЛокальныйКэш.ПараметрыСистемы.Клиент.ВерсияПриложения, лВерсияАктивации);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Функция СбисСоответствиеВерсийМетодов(ПараметрыОпределения=Неопределено)
	Результат = Новый Структура;
	Результат.Вставить("ПреобразованиеXSL", Новый Структура("ПреобразоватьИзСтроки", "8.3.10"));
	Результат.Вставить("HTTPСоединение",	Новый Структура("ФункцияПолучить, OpenSSL", "8.3", "8.2.16"));
	Результат.Вставить("Объекты1С",			Новый Структура("ПоказатьЗначение", "8.3.3"));
	Возврат Результат;
КонецФункции
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	ФильтрыПоРазделам = Настройки.Получить("ФильтрыПоРазделам");
КонецПроцедуры

&НаКлиенте
Процедура ДопОперацииРеестра(Команда)
	Если СписокДопОперацийРеестра.Количество() = 0 Тогда
		Сообщить("Для текущего реестра дополнительные операции не предусмотрены.");
		Возврат;
	КонецЕсли;
	ВыбранныеСтроки = ТаблДокПолучитьВыбранныеСтроки();
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		Сообщить("Не отмечены документы для выполнения операции.");
		Возврат;
	КонецЕсли;
	СбисПараметрыВызова = Новый Структура("Кэш, ВыбранныеСтроки", Кэш, ВыбранныеСтроки);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ФормаДопОперации = сбисПолучитьФорму("ФормаДопОперации");
		ВыбранныйЭлемент = ФормаДопОперации.Показать(Кэш, СписокДопОперацийРеестра);
		ПослеВыбораИзМеню(ВыбранныйЭлемент, СбисПараметрыВызова);
	#Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтаФорма, СбисПараметрыВызова);
		ПоказатьВыборИзМеню(Оповещение, СписокДопОперацийРеестра, ЭтаФорма.ТекущийЭлемент);
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, ПараметрыВыбора) Экспорт
	Кэш = ПараметрыВыбора.Кэш;
	ВыбранныеСтроки = ПараметрыВыбора.ВыбранныеСтроки;
	// Обработка выбранного элемента
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяФункции = ВыбранныйЭлемент.Значение;
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С","",Кэш);	
	Если фрм = Ложь Тогда
		Сообщить("Не найдена функция "+ИмяФункции+". Проверьте настройки дополнительных операций для текущего реестра документов.");
		Возврат;	
	КонецЕсли;
	Результат = Вычислить("фрм."+ИмяФункции+"(Кэш, ВыбранныеСтроки)");
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	Если СостояниеЭД = Истина Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ДублироватьСостояние");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		Отказ = Ложь;
		ПараметрыПодсистемы = Кэш.ОбщиеФункции.сбисИнициироватьПодсистему(Кэш, ПараметрыПоиска, Отказ);
		Если Отказ Тогда
			Сообщить("Дублирование статусов в типовые регистры 1С не поддерживается для Вашей конфигурации 1С");
			СостояниеЭД = Ложь;
		Иначе
			ПараметрыПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ПараметрыПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресСервисаОбновленийПриИзменении(Элемент)
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
	сбисУстановитьАдресСервисаОбновлений();
	//--- МАИ 09.09.2021
КонецПроцедуры

//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
&НаКлиенте
Процедура сбисУстановитьАдресСервисаОбновлений()
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("АдресСервисаОбновлений", АдресСервисаОбновлений);
КонецПроцедуры
//--- МАИ 09.09.202

&НаКлиенте
Процедура ИспользоватьГенераторПриИзменении(Элемент)
	ПараметрыПриИзменении(Элемент);
КонецПроцедуры
