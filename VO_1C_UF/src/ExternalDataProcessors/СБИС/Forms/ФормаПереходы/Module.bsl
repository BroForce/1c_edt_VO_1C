&НаКлиенте
Перем МестныйКэш Экспорт;
&НаКлиенте
Перем ЗакрыватьФорму;

//Функция вызова формы переходов
&НаКлиенте
Функция сбисВыбратьДействие(Кэш, ПараметрыДействий) Экспорт
	ЗакрыватьФорму = Ложь;
	УстановитьФормуНаСервере(ПараметрыДействий);
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Возврат ЭтаФорма.ОткрытьМодально();
	#Иначе
		Открыть();
	#КонецЕсли
КонецФункции

///////////////////////////////////////////////////
///////////////////////События/////////////////////
///////////////////////////////////////////////////

//Функция устанавливает форму при создании. Оставлено для совместимости
&НаСервере
Процедура ПриСозданииНаСервере(Отказ=Ложь, СтандартнаяОбработка=Истина)
	Если Не ЭтаФорма.Параметры.Свойство("СоставПакета") Тогда
		Возврат;
	КонецЕсли;
	УстановитьФормуНаСервере(Параметры);
КонецПроцедуры

&НаКлиенте
Процедура ПереходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Отказ = Ложь;
	Результат = ОбработкаВыбора(МестныйКэш, Элемент.ТекущиеДанные.Значение, Отказ);
	Если Отказ Тогда
		СтандартнаяОбработка = Ложь;
		МестныйКэш.ГлавноеОкно.сбисСообщитьОбОшибке(МестныйКэш, Результат, Новый Структура("ФормаВладелец", ЭтаФорма));
	Иначе
		ЗакрыватьФорму = Истина;
		ЭтаФорма.Закрыть(Результат);
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////
////////////////Функции работы формы///////////////
///////////////////////////////////////////////////

&НаСервере
Процедура УстановитьФормуНаСервере(ПараметрыУстановки)
	
	Если	Не ЗначениеЗаполнено(СоставПакета)
		Или	Не ПараметрыУстановки.СоставПакета.Идентификатор = СоставПакета.Идентификатор Тогда
		Комментарий = "";
		Исполнитель = Неопределено;
	КонецЕсли;
	СоставПакета		= ПараметрыУстановки.СоставПакета;
	ВыбранноеДействие	= ПараметрыУстановки.ВыбранноеДействие;
	
	Переходы.Очистить();
	ИндексВставитьДобавить = 0;
	
	//Генерируем действие для Аннулирования.
	Если	Не	ПараметрыУстановки.Свойство("ЕстьАннулирование")
		Или		ПараметрыУстановки.ЕстьАннулирование Тогда
		ДействиеАннулировать = Новый Структура(
			"Идентификатор,	Комментарий,Название,		ТребуетИсполнителя, ТребуетКомментария,	ТребуетПодписания,	ТребуетРасшифровки", 
			"",				"",			"Аннулировать",	"Нет",				"Да",				"Да",				"Нет");
		Переходы.Добавить(ДействиеАннулировать, ДействиеАннулировать.Название);
		ИндексВставитьДобавить = ИндексВставитьДобавить - 1;
	КонецЕсли;
	ЭтапыПакета = Неопределено;
	ПараметрыОтображения = Новый Структура("Заголовок, ИсполнительВидимость", "", Ложь);
	Если СоставПакета.Свойство("Этап", ЭтапыПакета) Тогда
		ПараметрыОтображения.Заголовок = ЭтапыПакета[0].Название;		
		Если ЗначениеЗаполнено(ВыбранноеДействие) Тогда
			ПараметрыОтображения.ИсполнительВидимость = ВыбранноеДействие.ТребуетИсполнителя = "Да";
			Переходы.Вставить(Переходы.Количество() + ИндексВставитьДобавить, ВыбранноеДействие, ВыбранноеДействие.Название);	
		Иначе
			Для Каждого Действие Из ЭтапыПакета[0].Действие Цикл
				Если Действие.ТребуетИсполнителя = "Да" Тогда
					ПараметрыОтображения.ИсполнительВидимость = Истина;
				КонецЕсли;
				Переходы.Вставить(Переходы.Количество() + ИндексВставитьДобавить, Действие, Действие.Название);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ПараметрыУстановки.ЕстьАннулирование Тогда
		ПараметрыОтображения.Заголовок = ДействиеАннулировать.Название;
	Иначе
		ПараметрыОтображения.Заголовок = "Отсутствуют доступные действия";
	КонецЕсли;
	
	Если	ПараметрыОтображения.ИсполнительВидимость
		И	ПараметрыУстановки.Свойство("Конфигурация")	Тогда
		ОпределитьТипПоляИсполнителя(ПараметрыУстановки.Конфигурация);
	КонецЕсли;
	сбисЭлементФормы(ЭтаФорма, "ПанельИсполнитель").Видимость = ПараметрыОтображения.ИсполнительВидимость;
	Заголовок = ПараметрыОтображения.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипПоляИсполнителя(ИниКонфигурации)
	
	МассивТипов	= Новый Массив();
	Если ИниКонфигурации.Свойство("Исполнители") Тогда
		МассивТипов.Добавить(ИниКонфигурации.Исполнители.Значение);
	КонецЕсли;
	ДанныеФормыОграничение	= "ОграничениеТипа";
	Если Строка(ТипЗнч(ЭтаФорма)) = "Форма"	Тогда
		ДанныеФормыОграничение	= "ТипЗначения";
	КонецЕсли;

	ЭлементИсполнителя = сбисЭлементФормы(ЭтаФорма, "Исполнитель");
	Для	Каждого	ПолучитьТип	Из	МассивТипов	Цикл
		Многострочный	= СтрЗаменить(ПолучитьТип, ".", Символы.ПС);
		ТипМетаданных	= СтрПолучитьСтроку(Многострочный, 1);
		Если Не ТипМетаданных = "Справочник" Тогда
			Продолжить;
		КонецЕсли;
		СправочникСтрока= СтрПолучитьСтроку(Многострочный, 2);
		
		Если Метаданные.Справочники.Найти(СправочникСтрока) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЭлементИсполнителя[ДанныеФормыОграничение] = Новый ОписаниеТипов(ТипМетаданных + "Ссылка." + СправочникСтрока);
		ЭлементИсполнителя.КнопкаОчистки = Ложь;
		Возврат;
	КонецЦикла;
	ЭлементИсполнителя.КнопкаОчистки = Истина;
	ЭлементИсполнителя.ВыбиратьТип	= Истина;
	
КонецПроцедуры

&НаСервере
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	Иначе
		Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
	КонецЕсли
КонецФункции

///////////////////////////////////////////////////
//////////////Вспомогательные функции//////////////
///////////////////////////////////////////////////

&НаСервереБезКонтекста
Функция	ДанныеИсполнителя(ИсполнительСсылка)
	
	Если	Не	ЗначениеЗаполнено(ИсполнительСсылка)	Тогда
		Возврат	Неопределено;
	КонецЕсли;
	НедопустимыеСимволы	= "@/^|*\#!&(%_$)?""'" + Символы.НПП + Символы.Таб + Символы.ПС + Символы.ВТаб;
	
	Результат	= Новый	Структура("Фамилия,Имя,Отчество", "","","");
	
	НаименованиеИсполнителя	= СокрЛП(ИсполнительСсылка.Наименование);
	Для	шаг	= 1 По	СтрДлина(НедопустимыеСимволы)	Цикл//убрать лишние, системные символы, буде таковые имеются.
		НаименованиеИсполнителя	= СтрЗаменить(НаименованиеИсполнителя, Сред(НедопустимыеСимволы, шаг, 1), "");
	КонецЦикла;
	Пока СтрЧислоВхождений(НаименованиеИсполнителя, "  ") > 0 Цикл//сократить лишние пробелы перед разбивкой
		НаименованиеИсполнителя	= СтрЗаменить(НаименованиеИсполнителя, "  ", " ");
	КонецЦикла;
	
	НаименованиеИсполнителя	= СтрЗаменить(НаименованиеИсполнителя, " ", Символы.ПС);
	шаг = 0;
	Для	Каждого	КлючИЗначение	Из	Результат	Цикл
		шаг = шаг	+ 1;
		Если	СтрЧислоСтрок(НаименованиеИсполнителя)	< шаг	Тогда
			Прервать;
		КонецЕсли;
		Результат.Вставить(КлючИЗначение.Ключ, СтрПолучитьСтроку(НаименованиеИсполнителя, шаг));
	КонецЦикла;
	
	Результат.Вставить("Идентификатор", Строка(ИсполнительСсылка.УникальныйИдентификатор()));
	
	Возврат	Результат;
	
КонецФункции

&НаКлиенте
Функция ОбработкаВыбора(Кэш, ЗначениеВыбора, Отказ)
	
	РезультатВыбора = Новый Структура("Действие,Комментарий",ЗначениеВыбора, Комментарий);
	
	Если Не МестныйКэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Исполнитель	= ЭтаФорма.ЭлементыФормы.Исполнитель.Значение;//для ОФ реквизита нет, так как меняется тип поля ввода
	КонецЕсли;
	Если	ЗначениеВыбора.ТребуетКомментария = "Да"
		И	ПустаяСтрока(Комментарий) Тогда
			Отказ = Истина;
			Возврат Новый Структура("code, message, details", 780, "Не заполнено обязательное поле", "Для выполнения операции, необходимо указать комментарий!")
	КонецЕсли;
	ДанныеИсполнителя = Неопределено;
	Если	ЗначениеВыбора.Свойство("ТребуетИсполнителя")
		И	ЗначениеВыбора.ТребуетИсполнителя = "Да" Тогда
		Если ЗначениеЗаполнено(Исполнитель)	Тогда
			ДанныеИсполнителя = ДанныеИсполнителя(Исполнитель);
		Иначе
			Отказ	= Истина;
			Возврат Новый Структура("code, message, details", 780, "Не заполнено обязательное поле", "Для выполнения операции, необходимо указать исполнителя!")
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеВыбора.Название = "Аннулировать" Тогда
		РезультатЗапроса = Кэш.ОбщиеФункции.СформироватьЗапросНаАннулирование(Кэш, Новый Структура("ИдентификаторПакета, Действие", СоставПакета.Идентификатор, ЗначениеВыбора), Отказ);
		Если Отказ Тогда
			Возврат РезультатЗапроса;
		КонецЕсли;
		Для Каждого КлючИЗначение Из РезультатЗапроса Цикл 
			РезультатВыбора.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеИсполнителя)	Тогда
		РезультатВыбора.Вставить("Исполнитель", ДанныеИсполнителя);
	КонецЕсли;
	Возврат РезультатВыбора;
		
КонецФункции

// TODO 39 вместо этого сделать получение новой формы
// ПередЗакрытием - таким извращенным способом боремся с тем, что при закрытии формы по крестику, в Результате возвращается структура от предыдущего закрытия формы
// Например, если на одном документе выбрали команду Утвердить, а потом на другом доке открыли форму переходов и закрыли по крестику, то в результате все равно возвращается действие Утвердить
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Не ЗакрыватьФорму = Истина Тогда
		Отказ = Истина;
        ПодключитьОбработчикОжидания("ЗакрытьФорму", 0.1, Истина);		
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму() Экспорт
    ЗакрыватьФорму = Истина;
    Закрыть();
КонецПроцедуры
