// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеИзДокумента1С(Кэш,Контекст) Экспорт
// Функция формирует структуру выгружаемого файла и добавляет его в состав пакета	
	Попытка		
		
		Контекст.Вставить("ТаблДок",Новый Структура());
		Контекст.ТаблДок.Вставить("ИтогТабл",Новый Массив);
		Контекст.ТаблДок.Вставить("СтрТабл",Новый Массив);
		
		ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст);
		//Если Контекст.ТаблДок.СтрТабл.Количество() = 0 Тогда//нет такого документа
		//	Возврат Истина;
		//КонецЕсли;		
		
		Док  = Новый Структура;
		Док.Вставить("Файл",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Файл",Контекст.ФайлДанные,Док.Файл);
		Док.Файл.Вставить("Документ",Новый Структура);
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Документ",Контекст.ФайлДанные,Док.Файл.Документ);
		
		СписокУзлов = Новый СписокЗначений;
		Период  = Новый Структура;
		Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Период",Контекст.ФайлДанные, Период);
		СписокУзлов.Добавить(Период, "Период");
		//Док.Файл.Документ.Вставить("Период",Новый Структура);
		//ЗаполнитьАтрибуты(Кэш,"Период",Контекст.ФайлДанные,Док.Файл.Документ.Период);
		
		ОтправительРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Отправитель_Роль", Контекст.ФайлДанные, Кэш);
		ПолучательРоль=Кэш.ОбщиеФункции.РассчитатьЗначение("Получатель_Роль", Контекст.ФайлДанные, Кэш);
		Если Не ЗначениеЗаполнено(ОтправительРоль) Тогда
			ОтправительРоль = "Отправитель";
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолучательРоль) Тогда
			ПолучательРоль = "Получатель";
		КонецЕсли;
		Для Каждого Параметр Из Контекст.ФайлДанные.мСторона Цикл
			Если Параметр.Значение.Свойство("Роль") Тогда
				Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Роль",Параметр.Значение,Кэш);
			Иначе
				Роль = Кэш.ОбщиеФункции.РассчитатьЗначение("Сторона_Роль",Параметр.Значение,Кэш);
			КонецЕсли;
			Если Роль = ОтправительРоль Тогда
				Сертификат = Кэш.ОбщиеФункции.РассчитатьЗначение("Сертификат",Параметр.Значение,Кэш);
			КонецЕсли;
			Сторона = Кэш.ОбщиеФункции.ПолучитьСторону(Кэш,Параметр.Значение);     //?????
			Если Сторона<>Неопределено Тогда
				СписокУзлов.Добавить(Сторона, Роль);
			КонецЕсли;
		КонецЦикла;
		//Сортируем узлы по алфавиту
		СписокУзлов.СортироватьПоПредставлению();
		Для Сч = 0 по СписокУзлов.Количество()-1 Цикл
			Док.Файл.Документ.Вставить(СписокУзлов.Получить(Сч).Представление, СписокУзлов.Получить(Сч).Значение);
		КонецЦикла;
		
		Если Не Док.Файл.Документ.Свойство(ПолучательРоль) Тогда
			Сообщить("Не удалось определить ИНН получателя документа "+строка(Контекст.Документ));
			Возврат Ложь;
		КонецЕсли;
		Если Не Док.Файл.Документ.Свойство(ОтправительРоль) Тогда
			Сообщить("Не удалось определить ИНН отправителя документа "+строка(Контекст.Документ));
			Возврат Ложь;
		КонецЕсли;
		Отправитель = Док.Файл.Документ[ОтправительРоль]; 
		Получатель = Док.Файл.Документ[ПолучательРоль];
		Если Док.Файл.Свойство("Имя") Тогда
			Если Док.Файл.Документ[ПолучательРоль].Свойство("Идентификатор") и Док.Файл.Документ[ОтправительРоль].Свойство("Идентификатор") Тогда
				Док.Файл.Имя = Док.Файл.Имя + Док.Файл.Документ[ПолучательРоль].Идентификатор+"_"+Док.Файл.Документ[ОтправительРоль].Идентификатор;
			КонецЕсли;
			Док.Файл.Имя = Док.Файл.Имя+"_"+Формат(ТекущаяДата(),"ДФ=ггггММдд")+"_"+строка(Новый УникальныйИдентификатор());
		КонецЕсли;
		
		Если Контекст.ФайлДанные.Свойство("мПараметр") Тогда
			Док.Файл.Документ.Вставить("Параметр",Новый Массив);
			Для Каждого Элемент Из Контекст.ФайлДанные.мПараметр Цикл
				Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Элемент.Значение);
				Параметр = Новый Структура();
				Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст.ФайлДанные,Параметр);
				Док.Файл.Документ.Параметр.Добавить(Параметр);
			КонецЦикла;
		КонецЕсли;
		
		ОтветственныйСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруОтветственного(Кэш,Контекст);
		ПодразделениеСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруПодразделения(Кэш,Контекст);
		РегламентСтруктура = Кэш.ОбщиеФункции.ПолучитьСтруктуруРегламента(Кэш,Контекст);
		ОснованияМассив = Кэш.ОбщиеФункции.ПолучитьМассивОснований(Кэш,Контекст);
		ДатаВложения = ?(Док.Файл.Документ.Свойство("Дата"), Док.Файл.Документ.Дата, "");
		НомерВложения = ?(Док.Файл.Документ.Свойство("Номер"), Док.Файл.Документ.Номер, "");
		СуммаВложения = Формат(0, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		НазваниеВложения = ?(Док.Файл.Документ.Свойство("Название"), Док.Файл.Документ.Название+" № "+НомерВложения+" от "+ДатаВложения, "");
		Тип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_Тип", Контекст.ФайлДанные,Кэш);
		ПодТип = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодТип", Контекст.ФайлДанные,Кэш);
		ВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ВерсияФормата", Контекст.ФайлДанные,Кэш);
		ПодВерсияФормата = Кэш.ОбщиеФункции.РассчитатьЗначение("Вложение_ПодВерсияФормата", Контекст.ФайлДанные,Кэш);
		Примечание = Кэш.ОбщиеФункции.РассчитатьЗначение("Примечание", Контекст.ФайлДанные,Кэш);
		
		Док.Файл.Документ.Вставить("ТаблДок",Контекст.ТаблДок);
		
		Вложение = Новый Структура("СтруктураДокумента,Отправитель,Получатель,Ответственный,Подразделение,Регламент,ДокументОснование, Документ1С, Название, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,Дата,Номер,Сумма", Док,Отправитель,Получатель,ОтветственныйСтруктура,ПодразделениеСтруктура,РегламентСтруктура,ОснованияМассив, Контекст.Документ, НазваниеВложения, Тип, ПодТип, ВерсияФормата,ПодВерсияФормата,ДатаВложения,НомерВложения,СуммаВложения);
		Если ЗначениеЗаполнено(Примечание) Тогда
			Вложение.Вставить("Примечание",Примечание);	
		КонецЕсли;
		Если ЗначениеЗаполнено(Сертификат) Тогда
			Вложение.Вставить("Сертификат",Сертификат);	
		КонецЕсли;
		Контекст.СоставПакета.Вложение.Добавить(Вложение);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеФормированияДокумента","Файл_"+Контекст.ФайлДанные.Файл_Формат+"_"+СтрЗаменить(СтрЗаменить(Контекст.ФайлДанные.Файл_ВерсияФормата, ".", "_"), " ", ""),"Файл_Шаблон", Кэш);
		Если фрм<>Ложь Тогда
			фрм.сбисПослеФормированияДокумента(Док, Кэш, Контекст);	
			Вложение.СтруктураДокумента = Док; // на случай, если Док поменялся в функции сбисПослеФормированияДокумента
		КонецЕсли;

		Возврат Истина;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
КонецФункции

// Функция формирует структуру табличной части файла	
&НаКлиенте
Функция ПолучитьТабличнуюЧастьДокумента1С(Кэш,Контекст) Экспорт
	Перем ДанныеДокумента, Остатки;
	Для Каждого Параметр Из Контекст.ФайлДанные.мТаблДок Цикл
		сч=0;
		ИтогиОснования = Новый Структура;
		ОбщиеИтоги = Новый Структура("Отправитель", Новый Структура("ИтогДебет,ИтогКредит", 0, 0));
		
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			ТабЧастьДокумента = Параметр.Значение;
		Иначе
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные, Параметр.Значение);
			//В случае, если получаем данные из документа через Узел ДанныеПоВзаиморасчетам, то функция/запрос должны вернуть структуру с полями ТабЧастьДокумента, НачальныйОстаток
			//Иначе будет посчитано старым алгоритмом, с обращением к узлам ОстатокНаНачало, ТаблДок
			ДанныеДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ДанныеПоВзаиморасчетам", Контекст.ФайлДанные, Кэш);
			Если ДанныеДокумента = Неопределено Тогда
				ТабЧастьДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение("ТаблДок", Контекст.ФайлДанные, Кэш);
			Иначе
				ТабЧастьДокумента = ДанныеДокумента.ТабЧастьДокумента;
				ОстаткиНачало = ДанныеДокумента.Остатки;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Стр Из ТабЧастьДокумента Цикл
			сч=сч+1;
			НоваяСтрока = Новый Структура;
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ТаблДок",Стр,НоваяСтрока);			
			
			Если ЗначениеЗаполнено(Стр.ДокументТабл) Тогда
				НоваяСтрока.Вставить("Название", Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Стр.ДокументТабл, "Синоним"));
			Иначе
				НоваяСтрока.Вставить("Название", Стр.ТаблДок_Примечание);
			КонецЕсли;
			
			Если Стр.Свойство("мОснование") Тогда
				
				Для Каждого ПараметрОснование Из Стр.мОснование Цикл
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр, ПараметрОснование.Значение);
					Основание = Новый Структура();
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание", Стр, Основание);
					НоваяСтрока.Вставить("Основание", Основание);
					
					УнИдентификатор = СтрЗаменить("Д" + Стр.Основание.УникальныйИдентификатор(), "-", "");
					Если не ИтогиОснования.Свойство(Стр.ТаблДок_Раздел) Тогда
						ИтогиОснования.Вставить(Стр.ТаблДок_Раздел, Новый Структура);
					КонецЕсли;
					Если не ИтогиОснования[Стр.ТаблДок_Раздел].Свойство(УнИдентификатор) Тогда
						УзелОснования = Новый Структура;
						сбисПолучитьФорму("РаботаСдокументами1С").сбисСкопироватьСтруктуру(УзелОснования, Основание);
						ИтогиОснования[Стр.ТаблДок_Раздел].Вставить(УнИдентификатор, Новый Структура("Основание, УзелОснования, Дебет, Кредит", Стр.Основание, УзелОснования, 0, 0));
					КонецЕсли;
					ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Дебет = ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Дебет + НоваяСтрока.Дебет;
					ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Кредит = ИтогиОснования[Стр.ТаблДок_Раздел][УнИдентификатор].Кредит + НоваяСтрока.Кредит;
				КонецЦикла;
			КонецЕсли;
			
			Если Стр.Свойство("мПараметр") Тогда
				НоваяСтрока.Вставить("Параметр", Новый Массив);
				Для Каждого Элемент Из Стр.мПараметр Цикл
					Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Стр,Элемент.Значение);
					Параметр = Новый Структура();
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Стр,Параметр);
					НоваяСтрока.Параметр.Добавить(Параметр);
				КонецЦикла;
			КонецЕсли;
			
			Если не ОбщиеИтоги.Свойство(Стр.ТаблДок_Раздел) Тогда
				ОбщиеИтоги.Вставить(Стр.ТаблДок_Раздел, Новый Структура("ИтогДебет,ИтогКредит", 0, 0));
			КонецЕсли;
			
			ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогДебет = ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогДебет + НоваяСтрока.Дебет;
			ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогКредит = ОбщиеИтоги[Стр.ТаблДок_Раздел].ИтогКредит + НоваяСтрока.Кредит;
			
			Контекст.ТаблДок.СтрТабл.Добавить(НоваяСтрока);
		КонецЦикла;
		
		
		Для Каждого Элемент Из ОбщиеИтоги Цикл
			//Заполним начальное сальдо
			НачСальдо = Новый Структура;
			Если ЗначениеЗаполнено(ОстаткиНачало) Тогда
				Если Элемент.Ключ = "Отправитель" Тогда
					НачСальдоДебет = Макс(0, Число(ОстаткиНачало.НачальныйОстатокДебет));
					НачСальдоКредит = Макс(0, -Число(ОстаткиНачало.НачальныйОстатокКредит));
				Иначе
					НачСальдоДебет = Макс(0, Число(ОстаткиНачало.НачальныйОстатокДебетКонтрагент));
					НачСальдоКредит = Макс(0, -Число(ОстаткиНачало.НачальныйОстатокКредитКонтрагент));
				КонецЕсли;
			Иначе	
				ОстатокНаНачало = Кэш.ОбщиеФункции.РассчитатьЗначение("ОстатокНаНачало", Контекст.ФайлДанные, Кэш);
				Если Элемент.Ключ = "Отправитель" Тогда
					НачСальдоДебет = Макс(0, Число(ОстатокНаНачало));
					НачСальдоКредит = Макс(0, -Число(ОстатокНаНачало));
				Иначе
					НачСальдоДебет = Макс(0, -Число(ОстатокНаНачало));
					НачСальдоКредит = Макс(0, Число(ОстатокНаНачало));
				КонецЕсли;
			КонецЕсли;
			НачСальдо.Вставить("Дебет", Формат(НачСальдоДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			НачСальдо.Вставить("Кредит", Формат(НачСальдоКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			НачСальдо.Вставить("Тип", "Сальдо начальное");	
			НачСальдо.Вставить("Дата", Контекст.ФайлДанные.Период_ДатаНач);	
			НачСальдо.Вставить("Раздел", Элемент.Ключ);
			Контекст.ТаблДок.ИтогТабл.Добавить(НачСальдо);
			
			//Заполним итоги по оборотам
			ИтогТабл = Новый Структура;
			ИтогТабл.Вставить("Дебет", Формат(Элемент.Значение.ИтогДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ИтогТабл.Вставить("Кредит", Формат(Элемент.Значение.ИтогКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			ИтогТабл.Вставить("Тип", "Обороты");		
			ИтогТабл.Вставить("Раздел", Элемент.Ключ); 
			//Добавим в итоги обротов итоги по основанию
			ИтогТабл.Вставить("Основание", Новый Массив);
			Если ИтогиОснования.Свойство(Элемент.Ключ) Тогда
				Для каждого Строка из ИтогиОснования[Элемент.Ключ] Цикл
					Основание = Строка.Значение.УзелОснования;
					Основание.Вставить("Дебет", Строка.Значение.Дебет);
					Основание.Вставить("Кредит", Строка.Значение.Кредит);			
					ИтогТабл.Основание.Добавить(Основание);
				КонецЦикла;	
			КонецЕсли;
						
			//Рассчитаем и заполним конечное сальдо
			КонСальдо = Новый Структура;		
			КонСальдоДебет = Макс(0, НачСальдоДебет - НачСальдоКредит + Элемент.Значение.ИтогДебет - Элемент.Значение.ИтогКредит);
			КонСальдоКредит = Макс(0, НачСальдоКредит - НачСальдоДебет + Элемент.Значение.ИтогКредит - Элемент.Значение.ИтогДебет);
			КонСальдо.Вставить("Дебет", Формат(КонСальдоДебет, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			КонСальдо.Вставить("Кредит", Формат(КонСальдоКредит, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00"));	
			КонСальдо.Вставить("Тип", "Сальдо конечное");	
			КонСальдо.Вставить("Дата", Контекст.ФайлДанные.Период_ДатаКнц);	
			КонСальдо.Вставить("Раздел", Элемент.Ключ);//Берем раздел из последней строки табличной части
			Контекст.ТаблДок.ИтогТабл.Добавить(КонСальдо);
			
			
			Контекст.ТаблДок.ИтогТабл.Добавить(ИтогТабл);
		КонецЦикла;
	КонецЦикла;	
КонецФункции	
