////////////////////////////////////////////////////////////
///////////////функции для совместимости кода///////////////
////////////////////////////////////////////////////////////

// Копирует СтруктураОткуда в СтруктураКуда	
&НаСервереБезКонтекста
Процедура сбисСкопироватьСтруктуру(СтруктураКуда, Знач СтруктураОткуда)  Экспорт
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
				СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			КонецЕсли;
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

////////////////////////////////////////////////////////////
//////////////Установить стандартные настройки//////////////
////////////////////////////////////////////////////////////

// Устанавливает настройки из доступных файлов настроек	
&НаКлиенте
Функция	УстановитьСтандартныеНастройки(Кэш, ПараметрыУстановкиНастроек, Отказ) Экспорт
	Перем КаталогРаспакованныхИни;
	Если Не ПараметрыУстановкиНастроек.Свойство("ВременныйКаталогРаспаковкиИни", КаталогРаспакованныхИни) Тогда
		КаталогРаспакованныхИни = СбисРаспаковатьНастройки(Кэш, ПараметрыУстановкиНастроек, Отказ);
		Если Отказ Тогда
			Возврат Кэш.ОбщиеФункции.сбисИсключение(КаталогРаспакованныхИни, "ФайлыНастроекКаталог.УстановитьСтандартныеНастройки");
		КонецЕсли;
	КонецЕсли;
	СписокТиповНастроек				= СформироватьСписокДоступныхНастроек(Кэш, КаталогРаспакованныхИни);
	СтруктураФайловДляКонфигурации	= Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис);
	Если СтруктураФайловДляКонфигурации.МассивИни = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	УстановитьСтандартныеНастройкиНаСервере(ПараметрыУстановкиНастроек, СтруктураФайловДляКонфигурации.МассивИни);
КонецФункции

// Устанавливает настройки из доступных файлов настроек	на сервере
&НаСервереБезКонтекста
Процедура	УстановитьСтандартныеНастройкиНаСервере(ПараметрыУстановки, МассивФайлов) Экспорт
	Для Каждого СбисФайл Из МассивФайлов Цикл
		Если Сред(СбисФайл.Имя, Найти(СбисФайл.Имя, ".") + 1, 1) = "0" Тогда    // Файл не нужно ставить по умолчанию
			Продолжить;
		Иначе
			КопироватьФайл(СбисФайл.ПолноеИмя, ПараметрыУстановки.КаталогНастроек + ПараметрыУстановки.Разделитель + СбисФайл.Имя);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////
//////////////////Работа с Файлами инишек///////////////////
////////////////////////////////////////////////////////////

//Чтение//

//Читает файлы инишек
&НаКлиенте
Функция		СформироватьСтруктуруИниНаКлиенте(Кэш, МассивУстановленныхИниФайлов, РежимРаботы)//Контекст на клиенте для выгрузки/загруки из каталога
	
	// Формирует структуру установленных файлов настроек
	Если	РежимРаботы	= "ЗагрузкаИзКаталога"	Тогда
		Возврат	СформироватьСтруктуруИниВКонтекстеКлиента(МассивУстановленныхИниФайлов);
	Иначе
		ЧтениеНастроекПоТребованию = Кэш.Парам.ЧтениеНастроекПоТребованию И Не (Кэш.Текущий.ТипДок = "ФайлыНастроек");
		ПараметрыФормированияНастроек = Новый Структура("ЧтениеНастроекПоТребованию", ЧтениеНастроекПоТребованию);
		Возврат СформироватьСтруктуруИни(МассивУстановленныхИниФайлов, ПараметрыФормированияНастроек);
	КонецЕсли;
	
КонецФункции

//Формирует структуру установленных файлов настроек	
&НаСервереБезКонтекста
Функция		СформироватьСтруктуруИни(МассивУстановленныхИниФайлов, сбисДополнительныеПараметры)
	
	ПолучитьДанныеИни =	Не	сбисДополнительныеПараметры.Свойство("ЧтениеНастроекПоТребованию")
					Или	Не 	сбисДополнительныеПараметры.ЧтениеНастроекПоТребованию;
	Ини = Новый Структура;
	Для Каждого ИниФайл Из МассивУстановленныхИниФайлов Цикл
		Если	ИниФайл.Ини_ИмяИни = "Конфигурация"//Файл конфигурации в любом случае понадобится, поэтому всё равно читаем его, даже с отключенными данными.
			Или	ПолучитьДанныеИни Тогда
			сбисПолучитьСтруктуруИни(Ини, ИниФайл);
		ИначеЕсли ЗначениеЗаполнено(ИниФайл.ИмяФайла) Тогда
			Ини.Вставить(ИмяИниИзИмениФайла(ИниФайл.ИмяФайла), Неопределено);
		ИначеЕсли ИниФайл.ЕстьИзменения Тогда//Целиком пользовательская инишка
			Ини.Вставить(ИмяИниИзИмениФайла(ИниФайл.ИмяФайлаКлиента), Неопределено);
		КонецЕсли;
	КонецЦикла;
	Возврат Ини;
	
КонецФункции	

// формирует структуру файла настроек	
&НаСервереБезКонтекста
Функция		ПолучитьСтруктуруИниФайла(Ини, Путь, ИмяФайла)
	ИмяИни = ИмяИниИзИмениФайла(ИмяФайла);
	Возврат ПолучитьСтруктуруИниФайлаВИмяИни(Ини, Путь, ИмяФайла, ИмяИни);
КонецФункции

// формирует структуру файла настроек и кладет ее в структуру ини под указанным именем (имя ини отличается от имени файла в случае, если указана ссылка на базовый файл настроек)
&НаСервереБезКонтекста
Функция		ПолучитьСтруктуруИниФайлаВИмяИни(Ини, Путь, ИмяФайла, ИмяИни)
	
	ТаблицаОшибок = Новый Массив();
	Если Не Ини.Свойство(ИмяИни) Тогда
		Ини.Вставить(ИмяИни, Новый Структура);
	КонецЕсли;
	СтруктураИниФайла = Ини[ИмяИни];
	
	ПолноеИмяФайла = Путь+ИмяФайла;
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ПостроительDOM = Новый ПостроительDOM; 
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ЭлементыБазовыйФайлНастроек = ДокументДОМ.ПолучитьЭлементыПоИмени("БазовыйФайлНастроек");
		// Если есть ссылка на базовый файл настроек, то заполняем сначала структуру по базовому файлу, а потом накладываем на нее структуру текущего файла
		Если ЭлементыБазовыйФайлНастроек.Количество() = 1 Тогда
			ЭлементБазовыйФайлНастроек = ЭлементыБазовыйФайлНастроек.Элемент(0);
			БазовыйФайлНастроек = СокрЛП(СтрЗаменить(ЭлементБазовыйФайлНастроек.ТекстовоеСодержимое,"'",""));
			НайденныеФайлы = НайтиФайлы(Путь+БазовыйФайлНастроек);
			Если НайденныеФайлы.Количество() = 1 Тогда
				ПолучитьСтруктуруИниФайлаВИмяИни(Ини, Путь, НайденныеФайлы[0].Имя, ИмяИни);
			Иначе
				НоваяОшибка = Новый Структура();
				НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
				НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
				НоваяОшибка.Вставить("ТекстОшибки","Не найден файл """+Путь+БазовыйФайлНастроек+""", указанный в качестве базового");
				НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
				НоваяОшибка.Вставить("ИмяОбъекта","");
				НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
				ТаблицаОшибок.Добавить(НоваяОшибка);
			КонецЕсли;
		КонецЕсли;
		ЗаписатьДОМВСтруктуру(ДокументДОМ.ПервыйДочерний.ПервыйДочерний, СтруктураИниФайла,ТаблицаОшибок);	
		ЧтениеXML.Закрыть();
	Исключение
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
		НоваяОшибка.Вставить("ТекстОшибки","Не удалось открыть файл, либо невалидный xml. "+ОписаниеОшибки());
		НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
		НоваяОшибка.Вставить("ИмяОбъекта","");
		НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
		ТаблицаОшибок.Добавить(НоваяОшибка);
		
	КонецПопытки;
	
	СтруктураИниФайла.Вставить("сбисОшибки",ТаблицаОшибок);
	СтруктураИниФайла.Вставить("сбисПолноеИмяФайла",ПолноеИмяФайла);
	СтруктураИниФайла.Вставить("сбисИмяФайла",ИмяФайла);
	
	Возврат СтруктураИниФайла;
КонецФункции

//Дубль функции формирования структуры ини на клиенте. Для УФ - контекст клиента для удобства выгрузки файлов ини.
&НаКлиенте
Функция		СформироватьСтруктуруИниВКонтекстеКлиента(МассивУстановленныхИниФайлов)
	
	// Формирует структуру установленных файлов настроек	
	Ини = Новый Структура;
	Для Каждого ИниФайл Из МассивУстановленныхИниФайлов Цикл
		ПолучитьСтруктуруИниФайлаВКонтекстеКлиента(ини,ИниФайл.ПутьДоИниФайла,ИниФайл.ИмяФайла);  //получили структуру типового ини файла (.sbis.ini)
		Если ИниФайл.ЕстьИзменения Тогда
			ПолучитьСтруктуруИниФайлаВКонтекстеКлиента(ини,ИниФайл.ПутьДоИниФайла,ИниФайл.ИмяФайлаКлиента); //получили структуру ини файла клиента и заменили его элементами
		КонецЕсли;	
	КонецЦикла;
	Возврат Ини;
	
КонецФункции	

//Дубль функции получения данных структуры ини на клиенте. Для УФ - контекст клиента для удобства загрузки файлов ини.
&НаКлиенте
Функция		ПолучитьСтруктуруИниФайлаВКонтекстеКлиента(ини,Путь, ИмяФайла)
	// формирует структуру файла настроек	
	ИмяИни = ИмяИниИзИмениФайла(ИмяФайла);
	Возврат ПолучитьСтруктуруИниФайлаВИмяИниВКонтекстеКлиента(ини, Путь, ИмяФайла, ИмяИни);
КонецФункции

&НаКлиенте
Функция		ПолучитьСтруктуруИниФайлаВИмяИниВКонтекстеКлиента(ини, Путь, ИмяФайла, ИмяИни)
	// формирует структуру файла настроек и кладет ее в структуру ини под указанным именем (имя ини отличается от имени файла в случае, если указана ссылка на базовый файл настроек)
	
	ТаблицаОшибок = Новый Массив();
	Если Не Ини.Свойство(ИмяИни) Тогда
		Ини.Вставить(ИмяИни, Новый Структура);
	КонецЕсли;
	СтруктураИниФайла = Ини[ИмяИни];
	
	ПолноеИмяФайла = Путь+ИмяФайла;
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
		ПостроительDOM = Новый ПостроительDOM; 
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ЭлементыБазовыйФайлНастроек = ДокументДОМ.ПолучитьЭлементыПоИмени("БазовыйФайлНастроек");
		// Если есть ссылка на базовый файл настроек, то заполняем сначала структуру по базовому файлу, а потом накладываем на нее структуру текущего файла
		Если ЭлементыБазовыйФайлНастроек.Количество() = 1 Тогда
			ЭлементБазовыйФайлНастроек = ЭлементыБазовыйФайлНастроек.Элемент(0);
			БазовыйФайлНастроек = СокрЛП(СтрЗаменить(ЭлементБазовыйФайлНастроек.ТекстовоеСодержимое,"'",""));
			НайденныеФайлы = НайтиФайлы(Путь+БазовыйФайлНастроек);
			Если НайденныеФайлы.Количество() = 1 Тогда
				ПолучитьСтруктуруИниФайлаВИмяИни(ини, Путь, НайденныеФайлы[0].Имя, ИмяИни);
			Иначе
				НоваяОшибка = Новый Структура();
				НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
				НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
				НоваяОшибка.Вставить("ТекстОшибки","Не найден файл """+Путь+БазовыйФайлНастроек+""", указанный в качестве базового");
				НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
				НоваяОшибка.Вставить("ИмяОбъекта","");
				НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
				ТаблицаОшибок.Добавить(НоваяОшибка);
			КонецЕсли;
		КонецЕсли;
		ЗаписатьДОМВСтруктуруВКонтекстеКлиента(ДокументДОМ.ПервыйДочерний.ПервыйДочерний, СтруктураИниФайла,ТаблицаОшибок);	
		ЧтениеXML.Закрыть();
	Исключение
		НоваяОшибка = Новый Структура();
		НоваяОшибка.Вставить("ИмяПараметра", "Файл настройки");
		НоваяОшибка.Вставить("ЗначениеПараметра", ИмяФайла);
		НоваяОшибка.Вставить("ТекстОшибки","Не удалось открыть файл, либо невалидный xml. "+ОписаниеОшибки());
		НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
		НоваяОшибка.Вставить("ИмяОбъекта","");
		НоваяОшибка.Вставить("ПолныйПуть", ПолноеИмяФайла);
		ТаблицаОшибок.Добавить(НоваяОшибка);
		
	КонецПопытки;
	
	СтруктураИниФайла.Вставить("сбисОшибки",ТаблицаОшибок);
	СтруктураИниФайла.Вставить("сбисПолноеИмяФайла",ПолноеИмяФайла);
	СтруктураИниФайла.Вставить("сбисИмяФайла",ИмяФайла);
	
	Возврат СтруктураИниФайла;
КонецФункции

//Запись//

//Формирует клиентские инишки по итогам проверки с ошибками
&НаСервереБезКонтекста
Процедура	сбисСформироватьИниФайлыКлиентаНаСервере(СписокИниФайловДляПроверки, ВыгружаемыеИни, КаталогНастроек, РежимРаботы)
	
	Для	Каждого	ИниФайл Из СписокИниФайловДляПроверки	Цикл
		ИмяБезРасширения	= ИниФайл.Ини_ИмяБезРасширения;
		ИмяИни				= ИниФайл.Ини_ИмяИни;
		
		Если	Не	ВыгружаемыеИни.Свойство(ИмяИни)	Тогда
			Продолжить;
		КонецЕсли;
		
		сбисСформироватьИниФайлКлиентаНаСервере(ИмяБезРасширения,ВыгружаемыеИни, КаталогНастроек, ИмяИни, РежимРаботы);
		
		ИниФайл.ЕстьИзменения	= Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура	сбисСформироватьИниФайлКлиентаНаСервере(Знач ИмяИниФайлаКлиента,Знач ини, КаталогНастроек, ИмяИни, РежимРаботы)
	// Формирует клиентский файл настроек	
	СтруктураИниФайла	= Ини[ИмяИни];
	СлужебнаяСтруктура	= Ини[ИмяИни];
	
	ИмяИниФайлаКлиента			= ИмяИниФайлаКлиента+".xml";
	НайденныеИниФайлыКлиента	= НайтиФайлы(КаталогНастроек + ИмяИниФайлаКлиента);
	
	//если ини файл настроек клиента сущесвует, то получаем его структуру
	//иначе это новая, пустая структура
	НоваяСтруктура = Новый Структура;
	НоваяСтруктура.Вставить("СлужебнаяСтруктура", Новый Структура);
	Если НайденныеИниФайлыКлиента.Количество() Тогда
		СтруктураИниФайлаКлиента = ПолучитьСтруктуруИниФайла(НоваяСтруктура, КаталогНастроек, ИмяИниФайлаКлиента);
	Иначе	
		СтруктураИниФайлаКлиента = Новый Структура
	КонецЕсли;	
	
	Если РежимРаботы = "ВыгрузкаВКаталог" Тогда
		СтруктураИниФайлаКлиентаВыгрузить = СлужебнаяСтруктура;
	Иначе
		Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(СлужебнаяСтруктура) Тогда //Если ошибок нет, то файл не переписываем
			//Добавляем ошибки из СлужебнойСтруктуры и СтруктуруИниФайлаКлиента
			СтруктураИниФайлаКлиентаВыгрузить = ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогНастроек + ИмяИниФайлаКлиента, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();		
	ЗаписьXML.ЗаписатьНачалоЭлемента("ини");
	ЗаписатьУзелСтруктурыВXML("", СтруктураИниФайлаКлиентаВыгрузить, ЗаписьXML);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

//Формирует клиентские инишки в каталог. Для УФ - контекст клиента для удобства выгрузки файлов ини.
&НаКлиенте
Процедура	сбисСформироватьИниФайлыКлиентаВКонтекстеКлиента(Кэш, СписокИниФайловДляПроверки, ВыгружаемыеИни, КаталогНастроек, РежимРаботы)
	
	Для	Каждого	ИниФайл Из СписокИниФайловДляПроверки	Цикл
		ИмяБезРасширения	= ИниФайл.Ини_ИмяБезРасширения;
		ИмяИни				= ИниФайл.Ини_ИмяИни;
		
		Если	Не	ВыгружаемыеИни.Свойство(ИмяИни)	Тогда
			Продолжить;
		КонецЕсли;
		
		сбисСформироватьИниФайлКлиентаВКонтекстеКлиента(Кэш, ИмяБезРасширения,ВыгружаемыеИни, КаталогНастроек, ИмяИни, РежимРаботы);
		
		ИниФайл.ЕстьИзменения	= Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура	сбисСформироватьИниФайлКлиентаВКонтекстеКлиента(Кэш, ИмяИниФайлаКлиента,ини, КаталогНастроек, ИмяИни, РежимРаботы)
	// Формирует клиентский файл настроек	
	СтруктураИниФайла	= Ини[ИмяИни];
	СлужебнаяСтруктура	= Ини[ИмяИни];
	
	ИмяИниФайлаКлиента			= ИмяИниФайлаКлиента+".xml";
	НайденныеИниФайлыКлиента	= НайтиФайлы(КаталогНастроек+ИмяИниФайлаКлиента);
	
	//если ини файл настроек клиента сущесвует, то получаем его структуру
	//иначе это новая, пустая структура
	НоваяСтруктура = Новый Структура;
	НоваяСтруктура.Вставить("СлужебнаяСтруктура", Новый Структура);
	Если НайденныеИниФайлыКлиента.Количество()<>0 Тогда
		СтруктураИниФайлаКлиента = ПолучитьСтруктуруИниФайла(НоваяСтруктура, КаталогНастроек, ИмяИниФайлаКлиента);
	Иначе	
		СтруктураИниФайлаКлиента = Новый Структура
	КонецЕсли;	
	
	Если РежимРаботы = "ВыгрузкаВКаталог" Тогда
		СтруктураИниФайлаКлиентаВыгрузить = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(СлужебнаяСтруктура);
	ИначеЕсли ЕстьОшибкаВУзлеСлужебнойСтруктуры(СлужебнаяСтруктура) Тогда //Если ошибок нет, то файл не переписываем
		//Добавляем ошибки из СлужебнойСтруктуры и СтруктуруИниФайлаКлиента
		СтруктураИниФайлаКлиентаВыгрузить = ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента);
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогНастроек + ИмяИниФайлаКлиента, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();		
	ЗаписьXML.ЗаписатьНачалоЭлемента("ини");
	ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(СтруктураИниФайлаКлиентаВыгрузить, ЗаписьXML);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////
//////////////////////Работа с файлами//////////////////////
////////////////////////////////////////////////////////////

///////////////////////////
/////////////XML///////////

&НаСервереБезКонтекста
Функция		ПолучитьXMLСПростымиЭлементами(Док, кодировка = "windows-1251")
	// функция формирует строку xml на основании структуры	(xml без атрибутов, с простыми элементами)
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.УстановитьСтроку(кодировка);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML,Док);
	СтрXML = ОбъектXML.Закрыть();
	Возврат СтрXML;
КонецФункции

&НаСервереБезКонтекста
Процедура	ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, СтруктураДокумента)
	// процедура рекурсивно заполняет ЗаписьXML на основании структуры  (xml без атрибутов, с простыми элементами)
	Для Каждого Элемент Из СтруктураДокумента Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			Если Элемент.Ключ = "ЗначениеУзла" Тогда
				ОбъектXML.ЗаписатьТекст(СокрЛП(Элемент.Значение));
			Иначе
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ОбъектXML.ЗаписатьТекст(СокрЛП(Элемент.Значение));
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст(Формат(Элемент.Значение,"ЧРД=.; ЧГ=0"));
			ОбъектXML.ЗаписатьКонецЭлемента();	
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст(Формат(Элемент.Значение,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс"""));
			ОбъектXML.ЗаписатьКонецЭлемента();
		ИначеЕсли Элемент.Значение = Неопределено и Элемент.Ключ <> "ЗначениеУзла" Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			ОбъектXML.ЗаписатьТекст("");
			ОбъектXML.ЗаписатьКонецЭлемента();
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Элемент.Ключ = "Атрибуты" Тогда
				Для Каждого Атрибут из Элемент.Значение Цикл
					ЗаписатьНеобязательныйАтрибут(Атрибут.Ключ, СокрЛП(Атрибут.Значение), ОбъектXML);	
				КонецЦикла;
			Иначе
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, Элемент.Значение);
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, ЭлементМассива);
				ОбъектXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаСервереБезКонтекста
Процедура	ЗаписатьНеобязательныйАтрибут(Атрибут,ЗначениеАтрибута,ОбъектXML)
	// Процедура записывает атрибут в ЗаписьXML, если атрибут заполнен	
	Если ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
		Попытка
			ОбъектXML.ЗаписатьАтрибут(Атрибут,ЗначениеАтрибута);
		Исключение
			Сообщить(ОписаниеОшибки()+" "+Атрибут+"="+ЗначениеАтрибута);
		КонецПопытки;
	КонецЕсли;		 
КонецПроцедуры

&НаСервереБезКонтекста
Функция		ЗаполнитьСтруктуруФайлаСПростымиЭлементами(СтрокаXML)
	// Функция формирует структуру по XML (xml без атрибутов, с простыми элементами)	
	СтруктураФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		ПрочитатьУзелDOMСПростымиЭлементами(ДокументДОМ.ПервыйДочерний, СтруктураФайла);
	Исключение
	КонецПопытки;
	Возврат СтруктураФайла;
КонецФункции

&НаСервереБезКонтекста
Процедура	ЗаписатьУзелСтруктурыВXML(КлючУзла, Узел, ЗаписьXML)//Узел - узел структуры
	// Записывает структуру в xml при формировании пользовательского файла настроек	
	Для Каждого ЭлементУзла Из Узел Цикл		
		Если Лев(НРег(ЭлементУзла.Ключ),4) = "сбис" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда
			Если ЭлементУзла.Значение.Свойство("Значение") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
				Для каждого ПодУзел из ЭлементУзла.Значение Цикл //Записываем в атрибуты все, кроме поля Значение, а Значение кладем в содержимое узла
					Если ПодУзел.Ключ <> "Значение" Тогда
						Если ПодУзел.Ключ = "Отбор" Тогда
							Для Каждого ЭлементОтбора Из ПодУзел.Значение Цикл
								ЗаписьXML.ЗаписатьАтрибут("Отбор_"+ЭлементОтбора.Ключ, ЭлементОтбора.Значение);	
							КонецЦикла;
						Иначе							
							ЗаписьXML.ЗаписатьАтрибут(ПодУзел.Ключ, ПодУзел.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе	
				Для каждого ПодУзел из ЭлементУзла.Значение Цикл //Выбираем подузлы
					//Если ПодУзел.Значение.Количество() <> 0 Тогда 
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
					ЗаписьXML.ЗаписатьАтрибут("Имя", ПодУзел.Ключ);
					ЗаписатьУзелСтруктурыВXML(ПодУзел.Ключ, ПодУзел.Значение, ЗаписьXML);
					ЗаписьXML.ЗаписатьКонецЭлемента();
					//КонецЕсли;
				КонецЦикла;								
			КонецЕсли;	
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
			ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

// Записывает структуру в xml при формировании пользовательского файла настроек	как есть
&НаКлиенте
Процедура	ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(Узел, ЗаписьXML, КлючУзла="", Уровень=1)//Узел - узел структуры
	Для Каждого ЭлементУзла Из Узел Цикл		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда
			Если ЭлементУзла.Значение.Свойство("Значение") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
				Для каждого ПодУзел из ЭлементУзла.Значение Цикл //Записываем в атрибуты все, кроме поля Значение, а Значение кладем в содержимое узла
					Если ПодУзел.Ключ <> "Значение" Тогда
						Если ПодУзел.Ключ = "Отбор" Тогда
							Для Каждого ЭлементОтбора Из ПодУзел.Значение Цикл
								ЗаписьXML.ЗаписатьАтрибут("Отбор_"+ЭлементОтбора.Ключ, ЭлементОтбора.Значение);	
							КонецЦикла;
						Иначе							
							ЗаписьXML.ЗаписатьАтрибут(ПодУзел.Ключ, ПодУзел.Значение);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение.Значение);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ЭтоУзелССокращеннымИменем(ЭлементУзла.Ключ, ЭлементУзла.Значение, Уровень) Тогда//На четном уровне могут встречаться узлы с сокращенным тегом Имя
				ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
				ЗаписьXML.ЗаписатьАтрибут("Имя", ЭлементУзла.Ключ);
				ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(ЭлементУзла.Значение, ЗаписьXML,, Уровень + 2);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				Для Каждого ПодУзел Из ЭлементУзла.Значение Цикл //Выбираем подузлы
					ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
					Если ТипЗнч(ПодУзел.Значение) = Тип("Строка") Тогда
						ЗаписьXML.ЗаписатьТекст(ПодУзел.Значение);
					Иначе
						ЗаписьXML.ЗаписатьАтрибут("Имя", ПодУзел.Ключ);
						ЗаписатьУзелСтруктурыВXMLВКонтекстеКлиента(ПодУзел.Значение, ЗаписьXML, ПодУзел.Ключ, Уровень + 1);
					КонецЕсли;	
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЦикла;								
			КонецЕсли;	
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента(ЭлементУзла.Ключ);
			ЗаписьXML.ЗаписатьТекст(ЭлементУзла.Значение);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

//Проверяет узел на сокращение атрибута имя при одинаковых значениям. Пример: <Сотрудник Имя="Сотрудник"></Сотрудник> в виде структуры будет без атрибута Имя. 
&НаКлиенте
Функция ЭтоУзелССокращеннымИменем(ИмяУзла, ЗначениеУзла, Уровень)
	//Если Цел(Уровень/2) = Уровень/2 Тогда
		Для Каждого КлючИЗначениеУзла Из ЗначениеУзла Цикл
			Для Каждого КлючИЗначениеПодУзла Из КлючИЗначениеУзла.Значение Цикл
				КлючПодУзла = НРег(КлючИЗначениеПодУзла.Ключ);
				Если Лев(КлючПодУзла, 5) = "выбор" Тогда//Выбор не может быть склеен
					Продолжить;
				ИначеЕсли  	ТипЗнч(КлючИЗначениеПодУзла.Значение) = Тип("Строка") Тогда//Если у одного из подузлов как значение - строка
					Возврат Истина;
				//ИначеЕсли	КлючИЗначениеПодУзла.Значение.Свойство("Значение") 
				//	     И	ТипЗнч(КлючИЗначениеПодУзла.Значение) = Тип("Строка")Тогда
				//	Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	//КонецЕсли;
	Возврат Ложь;
КонецФункции

///////////////////////////
/////////////DOM///////////

&НаСервереБезКонтекста
Функция		ПрочитатьУзелDOMСПростымиЭлементами(УзелDOM, Узел)
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначе
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.ПервыйДочерний <> Неопределено Тогда
				Узел.Вставить(Уз.ИмяУзла, Новый Структура);
			Иначе
				Узел.Вставить(Уз.ИмяУзла, "");
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено Тогда
			Уз = УЗ.ПервыйДочерний;
			ДочУзел = Новый Структура;
			сбисСкопироватьСтруктуру(ДочУзел, Узел[УЗ.РодительскийУзел.ИмяУзла]);
			ПрочитатьУзелDOMСПростымиЭлементами(Уз, ДочУзел);
			Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции

&НаСервереБезКонтекста
Процедура	ЗаписатьДОМВСтруктуру(Элемент, СтруктураИниФайла,ТаблицаОшибок)
	// формирует структуру из xml	
	Если Элемент.ТипУзла <> ТипУзлаDOM.Комментарий Тогда
		Если Элемент.ПервыйДочерний=Неопределено или ТипЗнч(Элемент.ПервыйДочерний)=Тип("ТекстDOM") Тогда //это простой элемент
			Попытка
				//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Элемент.ТекстовоеСодержимое);
				Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				КонецЕсли;
				СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Значение", Элемент.ТекстовоеСодержимое);
			Исключение
				Попытка
					ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя переменной");
				Исключение
				КонецПопытки;
			КонецПопытки;
			Если Элемент.ТипУзла <> ТипУзлаDOM.Текст Тогда
				Для Каждого Атрибут  Из Элемент.Атрибуты Цикл
					Попытка
						Если Лев(Атрибут.Имя,6)="Отбор_" Тогда
							Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство("Отбор") Тогда
								СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Отбор", Новый Структура);
							КонецЕсли;
							Если ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // в отбор добавляем только атрибуты с заполненными значениями
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Вставить(Сред(Атрибут.Имя, 7),Атрибут.ТекстовоеСодержимое);
							КонецЕсли;
							Если СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Свойство(Сред(Атрибут.Имя, 7)) и НЕ ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // если в стандартном файле значение заполнено, а в пользовательском пустое, удаляем его из отбора
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Удалить(Сред(Атрибут.Имя, 7));
							КонецЕсли;
						ИначеЕсли	Атрибут.Имя = "Имя"
								И	Элемент.ТекстовоеСодержимое = "''" Тогда
								//Отключение типового составного узла при помощи пользовательской ини
								СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(Атрибут.ТекстовоеСодержимое);
								СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить("Значение");
						Иначе
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Атрибут.Имя,Атрибут.ТекстовоеСодержимое);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя атрибута "+Атрибут.Имя);
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		Иначе //это структура
			Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
				Попытка
					//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Новый Структура);
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				Исключение
					ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя раздела:"+СокрЛП(Элемент.ИмяЭлемента));
				КонецПопытки;
			КонецЕсли;
			Имя = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
			Если Имя<>Неопределено и Имя.ТекстовоеСодержимое<>"" Тогда
				Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство(Имя.ТекстовоеСодержимое) Тогда
					Попытка
						//СтруктураЭлемента[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя атрибута: "+Имя.ТекстовоеСодержимое+" в разделе:"+СокрЛП(Элемент.ИмяЭлемента));
					КонецПопытки;
				Иначе
					// Чтобы соблюсти порядок узлов, установленный в пользовательской настройке, сначала удаляем существующий узел и заново вставляем
					Если 	(	Не	Элемент.ПредыдущийСоседний = Неопределено
							И		Элемент.ИмяУзла = Элемент.ПредыдущийСоседний.ИмяУзла)// делаем только если в пользовательский файл вынесен не один узел. Если вынесен один, значит порядок следования менять не надо.
						Или	(	Не	Элемент.СледующийСоседний = Неопределено
							И		Элемент.ИмяУзла = Элемент.СледующийСоседний.ИмяУзла) Тогда//Так, как нам без разницы, в каком порядке идут узлы в одном контексте, но нам важен порядок составных узлов, вроде Выбор, мФайл, мДокумент, то перестановку делаем только если имена соседей совпадают 
						Копия = СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое];
						СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(Имя.ТекстовоеСодержимое);
						СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Копия);	
						Если Элемент.СледующийСоседний = Неопределено Тогда	// Это последний элемент в пользовательском файле. Составим полный список пользовательских узлов.
							СтруктураПользовательскихЭлементов = Новый Структура;
							СтруктураПользовательскихЭлементов.Вставить(Имя.ТекстовоеСодержимое);
							ПредыдущийСоседний = Элемент.ПредыдущийСоседний;
							Пока ПредыдущийСоседний<>Неопределено Цикл
								Если ПредыдущийСоседний.ТипУзла <> ТипУзлаDOM.Комментарий Тогда   // пропускаем комментарии
									ИмяПред = ПредыдущийСоседний.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
									Если ИмяПред<>Неопределено и ИмяПред.ТекстовоеСодержимое<>"" Тогда
										СтруктураПользовательскихЭлементов.Вставить(ИмяПред.ТекстовоеСодержимое);
									КонецЕсли;
								КонецЕсли;
								ПредыдущийСоседний = ПредыдущийСоседний.ПредыдущийСоседний;
							КонецЦикла;
							// Далее перенсем узлы, которые отсутствуют в пользовательском файле настроек в конец по порядку обхода.
							// Необходимо для случая, когда в основной файл настроек добавились, например, новые мДокументы, которые не описаны в пользовательском файле. 
							// Если их не перенести в конец, то они будут первые по порядку обхода, что приводит к неправильному определению мДокумента, используемого по умолчанию для загрузки.
							Для Каждого ЭлементОбщейИни Из СтруктураИниФайла[Элемент.ИмяЭлемента] Цикл
								Если НЕ СтруктураПользовательскихЭлементов.Свойство(ЭлементОбщейИни.Ключ) Тогда 
									КопияУзла = СтруктураИниФайла[Элемент.ИмяЭлемента][ЭлементОбщейИни.Ключ];	
									СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(ЭлементОбщейИни.Ключ);
									СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(ЭлементОбщейИни.Ключ, КопияУзла);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
				ЗаписатьДОМВСтруктуру(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое],ТаблицаОшибок);
				Иначе
					ЗаписатьДОМВСтруктуру(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента],ТаблицаОшибок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.СледующийСоседний<>Неопределено Тогда
		ЗаписатьДОМВСтруктуру(Элемент.СледующийСоседний, СтруктураИниФайла,ТаблицаОшибок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура	ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент, СтруктураИниФайла,ТаблицаОшибок)
	// формирует структуру из xml	
	Если Элемент.ТипУзла <> ТипУзлаDOM.Комментарий Тогда
		Если Элемент.ПервыйДочерний=Неопределено или ТипЗнч(Элемент.ПервыйДочерний)=Тип("ТекстDOM") Тогда //это простой элемент
			Попытка
				//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Элемент.ТекстовоеСодержимое);
				Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				КонецЕсли;
				СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Значение", Элемент.ТекстовоеСодержимое);
			Исключение
				Попытка
					ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя переменной");
				Исключение
				КонецПопытки;
			КонецПопытки;
			Если Элемент.ТипУзла <> ТипУзлаDOM.Текст Тогда
				Для Каждого Атрибут  Из Элемент.Атрибуты Цикл
					Попытка
						Если Лев(Атрибут.Имя,6)="Отбор_" Тогда
							Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство("Отбор") Тогда
								СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить("Отбор", Новый Структура);
							КонецЕсли;
							//Для возможности отключения атрибутов в серверных настройках, пустые атрибуты добавляем в формируемую структуру ини.
							//При записи изменений, пустые узлы будут отправлены на сервер, чтобы при следущем чтении типовые узлы были отсеяны конвертером и не попали в рабочую инишку.
							//Если ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // в отбор добавляем только атрибуты с заполненными значениями
								СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Вставить(Сред(Атрибут.Имя, 7),Атрибут.ТекстовоеСодержимое);
							//КонецЕсли;
							//Если СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Свойство(Сред(Атрибут.Имя, 7)) и НЕ ЗначениеЗаполнено(Атрибут.ТекстовоеСодержимое) Тогда // если в стандартном файле значение заполнено, а в пользовательском пустое, удаляем его из отбора
							//	СтруктураИниФайла[Элемент.ИмяЭлемента].Отбор.Удалить(Сред(Атрибут.Имя, 7));
							//КонецЕсли;
						//Пока отключение узлов отложено, т.к. проблема с конвертацией в json
						//ИначеЕсли Атрибут.Имя="Отключено" И Атрибут.ТекстовоеСодержимое = "Истина" Тогда//Атрибут отключено убирает узел и его подузлы из обсчета.
						//	СтруктураИниФайла[Элемент.ИмяЭлемента].Очистить();
						//	СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Атрибут.Имя,Атрибут.ТекстовоеСодержимое);
						//	Прервать;
						ИначеЕсли	Атрибут.Имя = "Имя"
								И	Элемент.ТекстовоеСодержимое = "''" Тогда
								//Отключение типового составного узла при помощи пользовательской ини
								СтруктураИниФайла[Элемент.ИмяЭлемента][Атрибут.ТекстовоеСодержимое] = Элемент.ТекстовоеСодержимое;
								СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить("Значение");
						Иначе
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Атрибут.Имя,Атрибут.ТекстовоеСодержимое);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,СокрЛП(Элемент.ИмяЭлемента),"Неверное имя атрибута "+Атрибут.Имя);
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		Иначе //это структура
			Если Не СтруктураИниФайла.Свойство(Элемент.ИмяЭлемента) Тогда
				Попытка
					//СтруктураЭлемента.Вставить(Элемент.ИмяЭлемента, Новый Структура);
					СтруктураИниФайла.Вставить(Элемент.ИмяЭлемента, Новый Структура);
				Исключение
					ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя раздела:"+СокрЛП(Элемент.ИмяЭлемента));
				КонецПопытки;
			КонецЕсли;
			Имя = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Имя");
			Если Имя<>Неопределено и Имя.ТекстовоеСодержимое<>"" Тогда
				//Отключаем узел с прописываемым именем
				//Узел_Отключено = Элемент.Атрибуты.ПолучитьИменованныйЭлемент("Отключено");
				//Если Узел_Отключено<>Неопределено И Узел_Отключено.ТекстовоеСодержимое="Истина" Тогда
				//	СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура("Отключено", Узел_Отключено.ТекстовоеСодержимое));
				//	Возврат;
				//Иначе
				Если Не СтруктураИниФайла[Элемент.ИмяЭлемента].Свойство(Имя.ТекстовоеСодержимое) Тогда
					Попытка
						//СтруктураЭлемента[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
							СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Новый Структура);
						КонецЕсли;
					Исключение
						ДобавитьПростуюОшибку(ТаблицаОшибок,"","Неверное имя атрибута: "+Имя.ТекстовоеСодержимое+" в разделе:"+СокрЛП(Элемент.ИмяЭлемента));
					КонецПопытки;
				Иначе
					// Чтобы соблюсти порядок узлов, установленный в пользовательской настройке, сначала удаляем существующий узел и заново вставляем
					Если НЕ (Элемент.ПредыдущийСоседний = Неопределено и Элемент.СледующийСоседний = Неопределено) Тогда // делаем только если в пользовательский файл вынесен не один узел. Если вынесен один, значит порядок следования менять не надо.
						Копия = СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое];
						СтруктураИниФайла[Элемент.ИмяЭлемента].Удалить(Имя.ТекстовоеСодержимое);
						СтруктураИниФайла[Элемент.ИмяЭлемента].Вставить(Имя.ТекстовоеСодержимое, Копия);	
					КонецЕсли;
				КонецЕсли;
				Если Элемент.ИмяЭлемента<>Имя.ТекстовоеСодержимое Тогда
				ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента][Имя.ТекстовоеСодержимое],ТаблицаОшибок);
				Иначе
					ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент.ПервыйДочерний, СтруктураИниФайла[Элемент.ИмяЭлемента],ТаблицаОшибок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Элемент.СледующийСоседний<>Неопределено Тогда
		ЗаписатьДОМВСтруктуруВКонтекстеКлиента(Элемент.СледующийСоседний, СтруктураИниФайла,ТаблицаОшибок);
	КонецЕсли;
КонецПроцедуры

///////////////////////////
///////////Прочее//////////

&НаСервереБезКонтекста
Процедура	УдалитьФайлыНаСервере(Путь, Маска)// Удаляет выбранные файлы настроек на сервере
	
	УдалитьФайлы(Путь, Маска);
	
КонецПроцедуры

////////////////////////////////////////////////////
///////////Основные процедуры и функции/////////////
////////////////////////////////////////////////////

///////////////////////////
///////Внешний вызов///////

&НаКлиенте
Процедура	ИнициализироватьКэшНастроек(Кэш, ПараметрыИнициализации=Неопределено, Отказ=Ложь) 						Экспорт
	
	КэшНастроек				= Неопределено;
	ПараметрыНастроек		= Неопределено;
	ПрефиксСервисСистемы	= "ВО82";
	РежимНастроек			= "Каталог";
	
	//Если Не	(	Кэш.Свойство("КэшНастроек", КэшНастроек)
	//		И	ЗначениеЗаполнено(КэшНастроек)
	//		И	КэшНастроек.ПараметрыНастроек.Режим = РежимНастроек) Тогда
	КэшНастроек = Новый Структура;
	ПараметрыНастроек = Новый Структура;
	ПараметрыНастроек.Вставить("Режим",							"Каталог");
	ПараметрыНастроек.Вставить("ПрефиксСервис",					ПрефиксСервисСистемы);
	ПараметрыНастроек.Вставить("ЭлементФормы",					"КаталогНастроек");
	ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек",	"-");//Передаваемый в статистику префикс от выбранных настроек.
	КэшНастроек.Вставить("ПараметрыНастроек",	ПараметрыНастроек);
	//КонецЕсли;
	КэшНастроек.Вставить("ИзмененияВНастройках",Ложь);
	
	Кэш.Вставить("КэшНастроек", КэшНастроек);
	Если Кэш.Свойство("КэшЗначенийИни") Тогда 
		Кэш.КэшЗначенийИни.ИниЗагрузки = Новый Структура();//Очищаем закэшированные значения ини загрузки.
	КонецЕсли;
	//Восстановим значение флага для автообновления. Для облачных параметр не записывается. 
	Если Кэш.Парам.Свойство("НастройкиАвтообновление") Тогда
		Кэш.ГлавноеОкно.НастройкиАвтообновление = Кэш.Парам.НастройкиАвтообновление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		ПолучитьМассивФайловДляКонфигурации(Кэш,СписокТиповНастроек, ПрефиксСервис,ЗначениеПредставление)		Экспорт
	
	Возврат	Кэш.ФормаНастроекОбщее.ПолучитьМассивФайловДляКонфигурации(СписокТиповНастроек, ПрефиксСервис, ЗначениеПредставление);
	
КонецФункции

&НаКлиенте
Функция		ПолучитьИнформациюПоНастройкам(Кэш, ПараметрыСтатистики, Отказ)											Экспорт
	
	КаталогПоиска = Кэш.Парам.ИдентификаторНастроек;
	
	ФайлыНастроек	= ПолучитьМассивУстановленныхИниФайлов(КаталогПоиска, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	ФайлыXSLT		= сбисПолучитьСписокXSLT(КаталогПоиска + ?(Прав(КаталогПоиска, 1) = "\", "", "\") + "xslt");
	
	Если Кэш.Заплатки = Ложь Тогда
		ЕстьФункции = Ложь;
	Иначе
		ЕстьФункции = Истина;
	КонецЕсли;
	Результат = Новый Структура("XSLT,XML,EPF", ФайлыXSLT, ФайлыНастроек, Новый Структура("ЕстьИзменения", ЕстьФункции));
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Функция		сбисПолучитьИдентификаторНастроек(Кэш)																	Экспорт
	
	Возврат Кэш.Парам.КаталогНастроек;
	
КонецФункции

&НаКлиенте
Функция		сбисОбновитьМассивУстановленныхИниФайлов(Кэш, МассивУстановленныхИни)									Экспорт
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.КаталогНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	
КонецФункции

//Вызов через клиент, получаем флаг проверки предыдущей версии с 19 и уже потом на сервере делается обработка.
//СбисПараметрыОбновления - параметры 
//	ВременныйКаталог - отформатированный путь, кудм можно распаковать файлы
//	КаталогНастроек - отформатированный путь на сервере, где лежат готовые настройки
&НаКлиенте
Функция	СбисОбновитьИниФайлы(Кэш, СбисПараметрыОбновления, Отказ)													
	
	СбисКаталогНаСервере = СбисПараметрыОбновления.КаталогНастроек;
	Если Не ЗначениеЗаполнено(СбисКаталогНаСервере) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Распакуем ини во временную папку
	РезультатРаспаковки = СбисРаспаковатьНастройки(Кэш, СбисПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.СбисОбновитьИниФайлы");
	Иначе
		СбисПараметрыОбновления.Вставить("ВременныйКаталогРаспаковкиИни", РезультатРаспаковки);
	КонецЕсли;
	//Обновим типовые ини из распакованных
	РезультатОбновления = ОбновитьИниФайлыНаСервере(СбисПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисОбновитьИниФайлы");
	КонецЕсли;
	
	//Распакуем xslt сразу в каталог настроек
	РезультатРаспаковки = СбисРаспаковатьXSLT(Кэш, Новый Структура("КаталогРаспаковки", Кэш.ОбщиеФункции.сбисФорматКаталога(СбисКаталогНаСервере + "xslt", Кэш.ПараметрыСистемы.Сервер)), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.СбисОбновитьИниФайлы");
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте                                  
Функция		сбисОтключитьВыбранныеФайлыНастроек(МассивИниКОтключению, Кэш, КаталогНастроек, Отказ)					Экспорт
	
	ПараметрыНастроек = Новый Структура("Автообновление, Конфигурация, Разделитель, КлючАрхива", Кэш.Парам.НастройкиАвтообновление, Кэш.ПараметрыСистемы.Конфигурация, Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер), "Отключение");
	УстановленныеИни = ОтключитьФайлыНастроекНаСервере(МассивИниКОтключению, КаталогНастроек, ПараметрыНастроек, Отказ);
	Кэш.Вставить("ини",	СформироватьСтруктуруИни(УстановленныеИни, Новый Структура));
	Возврат	УстановленныеИни;
	
КонецФункции

&НаКлиенте                                  
Функция		СбисОпределитьНеобходимостьПроверки(Кэш, УстановленныеИниФайлы, СтруктураПараметров)					Экспорт
	
	НужноПроверять = Ложь;
	//Определим необходимость проверки по последним изменениям в настройках
	Для Каждого ИниФайл Из УстановленныеИниФайлы Цикл
		ИмяСвойства					= СтрЗаменить(СтрЗаменить(ИниФайл.Имяфайла,".","_"),"-","_");
		ИмяСвойстваКлиент			= СтрЗаменить(ИмяСвойства,"_sbis3","");
		ДатаФайла					= ?(ЗначениеЗаполнено(ИниФайл.ДатаФайла),				ИниФайл.ДатаФайла,						Ложь);
		ДатаФайлаКлиент				= ?(ЗначениеЗаполнено(ИниФайл.ДатаФайлаКлиент),			ИниФайл.ДатаФайлаКлиент,				Ложь);
		ПараметрыДатаФайла			= ?(	СтруктураПараметров.Свойство(ИмяСвойства)
										И	ИмяСвойства<>ИмяСвойстваКлиент,					СтруктураПараметров[ИмяСвойства],		Ложь); // если есть только пользовательский файл, то присваиваем Ложь
		ПараметрыДатаФайлаКлиент	= ?(СтруктураПараметров.Свойство(ИмяСвойстваКлиент),	СтруктураПараметров[ИмяСвойстваКлиент],	Ложь);
		
		Если	ДатаФайла = ПараметрыДатаФайла
			И	(	ДатаФайлаКлиент = Ложь
				Или	ДатаФайлаКлиент	= ПараметрыДатаФайлаКлиент)	Тогда//Файл не обновлялся, не проверяем
				Продолжить;
		Иначе//Отметить в сбисПараметрах последнее обновление
			НужноПроверять = Истина;
			Если ЗначениеЗаполнено(ИниФайл.ДатаФайла)		Тогда
				СтруктураПараметров.Вставить(ИмяСвойства,ИниФайл.ДатаФайла);
			КонецЕсли;
			Если ЗначениеЗаполнено(ИниФайл.ДатаФайлаКлиент)	Тогда
				СтруктураПараметров.Вставить(ИмяСвойстваКлиент,ИниФайл.ДатаФайлаКлиент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//Определим общие параметры проверки
	Если Кэш.ФормаНастроекОбщее.сбисОпределитьНеобходимостьПроверки(Кэш, СтруктураПараметров) Тогда
		НужноПроверять = Истина;
	КонецЕсли;
	
	Возврат НужноПроверять;
	
КонецФункции
	
&НаКлиенте
Процедура	сбисОчиститьКэшНастроек(КэшНастроек)																	Экспорт
	
	Возврат;
	
КонецПроцедуры

//Функция вызова формирования настроек из каталога.
&НаКлиенте
Функция		сбисПолучитьНастройки(Кэш=Неопределено,Отказ=Ложь,ПродолжитьВыполнение=Истина)							Экспорт
	Перем РежимРаботы;
	Если Кэш = Неопределено	Тогда//Для теста функции при поиске
		Возврат	Истина;
	КонецЕсли;
	
	КаталогНастроек	= Кэш.Парам.ИдентификаторНастроек;
	РезультатИзмененияПараметров = сбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш,Отказ,ПродолжитьВыполнение);
	
	//Смотрим режимы изменения настроек: нужна ли проверка. Если нужна, то запускаем повторное формирование настроек 
	Если	Не	Кэш.Свойство("ДополнительныеПараметры",	РежимРаботы)
		Или	Не	РежимРаботы.Свойство("РежимРаботы",		РежимРаботы) Тогда//Определяется режим работы формы настроек. Значения: Стандартный, ЗагрузкаИзКаталога.
		Если Не РезультатИзмененияПараметров = Неопределено Тогда
			Возврат РезультатИзмененияПараметров;
		КонецЕсли;
		РежимРаботы = "Стандартный";
	КонецЕсли;
	
	ПараметрыПолученияНастроек = Новый Структура("КаталогНастроек, Режим", КаталогНастроек, РежимРаботы);
	ПараметрыПолученияНастроек.Вставить("Разделитель",		Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер));
	ПараметрыПолученияНастроек.Вставить("ВременныйКаталог",	Кэш.ОбщиеФункции.СбисФорматКаталога(Кэш.ОбщиеФункции.СбисКаталогВременныхФайловНаСервере(), Кэш.ПараметрыСистемы.Сервер));
	ПараметрыПолученияНастроек.Вставить("Конфигурация",		Кэш.ПараметрыСистемы.Конфигурация);
	Если РежимРаботы = "ЗагрузкаИзКаталога" Тогда
		//тест каталога проходит на сервере, тогда как для загрузки из каталога указывается папка на клиенте
		ПараметрыПолученияНастроек.КаталогНастроек = Кэш.ОбщиеФункции.сбисФорматКаталога(КаталогНастроек, Кэш.ПараметрыСистемы.Клиент);		
	Иначе	
		ТестКаталогНастроек = СформироватьКаталогНастроек(Кэш, КаталогНастроек, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, ТестКаталогНастроек);
			Возврат	Неопределено;
		Иначе
			ПараметрыПолученияНастроек.КаталогНастроек = ТестКаталогНастроек;
		КонецЕсли;
		СбисУстановитьПараметры(Кэш, ПараметрыПолученияНастроек.КаталогНастроек);
		
		Если Кэш.Парам.НастройкиАвтообновление Тогда
			РезультатПроверки = СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыПолученияНастроек, Отказ);
		Иначе
			РезультатПроверки = Ложь;
		КонецЕсли;
		Если Отказ Тогда
			Если	ПараметрыПолученияНастроек.Свойство("ПоказатьОкноВручную") 
				И	ПараметрыПолученияНастроек.ПоказатьОкноВручную Тогда 
				ПоказатьСообщениеСкачатьНастройки(Кэш, РезультатПроверки);
			КонецЕсли;
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатПроверки, Новый Структура("ФормаВладелец", Кэш.ГлавноеОкно));
			//Не удалось прочитать обновление настроек на сервере, но можно продолжить дальше 
			Отказ = Ложь;
		ИначеЕсли РезультатПроверки Тогда
			//Менялись файлы настроек. Ини надо перепроверить
			Кэш.ИниВПорядке = Ложь;
		ИначеЕсли Кэш.ИниВПорядке Тогда//Если ини в порядке, тогда всё уже и так готово к работе
			ПродолжитьВыполнение = Ложь;
			Возврат Неопределено;
		КонецЕсли;	
	КонецЕсли;
	
	Кэш.Парам.Вставить("КаталогНастроек",		ТестКаталогНастроек);
	Кэш.Парам.Вставить("ИдентификаторНастроек",	ТестКаталогНастроек);
	Если РежимРаботы = "Стандартный" Тогда
		Кэш.ГлавноеОкно.КаталогНастроек	= ТестКаталогНастроек;
		сбисПодключитьЗаплатки(Кэш, ПараметрыПолученияНастроек.КаталогНастроек);	
		сбисСформироватьСтруктуруXSLT(Кэш,ПараметрыПолученияНастроек.КаталогНастроек,,Отказ);
	КонецЕсли;
	
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.сбисПоказатьСостояние("Формирование структуры настроек", Кэш.ГлавноеОкно);
	КонецЕсли;
	РезультатУстановки = СбисПолучитьУстановленныеНастройки(Кэш, ПараметрыПолученияНастроек, Отказ);
	Если Не Кэш.ТихийРежим Тогда
		Кэш.ГлавноеОкно.сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатУстановки);
		Возврат Неопределено;
	КонецЕсли;	
	
	Возврат РезультатУстановки
		
КонецФункции

//Для вызова получения списка настроек
&НаКлиенте
Функция		СбисПолучитьСписокДоступныхНастроек(Кэш)																Экспорт
	Отказ = Ложь;
	РезультатРаспаковки = СбисРаспаковатьНастройки(Кэш, Новый Структура,Отказ);
	Если Отказ Тогда
		Если	РезультатРаспаковки.code = 784
			Или	РезультатРаспаковки.code = 779 Тогда
			ПоказатьСообщениеСкачатьНастройки(Кэш, РезультатРаспаковки);
			Возврат Новый СписокЗначений;
		КонецЕсли;
			
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	СписокТиповНастроек = СформироватьСписокДоступныхНастроек(Кэш, РезультатРаспаковки);
	//Вроде не нужно. Инициируем кэш при переключении формы
	//Если Не Кэш.КэшНастроек.Количество() Тогда//исправлена ошибка с отсутствием префикса системы каталожных инишек
	//	ИнициализироватьКэшНастроек(Кэш);
	//КонецЕсли;
	
	Возврат	СписокТиповНастроек;

КонецФункции

&НаКлиенте
Процедура	ПоказатьСообщениеСкачатьНастройки(Кэш, СбисОшибка)
	ТекстПредупреждение =	СбисОшибка.message + Символы.ПС + 
							" (" + СбисОшибка.details + ")" + Символы.ПС + 
							"Скачайте файлы настроек вручную и поместите их в каталог " + СбисПутьКАктуальнымАрхивам(Кэш) + "." + Символы.ПС + 
							"После чего перезапустите обработку.";
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/1C_set/modul/download");
	ПараметрыСообщения.Вставить("ТекстСсылка",	"Скачать актуальные файлы настроек");
	ПараметрыСообщения.Вставить("Текст",		ТекстПредупреждение);
	ФормаПредупреждение = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПредупреждения",,,Кэш.ГлавноеОкно);
	ФормаПредупреждение.Показать(Кэш, ПараметрыСообщения);
КонецПроцедуры

&НаКлиенте
Функция		сбисПолучитьШапкуПротоколаОбОшибках(Кэш, СписокИниФайловДляПроверки)									Экспорт
	
	ПараметрыПротокола	= Новый	Структура();
	Если	СписокИниФайловДляПроверки.Количество()	Тогда
		Префикс = Лев(СписокИниФайловДляПроверки[0].Имяфайла,Найти(СписокИниФайловДляПроверки[0].Имяфайла,"_")-1);
	Иначе
		Префикс	= "";
	КонецЕсли;
	ПараметрыПротокола.Вставить("КонфигурацияФайловНастроек",	Кэш.ФормаНастроекОбщее.ОпределитьТипНастроекПоПрефиксу(Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис, Префикс));
	ПараметрыПротокола.Вставить("КаталогНастроек",				"""" + Кэш.Парам.ИдентификаторНастроек + """");
	ПараметрыПротокола.Вставить("Версия",						Кэш.ГлавноеОкно.Версия);
	ПараметрыПротокола.Вставить("ЗаголовокКаталог",				"Каталог настроек: ");

	Возврат ПараметрыПротокола;
	
КонецФункции

&НаКлиенте
Функция		сбисПолучитьСтруктуруКонфигурации(Кэш, СтруктураКонфигураций, ЗначениеКонфигурации)						Экспорт
	
	// Функция возвращает массив доступных файлов настроек для текущей конфигурации 	
	Для Каждого СтрокаСтруткур из СтруктураКонфигураций Цикл
		Если СтрокаСтруткур.Значение.НазываниеКонфигурации = ЗначениеКонфигурации Тогда
			Возврат СтрокаСтруткур.Значение.СтруктураКонфигурации;			
		КонецЕсли;	
	КонецЦикла;
	
КонецФункции	

&НаКлиенте
Функция		СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыОбновления, Отказ)										
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Проверка наличия обновления файлов настроек", Кэш.ГлавноеОкно);
	
	РезультатОбновления = ПроверитьИОбновитьАрхивыНастроек(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
	ИначеЕсли Не РезультатОбновления Тогда//Настройки актуальны, дальше ничего не требуется
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Ложь;
	КонецЕсли;	
	
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Обновление файлов настроек", Кэш.ГлавноеОкно);
	//Выполним обновление файлов настроек
	РезультатВыполнения = СбисОбновитьИниФайлы(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.СбисПроверитьНаличиеОбновлений");
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаКлиенте                                  
Процедура	АвтообновлениеПриИзменении(Кэш, НовоеЗначение) Экспорт
	Кэш.Парам.НастройкиАвтообновление = НовоеЗначение;
	//СбисПараметры = ПолучитьПараметрыСБИС(Кэш, Кэш.Парам.ИдентификаторНастроек, Ложь);
	//СбисПараметры.Вставить("НастройкиАвтообновление", НовоеЗначение);
	//СохранитьПараметрыСБИС(Кэш, СбисПараметры, Кэш.Парам.ИдентификаторНастроек, Ложь);
	УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	Кэш.ГлавноеОкно.СбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИниФайлы, Ложь);
КонецПроцедуры

//Функция проверяет установленную версию на сервере СБИС и скачивает архивы в случае необходимости
&НаКлиенте
Функция		ПроверитьИОбновитьАрхивыНастроек(Кэш, ПараметрыОбновления, Отказ)
	Перем СбисВерсияТекущая;
	СбисПараметры = ПолучитьПараметрыСБИС(Кэш, ПараметрыОбновления.КаталогНастроек, Отказ);
	Если Не СбисПараметры.Свойство("ВерсияНастроек", СбисВерсияТекущая) Тогда
		СбисВерсияТекущая = "0";
	КонецЕсли;
	ПараметрыАрхиваНастроек	= СбисПараметрыАрхиваНастроек(Кэш, "Settings");
	ПараметрыАрхиваXSLT		= СбисПараметрыАрхиваНастроек(Кэш, "XSLT");
	
	СбисВерсияНастроекНаСервере = СбисВерсияНастроекНаСервере(Кэш, Отказ);
	Если Отказ Тогда
		//Если это установка, то может быть проблема с получением файлов. Тогда ошибка получения файла версии не считается как ошибка
		СбисИсключение = Кэш.ОбщиеФункции.СбисИсключение(СбисВерсияНастроекНаСервере, "ФайлыНастроекКаталог.ПроверитьИОбновитьАрхивыНастроек");
		Если Не	(	ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваНастроек.ПутьКАрхиву,	ПараметрыАрхиваНастроек.ИмяАрхива + "." + ПараметрыАрхиваНастроек.Расширение)
				И	ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваXSLT.ПутьКАрхиву,		ПараметрыАрхиваXSLT.ИмяАрхива + "." + ПараметрыАрхиваXSLT.Расширение)) Тогда
			ПараметрыОбновления.Вставить("ПоказатьОкноВручную", Истина);
		КонецЕсли;		
		Возврат СбисИсключение;
		//Иначе
		//	//Если файлы не скачиваются, но они есть в каталоге, считаем что версия настроек нулевая. Проверим дальше, что есть. Если нет, то ошибка скачки
		//	Отказ = Ложь;
		//	СбисВерсияНастроекНаСервере = "0";
		//	Кэш.ОбщиеФункции.СбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие, Ошибка", "Запись ошибки", СбисИсключение), Ложь);
		//КонецЕсли;
	КонецЕсли;
	Если	Не	Кэш.ОбщиеФункции.ЭтоНоваяВерсия(СбисВерсияНастроекНаСервере, СбисВерсияТекущая)
		И		ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваНастроек.ПутьКАрхиву,	ПараметрыАрхиваНастроек.ИмяАрхива + "." + ПараметрыАрхиваНастроек.Расширение)
		И		ПроверитьНаличиеФайлаНаСервере(ПараметрыАрхиваXSLT.ПутьКАрхиву,		ПараметрыАрхиваXSLT.ИмяАрхива + "." + ПараметрыАрхиваXSLT.Расширение) Тогда
		Возврат Ложь;
	КонецЕсли;
	//В случае изменения версии, перекачаем архивы настроек и xslt
	РезультатВыполнения = СбисСкачатьАрхивНаСервер(Кэш, ПараметрыАрхиваНастроек, Отказ);
	Если Отказ Тогда
		ПараметрыОбновления.Вставить("ПоказатьОкноВручную", Истина);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.ПроверитьИОбновитьАрхивыНастроек");
	КонецЕсли;
	РезультатВыполнения = СбисСкачатьАрхивНаСервер(Кэш, ПараметрыАрхиваXSLT, Отказ);
	Если Отказ Тогда
		ПараметрыОбновления.Вставить("ПоказатьОкноВручную", Истина);
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.ПроверитьИОбновитьАрхивыНастроек");
	КонецЕсли;
	СбисПараметры.Вставить("ВерсияНастроек", СбисВерсияНастроекНаСервере);
	СохранитьПараметрыСБИС(Кэш, СбисПараметры, ПараметрыОбновления.КаталогНастроек);
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция		ПроверитьНаличиеФайлаНаСервере(ПутьКФайлу, ИмяФайла)
	СбисИмяАрхива = ПутьКФайлу + ИмяФайла;
	СбисФайлТест = Новый Файл(СбисИмяАрхива);
	Если Не СбисФайлТест.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Отдаёт версию настроек на сервере СБИС
&НаКлиенте
Функция СбисВерсияНастроекНаСервере(Кэш, Отказ)
	СбисПараметрыОбновления = Кэш.ОбщиеФункции.СбисПараметрыСервисаОбновления(Кэш);
	СбисПараметрыОбновления.Вставить("ИмяФайла", Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("txt"));
	СбисПараметрыОбновления.URL = СбисПараметрыОбновления.URL + "SettingsVersion.txt";
	
	РезультатЧтения = Кэш.Интеграция.СбисПолучитьПараметрыАктуальнойВерсии(Кэш, СбисПараметрыОбновления, Отказ);
	Если Отказ Тогда
		//Проблема со скачкой файла версии.
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЧтения, "ФайлыНастроекКаталог.СбисВерсияНастроекНаСервере");
	КонецЕсли;
	//Читаем информацию о обновлении
	Попытка
		CбисВерсияНаСервере = Новый ЧтениеТекста(СбисПараметрыОбновления.ИмяФайла);
		CбисВерсияНаСервере = CбисВерсияНаСервере.ПрочитатьСтроку();
		Если Не ЗначениеЗаполнено(CбисВерсияНаСервере) Тогда
			CбисВерсияНаСервере = "0";
		КонецЕсли;
		Возврат CбисВерсияНаСервере;
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатЧтения, "ФайлыНастроекКаталог.СбисВерсияНастроекНаСервере");
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура	сбисСформироватьИниФайлыКлиента(Кэш, СписокФайловПроверки, ВыгружаемыеИни)								Экспорт
	            
	Если	Кэш.Свойство("ДополнительныеПараметры")
		И	Кэш.ДополнительныеПараметры.Свойство("РежимРаботы") Тогда
		РежимРаботы	= Кэш.ДополнительныеПараметры.РежимРаботы;
	Иначе
		РежимРаботы="Стандартный";
	КонецЕсли;

	Если		РежимРаботы	= "ВыгрузкаВКаталог"	Тогда
		сбисСформироватьИниФайлыКлиентаВКонтекстеКлиента(Кэш, СписокФайловПроверки, ВыгружаемыеИни, Кэш.Парам.ИдентификаторНастроек, РежимРаботы);
	ИначеЕсли	РежимРаботы	= "ЗагрузкаИзКаталога"	Тогда//При загрузке из каталога, клиентские ини об ошибках не формируем. Надо просто очистить файлы от ошибок, если были.
		Кэш.Ини = Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(Кэш.Ини);
	Иначе
		сбисСформироватьИниФайлыКлиентаНаСервере(СписокФайловПроверки,	ВыгружаемыеИни, Кэш.Парам.ИдентификаторНастроек, РежимРаботы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция		сбисУстановитьВыбранныеФайлыНастроек(МассивФайловДляУстановки, Кэш, КаталогНастроек, Отказ)				Экспорт
	
	ПараметрыНастроек = Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление);
	УстановленныеИни = УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, КаталогНастроек, ПараметрыНастроек, Отказ);
	Кэш.Вставить("ини",	СформироватьСтруктуруИни(УстановленныеИни, Новый Структура));
	
	Кэш.ГлавноеОкно.сбисПоказатьСостояние("Установка настроек", Кэш.ГлавноеОкно);
	РезультатУстановкиНастроек = Кэш.ГлавноеОкно.сбисУстановитьНастройки(Кэш,УстановленныеИни,Истина,Отказ);
	Кэш.ГлавноеОкно.сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатУстановкиНастроек);
		Отказ = Ложь;//Продолжим работу после сообщения об ошибке
	КонецЕсли;
	Кэш.ГлавноеОкно.сбисОбновитьИнформациюНастроекНаГлавномОкне(Кэш, УстановленныеИни, Отказ);
	Кэш.ГлавноеОкно.сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	
КонецФункции

///////////////////////////
/////Внутренний вызов//////

&НаКлиенте
Функция		СбисПолучитьУстановленныеНастройки(Кэш, ПараметрыУстановки, Отказ)
	
	Если ПараметрыУстановки.Режим = "ЗагрузкаИзКаталога" Тогда
		УстановленныеИниФайлы	= ПолучитьМассивУстановленныхИниФайловВКонтекстеКлиента(ПараметрыУстановки.КаталогНастроек);
	Иначе
		УстановленныеИниФайлы	= ПолучитьМассивУстановленныхИниФайлов(ПараметрыУстановки.КаталогНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
		Если Не УстановленныеИниФайлы.Количество() Тогда
			//устанавливаем стандартные файлы настроек
			РезультатУстановки = УстановитьСтандартныеНастройки(Кэш, ПараметрыУстановки, Отказ);
			Если Отказ Тогда
				Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатУстановки, "ФайлыНастроекКаталог.СбисПолучитьУстановленныеНастройки");
			КонецЕсли;
			УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(ПараметрыУстановки.КаталогНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
		КонецЕсли;
	КонецЕсли;
	
	Если УстановленныеИниФайлы.Количество() Тогда						
		Кэш.Вставить("Ини", СформироватьСтруктуруИниНаКлиенте(Кэш, УстановленныеИниФайлы,  ПараметрыУстановки.Режим));
		Кэш.КэшНастроек.ПараметрыНастроек.Вставить("ПрефиксУстановленныхНастроек", Сред(УстановленныеИниФайлы[0].Имяфайла,5, Найти(УстановленныеИниФайлы[0].Имяфайла,"_")-5));
	Иначе
		УстановленныеИниФайлы	= Неопределено;
	КонецЕсли;
		
	Возврат	УстановленныеИниФайлы;
	
КонецФункции

//получаем массив файлов из каталога
&НаСервереБезКонтекста
Функция		ПолучитьМассивУстановленныхИниФайлов(Каталог, ДополнительныеПараметры)
	// Получает массив установленных файлов настроек	
	МассивУстановленныхИниФайлов	= Новый Массив();
	
	МассивФайловВКаталоге				= НайтиФайлы(Каталог,"ВО8*.xml");
	МассивУстановленныхТиповыхИниФайлов	= НайтиФайлы(Каталог,"ВО8*.sbis3.xml");
	
	СписокУстановленныхИниФайлов				= Новый Соответствие();
	СписокУстановленныхИниФайловБезПрефиксов	= Новый Соответствие();
	СписокУстановленныхТиповыхИниФайлов			= Новый СписокЗначений();
	
	Для Каждого ИниФайл Из МассивФайловВКаталоге Цикл
		СписокУстановленныхИниФайлов.Вставить(ИниФайл.Имя,ИниФайл);
		СписокУстановленныхИниФайловБезПрефиксов.Вставить(Сред(ИниФайл.Имя, Найти(ИниФайл.Имя, "_")+1),ИниФайл);
	КонецЦикла;
	
	ФильтрПоИменамИни = Неопределено;
	Если		ДополнительныеПараметры = Неопределено
		Или	Не	ДополнительныеПараметры.Свойство("ФильтрПоИменамИни", ФильтрПоИменамИни) Тогда
		//Отбираем все
		//ФильтрПоИменамИни = Новый Массив;
	КонецЕсли;
	
	СписокУстановленныхТиповыхИниФайлов.ЗагрузитьЗначения(МассивУстановленныхТиповыхИниФайлов);
	
	//пробегаем по списку установленных типовых ини файлов (.sbis3.xml) и в общем списке установленных ини файлов
	//ищем соответствующие ини файлы клиента, затем из общего списка удаляем записи типовых ини файлов и, если нашли, ини файл клиента
	//к концу цикла в общем списке установленных ини файлов останутся неопределенные ини файлы
	Для Каждого ИниФайл Из СписокУстановленныхТиповыхИниФайлов Цикл
		ИмяФайлаНастроекКлиента			= СтрЗаменить(ИниФайл.Значение.Имя,".sbis3.xml",".xml");
		ИмяФайлаБезРасширения			= Лев(ИниФайл.Значение.Имя,Найти(ИниФайл.Значение.Имя,".")-1);
		ИмяФайлаБезРасширенияБезПрефикса= Сред(ИмяФайлаБезРасширения, Найти(ИмяФайлаБезРасширения, "_")+1);
		НайденыйФайлНастроекКлиента		= СписокУстановленныхИниФайловБезПрефиксов.Получить(ИмяФайлаБезРасширенияБезПрефикса+".xml");
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				ИниФайл.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	ИмяФайлаБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			ДополнительныеПараметры.Автообновление); 
		НоваяСтрока.Вставить("ПутьДоИниФайла",			ИниФайл.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				ИниФайл.Значение.ПолучитьВремяИзменения() );
		
		//из общего списка ини файлов удаляем .sbis.ini
		СписокУстановленныхИниФайлов.Удалить(ИниФайл.Значение.Имя);
		
		//если в общем списке нашли ини файл клиента то удаляем его из этого списка
		Если НайденыйФайлНастроекКлиента = Неопределено Тогда
			НоваяСтрока.Вставить("ЕстьИзменения",	Ложь);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	"" );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	"" );
		Иначе
			НоваяСтрока.Вставить("ЕстьИзменения",	Истина);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	НайденыйФайлНастроекКлиента.ПолучитьВремяИзменения() );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	НайденыйФайлНастроекКлиента.Имя );
			СписокУстановленныхИниФайлов.Удалить(НайденыйФайлНастроекКлиента.Имя);
		КонецЕсли;
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(ИниФайл.Значение.Имя));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		Если	ЗначениеЗаполнено(ФильтрПоИменамИни)
			И 	ФильтрПоИменамИни.Найти(ВРег(НоваяСтрока.Ини_ИмяИни)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока)
	КонецЦикла;	
	
	//в общем списке всех ини файлов останутся не определенные ини файлы
	//добавляем их таблицу отдельными строками
	Для Каждого Элемент из СписокУстановленныхИниФайлов Цикл 
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				Элемент.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	Элемент.Значение.ИмяБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			Ложь);
		НоваяСтрока.Вставить("ЕстьИзменения",			Ложь);
		НоваяСтрока.Вставить("ПутьДоИниФайла",			Элемент.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				"");
		НоваяСтрока.Вставить("ДатаФайлаКлиент",			Элемент.Значение.ПолучитьВремяИзменения());
		НоваяСтрока.Вставить("ИмяФайлаКлиента",			"");
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(Элемент.Ключ));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		
		Если	ЗначениеЗаполнено(ФильтрПоИменамИни)
			И 	ФильтрПоИменамИни.Найти(ВРег(НоваяСтрока.Ини_ИмяИни)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат МассивУстановленныхИниФайлов;
	
КонецФункции

//получаем массив файлов из каталога на клиенте. При загрузке из выбранного пользователем каталога 
&НаКлиенте
Функция		ПолучитьМассивУстановленныхИниФайловВКонтекстеКлиента(Каталог)
	// Получает массив установленных файлов настроек	
	МассивУстановленныхИниФайлов	= Новый Массив();
	
	МассивФайловВКаталоге			= НайтиФайлы(Каталог,"ВО8*.xml");
	
	//на тот случай если при установке стандартных файлов изменился каталог настроек
	//Каталог =ПолучитьФорму("ВнешняяОбработка.СБИС.Форма.ФормаГлавноеОкно").КаталогНастроек;
	
	МассивУстановленныхТиповыхИниФайлов	= НайтиФайлы(Каталог,"ВО8*.sbis3.xml");
	
	СписокУстановленныхИниФайлов				= Новый Соответствие();
	СписокУстановленныхИниФайловБезПрефиксов	= Новый Соответствие();
	СписокУстановленныхТиповыхИниФайлов			= Новый СписокЗначений();
	
	Для Каждого ИниФайл Из МассивФайловВКаталоге Цикл
		СписокУстановленныхИниФайлов.Вставить(ИниФайл.Имя,ИниФайл);
		СписокУстановленныхИниФайловБезПрефиксов.Вставить(Сред(ИниФайл.Имя, Найти(ИниФайл.Имя, "_")+1),ИниФайл);
	КонецЦикла;	
	
	СписокУстановленныхТиповыхИниФайлов.ЗагрузитьЗначения(МассивУстановленныхТиповыхИниФайлов);
	
	//пробегаем по списку установленных типовых ини файлов (.sbis.ini) и в общем списке установленных ини файлов
	//ищем соответствующие ини файлы клиента, затем из общего списка удаляем записи типовых ини файлов и, если нашли, ини файл клиента
	//к концу цикла в общем списке установленных ини файлов останутся неопределенные ини файлы
	Для Каждого ИниФайл Из СписокУстановленныхТиповыхИниФайлов Цикл
		ИмяФайлаНастроекКлиента			= СтрЗаменить(ИниФайл.Значение.Имя,".sbis3.xml",".xml");
		ИмяФайлаБезРасширения			= Лев(ИниФайл.Значение.Имя,Найти(ИниФайл.Значение.Имя,".")-1);
		ИмяФайлаБезРасширенияБезПрефикса= Сред(ИмяФайлаБезРасширения, Найти(ИмяФайлаБезРасширения, "_")+1);
		НайденыйФайлНастроекКлиента		= СписокУстановленныхИниФайловБезПрефиксов.Получить(ИмяФайлаБезРасширенияБезПрефикса+".xml");
		
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				ИниФайл.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	ИмяФайлаБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			Истина); 
		НоваяСтрока.Вставить("ПутьДоИниФайла",			ИниФайл.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				ИниФайл.Значение.ПолучитьВремяИзменения() );
		
		//из общего списка ини файлов удаляем .sbis.ini
		СписокУстановленныхИниФайлов.Удалить(ИниФайл.Значение.Имя);
		
		//если в общем списке нашли ини файл клиента то удаляем его из этого списка
		Если НайденыйФайлНастроекКлиента<>Неопределено Тогда
			НоваяСтрока.Вставить("ЕстьИзменения",	Истина);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	НайденыйФайлНастроекКлиента.ПолучитьВремяИзменения() );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	НайденыйФайлНастроекКлиента.Имя );
			СписокУстановленныхИниФайлов.Удалить(НайденыйФайлНастроекКлиента.Имя);
		Иначе	
			НоваяСтрока.Вставить("ЕстьИзменения",	Ложь);
			НоваяСтрока.Вставить("ДатаФайлаКлиент",	"" );
			НоваяСтрока.Вставить("ИмяФайлаКлиента",	"" );
		КонецЕсли;
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(ИниФайл.Значение.Имя));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока)
	КонецЦикла;	
	
	//в общем списке всех ини файлов останутся не определенные ини файлы
	//добавляем их таблицу отдельными строками
	Для Каждого Элемент из СписокУстановленныхИниФайлов Цикл 
		НоваяСтрока = Новый Структура();
		НоваяСтрока.Вставить("Имяфайла",				Элемент.Значение.Имя);
		НоваяСтрока.Вставить("ИмяфайлаБезРасширения",	Элемент.Значение.ИмяБезРасширения);
		НоваяСтрока.Вставить("Автообновление",			Ложь);
		НоваяСтрока.Вставить("ЕстьИзменения",			Ложь);
		НоваяСтрока.Вставить("ПутьДоИниФайла",			Элемент.Значение.Путь);
		НоваяСтрока.Вставить("ДатаФайла",				"");
		НоваяСтрока.Вставить("ДатаФайлаКлиент",			Элемент.Значение.ПолучитьВремяИзменения());
		НоваяСтрока.Вставить("ИмяФайлаКлиента",			"");
		//aa/uferov вынесено сюда для, для готового использования на общих функциях
		НоваяСтрока.Вставить("Ини_ИмяИни",				ИмяИниИзИмениФайла(Элемент.Ключ));
		НоваяСтрока.Вставить("Ини_ИмяБезРасширения",	Сред(НоваяСтрока.ИмяФайла,1,Найти(НоваяСтрока.ИмяФайла,".")-1));
		
		МассивУстановленныхИниФайлов.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат МассивУстановленныхИниФайлов;
	
КонецФункции

&НаКлиенте
Функция		СформироватьКаталогНастроек(Кэш, КаталогНастроекНазвание, Отказ) Экспорт
	
	Если КаталогНастроекНазвание = "" Тогда//устанавливаем каталог по умолчанию
		ПараметрыКонфигурации	= Кэш.ФормаНастроекОбщее.ОпределитьПараметрыКонфигурации(Кэш.ПараметрыСистемы, Отказ);
		ПараметрыКаталога		= Новый Структура(
			"КаталогНастроек,			ПрефиксСистемы,						ПараметрыСистемы", 
			КаталогНастроекНазвание,	ПараметрыКонфигурации.subsystem,	Кэш.ПараметрыСистемы);	
		ТестКаталогНастроек = СбисСформироватьКаталогПоУмолчанию(ПараметрыКаталога, Отказ);
	Иначе
		ТестКаталогНастроек = Кэш.ОбщиеФункции.СбисФорматКаталога(КаталогНастроекНазвание, Кэш.ПараметрыСистемы.Сервер);
		ТестКаталогНастроек = СбисСоздатьКаталогНаСервере(ТестКаталогНастроек, Кэш.ПараметрыСистемы, Отказ);
	КонецЕсли;
	Возврат ТестКаталогНастроек;
КонецФункции

//Устанавливает значение каталога по-умолчанию.
&НаСервереБезКонтекста
Функция		СбисСформироватьКаталогПоУмолчанию(Знач КаталогПараметры, Отказ);
	
	ПрефиксСистемы = КаталогПараметры.ПрефиксСистемы;
	ПараметрыСистемы = КаталогПараметры.ПараметрыСистемы;
	Если ПараметрыСистемы.Сервер.ЭтоLinux Тогда
		сбисРазделитель = "/";
		КаталогНастроекСБИС	= КаталогВременныхФайлов();
	Иначе
		сбисРазделитель = "\";
		КаталогНастроекСБИС	= Лев(КаталогВременныхФайлов(), 3);
	КонецЕсли;
	КаталогНастроекСБИС	= КаталогНастроекСБИС + "Sbis1C" + сбисРазделитель;
	КаталогНастроекТест	= КаталогНастроекСБИС;
	//Проверим наличие каталога на диске
	Если Не ПустаяСтрока(ПрефиксСистемы) Тогда
		КаталогНастроекТест = КаталогНастроекСБИС + ПрефиксСистемы + сбисРазделитель;
		КаталогФайл = Новый Файл(КаталогНастроекТест);
		Если 	КаталогФайл.Существует()
			И	КаталогФайл.ЭтоКаталог() Тогда
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		КонецЕсли;	
	КонецЕсли;
	КаталогНастроекТест = КаталогНастроекСБИС;		
	//Проверим старый путь, если там есть ини конфигурации, то папка со старыми настройками найдена, если там нет ини, то созадем подпапку с префиксом конфигурации
	КаталогФайл = Новый Файл(КаталогНастроекТест);
	Если 	КаталогФайл.Существует()
		И	КаталогФайл.ЭтоКаталог() Тогда
		ФайлКонфигурации = НайтиФайлы(КаталогНастроекТест, "*Конфигурация*.xml", Ложь);
		Если ФайлКонфигурации.Количество() Тогда
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		ИначеЕсли Не ПустаяСтрока(ПрефиксСистемы) Тогда
			КаталогНастроекТест = КаталогНастроекТест + ПрефиксСистемы + сбисРазделитель;
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		Иначе
			Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
		КонецЕсли;
	Иначе
		Если Не ПустаяСтрока(ПрефиксСистемы) Тогда
			КаталогНастроекТест = КаталогНастроекСБИС + ПрефиксСистемы + сбисРазделитель;
		КонецЕсли;	
		Возврат сбисСоздатьКаталогНаСервере(КаталогНастроекТест, ПараметрыСистемы, Отказ);
	КонецЕсли;
	
КонецФункции

// Функция проверяет заполненность и существование каталога настроек, создает если нет.	
&НаСервереБезКонтекста
Функция		СбисСоздатьКаталогНаСервере(Знач КаталогПуть, Знач ПараметрыСистемы, Отказ);
	Попытка
		СоздатьКаталог(КаталогПуть);
		КаталогНастроек	= Новый Файл(КаталогПуть);
		Если Не КаталогНастроек.Существует() Тогда
			ВызватьИсключение("Каталог не доступен" + ?(ПараметрыСистемы.Конфигурация.Файловая, "", " с сервера для клиент-серверной версии"));
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details",772, "Ошибка работы с файловой системой", "Не удалось проверить наличие каталога " + КаталогПуть + "! Причина: "	+ ОписаниеОшибки());
	КонецПопытки;
	Возврат КаталогПуть;
КонецФункции

//Функция выполняет проверку изменения параметров работы формы настроек. Возвращает результат изменения параметров, либо неопределено.
&НаКлиенте                                  
Функция		сбисПолучитьНастройки_ОбработатьПараметрыРаботы(Кэш, Отказ, ПродолжитьВыполнение)
	
	ПараметрРаботы = Неопределено;
	Если ПараметрыРаботы.Свойство("ИзменениеПользователя") Тогда
		ПараметрыРаботы.Удалить("ИзменениеПользователя");
	КонецЕсли;
	Если ПараметрыРаботы.Свойство("ВыполнитьПроверку",ПараметрРаботы) Тогда				
		Если ПараметрРаботы Тогда
			Кэш.ИниВПорядке = Ложь;
			Кэш.ини = Новый Структура;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыРаботы.Свойство("КэшироватьТекущие") Тогда
		ПараметрыРаботы.Удалить("КэшироватьТекущие");
	КонецЕсли;
	//Чистим способ данные по конфигурациям в кэше и выбранную конфу, так как другой способ хранения настроек
	Если ПараметрыРаботы.Свойство("ИзмененаФормаНастроек", ПараметрРаботы) Тогда
		Если ПараметрРаботы Тогда
			Кэш.ФормаНастроекОбщее.ОчиститьСобранныеНастройки(Кэш);
		КонецЕсли;
		ПараметрыРаботы.Удалить("ИзмененаФормаНастроек");
	КонецЕсли;
КонецФункции

&НаКлиенте                                  
Функция		сбисПутьКАктуальнымАрхивам(Кэш)
	сбисРазделитель = Кэш.ОбщиеФункции.сбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер);
	Возврат Кэш.ОбщиеФункции.сбисФорматКаталога(Кэш.Парам.ИдентификаторНастроек, Кэш.ПараметрыСистемы.Сервер) + "Архив" + сбисРазделитель;
	//Возврат Кэш.ОбщиеФункции.сбисФорматКаталога(Кэш.Парам.ИдентификаторНастроек, Кэш.ПараметрыСистемы.Сервер) + "Архив" + сбисРазделитель + "Настройки" + сбисРазделитель + Кэш.ПараметрыСистемы.Обработка.Версия + сбисРазделитель;
КонецФункции

&НаКлиенте
Функция		СбисСкачатьАрхивНаСервер(Кэш, СбисПараметрыАрхива, Отказ)
	СбисПутьКВременномуФайлу = Кэш.ОбщиеФункции.СбисПолучитьИмяВременногоФайлаКлиент("zip");
	ПараметрыЗапросаФайла = Кэш.ОбщиеФункции.СбисПараметрыСервисаОбновления(Кэш);
	ПараметрыЗапросаФайла.Вставить("ИмяФайла", СбисПутьКВременномуФайлу);
	ПараметрыЗапросаФайла.URL = ПараметрыЗапросаФайла.URL + СбисПараметрыАрхива.КлючАрхива + "." + СбисПараметрыАрхива.Расширение;
	
	РезультатВыполнения = Кэш.Интеграция.СбисСохранитьВФайлПоСсылке(Кэш, ПараметрыЗапросаФайла, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.СбисСкачатьАрхивНаСервер"); 
	КонецЕсли;                           
	ПараметрыПереноса = Новый Структура("НаСервер, ОчиститьПослеПереноса, Файлы", Истина, Истина, Новый Массив);
	ПараметрыПереноса.Файлы.Добавить(Новый Структура(
	"ИмяФайла,																ИмяФайлаОткуда,				ПутьКуда", 
	СбисПараметрыАрхива.ИмяАрхива + "." + СбисПараметрыАрхива.Расширение,	СбисПутьКВременномуФайлу,	СбисПараметрыАрхива.ПутьКАрхиву));
	
	РезультатВыполнения = Кэш.ОбщиеФункции.сбисСкопироватьФайлы(Кэш, ПараметрыПереноса, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.СбисСкачатьАрхивНаСервер"); 
	КонецЕсли;
	Возврат Истина;
КонецФункции

//Функция распаковывет архив в контексте сервера. Если архива нет, скачивает его с update, переносит на сервер и распаковывет 
&НаКлиенте
Функция		СбисПроверитьИРаспаковатьАрхивНаСервере(Кэш, ПараметрыРаспаковки, Отказ)
	РезультатВыполнения = сбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		//Файл не найден. Попробуем скачать с update и повторить операцию.
		Если РезультатВыполнения.code = 779 Тогда
			Отказ = Ложь;
		Иначе
			Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.сбисПроверитьИРаспаковатьАрхив"); 
		КонецЕсли;
	Иначе
		Возврат РезультатВыполнения;
	КонецЕсли;
	//TODO42 убрать скачку файла при отсутствии архива
	РезультатВыполнения = СбисСкачатьАрхивНаСервер(Кэш, ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.сбисПроверитьИРаспаковатьАрхив"); 
	КонецЕсли;
	РезультатВыполнения = СбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатВыполнения, "ФайлыНастроекКаталог.сбисПроверитьИРаспаковатьАрхив"); 
	КонецЕсли;
	Возврат РезультатВыполнения
	
КонецФункции

//Распаковывает дефолтные настройки. Если не указано куда, то во временный каталог
&НаСервереБезКонтекста
Функция		СбисРаспаковатьАрхивНаСервере(Знач ПараметрыРаспаковки, Отказ)
	Перем ПутьКАрхиву, ИмяАрхива, РасширениеАрхива, КаталогРаспаковки;
	
	Если		Не ПараметрыРаспаковки.Свойство("ПутьКАрхиву", ПутьКАрхиву)
			Или	Не ЗначениеЗаполнено(ПутьКАрхиву) Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 785, "Ошибка во входящих данных", "Не указан путь к архиву настроек для распаковки");
	ИначеЕсли	Не ПараметрыРаспаковки.Свойство("ИмяАрхива", ИмяАрхива)
			Или	Не ЗначениеЗаполнено(ИмяАрхива) Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 785, "Ошибка во входящих данных", "Не указано имя архива настроек для распаковки");
	ИначеЕсли	Не ПараметрыРаспаковки.Свойство("КаталогРаспаковки", КаталогРаспаковки)
			Или	Не ЗначениеЗаполнено(КаталогРаспаковки) Тогда
		КаталогРаспаковки = КаталогВременныхФайлов();
		КаталогРаспаковки = КаталогРаспаковки + ?(Прав(КаталогРаспаковки,1) = ПараметрыРаспаковки.Разделитель, "", ПараметрыРаспаковки.Разделитель) + "sbis_83_tmp" + ПараметрыРаспаковки.Разделитель;
	КонецЕсли;
	Если Не ПараметрыРаспаковки.Свойство("Расширение", РасширениеАрхива) Тогда
		РасширениеАрхива = "zip";
	КонецЕсли;
	//Проверим наличие архива
	СбисИмяАрхива = ПутьКАрхиву + ИмяАрхива + "." + РасширениеАрхива;
	СбисФайлТест = Новый Файл(СбисИмяАрхива);
	Если Не СбисФайлТест.Существует() Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 779, "Не найден объект", "По пути " + ПутьКАрхиву + " отсутствует файл " + ИмяАрхива);
	КонецЕсли;
	//Проверим наличие уже существующих файлов и очистим их
	Если ПараметрыРаспаковки.Свойство("МаскиФайловУдалить") Тогда
		Для Каждого сбисМаскаФайлов Из ПараметрыРаспаковки.МаскиФайловУдалить Цикл
			СбисФайлТест = НайтиФайлы(КаталогРаспаковки,сбисМаскаФайлов);
			Для Каждого сбисФайл Из СбисФайлТест Цикл
				Попытка
					УдалитьФайлы(сбисФайл.ПолноеИмя);
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	ФайлАрхива = Новый ЧтениеZipФайла(СбисИмяАрхива);
	Попытка
		ФайлАрхива.ИзвлечьВсе(КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать); 
		ФайлАрхива.Закрыть(); 
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
	КонецПопытки;
	Возврат КаталогРаспаковки;
	
КонецФункции	

&НаКлиенте                                  
Функция		СбисРаспаковатьНастройки(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	Перем СбисКаталогРаспаковки;
	Если Не ДополнительныеПараметры.Свойство("ВременныйКаталог", СбисКаталогРаспаковки) Тогда
		СбисКаталогРаспаковки	= Кэш.ОбщиеФункции.СбисФорматКаталога(Кэш.ОбщиеФункции.СбисКаталогВременныхФайловНаСервере(), Кэш.ПараметрыСистемы.Сервер);
	КонецЕсли;
	СбисКаталогРаспаковки	= Кэш.ОбщиеФункции.СбисФорматКаталога(СбисКаталогРаспаковки + "_82_ini_tmp", Кэш.ПараметрыСистемы.Сервер);
	ПараметрыРаспаковки		= СбисПараметрыАрхиваНастроек(Кэш, "Settings");
	
	ПараметрыРаспаковки.Вставить("МаскиФайловУдалить",	Новый Массив);
	ПараметрыРаспаковки.Вставить("КаталогРаспаковки",	СбисКаталогРаспаковки);
	ПараметрыРаспаковки.МаскиФайловУдалить.Добавить("*");
	РезультатРаспаковки = СбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.СбисРаспаковатьНастройки"); 
	КонецЕсли;
	Возврат РезультатРаспаковки;
	
КонецФункции

&НаКлиенте                                  
Функция		СбисПараметрыАрхиваНастроек(Кэш, СбисИмяАрхива)
	Результат = Новый Структура("ИмяАрхива, КлючАрхива, Расширение", СбисИмяАрхива, СбисИмяАрхива, "zip");
	Если Кэш.ОбщиеФункции.ЭтоНоваяВерсия(Кэш.ПараметрыСистемы.Клиент.ВерсияПриложения, "8.3") Тогда
		Результат.КлючАрхива = Результат.КлючАрхива + "8_3";
	КонецЕсли;
	СбисПутьКНастройкам = СбисПутьКАктуальнымАрхивам(Кэш);
	Результат.Вставить("ПутьКАрхиву", СбисПутьКНастройкам);
	Результат.Вставить("Разделитель", Кэш.ОбщиеФункции.СбисФорматРазделителя(Кэш.ПараметрыСистемы.Сервер));
	Возврат Результат;
КонецФункции

// Функция формирует полный список доступных настроек
&НаКлиенте
Функция		СформироватьСписокДоступныхНастроек(Кэш, КаталогРаспаковки)
	СписокТиповНастроек = СформироватьСписокДоступныхНастроекНаСервере(КаталогРаспаковки);
	ПараметрыСериализации = Новый Структура("Разделитель", "-");
	Для Каждого ЭлементСписка Из СписокТиповНастроек Цикл
		СбисЗначениеПодсистемы	= СтрЗаменить(Кэш.ФормаНастроекОбщее.ОтсеятьЧисла(Сред(ЭлементСписка.Представление, СтрДлина(Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксСервис)+1)), "-", "");
		СбисРазрядыВерсии		= Сред(ЭлементСписка.Представление,Найти(ЭлементСписка.Представление, СбисЗначениеПодсистемы) + СтрДлина(СбисЗначениеПодсистемы));
		СбисРазрядыВерсии		= Кэш.ОбщиеФункции.СериализоватьВерсию(СбисРазрядыВерсии, "Дозаполнить", ПараметрыСериализации);
		ЭлементСписка.Значение.Вставить("ПредставлениеВерсии", СбисРазрядыВерсии);
	КонецЦикла;
	Возврат СписокТиповНастроек;
КонецФункции

&НаСервере
Функция		СформироватьСписокДоступныхНастроекНаСервере(КаталогРаспаковки)
	//На сервере так, как вся работа с файлами настроек идёт там
	
	// Каждый элемент списка - массив файлов настроек для определенной конфигурации
	СписокТиповНастроек	= Новый СписокЗначений;
	СписокПрефиксов		= Новый Массив();
	
	СписокФайлов		= НайтиФайлы(КаталогРаспаковки,"ВО8*.sbis3.xml");
	
	Для Каждого ИниФайл из СписокФайлов Цикл
		Префикс	= НайтиПрефиксВИмениФайла(ИниФайл.Имя); // Берет все до первого подчеркивания
		Если	СписокПрефиксов.Найти(Префикс) = Неопределено Тогда
			СписокПрефиксов.Добавить(Префикс);
			МаскаФайлов		= Префикс+"_*.sbis3.xml";
			МассивФайлов	= НайтиФайлы(КаталогРаспаковки,МаскаФайлов);
			
			МассивСтруктурФайлов = Новый Массив();
			Для Каждого Файл из МассивФайлов Цикл
				НоваяСтрока = Новый Структура();
				НоваяСтрока.Вставить("Имя",					Файл.Имя);
				НоваяСтрока.Вставить("ИмяБезРасширения",	Файл.ИмяБезРасширения);
				НоваяСтрока.Вставить("ПолноеИмя",			Файл.ПолноеИмя);
				НоваяСтрока.Вставить("Путь",				Файл.Путь);
				НоваяСтрока.Вставить("Расширение",			Файл.Расширение);
				МассивСтруктурФайлов.Добавить(НоваяСтрока);
			КонецЦикла;	
			
			СписокТиповНастроек.Добавить(Новый	Структура("МассивИни,ПараметрыКонфигурации",	МассивСтруктурФайлов, Новый	Структура),Префикс);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат СписокТиповНастроек;
	
КонецФункции

//Старая процедура. Явно прописан контекст выполнения + изменена проверка предыдущей версии
&НаСервереБезКонтекста
Функция		ОбновитьИниФайлыНаСервере(ПараметрыОбновленияИни, Отказ)
	СбисКаталог = ПараметрыОбновленияИни.КаталогНастроек;
	МассивУстановленныхТиповыхИниФайлов	= НайтиФайлы(СбисКаталог,"ВО8*.sbis3.xml");
	МассивУстановленныхИниФайлов		= НайтиФайлы(СбисКаталог,"ВО8*.xml");
	
	Если Не МассивУстановленныхТиповыхИниФайлов.Количество() Тогда
		//Нет типовых файлов, которые надо обработать
		Возврат Ложь;
	КонецЕсли;
	
	РезультатБэкап = СделатьБэкапИниФайлов(СбисКаталог, МассивУстановленныхИниФайлов, ПараметрыОбновленияИни, Отказ);
	Если Отказ Тогда 
		//Не удалось сохранить файлы перед обновлением. Выходим
		Возврат РезультатБэкап;
	КонецЕсли;
	
	Для Каждого СбисСтрока Из МассивУстановленныхТиповыхИниФайлов Цикл
		//Проверим наличие файла в распаковке автообновления
		ПутьКФайлуОткуда = СбисНайтиФайлОбновления(ПараметрыОбновленияИни.ВременныйКаталогРаспаковкиИни, СбисСтрока);
		Если ПутьКФайлуОткуда = Неопределено Тогда
			//Такого типового файла нет. Ошибка?
			Продолжить;
		КонецЕсли;
		Попытка
			КопироватьФайл(ПутьКФайлуОткуда, СбисКаталог + СбисСтрока.Имя);
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,details", 772, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция		СбисНайтиФайлОбновления(ВременныйКаталогРаспаковкиИни, СбисСтрока)
	ПутьКФайлуОткуда = ВременныйКаталогРаспаковкиИни + СбисСтрока.Имя; 
	Файл = Новый Файл(ПутьКФайлуОткуда);
	Если Файл.Существует() Тогда
		Возврат ПутьКФайлуОткуда;
	КонецЕсли;
	СтрИмяФайлаБезРасширений = СтрПолучитьСтроку(СтрЗаменить(СбисСтрока.Имя, ".", Символы.ПС),1);
	ФайлПоМаске = НайтиФайлы(ВременныйКаталогРаспаковкиИни, СтрИмяФайлаБезРасширений + ".*sbis3.xml");
	Если ФайлПоМаске.Количество() Тогда
		Возврат ФайлПоМаске[0].ПолноеИмя;
	КонецЕсли;
	//На случай различий связанных с дополненным именем файлов
	СтрИмяФайлаРаздел = СтрЗаменить(СтрИмяФайлаБезРасширений, "_", Символы.ПС);
	Если	СтрПолучитьСтроку(СтрИмяФайлаРаздел, 2) = "Загрузка"
		Или	СтрПолучитьСтроку(СтрИмяФайлаРаздел, 2) = "Выгрузка" Тогда
		СтрИмяФайлаБезРасширений = СтрПолучитьСтроку(СтрИмяФайлаРаздел, 1);
		Для Счетчик = 4 По СтрЧислоСтрок(СтрИмяФайлаРаздел) Цикл
			СтрИмяФайлаБезРасширений = СтрИмяФайлаБезРасширений + "_" + СтрПолучитьСтроку(СтрИмяФайлаРаздел, Счетчик);
		КонецЦикла;
		ФайлПоМаске = НайтиФайлы(ВременныйКаталогРаспаковкиИни, СтрИмяФайлаБезРасширений + ".*sbis3.xml");
		Если ФайлПоМаске.Количество() Тогда
			Возврат ФайлПоМаске[0].ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции
	
//Делает бэкап ини файлов в каталоге настроек.
&НаСервереБезКонтекста
Функция		СделатьБэкапИниФайлов(СбисКаталог, МассивИниФайлов, ДополнительныеПараметры, Отказ)
	Если Не МассивИниФайлов.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	СбисРазделитель = ДополнительныеПараметры.Разделитель;
	СбисПутьКАрхиву = СбисСоздатьКаталогНаСервере(СбисКаталог + "Архив", ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат СбисПутьКАрхиву;
	КонецЕсли;
	СбисКлючАрхива = "";
	Если ДополнительныеПараметры.Свойство("КлючАрхива") Тогда
		СбисКлючАрхива = ДополнительныеПараметры.КлючАрхива + "_";
	КонецЕсли;
	ЗаписьZIP = Новый ЗаписьZipФайла(СбисПутьКАрхиву + СбисРазделитель + СбисКлючАрхива + Формат(ТекущаяДата(),"ДФ=""дд.ММ.гггг'_'ЧЧ.мм.сс""")+".zip");
	Если ТипЗнч(МассивИниФайлов) = Тип("СписокЗначений") Тогда
		Для Каждого СбисСтрока Из МассивИниФайлов Цикл
			ЗаписьZIP.Добавить(СбисКаталог + СбисСтрока.Значение);
		КонецЦикла;
	Иначе
		Для Каждого СбисСтрока Из МассивИниФайлов Цикл
			ЗаписьZIP.Добавить(СбисКаталог + СбисСтрока.Имя);
		КонецЦикла;
	КонецЕсли;
	Попытка
		ЗаписьZIP.Записать();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,details", 772, ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина;
КонецФункции

//Функция возвращает префикс из имени файла настроек	
&НаСервереБезКонтекста
Функция		НайтиПрефиксВИмениФайла(Знач Текст)Экспорт
	Префикс = Лев(Текст,Найти(Текст,"_")-1);
	Возврат Префикс;	
КонецФункции	

//Формирует структуру ошибки и добавляет ее в таблицу ошибок	
&НаСервереБезКонтекста
Процедура	ДобавитьПростуюОшибку(ТаблицаОшибок,ИмяПараметра,ТекстОшибки)
	НоваяОшибка = Новый Структура();
	НоваяОшибка.Вставить("ИмяПараметра",ИмяПараметра);
	НоваяОшибка.Вставить("ЗначениеПараметра","");
	НоваяОшибка.Вставить("ТекстОшибки",ТекстОшибки);
	НоваяОшибка.Вставить("ИнформацияПоОбъекту","");
	НоваяОшибка.Вставить("ИмяОбъекта","");
	НоваяОшибка.Вставить("ПолныйПуть","");
	ТаблицаОшибок.Добавить(НоваяОшибка);
КонецПроцедуры

//Возвращает имя настройки без префикса и расширения	
&НаСервереБезКонтекста
Функция		ИмяИниИзИмениФайла(ИмяФайла)
	НачалоИмениИни = Найти(ИмяФайла,"_");
	ТипДок = ?(НачалоИмениИни>0,сред(ИмяФайла,НачалоИмениИни+1),ИмяФайла);
	НачалоРасширения = Найти(ТипДок,".");
	Возврат ?(НачалоРасширения>0,Лев(ТипДок, НачалоРасширения-1),ТипДок);
КонецФункции

//Формирует структуру пользовательского файла настроек с ошибочными узлами
&НаСервереБезКонтекста
Функция		ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(СлужебнаяСтруктура, СтруктураИниФайлаКлиента)
	НоваяСтруктураИниФайлаКлиента = СтруктураИниФайлаКлиента;
	Для каждого Узел из СлужебнаяСтруктура Цикл
		
		Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(Узел.Значение) = Ложь Тогда //Если ошибок в узле нет, продолжаем обход узлов
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(НоваяСтруктураИниФайлаКлиента) = Тип("Структура") Тогда
			Если Узел.Значение.Свойство("Ошибка") Тогда //Если в узле служебной структуры есть ошибка добавляем в новую структуру клиента
				//НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура("Значение", Узел.Значение.Ошибка.ЗначениеПараметра));
				НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура());
				Для Каждого Элемент Из Узел.Значение Цикл
					Если Элемент.Ключ<>"Ошибка" Тогда
						НоваяСтруктураИниФайлаКлиента[Узел.Ключ].Вставить(Элемент.Ключ, Элемент.Значение);	
					КонецЕсли;
				КонецЦикла;
				//НоваяСтруктураИниФайлаКлиента[Узел.Ключ].Вставить("Значение", Узел.Значение.Ошибка.ЗначениеПараметра);
				Продолжить;
			Иначе //Если ошибки нет, и нет такого узла - создаем узел в новой структуре клиента
				Если НоваяСтруктураИниФайлаКлиента.Свойство(Узел.Ключ) = Ложь Тогда
					НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, Новый Структура);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Узел.Значение) = Тип("Структура") Тогда	
			НоваяСтруктураИниФайлаКлиента.Вставить(Узел.Ключ, ДобавитьЗначенияСОшибкамиВСтруктуруКлиента(Узел.Значение, НоваяСтруктураИниФайлаКлиента[Узел.Ключ]));
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат НоваяСтруктураИниФайлаКлиента;
	
КонецФункции	

//Рекурсивно проверяет, есть ли в узле структуры ошибка, чтобы понимать какую структуру узлов надо создавать в пользовательском файле настроек	
&НаСервереБезКонтекста
Функция		ЕстьОшибкаВУзлеСлужебнойСтруктуры(Узел)
	ЕстьОшибка = Ложь;
	Если ТипЗнч(Узел) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Узел.Свойство("Ошибка") Тогда
		Возврат Истина;
	КонецЕсли;	
	Для каждого ЭлементУзла из Узел Цикл		
		Если ТипЗнч(ЭлементУзла.Значение) = Тип("Структура") Тогда	
			Если ЭлементУзла.Значение.Свойство("Ошибка") Тогда
				Возврат Истина;
			КонецЕсли;	
			Если ЕстьОшибкаВУзлеСлужебнойСтруктуры(ЭлементУзла.Значение) Тогда //Проверяем вложенный узел
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат ЕстьОшибка;
	
КонецФункции

//Процедура сохраняет текущие файлы настроек в архив и устанавливает новые настройки	
&НаСервере
Функция		УстановитьФайлыНастроекНаСервере(МассивФайловДляУстановки, КаталогНастроек, ПараметрыНастроек, Отказ)
	ДатаВремяАрхива = Формат(ТекущаяДата(),"ДФ=""дд.ММ.гггг'_'ЧЧ.мм.сс""");
	СоздатьКаталог(КаталогНастроек+"Архив");
	ЗаписьZIP =  Новый ЗаписьZipФайла(КаталогНастроек+"Архив\"+ДатаВремяАрхива+".zip");
	Для Каждого Элемент Из МассивФайловДляУстановки Цикл
		Если Элемент.ДобавлятьВАрхив Тогда
			ЗаписьZIP.Добавить(КаталогНастроек	+ Элемент.ИмяФайлаПриемника);	
		КонецЕсли;
		КопироватьФайл(Элемент.ИмяФайлаИсточника,КаталогНастроек	+ Элемент.ИмяФайлаПриемника);
	КонецЦикла;
	ЗаписьZIP.Записать();
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(КаталогНастроек, ПараметрыНастроек);
	
КонецФункции

&НаСервере
Функция		ОтключитьФайлыНастроекНаСервере(СписокИниКОтключению, КаталогНастроек, ПараметрыНастроек, Отказ)
	
	Результат = СделатьБэкапИниФайлов(КаталогНастроек, СписокИниКОтключению, ПараметрыНастроек, Отказ);
	Для Каждого ИниФайл Из СписокИниКОтключению Цикл
		УдалитьФайлыНаСервере(КаталогНастроек, ИниФайл.Значение);
	КонецЦикла;	
	
	Возврат	ПолучитьМассивУстановленныхИниФайлов(КаталогНастроек, ПараметрыНастроек);
	
КонецФункции

///////////////////////////////////////////////////
////////////////ВнешниеФункции_Клиент//////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	сбисПодключитьЗаплатки(Кэш, КаталогНастроек)
	
	// Подключает внешнюю обработку с пользовательскими функциями
	Кэш.ТекущийСеанс.Функции.Очистить();
	ИмяФункций	= "ВнешниеФункции_Клиент";
	МестаПоискаОбработки = Новый Массив();
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", КаталогНастроек,								"Каталог"));
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ДополнительныеОтчетыИОбработки",	"Запрос"));
	МестаПоискаОбработки.Добавить(Новый Структура("Путь, Алгоритм", "Справочники.ВнешниеОбработки",					"Запрос"));
	
	ДанныеЗаписи = Кэш.ФормаНастроекОбщее.ПолучитьАдресВнешнихФункций(ИмяФункций,МестаПоискаОбработки,Кэш.ПараметрыСистемы);
	Кэш.Заплатки = ДанныеЗаписи.Заплатки;
	Если ДанныеЗаписи.Свойство("СписокКлиентскихФорм") Тогда
		Кэш.ТекущийСеанс.Формы.Клиентские = ДанныеЗаписи.СписокКлиентскихФорм;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////
///////////////////////XSLT////////////////////////
///////////////////////////////////////////////////

&НаКлиенте
Процедура	СбисСформироватьСтруктуруXSLT(Кэш, Каталог, УдалитьПослеЗавершения=Ложь, Отказ)	Экспорт
	
	КаталогКонвертеров		= Кэш.ОбщиеФункции.сбисФорматКаталога(Каталог + "xslt", Кэш.ПараметрыСистемы.Сервер);	
	//Пробуем прочитать xslt
	РезультатФормирования	= СбисПрочитатьXSLTНаСервере(КаталогКонвертеров, Отказ);
	Если Отказ Тогда
		//Нет файлов xslt/каталога с xslt
		Если РезультатФормирования.code = 777 Тогда
			Отказ = Ложь;
		Иначе
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ФайлыНастроекКаталог.сбисСформироватьСтруктуруXSLT"));
			Возврат;
		КонецЕсли;
		//Скачаем и распакуем архив с xslt в каталог
		РезультатФормирования = СбисРаспаковатьXSLT(Кэш, Новый Структура("КаталогРаспаковки", КаталогКонвертеров), Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ФайлыНастроекКаталог.сбисСформироватьСтруктуруXSLT"));
			Возврат;
		КонецЕсли;
		//Повторно пробуем прочитать xslt
		РезультатФормирования = сбисПрочитатьXSLTНаСервере(КаталогКонвертеров, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.сбисИсключение(РезультатФормирования, "ФайлыНастроекКаталог.сбисСформироватьСтруктуруXSLT"));
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	Кэш.Вставить("XSLT", РезультатФормирования);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция		СбисПрочитатьXSLTНаСервере(Путь, Отказ)
	
	Если Не	НайтиФайлы(Путь,"*.xslt").Количество() Тогда
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 777, "Вложения не найдены", "Отсутствуют файлы xslt в каталоге " + Путь);
	КонецЕсли;
	Попытка
		ДанныеВозврата = сбисПрочитатьXSLT(Путь);
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 770, "Ошибка XSLT", "Ошибка чтения xslt в каталоге " + Путь + ". Детально: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	Возврат	ДанныеВозврата;
	
КонецФункции

&НаКлиенте
Функция		СбисРаспаковатьXSLT(Кэш, сбисПараметрыКонвертеров, Отказ)
	ПараметрыРаспаковки = СбисПараметрыАрхиваНастроек(Кэш, "XSLT");
	ПараметрыРаспаковки.Вставить("МаскиФайловУдалить",	Новый Массив);
	ПараметрыРаспаковки.Вставить("КаталогРаспаковки",	СбисПараметрыКонвертеров.КаталогРаспаковки);
	ПараметрыРаспаковки.МаскиФайловУдалить.Добавить("*.sbis3.xslt");
	РезультатРаспаковки = СбисРаспаковатьАрхивНаСервере(ПараметрыРаспаковки, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.сбисИсключение(РезультатРаспаковки, "ФайлыНастроекКаталог.сбисРаспаковатьНастройки"); 
	КонецЕсли;
	Возврат РезультатРаспаковки;
КонецФункции

// Функция формирует структуру xslt для добавоения в кэш xslt, используемые для преобразований файлов при выгрузке и загрузке документов
&НаСервереБезКонтекста
Функция		сбисПрочитатьXSLT(КаталогКонвертеров)
	ДанныеXslt		= сбисПолучитьСписокXSLT(КаталогКонвертеров);
	СтруктураXSLT	= Новый Структура;
	Для Каждого НайденныйФайл Из ДанныеXslt Цикл
		ЧтениеФайлаXSLT	= Новый ТекстовыйДокумент();
		ЧтениеФайлаXSLT.Прочитать(НайденныйФайл.ПолноеИмя,КодировкаТекста.UTF8);
		СтруктураXSLT.Вставить(НайденныйФайл.ИмяКлюч,ЧтениеФайлаXSLT.ПолучитьТекст());
	КонецЦикла;
	
	Возврат СтруктураXSLT;
	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПолучитьСписокXSLT(КаталогКонвертеров)
	
	Результат			= Новый Структура("Карта, Данные", Новый Массив, Новый Массив);
	Расширение_Типа		= ".xslt";
	Расширение_Стандарт	= ".sbis3";
	
	МассивВсехXSLT = НайтиФайлы(КаталогКонвертеров,"*" + Расширение_Типа);
	Для Каждого НайденныйФайл из МассивВсехXSLT Цикл
		ИмяФайла = НайденныйФайл.ИмяБезРасширения;
		ИмяXSLT = НайденныйФайл.ИмяБезРасширения;
		ПользовательскийXSLT = Не Булево(Найти(ИмяXSLT, Расширение_Стандарт));
		Если Не ПользовательскийXSLT Тогда//Это типовой xslt
			ИмяXSLT = СтрЗаменить(ИмяXSLT,Расширение_Стандарт,"");
		ИначеЕсли ИмяXSLT = "ЭДОНакл_3_01" Тогда// Для безболезненного перехода с 20 и ранее версий переименуем пользовательские xslt по-новому стандарту
			ИмяXSLT = "ЭДОНакл_1175004_3_01";
		ИначеЕсли ИмяXSLT = "ЭДОНакл_5_01" Тогда
			ИмяXSLT = "ЭДОНакл_1175004_5_01";
		ИначеЕсли ИмяXSLT = "АктВР_5_01" Тогда
			ИмяXSLT = "АктВР_1175006_5_01";
		ИначеЕсли ИмяXSLT = "АктВР_3_01" Тогда
			ИмяXSLT = "АктВР_1175006_3_01";
		ИначеЕсли ИмяXSLT = "СчФктр_3_01" Тогда
			ИмяXSLT = "СчФктр_1115101_3_01";
		ИначеЕсли ИмяXSLT = "СчФктр_5_01" Тогда
			ИмяXSLT = "СчФктр_1115101_5_01";
		ИначеЕсли ИмяXSLT = "СчФктр_5_02" Тогда
			ИмяXSLT = "СчФктр_1115101_5_02";
		ИначеЕсли ИмяXSLT = "счФактКор_3_01" Тогда
			ИмяXSLT = "счФактКор_1115108_3_01";
		ИначеЕсли ИмяXSLT = "Заказ_5_01" Тогда
			ИмяXSLT = "Заказ_Заказ_5_01";
		ИначеЕсли ИмяXSLT = "АктПП_1_01" Тогда
			ИмяXSLT = "АктПП__1_01";
		ИначеЕсли ИмяXSLT = "АктПП_3_01" Тогда
			ИмяXSLT = "АктПП__3_01";
		ИначеЕсли ИмяXSLT = "АктСвер_1" Тогда
			ИмяXSLT = "АктСвер__1";
		КонецЕсли;
		ИмяXSLT = СтрЗаменить(СтрЗаменить(ИмяXSLT, " ", ""),"-", "_");
		ИндексВДанных	= Результат.Карта.Найти(ИмяXSLT);
		ЗаписьРезультат	= Новый Структура("ИмяКлюч, ИмяФайла, ПолноеИмя, ЕстьИзменения", ИмяXSLT, ИмяФайла, НайденныйФайл.ПолноеИмя, ПользовательскийXSLT);
		Если ИндексВДанных = Неопределено Тогда//Добавляем xslt если его ещё нет в списке.
			Результат.Карта.Добавить(ИмяXSLT);
			Результат.Данные.Добавить(ЗаписьРезультат);
		ИначеЕсли ПользовательскийXSLT Тогда//либо если он пользовательский 
			Результат.Данные[ИндексВДанных] = ЗаписьРезультат;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат.Данные;
	
КонецФункции
	
///////////////////////////////////////////////////
///////////////////СБИС параметры//////////////////
///////////////////////////////////////////////////

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_ДоВключения(Кэш, ПараметрыИнтеграции, ДополнительныеПараметры, ИзмененияПараметров=Ложь) Экспорт
	Перем АдресСервера;
	ПереопределитьФормы			= Ложь;
	СтруктураСбисПараметров		= ПолучитьПараметрыСБИС(Кэш,Кэш.Парам.ИдентификаторНастроек);//Убрана привязка к реквизиту каталога настроек, для вызова процедуры из формы настройки соединения без изменения реквизита
	ПараметрыИнтеграции_Новые	= Новый Структура("СпособОбмена, СпособХраненияНастроек");
	ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции_Новые, ПараметрыИнтеграции);
	
	//Если есть в структуре параметров, то берём оттуда по-умолчанию. Если нет, то из сохраненного значения
	Если	Не	СтруктураСбисПараметров.Свойство("АдресСервера", АдресСервера)
		И	Не	ПараметрыИнтеграции.Свойство("АдресСервера", АдресСервера) 	Тогда
			АдресСервера = Кэш.ГлавноеОкно.АдресСервера;
	КонецЕсли;
	Если Не	Кэш.СБИС.АдресСервера = АдресСервера Тогда
		Кэш.СБИС.Вставить("АдресСервера", АдресСервера);
		Кэш.Парам.Вставить("АдресСервера", АдресСервера);
		Кэш.ГлавноеОкно.АдресСервера = АдресСервера;
		ИзмененияПараметров = Истина;
	КонецЕсли;
	//Проверить в каталоге способ хранения настроек
	Если	СтруктурасбисПараметров.Свойство("СпособХраненияНастроек") Тогда//Если есть переназначение способа хранения настроек
		Попытка//На случай, если в параметрах указали фигню.
			ПараметрыИнтеграции_Новые.СпособХраненияНастроек = Число(СтруктурасбисПараметров.СпособХраненияНастроек);
		Исключение
			ПараметрыИнтеграции_Новые.СпособХраненияНастроек = ПараметрыИнтеграции.СпособХраненияНастроек;
		КонецПопытки;
	КонецЕсли;
	//Проверить в каталоге способ обмена
	Если	СтруктурасбисПараметров.Свойство("СпособОбмена") Тогда//Добавлена проверка способа обмена для исключения ситуаций с повторным вызовом процедуры с тем же способом
		Попытка//На случай, если в параметрах указали фигню.
			ПараметрыИнтеграции_Новые.СпособОбмена = Число(СтруктурасбисПараметров.СпособОбмена);
		Исключение
			ПараметрыИнтеграции_Новые.СпособОбмена = ПараметрыИнтеграции.СпособОбмена;
		КонецПопытки;
	КонецЕсли;
	//Проверим изменение и необходимость переопределения
	ЗначениеПараметра = Неопределено;
	Для Каждого КлючИЗначение Из ПараметрыИнтеграции_Новые Цикл
		Если Не ПараметрыИнтеграции.Свойство(КлючИЗначение.Ключ, ЗначениеПараметра) 
			Или ЗначениеПараметра= КлючИЗначение.Значение Тогда
			Продолжить;
		КонецЕсли;
		ИзмененияПараметров = Истина;
		Прервать;
	КонецЦикла;
	
	Если ИзмененияПараметров Тогда//Были изменения в настройках, переопределить формы интеграции.
		Если ДополнительныеПараметры.ВызыватьРекурсивно	Тогда
			ДополнительныеПараметры.ВызыватьРекурсивно = Ложь;
			Результат = Кэш.ГлавноеОкно.ОпределитьИнтеграциюРабочиеФормы(Кэш,ПараметрыИнтеграции_Новые,ДополнительныеПараметры);
			ЗаполнитьЗначенияСвойств(ПараметрыИнтеграции, ПараметрыИнтеграции_Новые);
			Возврат Результат;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат	Истина;
	
КонецФункции

//Установка сбис параметров
&НаКлиенте
Функция		СбисУстановитьПараметры(Кэш, КаталогНастроек, СтруктураНастроек=Неопределено,Отказ=Ложь)
	
	СтруктураНастроек = ПолучитьПараметрыСБИС(Кэш, КаталогНастроек, Отказ);
	//Проставим параметры автообновления в СБИС параметры, или возьмём оттуда.
	Если СтруктураНастроек.Свойство("НастройкиАвтообновление") Тогда
		Кэш.Парам.НастройкиАвтообновление = СтруктураНастроек.НастройкиАвтообновление;
	Иначе
		СтруктураНастроек.Вставить("НастройкиАвтообновление", Кэш.Парам.НастройкиАвтообновление);
	КонецЕсли;
	Кэш.ФормаНастроекОбщее.УстановитьсбисПараметры(Кэш, СтруктураНастроек, КаталогНастроек);		
	
КонецФункции

&НаКлиенте
Функция		ПолучитьПараметрыСБИС(Кэш, КаталогНастроек, Отказ=Ложь) Экспорт
	
	// функция читает параметры запроса статусов из файла	
	Возврат ПолучитьПараметрыСБИСНаСервере(КаталогНастроек);
	
КонецФункции

&НаСервере
Функция		ПолучитьПараметрыСБИСНаСервере(КаталогНастроек)
	
	// функция читает параметры запроса статусов из файла	
	Попытка
		СтруктураПараметров = сбисПрочитатьXMLФайл(КаталогНастроек, "сбисПараметры").Параметры;
		Для Каждого Элемент Из СтруктураПараметров Цикл
			Строка = Элемент.Значение;
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и СтрДлина(Строка)=19 Тогда //видимо это дата
				Попытка
					СтруктураПараметров[Элемент.Ключ] = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2), Сред(Строка,12, 2), Сред(Строка,15, 2), Сред(Строка,18, 2));
				Исключение
				КонецПопытки;
			КонецЕсли;
			Если Сред(Строка,3,1)="." и Сред(Строка,6,1)="." и СтрДлина(Строка)=10 Тогда //видимо это дата
				Попытка
					СтруктураПараметров[Элемент.Ключ] = Дата(Сред(Строка,7,4), Сред(Строка,4,2), Лев(Строка, 2));
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		Возврат СтруктураПараметров;
	Исключение
		Возврат Новый Структура("ДатаПоследнегоЗапросаСтатусов,ИдентификаторПоследнегоСобытия,ДатНачЧтенияСтатусов,ДатКнцЧтенияСтатусов");
	КонецПопытки;
	
КонецФункции

//функция записывает параметры запроса статусов в файл	
&НаКлиенте
Функция		СохранитьПараметрыСБИС(Кэш,СтруктураНастроек,КаталогНастроек,Отказ=Ложь) Экспорт
	СохранитьПараметрыСБИСНаСервере(СтруктураНастроек,КаталогНастроек);
КонецФункции

&НаСервере
Функция		СохранитьПараметрыСБИСНаСервере(СтруктураНастроек,КаталогНастроек) Экспорт
	// функция записывает параметры запроса статусов в файл	
	ОбщаяСтруктура = ПолучитьПараметрыСБИСНаСервере(КаталогНастроек);
	Для Каждого Элемент Из СтруктураНастроек Цикл
		ОбщаяСтруктура.Вставить(Элемент.Ключ,Элемент.Значение);
	КонецЦикла;
	Попытка
		ШаблонXML = ПолучитьXMLСПростымиЭлементами(Новый Структура("Параметры",ОбщаяСтруктура));
		ИсхФайл = Новый ТекстовыйДокумент;
		ИсхФайл.УстановитьТекст(ШаблонXML);
		ИсхФайл.Записать(КаталогНастроек+"сбисПараметры.xml", "windows-1251");		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецФункции


////////////////////////////////////////////////////
//////////////Вызов ини по требованию///////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция		УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктурасбисПараметров, ДополнительныеПараметры, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьПараметрыИнтеграции_УстановкаНастроек(Кэш, СтруктурасбисПараметров, ДополнительныеПараметры, Отказ);	
КонецФункции

&НаКлиенте
Функция		Ини(Кэш, ИмяИни, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	ЗначениеИни = Неопределено;
	Если		Кэш.Ини.Свойство(ИмяИни, ЗначениеИни)
		И	Не	ЗначениеИни = Неопределено Тогда
		Возврат ЗначениеИни;
	КонецЕсли;
	ПараметрыФильтра = Новый Структура("ФильтрПоИменамИни, Автообновление", Новый Массив, Кэш.Парам.НастройкиАвтообновление);
	ПараметрыФильтра.ФильтрПоИменамИни.Добавить(ВРег(ИмяИни));
	УстановленныеИниФайлыКЧтению = ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, ПараметрыФильтра);
	РезультатИни = СформироватьСтруктуруИни(УстановленныеИниФайлыКЧтению, Новый Структура);
	Если Не РезультатИни.Свойство(ИмяИни, ЗначениеИни) Тогда
		Отказ = Истина;
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Новый Структура("code,message,details",772, "Ошибка работы с файловой системой", "Не удалось прочитать файл настроек " + ИмяИни + "!"));
	КонецЕсли;
	Кэш.Ини.Вставить(ИмяИни, ЗначениеИни);
	Возврат ЗначениеИни;
	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПолучитьСтруктуруИни(Ини, сбисОписаниеФайла)	
	ПолучитьСтруктуруИниФайла(Ини, сбисОписаниеФайла.ПутьДоИниФайла, сбисОписаниеФайла.ИмяФайла);  //получили структуру типового ини файла (.sbis.ini)
	Если сбисОписаниеФайла.ЕстьИзменения Тогда
		ПолучитьСтруктуруИниФайла(Ини, сбисОписаниеФайла.ПутьДоИниФайла, сбисОписаниеФайла.ИмяФайлаКлиента); //получили структуру ини файла клиента и заменили его элементами
	КонецЕсли;	
КонецФункции

&НаКлиенте
Функция		сбисПроверитьУстановленныеНастройки(Кэш,УстановленныеИниФайлы,СтруктураИни,СтруктураПараметров,ИдентификаторНастроек) Экспорт	
	Отказ = Ложь;
	РезультатДозапроса = сбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", СтруктураИни)), Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатДозапроса);
		Возврат Ложь;
	КонецЕсли;
	//Так, как установленные ини были сформированы без данных, то требуется их переопределить для корректной расстановки флагов
	УстановленныеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(ИдентификаторНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	Возврат Кэш.ФормаНастроекОбщее.сбисПроверитьУстановленныеНастройки(Кэш,УстановленныеИниФайлы,СтруктураИни,СтруктураПараметров,ИдентификаторНастроек);
КонецФункции

//Временное решение для обновления статусов. Не использовать в других местах! 1179408775
&НаКлиенте
Функция		СбисЗаполнитьНеполученныеНастройки(Кэш, Отказ) Экспорт
	Возврат СбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", Кэш.Ини)), Отказ); 
КонецФункции

//Дозапрашивает отсутствующие ини для дальнейшей работы 
&НаКлиенте
Функция		СбисДополучитьНедостающиеНастройки(Кэш, ПараметрыДозапроса, Отказ)
	СтруктураИни = ПараметрыДозапроса.Данные.Ини;
	СписокИниПолучить = Новый Массив;
	Для Каждого КлючИЗначениеИни Из СтруктураИни Цикл
		Если Не КлючИЗначениеИни.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокИниПолучить.Добавить(ВРег(КлючИЗначениеИни.Ключ));
	КонецЦикла;
	
	Если Не СписокИниПолучить.Количество() Тогда
		Возврат Истина;
	КонецЕсли; 
	сбисПараметрыЧтенияФайлов = Новый Структура("ФильтрПоИменамИни, Автообновление", СписокИниПолучить, Кэш.Парам.НастройкиАвтообновление);
	НедостающиеИниФайлы = ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, сбисПараметрыЧтенияФайлов);
	Для Каждого КлючИЗначениеИни Из СформироватьСтруктуруИни(НедостающиеИниФайлы, Новый Структура) Цикл
		Кэш.Ини.Вставить(КлючИЗначениеИни.Ключ, КлючИЗначениеИни.Значение);
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция		СбисОбновитьДанныеПоНастройкам(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	СтруктураНастроек = Кэш.Ини;
	РезультатОбновления = сбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", СтруктураНастроек)), Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисОбновитьДанныеПоНастройкам");
	КонецЕсли;
	РезультатОбновления = СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисОбновитьДанныеПоНастройкам");
	КонецЕсли;
	РезультатОбновления = Кэш.ФормаНастроекОбщее.сбисДобавитьПечатныеФормы(Кэш, Отказ);
	Если Отказ Тогда
		//TODO40 решить проблему с обновлением ПФ из хранилища.
		СбисПараметрыСтатистики = Новый Структура("Действие, Ошибка", "Запись ошибки", РезультатОбновления);
		Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, СбисПараметрыСтатистики, Ложь);
		//В случае невозможности обновить должна быть ошибка, чтоб понимать что пошло не так. Вычистить возможные ситуации когда падает метод добавления ПФ.
		//Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Кэш.ОбщиеФункции.СбисИсключение(РезультатОбновления, "ФайлыНастроекКаталог.СбисОбновитьДанныеПоНастройкам"));
		//После обработки ошибки, продолжить установку настроек
		//TODO39 ошибка ПФ является результатом с флагом отказа
		Отказ = Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

//Функция обновляет структуру для формирования аккордеона и заполнения фильтров
&НаКлиенте
Функция  СбисОбновитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ) Экспорт
	ПараметрыФормированияСтруктуры = Новый Структура("ОбработкаТипов",Новый Структура("Булево", Новый Структура("Формат", "БЛ=Ложь; БИ=Истина")));
	
	СтруктураМеню = Новый Структура("РазделыВнешнейОбработки", Кэш.ФормаНастроекОбщее.сбисСформироватьСтруктуруРазделов(Кэш, Кэш.Ини, ПараметрыФормированияСтруктуры));
	ИниКВыгрузке = Новый Структура("сбисМеню", Кэш.ФормаНастроекОбщее.ОчиститьСтруктуруИниОтСлужебныхЗначений(СтруктураМеню));
	Попытка
		сбисСформироватьИниФайлКлиентаНаСервере("сбисМеню", ИниКВыгрузке, Кэш.Парам.ИдентификаторНастроек, "сбисМеню", "ВыгрузкаВКаталог")
	Исключение
		Отказ = Истина;
		Возврат Кэш.ОбщиеФункции.СбисИсключение(, "ФайлыНастроекКаталог.сбисОбновитьСтруктуруРазделов", 773, "Неизвестная ошибка при выполнении метода", ОписаниеОшибки());
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниРазделов(Кэш, ДополнительныеПараметры=Неопределено, Отказ) Экспорт
	сбисСтруктураРазделов = ПолучитьСтруктуруРазделов(Кэш, ДополнительныеПараметры, Отказ);
	Если Отказ Тогда
		Возврат сбисСтруктураРазделов;
	КонецЕсли;
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниРазделов(Кэш, сбисСтруктураРазделов, ДополнительныеПараметры, Отказ)
КонецФункции	

&НаКлиенте
Функция		ПолучитьСтруктуруРазделов(Кэш, ДополнительныеПараметры=Неопределено, Отказ) Экспорт
	
	ИниМеню				= Новый Структура;
	сбисОписаниеФайла	= Новый Структура("ПутьДоИниФайла, ИмяФайла, ЕстьИзменения", Кэш.Парам.ИдентификаторНастроек, "сбисМеню.xml", Ложь);
	СтруктураАккордеона = сбисПолучитьСтруктуруИни(ИниМеню, сбисОписаниеФайла);
	Если		ИниМеню = Неопределено
		Или Не	ИниМеню.сбисМеню.Свойство("РазделыВнешнейОбработки", СтруктураАккордеона)
		Или		СтруктураАккордеона = Неопределено Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 785, "Ошибка во входящих данных", "Отсутствует описание разделов аккордеона в выбранных настройках");
	КонецЕсли;
	Возврат ОбработатьСтруктуруРазделовАккордеона(СтруктураАккордеона);		
КонецФункции

&НаКлиенте
Функция		ОбработатьСтруктуруРазделовАккордеона(СтруктураРазделов)
	
	Результат = Неопределено;
	Если ТипЗнч(СтруктураРазделов) = Тип("Структура") Тогда
		Если СтруктураРазделов.Свойство("Значение") Тогда
			Результат = ОбработатьСтруктуруРазделовАккордеона(СтруктураРазделов.Значение);
		Иначе
			Результат = Новый Структура;
			Для Каждого КлючИЗначение Из СтруктураРазделов Цикл
				Результат.Вставить(КлючИЗначение.Ключ, ОбработатьСтруктуруРазделовАккордеона(КлючИЗначение.Значение));
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли СтруктураРазделов = "Ложь" Тогда
		Результат = Ложь;
	ИначеЕсли СтруктураРазделов = "Истина" Тогда
		Результат = Истина;
	Иначе
		Результат = СтруктураРазделов;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция		сбисПрочитатьXMLФайл(КаталогНастроек, ИмяФайла, Кодировка="windows-1251")
	ИсхФайл = Новый ТекстовыйДокумент;
	ИсхФайл.Прочитать(КаталогНастроек + ИмяФайла + ".xml", Кодировка);
	ШаблонXML = ИсхФайл.ПолучитьТекст();
	Возврат ЗаполнитьСтруктуруФайлаСПростымиЭлементами(ШаблонXML);
КонецФункции

&НаКлиенте                                  
Функция		УстановитьИниКонфигурации(Кэш, сбисДополнительныеПараметры=Неопределено, Отказ) Экспорт
	Возврат Кэш.ФормаНастроекОбщее.УстановитьИниКонфигурации(Кэш, Ини(Кэш, "Конфигурация", сбисДополнительныеПараметры, Отказ), сбисДополнительныеПараметры, Отказ);
КонецФункции	

&НаКлиенте                                  
Функция		сбисПолучитьМассивУстановленныхИниФайлов(Кэш, сбисДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	РезультатДозапроса = сбисДополучитьНедостающиеНастройки(Кэш, Новый Структура("Данные", Новый Структура("Ини", Кэш.Ини)), Отказ);
	Если Отказ Тогда
		Возврат РезультатДозапроса;
	КонецЕсли;
	Возврат ПолучитьМассивУстановленныхИниФайлов(Кэш.Парам.ИдентификаторНастроек, Новый Структура("Автообновление", Кэш.Парам.НастройкиАвтообновление));
	
КонецФункции

&НаКлиенте                                  
Процедура	ПриПереходеВРазделФайловНастроек(Кэш, ДополнительныеПараметры, Отказ) Экспорт
КонецПроцедуры