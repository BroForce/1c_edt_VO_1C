// функции для совместимости кода
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
//------------------------------------------------------
&НаКлиенте
функция ПолучитьСертификатыДляАктивации(Кэш, СписокИНН) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	СписокСертификатовДляАктивации = Новый СписокЗначений;;
	Возврат СписокСертификатовДляАктивации;
КонецФункции
&НаКлиенте
функция АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция сбисПодписант(Кэш, ИНН) Экспорт
// Получает Информацию о подписанте документа
	Возврат Новый Структура("Должность,ФИО,ИНН");
КонецФункции
&НаКлиенте
Функция сбисИдентификаторУчастника(Кэш, ИНН, КПП, Название) Экспорт
// Получает Информацию о контрагенте с онлайна
	Возврат "";
КонецФункции
&НаКлиенте
Функция ОтправитьПакетыДокументов(Кэш, МассивПакетов) Экспорт
// Выгружает сформированные пакеты документов в каталог
	КаталогОтправкиИмя = Кэш.Парам.КаталогОбмена+"\Отправляемые\";
	КаталогОтправки = Новый Файл(КаталогОтправкиИмя);
	Если Не КаталогОтправки.Существует() Тогда
		СоздатьКаталог(КаталогОтправкиИмя);
	КонецЕсли;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьПараметрыДокументовСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	// << alo 
	если Кэш.парам.СостояниеЭД тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьПараметрыДокументовСБИС");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	конецесли;
	// alo >>
	сбисПоказатьСостояние("Отправка документов", ГлавноеОкно);
	ВсегоОтправлено = 0;
	ВсегоОшибок = 0;
	КоличествоПакетов = МассивПакетов.Количество();
	ДанныеПоСтатусам = Новый Массив;
		
	Для Каждого СоставПакета Из МассивПакетов Цикл
	    Попытка
			СтруктураКонверта = Новый Структура("СписокДокумент", Новый Структура("Документ", Новый Структура));
			Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("ПользовательскийИдентификатор", СоставПакета.ПользовательскийИдентификатор);
		    КонецЕсли;
			Если СоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
				ИдПакета = Сред(СоставПакета.ПользовательскийИдентификатор,Найти(СоставПакета.ПользовательскийИдентификатор,":")+1);
			Иначе
				ИдПакета = строка(Новый УникальныйИдентификатор());
			КонецЕсли;
			СоставПакета.Вставить("Идентификатор", ИдПакета);
			СтруктураКонверта.СписокДокумент.Документ.Вставить("Идентификатор", СоставПакета.Идентификатор);
			СтруктураКонверта.СписокДокумент.Документ.Вставить("Тип", СоставПакета.Тип);
			Если СоставПакета.Свойство("Подтип") и ЗначениеЗаполнено(СоставПакета.Подтип) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить( "Подтип",СоставПакета.Подтип);
			КонецЕсли;
			
			Если СоставПакета.Свойство("Дата") и ЗначениеЗаполнено(СоставПакета.Дата) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить( "Дата",СоставПакета.Дата);	
			КонецЕсли;
			Если СоставПакета.Свойство("Номер") и ЗначениеЗаполнено(СоставПакета.Номер) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить( "Номер",СоставПакета.Номер);	
			КонецЕсли;
			Если СоставПакета.Свойство("Сумма") и ЗначениеЗаполнено(СоставПакета.Сумма) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Сумма", СоставПакета.Сумма);	
			КонецЕсли;
			Если СоставПакета.Свойство("Примечание") и ЗначениеЗаполнено(СоставПакета.Примечание) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Примечание", СоставПакета.Примечание);	
			КонецЕсли;
			Если СоставПакета.Свойство("Регламент") и (СоставПакета.Регламент.Свойство("Идентификатор") или СоставПакета.Регламент.Свойство("Название")) Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Регламент", СоставПакета.Регламент);
			КонецЕсли;
			Если СоставПакета.Свойство("Ответственный") и СоставПакета.Ответственный.Количество()>0 Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Ответственный", СоставПакета.Ответственный);
			КонецЕсли;
			Если СоставПакета.Свойство("Подразделение") и СоставПакета.Подразделение.Количество()>0 Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Подразделение", СоставПакета.Подразделение);
			КонецЕсли;
			
			Если СоставПакета.Свойство("ДокументОснование") и СоставПакета.ДокументОснование.Количество()>0 Тогда
				Основания = Новый Массив;
				Для Каждого ДокОсн Из СоставПакета.ДокументОснование Цикл 
					Осн = Новый Структура;
					Док = Новый Структура;
					Для Каждого Элемент Из ДокОсн Цикл
						Док.Вставить( Элемент.Ключ, Элемент.Значение );	
					КонецЦикла;
					Осн.Вставить( "Документ", Док );
					Основания.Добавить(Осн);
				КонецЦикла;
				СтруктураКонверта.СписокДокумент.Документ.Вставить("СписокДокументОснование", Новый Структура("ДокументОснование", Основания));
			КонецЕсли;

			СтруктураКонверта.СписокДокумент.Документ.Вставить("НашаОрганизация", Новый Структура);
			Если СоставПакета.НашаОрганизация.Свойство("СвФЛ") Тогда
				СтруктураКонверта.СписокДокумент.Документ.НашаОрганизация.Вставить("СвФЛ", СоставПакета.НашаОрганизация.СвФЛ);
			Иначе
				СтруктураКонверта.СписокДокумент.Документ.НашаОрганизация.Вставить("СвЮЛ", СоставПакета.НашаОрганизация.СвЮЛ);
			КонецЕсли;
			Если СоставПакета.Свойство("Контрагент") Тогда
				СтруктураКонверта.СписокДокумент.Документ.Вставить("Контрагент", Новый Структура);
				//Если СоставПакета.Контрагент.Свойство("Название") Тогда
				//	СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("Название", СоставПакета.Контрагент.Название);	
				//КонецЕсли;
				Если СоставПакета.Контрагент.Свойство("Контакт")  Тогда
					Если СоставПакета.Контрагент.Контакт.Свойство("Телефон")  Тогда
						СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("Телефон", СоставПакета.Контрагент.Контакт.Телефон);
					КонецЕсли;
					Если СоставПакета.Контрагент.Контакт.Свойство("EMAIL")  Тогда
						СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить( "Email", СоставПакета.Контрагент.Контакт.EMAIL );
					КонецЕсли;
				КонецЕсли;
				Если СоставПакета.Контрагент.Свойство("СвФЛ") Тогда
					СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("СвФЛ", СоставПакета.Контрагент.СвФЛ);
					Если СоставПакета.Контрагент.Свойство("Параметр") Тогда
						Для Каждого Параметр из СоставПакета.Контрагент.Параметр Цикл
							Если Параметр.Имя = "ЧастноеЛицо" Тогда
								СтруктураКонверта.СписокДокумент.Документ.Контрагент.СвФЛ.Вставить("ЧастноеЛицо", Параметр.Значение);
							КонецЕсли;
							Если Параметр.Имя = "СНИЛС" Тогда
								СтруктураКонверта.СписокДокумент.Документ.Контрагент.СвФЛ.Вставить("СНИЛС", Параметр.Значение);						
							КонецЕсли;     					
						КонецЦикла;
					КонецЕсли;
				Иначе
					СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("СвЮЛ", СоставПакета.Контрагент.СвЮЛ);
				КонецЕсли;
				Если СоставПакета.Контрагент.Свойство("Подразделение") и СоставПакета.Контрагент.Подразделение.Количество()>0  Тогда
	                 СтруктураКонверта.СписокДокумент.Документ.Контрагент.Вставить("Подразделение", СоставПакета.Контрагент.Подразделение);
				 КонецЕсли;
			КонецЕсли;
			Вложения = Новый Массив;
			Для Каждого Вложение Из СоставПакета.Вложение Цикл
				ИдВложения = Строка(Новый УникальныйИдентификатор());
				СбисСсылкаНаФайл = "";
				Если Вложение.Свойство("ПолноеИмяФайла") Тогда // внешний файл добавлен в пакет
					ИмяФайла = Вложение.ИмяФайла;
					СбисСсылкаНаФайл = ИдВложения + "_" + ИмяФайла;
					КопироватьФайл(Вложение.ПолноеИмяФайла, КаталогОтправкиИмя + СбисСсылкаНаФайл);
				Иначе  // сформирован xml
					ИмяФайла = Вложение.СтруктураФайла.Файл.Имя+".xml";
					СбисСсылкаНаФайл = ИмяФайла;
					ИсхФайл = Новый ТекстовыйДокумент;
					ИсхФайл.УстановитьТекст(Вложение.XMLДокумента);
					ПолноеИмяФайла = КаталогОтправкиИмя+ИмяФайла;
					ИсхФайл.Записать(ПолноеИмяФайла,"windows-1251");
				КонецЕсли;
				Вложение.Вставить("Идентификатор", ИдВложения);
				СтруктураВложения = Новый Структура("Идентификатор, Файл",ИдВложения, Новый Структура("СсылкаНаФайл,Имя",СбисСсылкаНаФайл,ИмяФайла));
				Вложения.Добавить(СтруктураВложения);
			КонецЦикла;
			СтруктураКонверта.СписокДокумент.Документ.Вставить("СписокВложение", Новый Структура("Вложение", Вложения));		
			ОшибкаПреобразования = Ложь;
			ШаблонXML = Кэш.ОбщиеФункции.СбисПреобразоватьДокументВXML(СтруктураКонверта, Кэш.СовместимостьМетодов, ОшибкаПреобразования);
			Если ОшибкаПреобразования Тогда
				СбисПараметрыОшибки = Новый Структура("ОсновнойДокумент1С");
				Если СоставПакета.Вложение[0].Документы1С.Количество() Тогда
					СбисПараметрыОшибки.ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
				КонецЕсли;
				Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультат(Кэш, ШаблонXML, СбисПараметрыОшибки);
				Возврат Ложь;
			КонецЕсли;				
			КонвертФайл = Новый ТекстовыйДокумент;
			КонвертФайл.УстановитьТекст(ШаблонXML);
			ИмяФайла = "KONVERT"+"__"+Формат(ТекущаяДата(),"ДФ=yyyyMMdd")+"_"+строка(Новый УникальныйИдентификатор())+".native.xml";
			ПолноеИмяФайла = КаталогОтправкиИмя+ИмяФайла;
			КонвертФайл.Записать(ПолноеИмяФайла,"windows-1251");		
			СоставПакета.Вставить("Отправлен", Истина);
			ВсегоОтправлено = ВсегоОтправлено + 1;
			Кэш.РезультатОтправки.Отправлено = Кэш.РезультатОтправки.Отправлено + 1;
		Исключение
			СбисОшибка = Кэш.ОбщиеФункции.СбисИсключение(ОписаниеОшибки(), "ИнтеграцияКаталог.ОтправитьПакетыДокументов");
			СбисПараметрыОшибки = Новый Структура("ОсновнойДокумент1С");
			Если СоставПакета.Вложение[0].Документы1С.Количество() Тогда
				СбисПараметрыОшибки.ОсновнойДокумент1С = СоставПакета.Вложение[0].Документы1С[0].Значение;
			КонецЕсли;
			Кэш.ОбщиеФункции.ДобавитьОшибкуВРезультат(Кэш, СбисОшибка, СбисПараметрыОшибки);
			Продолжить;	
		КонецПопытки;
		
		Для Каждого Вложение Из СоставПакета.Вложение Цикл
			Если Вложение.Свойство("Документы1С") Тогда
				Для Каждого Документ1С Из Вложение.Документы1С Цикл
					СтруктураСвойств = Новый Структура("ДокументСБИС_Ид,ДокументСБИС_ИдВложения,ДокументСБИС_Статус", СоставПакета.Идентификатор,Вложение.Идентификатор,"Выгружен");
					ДанныеПоСтатусам.Добавить(Новый Структура("СтруктураСвойств, Документ1С",СтруктураСвойств, Документ1С.Значение));
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;

	КонецЦикла;
	фрм.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек);
	// << alo 
	если Кэш.парам.СостояниеЭД тогда
		фрмЭД.ЗаписатьПараметрыДокументовСБИС(ДанныеПоСтатусам, Кэш.Ини.Конфигурация, Кэш.ГлавноеОкно.КаталогНастроек);
	конецесли;	// alo >>
	
	//AU точка входа после отправки партии пакетов документов с данными по статусам.
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисОбработатьСписокОтправленных","РаботаСДокументами1С","", Кэш);
	Если Не фрм = Ложь Тогда
		//Данные по детализации статусов и списка номенклатуры смотреть в кэше.
		Контекст = Новый Структура("ДанныеПоСтатусам", ДанныеПоСтатусам);//Структура для возможности расширения, если понадобится добавить что-то ещё.
		фрм.сбисОбработатьСписокОтправленных(Кэш, Контекст);
	КонецЕсли;
	//
	
	сбисСпрятатьСостояние(ГлавноеОкно);
КонецФункции
&НаКлиенте
Процедура сбисПолучитьОтветыПоОтправке(Кэш) Экспорт
КонецПроцедуры
&НаКлиенте
Функция ПолучитьСписокИзменений(Кэш) Экспорт
	// Получает статусы документов сбис
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаписатьИзмененияПоДокументам1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	// << alo 
	Если Кэш.парам.СостояниеЭД Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ИмяФункции",	"ЗаписатьИзмененияПоДокументам1С");
		ПараметрыПоиска.Вставить("КлючФорм",	"Статусы_СостоянияЭД");
		фрмЭД = Кэш.ОбщиеФункции.сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска);
	КонецЕсли;
	// alo >>
	сбисПоказатьСостояние("Обновление статусов отправленных документов", ГлавноеОкно,, "(прервать -  Ctrl+Break)");
	КаталогСостоянийИмя = Кэш.Парам.КаталогОбмена+"\Состояние\";
	КаталогСостояний = Новый Файл(КаталогСостоянийИмя);
	Если Не КаталогСостояний.Существует() Тогда
		КаталогСостоянийИмя = Кэш.Парам.КаталогОбмена+"\СостояниеОтправки\"
	КонецЕсли;
    ФайлыСтатусов = НайтиФайлы(КаталогСостоянийИмя, "*.native.xml", Истина);
	Всего = ФайлыСтатусов.Количество();
	сч = 0;
	МассивДокументов = Новый Массив;
	МассивОбработанныхФайлов = Новый Массив;
	ПодключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов",0.1,Истина);
	Для Каждого Файл Из ФайлыСтатусов Цикл
		сч = сч+1;
		сбисПоказатьСостояние("Обновление статусов отправленных документов ", ГлавноеОкно,Мин(100,Окр(сч*100/Всего)), "(прервать -  Ctrl+Break)");
		Текст = Новый ЧтениеТекста(Файл.ПолноеИмя);
		СтрокаXML = Текст.Прочитать();
		СтруктураФайла = Кэш.ОбщиеФункции.ЗаполнитьСтруктуруФайла(СтрокаXML);
	
		оДокумент = СтруктураФайла.Документ;
		// Проверяем, к этой ли базе 1С относится файл
		Если Кэш.ОбщиеФункции.НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, оДокумент.НашаОрганизация)<>Ложь Тогда
			МассивДокументов.Добавить(оДокумент);
			МассивОбработанныхФайлов.Добавить(Файл.ПолноеИмя);
			Если Кэш.ИспользоватьОбработчикиСобытий = Истина Тогда
				ИмяОбработчика = СтрЗаменить("сбис"+оДокумент.Регламент.Название+"_"+оДокумент.Событие[0].Название, " ", "_");
				фрмОбработчика = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяОбработчика,"РаботаСДокументами1С","",Кэш);
				Если фрмОбработчика <> Ложь Тогда
					Контекст = Новый структура("Док, Кэш", оДокумент, Кэш);
					Результат=вычислить("фрмОбработчика."+ИмяОбработчика+"(Контекст)");
				КонецЕсли;	
			КонецЕсли;
			Если МассивДокументов.Количество()=100 Тогда
				фрм.СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, Новый Структура);
				//фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
				// << alo 
				если кэш.парам.СостояниеЭД тогда
					фрмЭД.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
				конецесли; // alo >>
				МассивДокументов.Очистить();
				Для Каждого ОбработанныйФайл Из МассивОбработанныхФайлов Цикл
					Попытка
						УдалитьФайлы(ОбработанныйФайл);
					Исключение
					КонецПопытки;
				КонецЦикла;
				МассивОбработанныхФайлов.Очистить();
			КонецЕсли;
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	//фрм.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	фрм.СбисЗаписатьИзмененияПоДокументам1С(Кэш, МассивДокументов, Новый Структура);
	// << alo 
	если кэш.парам.СостояниеЭД тогда
		фрмЭД.ЗаписатьИзмененияПоДокументам1С(МассивДокументов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	конецесли; // alo >>
	Для Каждого ОбработанныйФайл Из МассивОбработанныхФайлов Цикл
		Попытка
			УдалитьФайлы(ОбработанныйФайл);
		Исключение
		КонецПопытки;
	КонецЦикла;
	МассивОбработанныхФайлов.Очистить();
	сбисСпрятатьСостояние(ГлавноеОкно);
	ОтключитьОбработчикОжидания("ПрерываниеПользователемОбработкиСтатусов");
КонецФункции
&НаКлиенте
Процедура ПрерываниеПользователемОбработкиСтатусов()
// Прячем состояние
    ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	сбисСпрятатьСостояние(ГлавноеОкно);	
КонецПроцедуры
&НаКлиенте
функция ПолучитьHTMLПоXML(Кэш, Вложение) экспорт
	// Используется при просмотре документов из реестров продаж (1С)
	Возврат Вложение.XMLДокумента;
КонецФункции
&НаКлиенте
Функция ОбработкаСлужебныхДокументов(Кэш) Экспорт
// При работе через каталог ничего не делает
КонецФункции
&НаКлиенте
Процедура УстановитьВидимостьОбновитьСтатусы(Кэш) Экспорт
// Если есть файлы статусов в каталоге СостояниеОтправки, то выводим красное предупреждение	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ФайлыСтатусов = НайтиФайлы(Кэш.Парам.КаталогОбмена+"\СостояниеОтправки\", "*.native.xml", Истина);
	Если ФайлыСтатусов.Количество() > 0 Тогда
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Истина;
	Иначе
		сбисЭлементФормы(ГлавноеОкно, "ОбновитьСтатусы").Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
функция сбисТекущаяДатаМСек(Кэш) экспорт
	// Получает текущую дату в миллисекундах с начала 1970г
	Возврат 0;
КонецФункции
&НаКлиенте
Функция Включить(Кэш, ДопПараметры=Неопределено, Отказ=Ложь) Экспорт
	Кэш.СБИС = Кэш.ГлавноеОкно.СформироватьСтруктуруКэшСБИС(Кэш.СБИС);
	Кэш.СБИС.ПараметрыИнтеграции.Версия = Кэш.Парам.КаталогОбмена;
	Кэш.СБИС.ОбменВключен = Истина;
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция Завершить(Кэш, ДопонительныеПараметры, Отказ) Экспорт
	Возврат Истина;
КонецФункции
&НаКлиенте
Функция ВключитьЛогирование(Кэш, КаталогЛоговИмя, Уровень) Экспорт 	
	// Включает/отключает логирование	
	Возврат Истина;
КонецФункции

//aa.uferov Для проверки возможности использования серверных настроек
&НаКлиенте
Функция ДоступныСерверныеНастройки() Экспорт
	
	Возврат	Ложь;
	
КонецФункции

//+tda//Функции для загрузки документов из каталога
&НаКлиенте
функция ПрочитатьДокумент(Кэш,Док) экспорт
	// При работе через каталог возвращаем сам документ	
	Возврат Док;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСобытий(Кэш, ТипРеестра) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	Если ТипРеестра = "Отправленные" Тогда
		Сообщить("Для способа обмена Каталог не предусмотрена работа с разделом Отправленные.");
		Возврат Новый Структура("Таблица_РеестрСобытий", Новый Массив);
	КонецЕсли;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисПоказатьСостояние("Получение данных из каталога Полученные", ГлавноеОкно);
	
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	//filter = ПолучитьФильтр(ГлавноеОкно, Новый Структура("ТипРеестра", ТипРеестра));
	
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, ГлавноеОкно);
КонецФункции

&НаКлиенте
Функция сбисПолучитьСписокДокументов(Кэш) Экспорт
	Сообщить("Для способа обмена Каталог не предусмотрена работа с данным разделом.");
	Возврат Новый Структура("Таблица_РеестрДокументов", Новый Массив);
КонецФункции

&НаКлиенте
Функция ПолучитьСписокДокументовОтгрузки(Кэш) Экспорт
	Если Кэш.Текущий.ТипДок = "ДокОтгрИсх" Тогда
		Сообщить("Для способа обмена Каталог не предусмотрена работа с данным разделом.");
		Возврат Новый Структура("Таблица_РеестрСобытий", Новый Массив);
	КонецЕсли;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Возврат ПолучитьСписокСобытийПоФильтру(Кэш, ГлавноеОкно);
КонецФункции

&НаКлиенте
функция ПолучитьДанныеФайла(Кэш,Файл) экспорт
	// Получает данные файла вложения	
	# Если ВебКлиент Тогда
		Возврат Ложь;
	# Иначе
		Если Файл.СсылкаНаФайл = Неопределено Тогда
			Сообщить("Не удалось прочитать файл: " + ". Отсутствует ссылка на документ.");
	Возврат	Ложь;
		КонецЕсли;
		
		ТекстДок = Новый ЧтениеТекста(Файл.СсылкаНаФайл);
		РезультатТекст = ТекстДок.Прочитать();
		Если Найти(РезультатТекст, "encoding=""UTF-8""")>0 Тогда
			ТекстДок = Новый ЧтениеТекста(Файл.СсылкаНаФайл, КодировкаТекста.UTF8);
			РезультатТекст = ТекстДок.Прочитать();
		КонецЕсли;
		//AU Добавил проверку
		Если РезультатТекст = Неопределено Тогда
			Сообщить("Не удалось прочитать файл:" + Файл.СсылкаНаФайл + ". Возможно файл не является текстовым документом.");
			Возврат "";
		КонецЕсли;
		
		Если Лев(РезультатТекст,4)="%PDF" Тогда // для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
			Возврат "";
		КонецЕсли;

		//Вырезаем из целого пакета нужное нам вложение
		Пока Истина Цикл
			НачалоВложения = Найти(РезультатТекст, "<Вложение");
			Если НачалоВложения = 0 Тогда
				Возврат "";
			КонецЕсли;
			КонецВложения = Найти(РезультатТекст, "</Вложение>");
			Если КонецВложения = 0 Тогда
				Возврат "";
			КонецЕсли;
			Если КонецВложения < НачалоВложения Тогда
				Возврат "";
			КонецЕсли;
			//Получаем текст вложения
			ВложениеТекст = Сред(РезультатТекст, НачалоВложения, КонецВложения);
			
			//Это именно то вложение, которое нам нужно
			Если Найти(ВложениеТекст, Файл.Имя) > 0 Тогда 
				//Ищем тег XMLДанные
				НачалоXML = Найти(ВложениеТекст, "<XMLДанные>");
				Если НачалоXML = 0 Тогда
					//Это не XML файл
					Возврат "";
				КонецЕсли;
				
				КонецXML = Найти(ВложениеТекст, "</XMLДанные>");
				Если НачалоXML = 0 Тогда
					//Не нашли закрывающий тег XML файла, видимо что-то пошло не так
					Возврат "";
				КонецЕсли;
				//Возвращаем текст XML файла
				ТекстXML = СокрЛП(Сред(ВложениеТекст,НачалоXML + СтрДлина("</XMLДанные>") - 1,КонецXML - НачалоXML - СтрДлина("</XMLДанные>") + 1));
				ЧтениеXML = Новый ЧтениеXML();
				ЧтениеXML.УстановитьСтроку(ТекстXML);
				КодировкаИсточника = "<?xml version=""1.0"" encoding=""" + ЧтениеXML.КодировкаИсточника + """?>";
				ТекстXML = КодировкаИсточника + Символы.ПС + ТекстXML;
				Файл.Вставить("ТекстXML", ТекстXML);
				Возврат ТекстXML;
			КонецЕсли;
			//Получаем текст без первого вложения
			РезультатТекст = Прав(РезультатТекст, СтрДлина(РезультатТекст) - КонецВложения - СтрДлина("Вложение"));
		КонецЦикла;
	# КонецЕсли
КонецФункции

&НаКлиенте
функция ПолучитьHTMLВложения(Кэш,ИдДок, Вложение) экспорт
	Если Вложение.Свойство("Файл") И Вложение.Файл.Свойство("ТекстXML") Тогда
		
		Возврат Вложение.Файл.ТекстXML;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСобытийПоФильтру(Кэш, ГлавноеОкно) Экспорт
	// Получает список документов по событиям с online.sbis.ru	
	МестныйКэш = Кэш;
	СтруктураДляОбновленияФормы = Новый Структура;
	СписокКонвертов = НайтиФайлы(МестныйКэш.Парам.КаталогОбмена + "\Полученные", "KONVERT*.native.xml", Истина);
	МассивДокументов = Новый Массив;	
	Размер = СписокКонвертов.Количество();
	МассивИдентификаторов = Новый Массив;
	КоличествоФайлов = СписокКонвертов.Количество();
	
	ВсегоСтраниц = ?(Цел(КоличествоФайлов / ГлавноеОкно.ЗаписейНаСтранице) <> КоличествоФайлов / ГлавноеОкно.ЗаписейНаСтранице,
		Цел(КоличествоФайлов / ГлавноеОкно.ЗаписейНаСтранице) + 1, КоличествоФайлов / ГлавноеОкно.ЗаписейНаСтранице);
		
	//Если переходим на последнюю страницу	
	Если ГлавноеОкно.ФильтрСтраница = 0 Тогда
		ГлавноеОкно.ФильтрСтраница = ВсегоСтраниц;
	КонецЕсли;
		
	ГлавноеОкно.ФильтрЕстьЕще = (ВсегоСтраниц > ГлавноеОкно.ФильтрСтраница);

	ПерваяЗапись = (ГлавноеОкно.ФильтрСтраница - 1) * ГлавноеОкно.ЗаписейНаСтранице + 1;
	ПоследняяЗапись = ГлавноеОкно.ФильтрСтраница * ГлавноеОкно.ЗаписейНаСтранице;
	Если ПоследняяЗапись > КоличествоФайлов Тогда
		ПоследняяЗапись = КоличествоФайлов;
	КонецЕсли;

	сч = 0;
	Для сч = ПерваяЗапись По ПоследняяЗапись Цикл
		Конверт = СписокКонвертов.Получить(сч - 1);
		
		сбисПоказатьСостояние("Получение данных из каталога", ГлавноеОкно, Мин(100,Окр((сч+1)*100/Размер)));
		
		ТекстДок = Новый ЧтениеТекста(Конверт.ПолноеИмя);
		XMLФайла = ТекстДок.Прочитать();
		Если Найти(XMLФайла, "encoding=""UTF-8""")>0 Тогда
			ТекстДок = Новый ЧтениеТекста(Конверт.ПолноеИмя, КодировкаТекста.UTF8);
			XMLФайла = ТекстДок.Прочитать();
		КонецЕсли;
		оДокумент = Кэш.ОбщиеФункции.ЗаполнитьСтруктуруФайла(XMLФайла);
		оДокумент = оДокумент.Документ;
		// Добавляем ссылку на файл
		оДокумент.Вставить("СсылкаНаФайл", Конверт.ПолноеИмя); 
		
		// Добавляем ссылки во вложениях
		Если оДокумент.Свойство("Вложение") И оДокумент.Вложение.Количество() > 0 Тогда
			Для Каждого стрВложение Из оДокумент.Вложение Цикл
				Если стрВложение.Свойство("Файл") Тогда 				
					стрВложение.Файл.Вставить("СсылкаНаФайл", Конверт.ПолноеИмя);
				КонецЕсли;
				//Добавляем пустой Тип и ВерсияФормата, если их нет
				Если Не стрВложение.Свойство("Тип") Тогда
					стрВложение.Вставить("Тип", "");
				КонецЕсли;
				Если Не стрВложение.Свойство("ВерсияФормата") Тогда
					стрВложение.Вставить("ВерсияФормата", "");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Делаем из строки дату для полей с датой
		Если оДокумент.Свойство("Дата") Тогда
			оДокумент.Дата = Кэш.ОбщиеФункции.сбисСтрокаВДату(оДокумент.Дата);
		КонецЕсли;
		Если оДокумент.Свойство("ДатаВремяСоздания") Тогда
			оДокумент.ДатаВремяСоздания = Кэш.ОбщиеФункции.сбисСтрокаВДату(оДокумент.ДатаВремяСоздания);
		КонецЕсли;
		Если оДокумент.Свойство("Вложение") и ТипЗнч(оДокумент.Вложение) = Тип("Массив") Тогда
			Для Каждого СтрокаВложения из оДокумент.Вложение Цикл
				Если СтрокаВложения.Свойство("Дата") Тогда
					СтрокаВложения.Дата = Кэш.ОбщиеФункции.сбисСтрокаВДату(СтрокаВложения.Дата);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		НоваяСтр = Новый Структура;
		НоваяСтр.Вставить("Статус", Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(?(оДокумент.Свойство("Состояние"), оДокумент.Состояние.Название, "")));
		// НоваяСтр.Вставить("Примечание", оДокумент.Состояние.Примечание);
		НоваяСтр.Вставить("Дата", оДокумент.ДатаВремяСоздания);
		// оДокумент = оДокумент.Документ;
		НоваяСтр.Вставить("ИдСБИС", оДокумент.Идентификатор);
		НоваяСтр.Вставить("Контрагент");
		НоваяСтр.Вставить("НашаОрганизация");
		
		//AU переделал получение названия без попыток
		СторонаКО = Неопределено;
		НазваниеКО = Неопределено;
		Если оДокумент.Свойство("Контрагент", СторонаКО) Тогда
			Если		СторонаКО.Свойство("СвЮЛ", НазваниеКО) Тогда
				НазваниеКО.Свойство("Название", НазваниеКО);
			ИначеЕсли   СторонаКО.Свойство("СвФЛ", НазваниеКО) Тогда
				СтрокаНазвание = НазваниеКО.Фамилия + " " + НазваниеКО.Имя;
				Если НазваниеКО.Свойство("Отчество", НазваниеКО) Тогда
					СтрокаНазвание = СтрокаНазвание + " " + НазваниеКО;
				КонецЕсли;
			    НазваниеКО = СтрокаНазвание;
			КонецЕсли;
			СторонаКО.Вставить("Название", НазваниеКО);
			НоваяСтр.Контрагент = НазваниеКО;
		Иначе
			оДокумент.Вставить("Контрагент", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		Если оДокумент.Свойство("НашаОрганизация", СторонаКО) Тогда
			Если		СторонаКО.Свойство("СвЮЛ", НазваниеКО) Тогда
				НазваниеКО.Свойство("Название", НазваниеКО);
			ИначеЕсли   СторонаКО.Свойство("СвФЛ", НазваниеКО) Тогда
				СтрокаНазвание = НазваниеКО.Фамилия + " " + НазваниеКО.Имя;
				Если НазваниеКО.Свойство("Отчество", НазваниеКО) Тогда
					СтрокаНазвание = СтрокаНазвание + " " + НазваниеКО;
				КонецЕсли;
			    НазваниеКО = СтрокаНазвание;
			КонецЕсли;
			СторонаКО.Вставить("Название", НазваниеКО);
			НоваяСтр.НашаОрганизация = НазваниеКО;
		Иначе
			оДокумент.Вставить("НашаОрганизация", Новый Структура("Название", "Не определен"));
		КонецЕсли;
		
		Вложения = "";
		счВложений = 0;
		Если оДокумент.Свойство("Вложение") Тогда
			Для Каждого Элемент Из оДокумент.Вложение Цикл
				Если Не Элемент.Свойство("Служебный") или Элемент.Служебный = "Нет" Тогда
					счВложений = счВложений + 1;
					Если счВложений<3 Тогда
						Вложения = Вложения + Элемент.Название+Символы.ПС;
					ИначеЕсли счВложений=3 Тогда
						Вложения = Вложения + "..."+Символы.ПС;					
					КонецЕсли;
					МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, Элемент.Идентификатор));		
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//  << alo Меркурий
		если счВложений =0 и Кэш.Парам.Меркурий тогда
			МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения",оДокумент.Идентификатор, ""));
		конецесли; //  alo Меркурий >>
		Вложения = Вложения + ?(оДокумент.Свойство("Состояние") И оДокумент.Состояние.Свойство("Примечание"),"   "+оДокумент.Состояние.Примечание,"");
		НоваяСтр.Вставить("Вложения", Вложения);
		НоваяСтр.Вставить("Документы1С", Новый СписокЗначений);
		СоставПакета = Новый СписокЗначений;
		СоставПакета.Вставить(0,оДокумент);
		НоваяСтр.Вставить("СоставПакета", СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		
		Если оДокумент.Свойство("Подразделение") Тогда
			Если		оДокумент.Подразделение.Свойство("Идентификатор") Тогда
				НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Идентификатор);
			ИначеЕсли	оДокумент.Подразделение.Свойство("Название") Тогда
				НоваяСтр.Вставить("Склад", оДокумент.Подразделение.Название);
			КонецЕсли;
		КонецЕсли;
		Если оДокумент.Свойство("Примечание") Тогда
			НоваяСтр.Вставить("Комментарий", оДокумент.Примечание);
		КонецЕсли;
		НоваяСтр.Вставить("Проведен", -1);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;	
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы
КонецФункции

&НаКлиенте
Функция УдалитьФайлПакетаДокументов(ИмяФайла) Экспорт
	ФайлПакета = Новый Файл(ИмяФайла);
	ПутьКФайлу = ФайлПакета.Путь;
	Если ФайлПакета.Существует() Тогда
		Попытка
			ФайлПакета = "";
			УдалитьФайлы(ИмяФайла);
			УдалитьФайлы(ПутьКФайлу);			
			Сообщить("Пакет документов удалён " + ИмяФайла);
		Исключение
			Сообщить("Не удалось удалить файл " + ИмяФайла + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
КонецФункции

//AU заглушки методов авторизации для открытия формы авторизации//

//Заглушка закрытия сессии	
&НаКлиенте
Функция ЗакрытьСессию(Кэш) Экспорт 	
	Возврат Истина;
КонецФункции	

//Заглушка авторизации через логин/пароль. При работе через каталог SID не нужен	
&НаКлиенте
Функция АвторизоватьсяПоЛогинуПаролю(Кэш,Логин,Пароль,Отказ=Ложь) Экспорт 	
	Возврат "Ok";	
КонецФункции	

//Заглушка авторизации через сертификат. При работе через каталог SID не нужен	
&НаКлиенте
Функция АвторизоватьсяПоСертификату(Кэш,Сертификат,Отказ=Ложь) Экспорт
	Возврат "Ok";	
КонецФункции

&НаКлиенте
Функция ПолучитьСписокСертификатовДляАвторизации(Кэш,ТекстОшибки) Экспорт
	Возврат Новый СписокЗначений;
КонецФункции

//Заглушка информации о пользователе.	
&НаКлиенте
Функция ИнформацияОТекущемПользователе(Кэш) Экспорт
	Возврат "";
КонецФункции

//AU заглушки прочих методов

//Заглушка для отправки статистики
&НаКлиенте
Функция сбисОтправитьСообщениеСтатистики(Кэш, СообщениеСтатистики, Отказ) Экспорт
	Возврат Неопределено;
КонецФункции

//Заглушка для отправки статистики
&НаКлиенте
Функция сбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ) Экспорт
	Возврат Неопределено;
КонецФункции

//Заглушка для выполнения команды
&НаКлиенте
Функция сбисВыполнитьКоманду(Кэш, Идентификатор,ИмяКоманды, ПредставлениеПакета) Экспорт
	
	Возврат Ложь;
	
КонецФункции
// Переводит документ повторно на ранее выполненный этап
&НаКлиенте
Функция сбисПовторитьЭтап(Кэш, ИдДок, ЭтапНазвание, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK2"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	Отказ				= Истина;
	Сообщить("Функционал доступен только для способов обмена ""extSDK2"" и ""API"". Способ обмена можно изменить на вкладке ""Настройки"".");
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////
//////////////////Автообновление////////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисПолучитьПараметрыАктуальнойВерсии(Кэш, ПараметрыОбновления, Отказ) Экспорт
	
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("API").сбисПолучитьПараметрыАктуальнойВерсии(Кэш, ПараметрыОбновления, Отказ);
	
КонецФункции

//Функция сохраняет вложение по ссылке. Необходимо переданное соединение для корректной работы с переадресацией.
&НаКлиенте
Функция сбисСохранитьВФайлПоСсылке(Кэш, сбисПараметрыФайла, Отказ) Экспорт
	
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("API").сбисСохранитьВФайлПоСсылке(Кэш, сбисПараметрыФайла, Отказ);
	
КонецФункции

&НаКлиенте
функция СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла="") Экспорт
	
	Возврат Кэш.ГлавноеОкно.сбисПолучитьФорму("API").СохранитьВложениеПоСсылкеВФайл(Кэш,Ссылка,ИмяФайла);
	
КонецФункции

&НаКлиенте
Функция сбисВключенРезервныйДомен(Кэш, АдресСервера) Экспорт
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////
//////////////Сотрудники////////////////////////////
////////////////////////////////////////////////////

&НаКлиенте
функция сбисЗаписатьСотрудников(Кэш, ДанныеСотрудников, Отказ) Экспорт
	// функция активирует серверные сертификаты для определенного списка ИНН	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("Текст",	"Загрузка сотрудников в СБИС дступна только при способе обмена ExtSDK, ExtSDK2 или API. "+Символы.ПС+
											"Изменить способ обмена можно на вкладке ""Настройки"".");
	сбисПолучитьФорму("ФормаПредупреждения").Показать(Кэш, ПараметрыСообщения);
	Отказ = Истина;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция сбисУстановитьВремяОжидания(Кэш, ВремяОжидания) Экспорт
	Кэш.СБИС.ПараметрыИнтеграции.Вставить("ВремяОжиданияОтвета", ВремяОжидания);
КонецФункции
