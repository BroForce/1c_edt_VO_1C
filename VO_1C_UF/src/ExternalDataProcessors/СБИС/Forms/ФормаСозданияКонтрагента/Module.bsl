&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции

&НаКлиенте
Функция ЗаполнитьИзФайла(СтрокаТаблДок, СоставПакета, Кэш) Экспорт
	// Функция заполняет ревизиты формы данными из файла (ИНН, КПП, контактная информация, банковские реквизиты)	
	СтруктураФайла = СтрокаТаблДок.Вложение[0].Значение.СтруктураФайла;
	СтруктураИниФайла = СтрокаТаблДок.Вложение[0].Значение.СтруктураИниФайла;
	РольКонтрагента = СтрЗаменить(СтруктураИниФайла.Контрагент_Роль.Значение, "'", "");
	Если ЗначениеЗаполнено(РольКонтрагента) Тогда
		ПутьКонтрагента = СтруктураИниФайла;
		Если	ПутьКонтрагента.Свойство("мСторона",		ПутьКонтрагента)
			И	ПутьКонтрагента.Свойство(РольКонтрагента,	ПутьКонтрагента)
			И	ПутьКонтрагента.Свойство("Сторона",			ПутьКонтрагента)
			И	ПутьКонтрагента.Свойство("Данные",			ПутьКонтрагента) Тогда
			СтруктураКонтрагента = Кэш.ОбщиеФункции.РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
		Иначе
			ПутьКонтрагента = "Файл.Документ."+РольКонтрагента;
			СтруктураКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(РольКонтрагента),СтруктураФайла.Файл.Документ[РольКонтрагента], Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтруктураКонтрагента) Тогда
		Сообщить("В файле отсутствует блок информации, необходимый для создания контрагента.");
		Возврат Неопределено;
	КонецЕсли;
	ИниКонтрагента = СтруктураИниФайла.мСторона[РольКонтрагента];
	
	СвФлЮл = Неопределено;
	Если СтруктураКонтрагента.Свойство("СвЮЛ",СвФлЮл) Тогда
		Наименование = СвФлЮл.Название;
		ИНН = СвФлЮл.ИНН;
		КПП = СвФлЮл.КПП;
	ИначеЕсли СтруктураКонтрагента.Свойство("СвФЛ",СвФлЮл) Тогда
		Если СтруктураКонтрагента.Свойство("Название") Тогда
			Наименование = СтруктураКонтрагента.Название;
		ИначеЕсли	СвФлЮл.Свойство("Фамилия")
				И	СвФлЮл.Свойство("Имя") Тогда
			Наименование = СвФлЮл.Фамилия + " " + СвФлЮл.Имя + ?(СвФлЮл.Свойство("Отчество")," " + СвФлЮл.Отчество,"");
		КонецЕсли;
		ИНН = СвФлЮл.ИНН;
	КонецЕсли;
	
	АдресПредставление = "";
	Если ТипЗнч(СтруктураКонтрагента.Адрес) = Тип("Массив") Тогда
		// alo сейчас заглушка позже надо будет сделать заполнение нескольких адресов (юридический, фактический и др.)
	ИначеЕсли СтруктураКонтрагента.Адрес.Свойство("АдрРФ") Тогда
		Для Каждого Элемент Из СтруктураКонтрагента.Адрес.АдрРФ Цикл
			ЭтаФорма[Элемент.Ключ] = Элемент.Значение;
			Если Элемент.Ключ="Дом" Тогда
				АдресПредставление = АдресПредставление+"дом № "+Элемент.Значение+", ";
			ИначеЕсли Элемент.Ключ="Корпус" Тогда
				АдресПредставление = АдресПредставление+"корпус "+Элемент.Значение+", ";
			ИначеЕсли Элемент.Ключ="Кварт" Тогда
				АдресПредставление = АдресПредставление+"кв."+Элемент.Значение+", ";
			ИначеЕсли Элемент.Ключ="КодРегион" Тогда
				АдресПредставление = АдресПредставление+ЗаполнитьРегионПоКоду("")+", ";
			Иначе
				АдресПредставление = АдресПредставление+Элемент.Значение+", ";
			КонецЕсли;
		КонецЦикла;
		АдресПредставление = Лев(АдресПредставление, СтрДлина(АдресПредставление)-2);
	ИначеЕсли СтруктураКонтрагента.Адрес.Свойство("АдрИно") и СтруктураКонтрагента.Адрес.АдрИно.Свойство("АдрТекст") Тогда
		АдресПредставление = СтруктураКонтрагента.Адрес.АдрИно.АдрТекст;		
	КонецЕсли;
	Если СтруктураКонтрагента.Свойство("Контакт") Тогда
		Для Каждого Элемент Из СтруктураКонтрагента.Контакт Цикл
			ЭтаФорма[Элемент.Ключ] = Элемент.Значение;
		КонецЦикла;
	КонецЕсли;
	Если СтруктураКонтрагента.Свойство("БанкРекв") Тогда
		ЕстьБанкРекв = Истина;
		Для Каждого Элемент Из СтруктураКонтрагента.БанкРекв Цикл
			ЭтаФорма[Элемент.Ключ] = Элемент.Значение;
		КонецЦикла;
	Иначе
		ЕстьБанкРекв = Ложь;
		НаимБанк = "";
		БИК = "";
		РСчет = "";
	КонецЕсли;
	ЭтаФорма.Открыть();	
КонецФункции

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	// процедура создает нового контрагента и открывает его карточку	
	Контрагент1С = СоздатьКонтрагентаНаСервере();
	ЭтаФорма.Закрыть();
	ФормаПросмотра = сбисПолучитьФорму("ФормаПросмотрДокумента");
	ФормаПросмотра.ЗаполнитьТаблицуДокументов(ФормаПросмотра.СоставПакета);
	ПоказатьЗначение(Неопределено, Контрагент1С);
КонецПроцедуры

Функция ЗаполнитьКонтрагента1С(Ини, Контрагент1С)
	// функция заполняет значения в Контрагенте 1С		
	Переменные = Новый Структура;
	Для Каждого Элемент Из Ини Цикл
		Если Элемент.Значение.Свойство("Значение") Тогда
			Если Элемент.Значение.Свойство("Данные") или Элемент.Значение.Свойство("Вычислить") Тогда
				Если Лев(Элемент.Ключ,8) = "БанкРекв" и Не ЕстьБанкРекв Тогда    // чтобы не создавалась пустая запись в банковских счетах
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначениеРеквизита(Элемент.Ключ, Новый Структура("Ини, Элемент1С", Ини, Контрагент1С));		
			КонецЕсли;
			//Если Элемент.Значение.Свойство("ВычислитьНаСервере") Тогда
			//	ЗначениеРеквизита = РассчитатьЗначениеНаСервере(Элемент.Значение.ВычислитьНаСервере,Новый Структура("Ини, Документ, Переменные", Ини, ДокОбъект, Переменные));
			//	ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, Элемент.Значение.Значение, ДокОбъект, Переменные);	
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции
Процедура ЗаполнитьЗначениеРеквизитаИзФормы(ЭлементИни, Объект1С) Экспорт
	// Функция заполняет реквизит объекта 1С из реквизита данной формы	
	ЗнПер=ЭлементИни.Значение;
	Попытка
		ЗначениеРеквизита = ЭтаФорма[ЭлементИни.Данные];
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Найти(ЗнПер,"[")=1 Тогда  // ссылка на реквизит
		ИмяРеквизита=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Если ЭлементИни.Свойство("Тип") Тогда
			Если ЭлементИни.Тип="Дата" Тогда
				ЗначениеРеквизита = Дата(Сред(ЗначениеРеквизита,7,4),Сред(ЗначениеРеквизита,4,2),Лев(ЗначениеРеквизита,2));
			КонецЕсли;
		КонецЕсли;
		Попытка
			Объект1С[ИмяРеквизита] = ЗначениеРеквизита;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры
Функция ЗаполнитьЗначениеРеквизита(Параметр,Контекст) Экспорт
	// Функция заполняет реквизит объекта 1С	
	Попытка
		ЗнПер=Контекст.Ини[Параметр].Значение;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если Найти(ЗнПер,"[")=1 Тогда  // ссылка на реквизит
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Если СтрОбъекта = "Сторона" Тогда
			Объект1С= Контекст.Элемент1С;
		Иначе
			Объект1С=ЗаполнитьЗначениеРеквизита(СтрОбъекта,Контекст);
		КонецЕсли;
		Если Объект1С<>Неопределено Тогда
			ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);	
			
			Попытка
				ЭтоТЧ = Найти(строка(Объект1С[ИмяРек]),"ТабличнаяЧасть")>0;
			Исключение
				ЭтоТЧ = Ложь;
			КонецПопытки;
			Если ЭтоТЧ Тогда //это сама табличная часть
				Объект1С = Объект1С[ИмяРек];
				Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
					Отбор = Новый Структура;
					Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
						Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					КонецЦикла;
					СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
					Если СтрокиТЧ.Количество()=0 Тогда
						НоваяСтрока = Объект1С.Добавить();	
						Для Каждого Элемент Из Отбор Цикл
							НоваяСтрока[Элемент.Ключ] = Элемент.Значение;
						КонецЦикла;
						Возврат НоваяСтрока;
					Иначе
						Возврат СтрокиТЧ[0];	
					КонецЕсли;
				КонецЕсли;
			Иначе
				Попытка   // если Объект1С - ссылка, то для его редактирования надо получить объект
					Объект1С=Объект1С.ПолучитьОбъект();
				Исключение
				КонецПопытки;
				Попытка
					ОбъектДляЗаписиПоля = Объект1С.Получить(0);  // в случае регистра сведений берем первую запись набора
				Исключение
					ОбъектДляЗаписиПоля = Объект1С;
				КонецПопытки;
				
				Если Контекст.Ини[Параметр].Свойство("Данные") Тогда
					ЗаполнитьЗначениеРеквизитаИзФормы(Контекст.Ини[Параметр],ОбъектДляЗаписиПоля);
					Попытка
						Объект1С.Записать();
					Исключение
						Ошибка = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
				Если Контекст.Ини[Параметр].Свойство("Вычислить") Тогда
					ОбъектДляЗаписиПоля[ИмяРек] = РассчитатьЗначениеНаСервере(Контекст.Ини[Параметр].Вычислить,Новый Структура("Ини, Элемент1С", Контекст.Ини, Объект1С));	
					Попытка
						Объект1С.Записать();	
					Исключение
						Ошибка = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"Справочник")=1 Тогда	// ссылка на справочник
		ИмяРек=сред(ЗнПер,12);
		Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Отбор = Новый Структура;
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|Спр.Ссылка
			|ИЗ
			|   Справочник."+ИмяРек+" КАК Спр
			|ГДЕ
			| ";
			Для Каждого Элемент Из Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
				Запрос.Текст=Запрос.Текст+"Спр."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Количество()>0 Тогда
				Пока Выборка.Следующий() Цикл
					Возврат Выборка.Ссылка;
				КонецЦикла;
			Иначе
				НовыйЭлемент = Справочники[ИмяРек].СоздатьЭлемент();
				Для Каждого Элемент Из Отбор Цикл
					НовыйЭлемент[Элемент.Ключ] = Элемент.Значение;
				КонецЦикла;
				Попытка
					НовыйЭлемент.Записать();
				Исключение
				КонецПопытки;
				Возврат НовыйЭлемент;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"РегистрыСведений")=1 Тогда	// ссылка на регистр сведений
		ИмяРек=сред(ЗнПер,18);
		Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда // Надо установить отбор
			НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
			Отбор = Новый Структура;
			Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				ЗначениеОтбора = РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст); 
				Отбор.Вставить(Элемент.Ключ, ЗначениеОтбора);
				НаборЗаписей.Отбор[Элемент.Ключ].Установить(ЗначениеОтбора);
			КонецЦикла;
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество()=0 Тогда
				НоваяЗаписьНабора = НаборЗаписей.Добавить();
				Для Каждого Элемент Из Отбор Цикл
					НоваяЗаписьНабора[Элемент.Ключ] = Элемент.Значение;
				КонецЦикла;
				Попытка
					НаборЗаписей.Записать();
				Исключение
					Ошибка = ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			Возврат НаборЗаписей;
		КонецЕсли;
	ИначеЕсли Контекст.Ини[Параметр].Свойство("Вычислить") Тогда   // в случае, если просто надо выполнить функцию и ни в какой реквизит ничего не записывать
		РассчитатьЗначениеНаСервере(Контекст.Ини[Параметр].Вычислить,Контекст);	
	КонецЕсли;
КонецФункции
Функция СоздатьКонтрагентаНаСервере()
	// процедура создает нового контрагента в справочнике 1С и заполняет его данные		
	ТипСправочника = Сред(ИниКонтрагента.Сторона.Тип, Найти(ИниКонтрагента.Сторона.Тип, ".")+1);
	Контрагент1С = Справочники[ТипСправочника].СоздатьЭлемент();
	ЗаполнитьКонтрагента1С(ИниКонтрагента, Контрагент1С);
	Контрагент1С.Записать();
	Возврат Контрагент1С.Ссылка;
КонецФункции
Функция РассчитатьЗначениеНаСервере(Параметр,Контекст) Экспорт
	// Функция рассчитывает значение параметра из файла настроек	
	Если Найти(Параметр,"[")>0 или Найти(Параметр,"'")>0 или Найти(Параметр,"{")>0 Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Попытка
			ЗнПер=Контекст.Ини[Параметр].Значение;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Найти(ЗнПер,"{")=1 Тогда 
		ИмяФункции=сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		Попытка
			Результат=вычислить(ИмяФункции+"(Контекст)");
			Возврат Результат;
		Исключение
			Ошибка = ОписаниеОшибки();
			сообщить(Ошибка+ "(ошибка при вычислении функции """+Сред(ЗнПер, 2, СтрДлина(ЗнПер)-2)+""")");
		КонецПопытки;
	ИначеЕсли Найти(ЗнПер,"[")=1 Тогда  // ссылка на объект (другую переменную)
		Если ЗнПер = "[Сторона]" Тогда
			возврат Контекст.Элемент1С.Ссылка;	
		КонецЕсли;
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Объект1С=РассчитатьЗначениеНаСервере(СтрОбъекта,Контекст);
		Если Найти(ЗнПер,".")>0 Тогда 
			ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
		Иначе
			ИмяРек="";
		КонецЕсли;
		
		Попытка
			Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это строка табличной части
				Объект1С = Контекст.СтрТабл[ИмяРек];
			Иначе
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Объект1С = Объект1С[ИмяРек];
				КонецЕсли;
				Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это сама табличная часть
					Если Контекст.Ини[Параметр].Свойство("Отбор") Тогда
						Отбор = Новый Структура;
						Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
							Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
						КонецЦикла;
						Если Лев(строка(Объект1С),10) = "Справочник" Тогда
							ТипМетаданных = "Справочники";
						Иначе
							ТипМетаданных = "Документы";
						КонецЕсли;
						ИмяОбъектаИТЧ = РазбитьСтрокуВМассив(строка(Объект1С), ".");
						Реквизиты = Метаданные[ТипМетаданных][ИмяОбъектаИТЧ[1]].ТабличныеЧасти[ИмяОбъектаИТЧ[2]].Реквизиты;
						СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл 
							СтруктураСтрокиТЧ = Новый Структура();
							Для Каждого Реквизит Из Реквизиты Цикл 
								СтруктураСтрокиТЧ.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
							КонецЦикла;
							Возврат СтруктураСтрокиТЧ;
						КонецЦикла;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ИмяПеременнойВПараметре и Контекст.Ини[Параметр].Свойство("Формат") Тогда // Надо установить отбор
				Объект1С = Формат(Объект1С,	Контекст.Ини[Параметр].Формат);
			КонецЕсли;
			
			Возврат Объект1С;
			
		Исключение
			ошибка = ОписаниеОшибки();
		КонецПопытки;	
	ИначеЕсли Найти(ЗнПер,"Справочник")=1 Тогда	// ссылка на справочник
		ИмяРек=сред(ЗнПер,12);
		возврат Справочники[ИмяРек];
	ИначеЕсли Найти(ЗнПер,"Документ")=1 Тогда // ссылка на документ	
		ИмяРек=сред(ЗнПер,10);
		возврат Контекст.Элемент1С;
	ИначеЕсли Найти(ЗнПер,"Константа")=1 Тогда	// константа
		ИмяРек=сред(ЗнПер,11);
		возврат Константы[ИмяРек].Получить();
	ИначеЕсли Найти(ЗнПер,"Перечисление")=1 Тогда	// значение перечисления
		ИмяРек=сред(ЗнПер,14);
		возврат Перечисления[ИмяРек];
	ИначеЕсли Найти(ЗнПер,"РегистрыСведений")=1 Тогда	// ссылка на регистр сведений
		ИмяРек=сред(ЗнПер,18);
		Если Не Контекст.Ини[Параметр].Свойство("Отбор") Тогда
			Возврат Неопределено;
		КонецЕсли;
		НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
		Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
			НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
		КонецЦикла;
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество()=0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запись = НаборЗаписей.Получить(0);
		Результат = Новый Структура();
		Ресурсы = Метаданные.РегистрыСведений[ИмяРек].Ресурсы;	
		Для Каждого Ресурс Из Ресурсы Цикл 
			Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
		КонецЦикла;
		возврат Результат;
	ИначеЕсли Найти(ЗнПер,"'")>0 Тогда	 // строка
		возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
	Иначе
		возврат Неопределено;
	КонецЕсли	
КонецФункции
функция РазбитьСтрокуВМассив(знач Строка, Разделитель) Экспорт
	// Функция разбивает строку по определенному разделителю и формирует массив из получившихся элементов	
	МассивЭлементов = Новый Массив();
	ЕстьРазделитель = Истина;
	Пока ЕстьРазделитель И Строка<>"" И Разделитель<>"" Цикл
		Если Найти(Строка,Разделитель)=0 Тогда
			Прервать;
		КонецЕсли;
		Элемент = Сред(Строка,1,Найти(Строка,Разделитель)-1);
		МассивЭлементов.Добавить(Элемент);
		Строка = Сред(Строка,Найти(Строка,Разделитель)+1);
	КонецЦикла;
	МассивЭлементов.Добавить(Строка);
	Возврат МассивЭлементов;
КонецФункции
Функция ЗаполнитьАдресУП(Контекст)
	// Функция заполняет адрес, хранящийся в табличной части справочника Контрагенты	
	ЗначенияПолей = "";
	ЗначенияПолей = ЗначенияПолей+"Индекс="+Индекс+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"КодРегиона="+КодРегион+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Район="+Район+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Город="+Город+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"НаселенныйПункт="+НаселПункт+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Улица="+Улица+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Дом="+Дом+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Корпус="+Корпус+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"Квартира="+Кварт+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"ТипДома=дом"+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"ТипКорпуса=корпус"+Символы.ПС;
	ЗначенияПолей = ЗначенияПолей+"ТипКвартиры=кв.";
	Возврат ЗначенияПолей;
КонецФункции
Функция ЗаполнитьБанкУП(Контекст)
	// Функция возвращает банк по БИК
	Если Контекст.Ини.Свойство("Банки") и Контекст.Ини.Банки.Свойство("Значение") Тогда
		СправочникБанков = сред(Контекст.Ини.Банки.Значение,Найти(Контекст.Ини.Банки.Значение,".")+1);
	Иначе
		СправочникБанков = "Банки";
	КонецЕсли;
	Банк = Справочники[СправочникБанков].НайтиПоКоду(БИК);
	Возврат Банк;
КонецФункции
Функция ЗаполнитьБанковскийСчет(Контекст)
	// Функция создает и заполняет банковский счет контрагента	
	БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Банк = Справочники.Банки.НайтиПоКоду(БИК);
	Если ЗначениеЗаполнено(Банк) Тогда
		БанковскийСчет.Банк = Банк;
		БанковскийСчет.НомерСчета = РСчет;
		БанковскийСчет.ВидСчета = "Расчетный";
		БанковскийСчет.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоКоду("643");
		БанковскийСчет.Владелец = Контекст.Элемент1С.Ссылка;
		БанковскийСчет.Наименование = Банк.Наименование+" ("+БанковскийСчет.ВидСчета+")";
		Попытка
			БанковскийСчет.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Возврат БанковскийСчет.ссылка;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьБанковскийСчетБГУ(Контекст)
	// Функция создает и заполняет банковский счет контрагента (для бух. гос. уч.)	
	БанковскийСчет = Справочники.БанковскиеИКазначейскиеСчета.СоздатьЭлемент();
	Банк = Справочники.Банки.НайтиПоКоду(БИК);
	Если ЗначениеЗаполнено(Банк) Тогда
		БанковскийСчет.КассовыйОрган = Банк;
		БанковскийСчет.Код = РСчет;
		БанковскийСчет.Владелец = Контекст.Элемент1С.Ссылка;
		БанковскийСчет.Наименование = Банк.Наименование;
		БанковскийСчет.ТипЛицевогоСчета = Перечисления.ТипыЛицевыхСчетов.Банковский;
		Попытка
			БанковскийСчет.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Возврат БанковскийСчет.ссылка;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьВалютуУП(Контекст)
	// Функция возвращает ссылку на валюту - рубль	(нужна для банковских реквизитов, иначе не сохраняется запись)	
	Валюта = Справочники.Валюты.НайтиПоНаименованию("RUB");
	Возврат Валюта;
КонецФункции
Функция ЗаполнитьЮрФизЛицо(Контекст)
	// Функция заполняет тип контрагента	
	Если СтрДлина(ИНН)=12 Тогда
		Возврат Перечисления.ЮрФизЛицо.ФизЛицо;
	Иначе
		Возврат Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьЮридическоеФизическоеЛицоУП(Контекст)
	// Функция заполняет тип контрагента (для конфигураций с перечислениями ЮридическоеФизическоеЛицо)	
	Если СтрДлина(ИНН)=12 Тогда
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Иначе
		Возврат Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьВидКонтрагента(Контекст)
	// Функция заполняет вид контрагента	
	Если СтрДлина(ИНН)=12 Тогда
		Возврат Перечисления.ВидыКонтрагентов.ФизЛицо;
	Иначе
		Возврат Перечисления.ВидыКонтрагентов.Организация;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьРегионПоКоду(Контекст)
	// Функция заполняет название региона по его коду	
	Попытка
		НазваниеКода = ?(Метаданные.РегистрыСведений.АдресныйКлассификатор.Измерения.Найти("КодРегионаВКоде") <> Неопределено,"КодРегионаВКоде","КодАдресногоОбъектаВКоде");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	АдресныйКлассификатор.Наименование КАК Наименование,
		|	АдресныйКлассификатор.Сокращение КАК Сокращение
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		|ГДЕ
		|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
		|И  АдресныйКлассификатор."+НазваниеКода+" = &КодРегиона";
		Запрос.УстановитьПараметр("КодРегиона", Число(КодРегион));
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Возврат СокрЛП(Выборка.Наименование)+" "+СокрЛП(Выборка.Сокращение);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Возврат КодРегион;	
КонецФункции
Функция ЗаполнитьПартнера(Контекст)
	// Функция создает партнера (для конфигураций УТ11, КА2, ERP и т.п.)	
	Попытка
		Партнер = Справочники.Партнеры.СоздатьЭлемент();
		Партнер.Наименование = Наименование;
		Партнер.НаименованиеПолное = Наименование;
		Попытка
			Если СтрДлина(ИНН)=12 Тогда
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
			Иначе
				Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			КонецЕсли;	
		Исключение
		КонецПопытки;
		Партнер.Записать();
		Возврат Партнер.Ссылка;
	Исключение
		Ошибка = ОписаниеОшибки();
		
	КонецПопытки;
КонецФункции