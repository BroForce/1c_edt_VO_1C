&НаКлиенте
Перем МестныйКэш Экспорт;
// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы, Объект1С = Неопределено, ПараметрыФормы = Неопределено, ВладелецФормы = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы, ПараметрыФормы);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
&НаКлиенте
Функция сбисПолучитьПодчиненныеЭлементы(Элемент, ВидЭлементов)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы;
	КонецЕсли;
	Возврат Элемент[ВидЭлементов];
КонецФункции
&НаКлиенте
Процедура сбисУстановитьСвойствоЭлементаФормы(ЭлементФормы, Значение)
	Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") Тогда
		ЭлементФормы.Заголовок = Значение;	
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели") Тогда
		ЭлементФормы.Текст = Значение;	
	КонецЕсли 		
КонецПроцедуры
&НаКлиенте
Процедура сбисПоказатьСостояние(ТекстСостояния, Форма = Неопределено, Индикатор = Неопределено, Пояснение = "")
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Состояние(ТекстСостояния,Индикатор,Пояснение);
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Истина;
		Форма.НадписьОжидания = Символы.ПС + ТекстСостояния;
		Форма.НадписьПояснение = Пояснение;
		Если Индикатор<>Неопределено Тогда
			Форма.ЭлементыФормы.Индикатор.Видимость = Истина;
			Форма.ЭлементыФормы.Индикатор.Значение = Индикатор;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры
&НаКлиенте
Процедура сбисСпрятатьСостояние(Форма = Неопределено)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
	Иначе
		Форма.ЭлементыФормы.ПанельОжидания.Видимость = Ложь;
		Форма.ЭлементыФормы.Индикатор.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры
Функция сбисПолучитьМакет(ИмяМакета)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда		
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"").ПолучитьМакет(ИмяМакета)");
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьМакет(ИмяМакета);
КонецФункции
//------------------------------------------------------
&НаСервереБезКонтекста
Функция ПолучитьРеквизитМетаданныхОбъекта(Объект1С, ИмяРеквизита) Экспорт
	Возврат Объект1С.Метаданные()[ИмяРеквизита];	
КонецФункции
&НаКлиенте
Функция ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, Кэш, МассоваяОтправка = Ложь) Экспорт
	// Функция готовит структуру пакета электронных документов по комплекту документов 1С для просмотра и отправки контрагентам.
	// Т.к. по одной строке документов 1С может быть сформировано несколько комплектов (оказание услуги), то структуры пакетов добавляются в массив.
	МестныйКэш = Кэш;
	ГлавноеОкно = Кэш.ГлавноеОкно; 
	//ВремКаталог = КаталогВременныхФайлов();
	МассивПакетов = Новый Массив;
	Контекст = Новый Структура;
	Контекст.Вставить("МассивПакетов",Новый Массив);
	Кэш.КэшЗначенийИни.ТекущийПакет.Очистить();
	ИниТекущегоРеестра = Кэш.Текущий.ТипДок;	
	ТипПакета = "ДокОтгрИсх";
	ВнешниеФайлы = Новый Массив;
	НеЗапускатьВДокументооборот = Ложь;
	МассивСтатусРегламент = Новый Массив;
	
	Если ЗначениеЗаполнено(ИниТекущегоРеестра) Тогда
		ЗначениеИниТекущегоРеестра = Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра);
		МассивТипов = РазбитьСтрокуВМассивНаКлиенте(РассчитатьЗначение("РеестрСБИС_Тип", ЗначениеИниТекущегоРеестра, Кэш),",");
		Если МассивТипов.Количество()>0 Тогда
			ТипПакета = МассивТипов[0];
		КонецЕсли;
		НеЗапускатьВДокументооборот = РассчитатьЗначение("НеЗапускатьВДокументооборот", ЗначениеИниТекущегоРеестра, Кэш);
		Если Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра).Свойство("КаталогОбмена") Тогда
			Кэш.ФормаОтправки = сбисПолучитьФорму("ИнтеграцияКаталог");
			Кэш.Парам.КаталогОбмена = Кэш.ОбщиеФункции.РассчитатьЗначение("КаталогОбмена", ЗначениеИниТекущегоРеестра, Кэш)
		Иначе
			Кэш.ФормаОтправки = Кэш.Интеграция;
		КонецЕсли;
	КонецЕсли;
	// выбираем нужные файлы настроек для выгрузки пакета
	СоответствиеДокументДанные = Новый Соответствие;
	Для каждого Элемент из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Элемент.Значение;
		ФайлНастроек = Элемент.Представление;
		Если ТипЗнч(Документ) = Тип("Строка") Тогда   // ссылка на внешний файл
			ВнешниеФайлы.Добавить(Документ);
		Иначе
			// Определяем ини для выгрузки текущего вложения			
			ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
			ИниДокумента = ИмяДокумента;
			Если ЗначениеЗаполнено(ИниТекущегоРеестра) Тогда
				Если Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра).Свойство(ИниДокумента) Тогда
					ИниДокумента = Кэш.ОбщиеФункции.РассчитатьЗначение(ИмяДокумента,Кэш.ФормаНастроек.Ини(Кэш, ИниТекущегоРеестра),Кэш);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлНастроек) Тогда
				ИниДокумента = ФайлНастроек;
			КонецЕсли; 
			
			Если Кэш.ини.Свойство(ИниДокумента) Тогда
				Кэш.ФормаНастроек.Ини(Кэш, ИниДокумента).Вставить("Формат2016", Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
				Кэш.ФормаНастроек.Ини(Кэш, ИниДокумента).Вставить("Формат2019", Новый Структура("Значение,РассчитанноеЗначение", Истина, Истина));
				Кэш.ФормаНастроек.Ини(Кэш, ИниДокумента).Вставить("ФорматУКД2020", Новый Структура("Значение,РассчитанноеЗначение", Кэш.Парам.ФорматУКД2020, Кэш.Парам.ФорматУКД2020));
				СоответствиеДокументДанные.Вставить(Документ, Новый Структура("ИмяИни, ДокументДанные",ИниДокумента,Кэш.ФормаНастроек.Ини(Кэш, ИниДокумента)));
			Иначе // Если нет инишки для одного из документов пакета, то весь пакет не формируем
				Если Кэш.Свойство("РезультатОтправки") Тогда
					Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
					Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
					ДобавитьОшибкуВРезультатОтправки(Кэш, "Документ не сформирован", "Отсутствует настройка для формирования документа "+ИмяДокумента, СтрокаСпискаДокументов.СоставПакета[0].Значение, 726)
				Иначе
					Сообщить("Отсутствует настройка для формирования документа "+ИмяДокумента);	
				КонецЕсли;
				Возврат Новый Массив;
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
	
	// получаем на сервере все данные по документам пакета по файлам настроек
	Если Кэш.Свойство("РезультатОтправки") Тогда
		ДатаНач = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	КонецЕсли;
	ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, Кэш.КэшЗначенийИни, СтрокаСпискаДокументов.СоставПакета, Кэш.Парам);  // передаем СоставПакета, так как в нем нужный порядок документов	// alo Меркурий
	Если Кэш.Свойство("РезультатОтправки") Тогда
		ДатаКнц = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Кэш.РезультатОтправки.ВремяПолученияДанных = Кэш.РезультатОтправки.ВремяПолученияДанных+(ДатаКнц-ДатаНач)/1000;	
	КонецЕсли;
	Кэш.КэшЗначенийИни.ТекущийПакет.Вставить("СоответствиеДокументДанные", СоответствиеДокументДанные);
	
	// формируем файлы по документам 1С
	Для каждого Элемент из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Элемент.Значение;
		Если ТипЗнч(Документ) <> Тип("Строка") Тогда
			ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(Документ, "Имя");
			Контекст.Вставить("Документ", Документ);
			Контекст.Вставить("ДокументДанные", СоответствиеДокументДанные.Получить(Документ).ДокументДанные);
			фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьДокумент","Документ_"+ИмяДокумента,"Документ_Шаблон", Кэш);
			Если Не фрм.ПрочитатьДокумент(Кэш,Контекст) Тогда
				Возврат Новый Массив;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	// добавляем в первый пакет внешние файлы
	Если Контекст.МассивПакетов.Количество()>0 Тогда
		Для Каждого ВнешнийФайлПуть из ВнешниеФайлы Цикл
			ВнешнийФайл = Новый Файл(ВнешнийФайлПуть);
			Если ВнешнийФайл.Существует() Тогда
				Вложение = Новый Структура("ПолноеИмяФайла,ИмяФайла,Название",ВнешнийФайлПуть,ВнешнийФайл.Имя,ВнешнийФайл.Имя);
				Контекст.МассивПакетов[0].Вложение.Добавить(Вложение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)--> 1 +
	Если Кэш.ФормаРаботыСоСтатусами = "Статусы_Регистры" 
		И (Кэш.Парам.СпособОбмена = 0 ИЛИ Кэш.Парам.СпособОбмена = 3)
		И Кэш.ини.Конфигурация.Свойство("СтатусРегламент") Тогда
		МассивСтатусРегламент  = РазбитьСтрокуВМассивНаКлиенте(Кэш.ини.Конфигурация.СтатусРегламент.Значение,",");
	КонецЕсли;	   
	//<-- KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)
	
	счПакетов = 0;
	Для Каждого Пакет Из Контекст.МассивПакетов Цикл
		ПолныйСоставПакета = Новый Структура;
		Если Пакет.Свойство("Конверт") Тогда
			ПолныйСоставПакета = Пакет.Конверт;
			Если Не ПолныйСоставПакета.Свойство("НеЗапускатьВДокументооборот") или ПолныйСоставПакета.НеЗапускатьВДокументооборот = Неопределено Тогда
				ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот",	НеЗапускатьВДокументооборот);
			КонецЕсли;
		КонецЕсли;
		Если Пакет.Свойство("Ошибка") Тогда
			ПолныйСоставПакета.Вставить("Ошибка",Пакет.Ошибка);	
		КонецЕсли;
		МассивВложений = Новый Массив;
		Для Каждого Вложение Из Пакет.Вложение Цикл
			СтруктураВложения = Новый Структура;
			СтруктураВложения.Вставить("Отправитель", ?(Вложение.Свойство("Отправитель"),Вложение.Отправитель, "Отправитель"));
			СтруктураВложения.Вставить("Получатель", ?(Вложение.Свойство("Получатель"),Вложение.Получатель, "Получатель"));
			СтруктураВложения.Вставить("Ответственный", ?(Вложение.Свойство("Ответственный"),Вложение.Ответственный, Новый Структура));
			СтруктураВложения.Вставить("Подразделение", ?(Вложение.Свойство("Подразделение"),Вложение.Подразделение, Новый Структура));
			СтруктураВложения.Вставить("Регламент", ?(Вложение.Свойство("Регламент"),Вложение.Регламент, Новый Структура));
			СтруктураВложения.Вставить("ДокументОснование", ?(Вложение.Свойство("ДокументОснование"),Вложение.ДокументОснование, Новый Массив));
			СтруктураВложения.Вставить("Название", ?(Вложение.Свойство("Название"),Вложение.Название, ""));
			СтруктураВложения.Вставить("Тип", ?(Вложение.Свойство("Тип"),Вложение.Тип, ""));
			СтруктураВложения.Вставить("ПодТип", ?(Вложение.Свойство("ПодТип"),Вложение.ПодТип, ""));
			СтруктураВложения.Вставить("ВерсияФормата", ?(Вложение.Свойство("ВерсияФормата"),Вложение.ВерсияФормата, ""));
			СтруктураВложения.Вставить("ПодВерсияФормата", ?(Вложение.Свойство("ПодВерсияФормата"),Вложение.ПодВерсияФормата, ""));
			СтруктураВложения.Вставить("Дата", ?(Вложение.Свойство("Дата"),Вложение.Дата, ""));
			СтруктураВложения.Вставить("Номер", ?(Вложение.Свойство("Номер"),Вложение.Номер, ""));
			СтруктураВложения.Вставить("Сумма", ?(Вложение.Свойство("Сумма"),Вложение.Сумма, ""));
			СтруктураВложения.Вставить("Примечание", ?(Вложение.Свойство("Примечание"),Вложение.Примечание, ""));
			СтруктураВложения.Вставить("Сертификат", ?(Вложение.Свойство("Сертификат"),Вложение.Сертификат, Новый Структура));
			Если Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
				СтруктураВложения.Вставить("НоменклатураКодКонтрагента", Вложение.НоменклатураКодКонтрагента);
			КонецЕсли;
			Если Вложение.Свойство("ДопПоля") Тогда	// alo ДопПоля
				СтруктураВложения.Вставить("ДопПоля", Вложение.ДопПоля);
			КонецЕсли;
			Если Вложение.Свойство("Провести") Тогда	// alo Провести
				СтруктураВложения.Вставить("Провести", Вложение.Провести);
			КонецЕсли;
			Документы1С = Новый СписокЗначений;
			Документы1С.Добавить(?(Вложение.Свойство("Документ1С"),Вложение.Документ1С, СтрокаСпискаДокументов.СоставПакета[0].Значение));
			СтруктураВложения.Вставить("Документы1С", Документы1С); 
			Если Вложение.Свойство("ИмяФайла") Тогда   // если добавляли в пакет внешний файл. Это вложение не может быть первым, т.к. с первого берутся сведения об отправителе, получателе
				СтруктураВложения.Вставить("ПолноеИмяФайла", Вложение.ПолноеИмяФайла);
				СтруктураВложения.Вставить("ИмяФайла", Вложение.ИмяФайла);
				СтруктураВложения.Вставить("XMLДокумента", ?(Вложение.Свойство("XMLДокумента"),Вложение.XMLДокумента,""));
				СтруктураВложения.Вставить("СтруктураФайла", ?(Вложение.Свойство("СтруктураДокумента"),Вложение.СтруктураДокумента, Новый Структура));
			ИначеЕсли Вложение.Свойство("СтруктураДокумента") Тогда // формируем xml документов
				
				СтруктураФайла = Вложение["СтруктураДокумента"];
				СтруктураВложения.Вставить("СтруктураФайла", СтруктураФайла);
				
				Если Кэш.Парам.ИспользоватьГенератор 
					И Контекст.ФайлДанные.Свойство("ИспользоватьГенератор")
					И Контекст.ФайлДанные.ИспользоватьГенератор = Истина Тогда
					
					ШаблонXML = "";
					фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПрименитьПодстановку", "Файл_Шаблон","Файл_Шаблон_" + СтрЗаменить(Вложение.ВерсияФормата, ".", "_"), Кэш);
					Если Не фрм = Ложь Тогда
						ОшибкаФормирования = Ложь;
						РезультатПодставновки = фрм.ПрименитьПодстановку(Кэш, Вложение, ОшибкаФормирования, МассоваяОтправка);
						Если ОшибкаФормирования Тогда
							Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатПодставновки);
						Иначе
							ШаблонXML = РезультатПодставновки;
						КонецЕсли;
					КонецЕсли;
				Иначе
					
					ШаблонXML = сбисПолучитьXMLФайлаИзСтруктуры(Кэш, СтруктураВложения);
										
				КонецЕсли;
				
				СтруктураВложения.Вставить("XMLДокумента", ШаблонXML);
				
			Иначе //xml формируется без инишки
                СтруктураВложения.Вставить("СтруктураФайла", Вложение.СтруктураФайла);
                СтруктураВложения.Вставить("XMLДокумента", Вложение.XMLДокумента);
			КонецЕсли;
			МассивВложений.Добавить(СтруктураВложения);
		КонецЦикла;
		Если Кэш.ДопВложение.Количество()>0 Тогда
			Для Каждого Вложение Из Кэш.ДопВложение Цикл
				МассивВложений.Добавить(Вложение);
			Конеццикла;
		КонецЕсли;
		счПакетов = счПакетов+1;
		Если МассивВложений.Количество()>0 Тогда
			ПолныйСоставПакета.Вставить("Вложение", МассивВложений);
			Если НЕ Пакет.Свойство("Конверт") Тогда  // если нет структуры конверта, то берем все с первого вложения
				ОснованиеДляПакета = МассивВложений[0];
				Если ТипЗнч(ОснованиеДляПакета.Отправитель) = Тип("Структура") Тогда
					СтрНашаОрганизация = ОснованиеДляПакета.Отправитель;
				Иначе
					СтрНашаОрганизация = ОснованиеДляПакета.СтруктураФайла.Файл.Документ[ОснованиеДляПакета.Отправитель];
				КонецЕсли;
				Если ТипЗнч(ОснованиеДляПакета.Получатель) = Тип("Структура") Тогда
					СтрПолучатель = ОснованиеДляПакета.Получатель;
				Иначе
					СтрПолучатель = ОснованиеДляПакета.СтруктураФайла.Файл.Документ[ОснованиеДляПакета.Получатель];	
				КонецЕсли;
				СтрГрузополучатель = Неопределено;
				// Если грузополучатель является филиалом получателя, то получаетелем пакета ставим грузополучателя
				// Удалить, когда на онлайне появится данный функционал
				Если	ОснованиеДляПакета.Свойство("СтруктураФайла",					СтрГрузополучатель)
					И	СтрГрузополучатель.Файл.Документ.Свойство("Грузополучатель",	СтрГрузополучатель)
					И	СтрГрузополучатель.Свойство("СвЮЛ")
					И	СтрГрузополучатель.СвЮЛ.Свойство("ИНН")
					И	СтрПолучатель.Свойство("СвЮЛ")
					И	СтрГрузополучатель.СвЮЛ.ИНН = СтрПолучатель.СвЮЛ.ИНН
					И	СтрГрузополучатель.СвЮЛ.КПП <> СтрПолучатель.СвЮЛ.КПП Тогда 
					//Попытка
					//	оГрузополучатель = Кэш.Интеграция.ПолучитьИнформациюОКонтрагенте(Кэш, СтрГрузополучатель);
					//	оПолучатель = Кэш.Интеграция.ПолучитьИнформациюОКонтрагенте(Кэш, СтрПолучатель);
					//	Если оПолучатель.Идентификатор = оГрузополучатель.Идентификатор Тогда
					СтрПолучатель = СтрГрузополучатель;
					//	КонецЕсли;
					//Исключение
					//КонецПопытки;
				КонецЕсли;
				//UAA Добавляем код страны для отправляемых организаций.
				СтрНашаОрганизация	= сбисСкопироватьОбъектНаКлиенте(СтрНашаОрганизация);
				СтрПолучатель		= сбисСкопироватьОбъектНаКлиенте(СтрПолучатель);
				Если		СтрНашаОрганизация.Свойство("СвЮЛ")
					И	Не	СтрНашаОрганизация.СвЮл.Свойство("КодСтраны") Тогда
					СтрНашаОрганизация.СвЮЛ.Вставить("КодСтраны", "643");
				КонецЕсли;
				Если		СтрПолучатель.Свойство("СвЮЛ")
					И	Не	СтрПолучатель.СвЮл.Свойство("КодСтраны") Тогда
					СтрПолучатель.СвЮЛ.Вставить("КодСтраны", "643");
				КонецЕсли;
				
				ПолныйСоставПакета.Вставить("НашаОрганизация", 				СтрНашаОрганизация);
				ПолныйСоставПакета.Вставить("Контрагент", 					СтрПолучатель);
				ПолныйСоставПакета.Вставить("Ответственный", 				ОснованиеДляПакета.Ответственный);
				ПолныйСоставПакета.Вставить("Подразделение", 				ОснованиеДляПакета.Подразделение);	
				ПолныйСоставПакета.Вставить("Регламент", 					ОснованиеДляПакета.Регламент);
				ПолныйСоставПакета.Вставить("Тип", 							ТипПакета);
				ПолныйСоставПакета.Вставить("НеЗапускатьВДокументооборот",	НеЗапускатьВДокументооборот);
				ПолныйСоставПакета.Вставить("ДокументОснование",			ОснованиеДляПакета.ДокументОснование);
				ПолныйСоставПакета.Вставить("Примечание",					ОснованиеДляПакета.Примечание);
				ПолныйСоставПакета.Вставить("Сертификат",					ОснованиеДляПакета.Сертификат);
				Если ОснованиеДляПакета.Свойство("ДопПоля") Тогда   // alo ДопПоля
					ПолныйСоставПакета.Вставить("ДопПоля",	ОснованиеДляПакета.ДопПоля);
				КонецЕсли;
				Если ОснованиеДляПакета.Свойство("Провести") Тогда   // alo Провести
					ПолныйСоставПакета.Вставить("Провести",	ОснованиеДляПакета.Провести);
				КонецЕсли;
				ОсновнойДокумент = СтрокаСпискаДокументов.СоставПакета[0].Значение;
				ИмяДокумента = ПолучитьРеквизитМетаданныхОбъекта(ОсновнойДокумент, "Имя");
				
				//KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ) --> 2 +
				Если Пакет.Свойство("ПользовательскийИдентификатор") Тогда 
					ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор", Пакет.ПользовательскийИдентификатор);
				Иначе
					//если вручную не назначен идентификатор и регламент подразумевает отдельное хранение статусов - guid выдается новый и не будет совпадать с guid документа
					Если ПолныйСоставПакета.Свойство("Регламент") 
						И ПолныйСоставПакета.Регламент.Свойство("Название") 
						И НЕ МассивСтатусРегламент.Найти(ПолныйСоставПакета.Регламент.Название) = Неопределено Тогда
						//проверка, нет ли ранее сохраненного ид редакция
						фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
						ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(ОсновнойДокумент,ГлавноеОкно.КаталогНастроек,ПолныйСоставПакета.Регламент.Название+"ДокументСБИС_Ид",Кэш.Ини);
						//если первая отправка - новый ид
						ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор",ИмяДокумента+":"+?( ЗначениеЗаполнено(ИдДок), ИдДок,строка(Новый УникальныйИдентификатор) ) );	
					КонецЕсли;
					
					Если НЕ ПолныйСоставПакета.Свойство("ПользовательскийИдентификатор") Тогда
						ПолныйСоставПакета.Вставить("ПользовательскийИдентификатор",ИмяДокумента+":"+строка(ОсновнойДокумент.УникальныйИдентификатор()));
					КонецЕсли;
				КонецЕсли;
				//<--KES 050751151 Статусы в разрезе регламентов (ОТПРАВКА ПАКЕТА ДОКУМЕНТОВ)
			КонецЕсли;
		Иначе
			// Сюда попадаем, если ПолучитьДанныеИзДокумента1С, а соответственно и ПрочитатьДокумент возвращает Истину при пустых табличных частях
			Если Кэш.Свойство("РезультатОтправки") Тогда
				Кэш.РезультатОтправки.НеСформировано = Кэш.РезультатОтправки.НеСформировано+1;
				Кэш.РезультатОтправки.ОшибкиДоОтправки = Кэш.РезультатОтправки.ОшибкиДоОтправки + 1;
				ДобавитьОшибкуВРезультатОтправки(Кэш, "Документ не сформирован", "В документе "+строка(СтрокаСпискаДокументов.СоставПакета[0].Значение)+" не заполнены табличные части. Электронный документ не сформирован.", СтрокаСпискаДокументов.СоставПакета[0].Значение, 726)
			Иначе
				Сообщить("В документе "+строка(СтрокаСпискаДокументов.СоставПакета[0].Значение)+" не заполнены табличные части. Электронный документ не сформирован.");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		МассивПакетов.Добавить(ПолныйСоставПакета);
	КонецЦикла;
	
	Возврат МассивПакетов;
	
КонецФункции
&НаКлиенте
Функция ПодготовитьСтруктуруДокументаСбис(СтрокаСпискаДокументов, Кэш) Экспорт
	// функция формирует структуру данных по пакету электронных документов, необходимую для его предварительного просмотра и загрузки в 1С
	ГлавноеОкно = Кэш.ГлавноеОкно;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("НайтиДокументы1СПоПакетуСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	МассивПакетов = Новый Массив;
	ПолныйСоставПакета = Новый Структура;
	
	Для каждого Строка из СтрокаСпискаДокументов.СоставПакета Цикл		
		Документ = Строка.Значение;
		ИдентификаторПакета = Строка.Значение.Идентификатор;
		//+tda//Если интеграция через каталог, передаём не идентификатор, а сам пакет
		Если Кэш.Парам.СпособОбмена = 1 Тогда
			ИдентификаторПакета = Строка.Значение;
		КонецЕсли;
		//-tda//
		ПолныйСоставПакета = Кэш.Интеграция.ПрочитатьДокумент(Кэш, ИдентификаторПакета);
		Если ПолныйСоставПакета = Ложь Тогда
			Продолжить;
		КонецЕсли;
		МассивСлужебных = Новый Массив;
		Если ПолныйСоставПакета.Свойство("Вложение") Тогда
			фрм.НайтиДокументы1СПоПакетуСБИС(ПолныйСоставПакета, Кэш.Ини, ГлавноеОкно.КаталогНастроек, МассивСлужебных);
			// Удалим служебные вложения
			счУдаленных = 0;
			Для Каждого Элемент Из МассивСлужебных Цикл
				ПолныйСоставПакета.Вложение.Удалить(Элемент-счУдаленных);
				счУдаленных = счУдаленных+1;
			КонецЦикла;
			МассивПакетов.Добавить(ПолныйСоставПакета);
		ИначеЕсли	ТипЗнч(СтрокаСпискаДокументов) = Тип("Структура") 
			И	СтрокаСпискаДокументов.Свойство("ВернутьПустойСоставПакета")
			И	СтрокаСпискаДокументов.ВернутьПустойСоставПакета Тогда
			МассивПакетов.Добавить(ПолныйСоставПакета);
		Иначе
			Сообщить("В пакете "+ПолныйСоставПакета.Название+" отсутствуют вложения.");
		КонецЕсли;
		Возврат МассивПакетов;
	КонецЦикла;	
	Возврат МассивПакетов;
	
КонецФункции
&НаКлиенте
Функция сбисТекстИзBase64(ДвоичныеДанныеBase64, ДополнительныеПараметры=Неопределено) Экспорт
	ИмяВремФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанныеФайла = Base64Значение(ДвоичныеДанныеBase64);
	ДвоичныеДанныеФайла.Записать(ИмяВремФайла);
	Текст = Новый ЧтениеТекста(ИмяВремФайла);
	XMLФайла = Текст.Прочитать();
	Если Найти(XMLФайла, "encoding=""UTF-8""")>0 Тогда
		Текст = Новый ЧтениеТекста(ИмяВремФайла, КодировкаТекста.UTF8);
		XMLФайла = Текст.Прочитать();
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
	КонецПопытки;
	Попытка
		Если Лев(XMLФайла,4)="%PDF" Тогда // для PDF-файла иногда возвращается крокозябра, которая потом вызывает ошибку передачи данных между клиентом и сервером, несмотря на то, что это строка
			Возврат "";
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат XMLФайла;
КонецФункции
&НаКлиенте
Функция УдалитьАтрибутXmlns(ТекстXML) Экспорт 
	Результат = ТекстXML;
	Пока Найти(Результат, "xmlns") > 0 Цикл
		НачалоАтрибута = Найти(Результат, "xmlns");
		ПозицияОткрывающейКавычки = Найти(Сред(Результат ,НачалоАтрибута), """");
		ПозицияЗакрывающейКавычки = Найти(Сред(Результат ,НачалоАтрибута + ПозицияОткрывающейКавычки), """");
		Результат = СтрЗаменить(Результат, Сред(Результат, НачалоАтрибута, ПозицияОткрывающейКавычки + ПозицияЗакрывающейКавычки), "");
	КонецЦикла;
	Возврат Результат;	
КонецФункции
&НаСервереБезКонтекста
Функция сбисПодтипПоУмолчанию(Тип) Экспорт
	Если Тип = "ЭДОНакл" Тогда
		Возврат "1175010";
	ИначеЕсли Тип = "СчФктр" Тогда
		Возврат "1115125";
	ИначеЕсли Тип = "АктВР" Тогда
		Возврат "1175012";
	ИначеЕсли Тип = "счФактКор" Тогда
		Возврат "1115127";
	ИначеЕсли Тип = "Заказ" Тогда
		Возврат "Заказ";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция УпорядочитьВложенияДляЗагрузки(СписокВесов, ПолныйСоставПакета) Экспорт
	СписокВесов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	УпорядоченныйСоставПакета = Новый Массив;
	Для Каждого Элемент Из СписокВесов Цикл
		Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
			Если Вложение.Свойство("Вес") и Элемент.Значение = Вложение.Вес Тогда
				УпорядоченныйСоставПакета.Добавить(Вложение);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	Возврат УпорядоченныйСоставПакета;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруОтветственного(Кэш,Контекст) Экспорт
	// функция формирует структуру ответственного,который проставляется на пакете документов при отправке
	ОтветственныйСтруктура = Новый Структура;
	Если Кэш.Парам.ВариантВыгрузкиОтвПодр <> 2 Тогда
		Ответственный = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Ответственный) Тогда
			ОтветственныйИД = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Идентификатор", Контекст.ФайлДанные, Кэш);
			Если Не ЗначениеЗаполнено(ОтветственныйИД) Тогда
				Попытка
					ОтветственныйИД = строка(Ответственный.УникальныйИдентификатор());
				Исключение
					ОтветственныйИД = "";
				КонецПопытки;
			КонецЕсли;
			ОтветственныйФамилия = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Фамилия", Контекст.ФайлДанные, Кэш);
			Если ЗначениеЗаполнено(ОтветственныйФамилия) Тогда  // если фио в базе лежит по отдельным полям
				ОтветственныйИмя = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Имя", Контекст.ФайлДанные, Кэш);	
				ОтветственныйОтчество = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_Отчество", Контекст.ФайлДанные, Кэш);
				ОтветственныйСтруктура = Новый Структура("Фамилия,Имя,Отчество,Идентификатор", ОтветственныйФамилия, ОтветственныйИмя, ОтветственныйОтчество, ОтветственныйИД);
				//ОтветственныйСтруктура = Новый Структура("Фамилия,Имя,Отчество", ОтветственныйФамилия, ОтветственныйИмя, ОтветственныйОтчество);
			Иначе  // если фио в базе лежит в одном поле
				ОтветственныйФИО = Кэш.ОбщиеФункции.РассчитатьЗначение("Ответственный_ФИО", Контекст.ФайлДанные, Кэш);
				Если ЗначениеЗаполнено(ОтветственныйФИО) Тогда
					ОтветственныйСтруктура = Кэш.ОбщиеФункции.сбисПолучитьФИО(ОтветственныйФИО);
					ОтветственныйСтруктура.Вставить("Идентификатор", ОтветственныйИД);
				КонецЕсли;
			КонецЕсли;
			Если Кэш.Парам.ВариантВыгрузкиОтвПодр = 0 Тогда
				ОтветственныйСтруктура.Вставить("Создать", "Да");	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ОтветственныйСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруПодразделения(Кэш,Контекст) Экспорт
	// функция формирует структуру подразделения,которое проставляется на пакете документов при отправке    
	ПодразделениеСтруктура = Новый Структура;
	Если Кэш.Парам.ВариантВыгрузкиОтвПодр <> 2 Тогда
		Подразделение = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение", Контекст.ФайлДанные, Кэш);
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ПодразделениеИдентификатор = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение_Идентификатор", Контекст.ФайлДанные, Кэш);
			Если ЗначениеЗаполнено(ПодразделениеИдентификатор) Тогда
				ПодразделениеИД = ПодразделениеИдентификатор;
			Иначе    
				Попытка
					ПодразделениеИД = строка(Подразделение.УникальныйИдентификатор());
				Исключение
					ПодразделениеИД = "";
				КонецПопытки;
			КонецЕсли;
			ПодразделениеНазвание = Кэш.ОбщиеФункции.РассчитатьЗначение("Подразделение_Название", Контекст.ФайлДанные, Кэш);
			ПодразделениеСтруктура.Вставить("Название", ПодразделениеНазвание);
			ПодразделениеСтруктура.Вставить("Идентификатор", ПодразделениеИД);
			Если Кэш.Парам.ВариантВыгрузкиОтвПодр = 0 Тогда
				ПодразделениеСтруктура.Вставить("Создать", "Да");    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ПодразделениеСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьСтруктуруРегламента(Кэш,Контекст) Экспорт
	// функция формирует структуру регламента,который проставляется на пакете документов при отправке	
	РегламентСтруктура = Новый Структура;
	РегламентНазвание = Кэш.ОбщиеФункции.РассчитатьЗначение("Регламент_Название", Контекст.ФайлДанные, Кэш);
	Если ЗначениеЗаполнено(РегламентНазвание) Тогда
		РегламентСтруктура.Вставить("Название", РегламентНазвание);
	КонецЕсли;
	РегламентИдентификатор = Кэш.ОбщиеФункции.РассчитатьЗначение("РегламентИдентификатор", Контекст.ФайлДанные, Кэш);
	Если РегламентИдентификатор<>Неопределено Тогда
		РегламентСтруктура.Вставить("Идентификатор", РегламентИдентификатор);
	КонецЕсли;
	Возврат РегламентСтруктура;
КонецФункции
&НаКлиенте
Функция ПолучитьМассивОснований(Кэш,Контекст) Экспорт
	// функция формирует массив с данными документов-оснований,которые указываются на пакете документов при отправке	
	ОснованияМассив = Новый Массив;
	Если Контекст.ФайлДанные.Свойство("мДокументОснование") Тогда
		Для Каждого Параметр Из Контекст.ФайлДанные.мДокументОснование Цикл
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст.ФайлДанные,Параметр.Значение);
			Основание = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"ДокументОснование",Контекст.ФайлДанные,Основание);
			Если Основание.Свойство("Дата") и ЗначениеЗаполнено(Основание.Дата) и Основание.Свойство("Номер") и ЗначениеЗаполнено(Основание.Номер) Тогда
				ОснованияМассив.Добавить(Основание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ОснованияМассив;
КонецФункции
&НаКлиенте
Функция ЗаполнитьРеквизитыОснованийПакета(СоставПакета, Кэш) Экспорт
	// функция заполняет дату, номер, тип документов-оснований пакета	
	Если СоставПакета.Свойство("ДокументОснование") Тогда
		Для Каждого ДокОснование Из СоставПакета.ДокументОснование Цикл
			Попытка
				Если Не ЗначениеЗаполнено(ДокОснование.Документ.Дата) Тогда
					ПакетОснование = Кэш.Интеграция.ПрочитатьДокумент(Кэш,ДокОснование.Документ.Идентификатор);
					ДокОснование.Документ.Дата = ПакетОснование.Дата;
					ДокОснование.Документ.Номер = ПакетОснование.Номер;
					ДокОснование.Документ.Тип = ПакетОснование.Тип;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Возврат СоставПакета;
КонецФункции
&НаКлиенте
Функция ЗаполнитьАтрибуты(Кэш,Раздел,Ини,СтруктураДокумента) Экспорт
	// Функция используется при формировании структуры файла при выгрузке документа 1С
	// С помощью данной функции в структуру файла добавляются атрибуты, которые описаны в файле настроек в узлах типа "Файл_", "Документ_", "ТаблДок_"
	Раздел = Раздел+"_";
	Длина = СтрДлина(Раздел);
	Для Каждого Параметр Из ини Цикл
		Если  Лев(Параметр.Ключ,Длина)=Раздел Тогда
			ЗначениеПараметра = Кэш.ОбщиеФункции.РассчитатьЗначение(Параметр.Ключ, Ини, Кэш);
			СтруктураДокумента.Вставить(Сред(Параметр.Ключ,Длина+1),ЗначениеПараметра);
			Ини[Параметр.Ключ] = ЗначениеПараметра;
		КонецЕсли;
	КонецЦикла;
КонецФункции	
&НаКлиенте
Процедура ДобавитьОшибкуВРезультатОтправки(Кэш, ТекстОшибки, РасширенноеОписаниеОшибки, Документ1С, КодОшибки = 100) Экспорт
	Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
	ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
	Если ЭлементСписка=Неопределено Тогда
		Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
	КонецЕсли;
	//AU изменена структура в детализации ошибок для возможности проброса дампа в сервис статистики
	ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия=Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
	КонецЕсли;
	СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С,Сообщение,СтруктураОшибки", Документ1С, РасширенноеОписаниеОшибки, Новый Структура("message,details,code", ТекстОшибки, РасширенноеОписаниеОшибки, КодОшибки));
	ЭлементСоответствия.Добавить(СтрокаВСоответствие);
	
КонецПроцедуры	
&НаКлиенте
Функция сбисОпределитьИниДляЗагрузки(Кэш, Вложение, ФорматВерсияФайла) Экспорт
	Попытка
		// Проверяем возможность загрузки вложения. Из раздела Полученные загружаем только входящие, из Отправленные только исходящие вложения.
		// Если Вложение.Направление = "Входящий" и (Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "8") Тогда//Для сопоставления из раздела задач       // попробуем убрать условие на текущий раздел, так как мешает загружать документы, созданные в кабинете
		Если Вложение.Направление = "Входящий" Тогда
			ИмяИни = ФорматВерсияФайла;
			Если НЕ Кэш.Ини.Свойство(ИмяИни) Тогда // если нет файла настроек со старым именем, то пытаемся найти с новым
				ИмяИни = "Загрузка_"+Вложение.Направление+"_"+ФорматВерсияФайла;
			КонецЕсли;
			// ИначеЕсли Вложение.Направление = "Исходящий" и (Кэш.Текущий.Раздел = "2" ИЛИ Кэш.Текущий.Раздел = "7") Тогда 
		ИначеЕсли Вложение.Направление = "Исходящий" Тогда
			ИмяИни = "Загрузка_"+Вложение.Направление+"_"+ФорматВерсияФайла;
		Иначе
			ВызватьИсключение("");
		КонецЕсли;
		Если Кэш.Ини.Свойство(ИмяИни) Тогда
			Возврат Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;	
КонецФункции

Процедура ЗаполнитьСтруктуруИзШапкиДокумента1С(СтруктураДокОбъект,Документ1С) Экспорт
	Реквизиты = Документ1С.Метаданные().Реквизиты;	
	Для Каждого Реквизит Из Реквизиты Цикл 
		СтруктураДокОбъект.Вставить(Реквизит.Имя, Документ1С[Реквизит.Имя]);
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Функция ЗаполнитьСтруктуруЭлементаСправочника(Кэш,СтрТабл,СтруктураФайла,СтруктураНоменклатура)  Экспорт
	//Функция заполняет структуру для создания элемента справочника 
	//Если это Наименование или полное наименование, то записываем в структуру данные из места файла, указанного в инишке 
	Переменные = Новый Структура;
	фрм = сбисПолучитьФорму("Документ_Шаблон");
	Для Каждого Элемент Из Кэш.Ини.Конфигурация Цикл
		Если Лев(Элемент.Ключ,13) = "Номенклатура_" Тогда
			Если Элемент.Значение.Свойство("Значение") Тогда
				Если Элемент.Значение.Свойство("Данные") Тогда
					фрм.ЗаполнитьЗначениеРеквизитаИзФайла(Элемент.Значение, СтрТабл, СтруктураНоменклатура,Кэш);						
				КонецЕсли;
				Если Элемент.Значение.Свойство("Вычислить") Тогда
					Контекст = Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СтрТабл", Кэш.Ини.Конфигурация, СтруктураНоменклатура, Переменные, СтруктураФайла, СтрТабл);
					ЗначениеРеквизита = фрм.РассчитатьЗначение(Элемент.Значение.Вычислить,Контекст,Кэш);
					фрм.ЗаполнитьЗначениеРеквизита(ЗначениеРеквизита, Элемент.Значение.Значение, СтруктураНоменклатура, Переменные);	
				КонецЕсли;
				Если Элемент.Значение.Свойство("ВычислитьНаСервере") Тогда
					ЗначениеРеквизита = фрм.РассчитатьЗначениеНаСервере(Элемент.Значение.ВычислитьНаСервере,Новый Структура("Ини, Документ, Переменные, СтруктураФайла, СтрокаФайла", Кэш.Ини.Конфигурация, СтруктураНоменклатура, Переменные, СтруктураФайла, СтрТабл));
					фрм.ЗаполнитьЗначениеРеквизитаНаСервере(ЗначениеРеквизита, Элемент.Значение.Значение, СтруктураНоменклатура, Переменные);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//Если Ини.Свойство("Номенклатура_Наименование") Тогда 
	//	Реквизит1С = Ини["Номенклатура_Наименование"].Значение;
	//	ЗначениеИзФайла=Ини["Номенклатура_Наименование"].Данные;
	//	СтруктураНоменклатура.Вставить(сред(Реквизит1С,Найти(Реквизит1С,".")+1),ДанныеДокумента[ЗначениеИзФайла]);
	//КонецЕсли;
	//Если Ини.Свойство("Номенклатура_ПолноеНаименование") Тогда 
	//	Реквизит1С = Ини["Номенклатура_ПолноеНаименование"].Значение;
	//	ЗначениеИзФайла=Ини["Номенклатура_ПолноеНаименование"].Данные;
	//	СтруктураНоменклатура.Вставить(сред(Реквизит1С,Найти(Реквизит1С,".")+1),ДанныеДокумента[ЗначениеИзФайла]);
	//КонецЕсли;
	////Записываем комментарий
	//Если Ини.Свойство("Номенклатура_Комментарий") Тогда 
	//	Реквизит1С = Ини["Номенклатура_Комментарий"].Значение;
	//	ЗначениеРеквизита = "Создано обработкой online.sbis " + ТекущаяДата(); 
	//	СтруктураНоменклатура.Вставить((сред(Реквизит1С,Найти(Реквизит1С,".")+1)),ЗначениеРеквизита);
	//КонецЕсли;
	////Для реквизита единица измерения мы должны создать или найти существующий элемент справочника единицы измерения
	//Если Ини.Свойство("Номенклатура_ЕдиницаИзмерения") Тогда 
	//	СправочникЕдИзм = РассчитатьЗначениеНаСервере("ЕдиницаИзмерения",Новый Структура("ини",Ини));  //Определяем объект справочника единиц измерения
	//	РеквизитЕдИзм = Ини["Номенклатура_ЕдиницаИзмерения"].Значение;     
	//	ЕдиницаИзмерения=Неопределено;
	//	Если СправочникЕдИзм = Неопределено Тогда
	//		Сообщить("В настройках не указан справочник для загрузки/создания единиц измерения");
	//	Иначе
	//		Попытка                                         					//Пытаемся взять код единицы измерения, указанный в файле
	//			КодЕдИзм=ДанныеДокумента["ОКЕИ"];
	//		Исключение
	//			КодЕдИзм="";
	//		КонецПопытки;
	//		Попытка                                        						//Пытаемся взять название единицы измерения, указанное в файле
	//			НазваниеЕдИзм=ДанныеДокумента["ЕдИзм"];
	//		Исключение
	//			НазваниеЕдИзм="";
	//		КонецПопытки;
	//		Если СтрДлина(КодЕдИзм)>0 Тогда                    	 			//Тогда сначала ищем уже существующую карточку по коду
	//			ЕдиницаИзмерения = СправочникЕдИзм.НайтиПоКоду(КодЕдИзм,Истина);
	//		КонецЕсли;
	//		Если ЕдиницаИзмерения=Неопределено И СтрДлина(НазваниеЕдИзм)>0 Тогда //Если не находим, то пытаемся найти по наименованию
	//			ЕдиницаИзмерения = СправочникЕдИзм.НайтиПоНаименованию(НазваниеЕдИзм,Истина);
	//		КонецЕсли;	
	//		Если ЕдиницаИзмерения=Неопределено Тогда 				//Если не находим, то пытаемся создать новую карточку единицы измерения по данным из файла
	//			ЕдиницаИзмерения = СправочникЕдИзм.СоздатьЭлемент();
	//			ЕдиницаИзмерения.Код = КодЕдИзм;		 
	//			ЕдиницаИзмерения.НаименованиеПолное = НазваниеЕдИзм;
	//			ЕдиницаИзмерения.Наименование = НазваниеЕдИзм;
	//			Попытка
	//				ЕдиницаИзмерения.Записать();
	//			Исключение
	//				ЕдиницаИзмерения=Неопределено;
	//				Сообщить(ОписаниеОшибки());
	//			КонецПопытки;
	//		КонецЕсли;
	//		Если ЕдиницаИзмерения<>Неопределено Тогда 						//Если единица измрения нашлась или мы создали новую, то записываем ее в реквизит
	//			СтруктураНоменклатура.Вставить(сред(РеквизитЕдИзм,Найти(РеквизитЕдИзм,".")+1),ЕдиницаИзмерения);	
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если ЕдиницаИзмерения=Неопределено И ЗначениеЗаполнено(Ини["Номенклатура_Услуга"]) Тогда    							//Если нет единицы измерения, тогда записываем реквизит услуга со значение Истина
	//		РеквизитУслуга = Ини["Номенклатура_Услуга"].Значение;
	//		СтруктураНоменклатура.Вставить(сред(РеквизитУслуга,Найти(РеквизитУслуга,".")+1),Истина);
	//	КонецЕсли;
	//КонецЕсли;
КонецФункции
&НаСервереБезКонтекста
Функция сбисНомерНаПечать(НомерДок) Экспорт
	// функция обрезает префикс в номере документа	
	НомерНаПечать = НомерДок;
	// удаление ведущих нулей
	Пока Лев(НомерНаПечать, 1)="0" Цикл
		НомерНаПечать = Сред(НомерНаПечать, 2);
	КонецЦикла;
	Если Лев(НомерНаПечать, 1) = "-" Тогда
		НомерНаПечать = Сред(НомерНаПечать, 2);
	КонецЕсли;
	Возврат НомерНаПечать;
КонецФункции
&НаКлиенте
Функция ПолучитьФильтр(Кэш)
	// функция формирует структуру фильтров, которые используются в запросе документов 1С при построении списка документов в разделах Продажа и Покупка	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ПараметрыФильтра = Новый Структура;
	
	ПараметрыФильтра.Вставить( "ФильтрДатаНач", ГлавноеОкно.ФильтрДатаНач); 
	ПараметрыФильтра.Вставить( "ФильтрДатаКнц", ГлавноеОкно.ФильтрДатаКнц); 
	ПараметрыФильтра.Вставить( "ФильтрКонтрагент", ГлавноеОкно.ФильтрКонтрагент);
	ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", ГлавноеОкно.ФильтрКонтрагентПодключен);
	ПараметрыФильтра.Вставить( "ФильтрДокумент", ГлавноеОкно.ФильтрДокумент);
	ПараметрыФильтра.Вставить( "ФильтрОрганизация", ГлавноеОкно.ФильтрОрганизация);
	ПараметрыФильтра.Вставить( "ФильтрСостояние", ГлавноеОкно.ФильтрСостояние);
	ПараметрыФильтра.Вставить( "ФильтрОтветственный", ГлавноеОкно.ФильтрОтветственный);
	ПараметрыФильтра.Вставить( "РазмерСтраницы", ГлавноеОкно.ЗаписейНаСтранице1С ); 
	ПараметрыФильтра.Вставить( "Страница", ГлавноеОкно.ФильтрСтраница );
	ПараметрыФильтра.Вставить( "ВсеДокументы", ГлавноеОкно.ВсеДокументы );
	ПараметрыФильтра.Вставить( "ФильтрМаска", ГлавноеОкно.ФильтрМаска ); // alo СтатусГос
	ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
	// Добавляем пользовательские фильтры
	Если Кэш.ПараметрыФильтра.Количество()>0 Тогда
		ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
		Для Каждого Элемент Из Кэш.ПараметрыФильтра Цикл
			ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыФильтра;	
КонецФункции	
&НаКлиенте
Функция сбисОбновитьРеестрДокументов1С(Ини, Кэш) Экспорт
	// функция формирует данные для показа реестров документов 1С в разделах Продажа и Покупка	
	СтруктураДляОбновленияФормы = Новый Структура;
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	//ТаблДок = ГлавноеОкно.Таблица_РеестрДокументов;
	//ТаблДок.Очистить();
	ПараметрыФильтра = ПолучитьФильтр(Кэш);
	ТекстЗапроса = РассчитатьЗначение("ЗапросСпискаДокументов",Ини, ГлавноеОкно.Кэш);
	МассивДокументов1С = ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, ГлавноеОкно.КаталогНастроек);
	ГлавноеОкно.ФильтрЕстьЕще = ПараметрыФильтра.ФильтрЕстьЕще;
	ГлавноеОкно.ФильтрСтраница = ПараметрыФильтра.Страница;
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьСтатусыВТаблицеДокументов1С",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	Если фрм <> Ложь Тогда
		МассивДокументов1С = фрм.ЗаполнитьСтатусыВТаблицеДокументов1С(МассивДокументов1С, ПараметрыФильтра, Кэш.Ини, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрДокументов", МассивДокументов1С);
	Возврат СтруктураДляОбновленияФормы; 
КонецФункции
// << alo СтатусГос Устанавливаем видимость колонок таблицы
&НаКлиенте
Функция НастроитьКолонки(Ини, Кэш) Экспорт
	ИмяЭлементаТаблица = "Таблица_РеестрДокументов";
	ЭлементТаблица = Кэш.ГлавноеОкно.Элементы[ИмяЭлементаТаблица];
	Если Кэш.Свойство("РеестрДокументовКолонки") Тогда // привести в исходное состояние
		Для Каждого Колонка из ЭлементТаблица.ПодчиненныеЭлементы Цикл
			Колонка.видимость = ? (Кэш.РеестрДокументовКолонки.Найти(Колонка.Имя) = неопределено, Ложь, Истина);
		КонецЦикла;
	Иначе	// сохранить исходное состояние
		Кэш.вставить("РеестрДокументовКолонки", Новый Массив);
		Для Каждого Колонка из ЭлементТаблица.ПодчиненныеЭлементы Цикл
			Если Колонка.видимость Тогда
				Кэш.РеестрДокументовКолонки.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВидимыеКолонки = РассчитатьЗначение("Реестр1С_ВидимыеСтолбцы",Ини, Кэш);
	Если ЗначениеЗаполнено(ВидимыеКолонки) Тогда
		Колонки = Новый Массив;	
		Строка = СтрЗаменить(ВидимыеКолонки, ",", Символы.ПС);
		КолЭлементов = СтрЧислоСтрок(Строка);
		Для сч = 1 по КолЭлементов Цикл
			Колонки.Добавить(Новый Структура("Имя,Ини,Элемент",СокрЛП(СтрПолучитьСтроку(Строка,сч)),Новый Структура,Неопределено));
		КонецЦикла;
		
		Кэш.ГлавноеОкно.НастроитьКолонкиНаСервере(ИмяЭлементаТаблица, Колонки, Ини);	
	КонецЕсли;
КонецФункции	// alo СтатусГос >>
&НаСервереБезКонтекста
Функция ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, КаталогНастроек) Экспорт	
	// функция выполняет запрос документов 1С на основании файлов настроек и результат кладет в массив структур 	
	Запрос = Новый Запрос;
	Если НЕ ПараметрыФильтра.ВсеДокументы и ПараметрыФильтра.РазмерСтраницы<>"все" и ЗначениеЗаполнено(ПараметрыФильтра.РазмерСтраницы) и ПараметрыФильтра.Страница<>0 и Найти(нрег(ТекстЗапроса),"выбрать разрешенные") = 1 и ПараметрыФильтра.ФильтрСостояние = "Все документы" Тогда 
		ТекстЗапроса = Лев(ТекстЗапроса, 19) +" ПЕРВЫЕ "+Формат(Число(ПараметрыФильтра.РазмерСтраницы)*ПараметрыФильтра.Страница+1,"ЧН=0; ЧГ=0")+ Сред(ТекстЗапроса, 20);
		// добавляем упорядочивание только в случае выбора "ПЕРВЫЕ", т.к. иначе нельзя упорядочивать временную таблицу.
		// Без упорядочивания временной таблицы документы некорректно распределяются по страницам.
		ПозТчЗпт = Найти(ТекстЗапроса, ";");
		Если ПозТчЗпт>0 Тогда
			ТекстВТ = Лев(ТекстЗапроса, ПозТчЗпт-1);
			Если Найти(ВРег(ТекстВТ), "ПОМЕСТИТЬ")>0 и Найти(ВРег(ТекстВТ), ".ДАТА КАК ДАТА,")>0 и Найти(ВРег(ТекстВТ), ".НОМЕР КАК НОМЕР,")>0 Тогда
				Если ВРег(Прав(ТекстЗапроса, 39)) = "ДАТАДОКУМЕНТА УБЫВ, НОМЕРДОКУМЕНТА УБЫВ" Тогда
					ТекстЗапроса = ТекстВТ+" УПОРЯДОЧИТЬ ПО Дата УБЫВ, Номер УБЫВ"+Сред(ТекстЗапроса, ПозТчЗпт)	
				Иначе
					ТекстЗапроса = ТекстВТ+" УПОРЯДОЧИТЬ ПО Дата, Номер"+Сред(ТекстЗапроса, ПозТчЗпт);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТекущийДокумент", ПараметрыФильтра.ФильтрДокумент);
	Запрос.УстановитьПараметр("ЗначениеТекущийДокументЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрДокумент));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПараметрыФильтра.ФильтрДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПараметрыФильтра.ФильтрДатаКнц));	
	Запрос.УстановитьПараметр("ЗначениеДатаКонЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрДатаКнц));
	Запрос.УстановитьПараметр("Контрагент", ПараметрыФильтра.ФильтрКонтрагент);
	Запрос.УстановитьПараметр("ЗначениеКонтрагентЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрКонтрагент));
	Запрос.УстановитьПараметр("КонтрагентПодключен", ПараметрыФильтра.ФильтрКонтрагентПодключен);
	Запрос.УстановитьПараметр("ТекущаяОрганизация", ПараметрыФильтра.ФильтрОрганизация);
	Запрос.УстановитьПараметр("ЗначениеТекущаяОрганизацияЗаполнено", ЗначениеЗаполнено(ПараметрыФильтра.ФильтрОрганизация));
	Запрос.УстановитьПараметр("Ответственный", ПараметрыФильтра.ФильтрОтветственный);
	Запрос.УстановитьПараметр("Маска", СокрЛП(ПараметрыФильтра.ФильтрМаска)); // alo СтатусГос
	
	Если ПараметрыФильтра.Свойство("Пользовательские") Тогда
		Для Каждого Элемент Из ПараметрыФильтра.Пользовательские Цикл
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
	КонецЕсли;	
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
	Исключение
		Ошибка = ОписаниеОшибки();
		сообщить(Ошибка);
		возврат ложь;
	КонецПопытки;
	
	
	МассивДокументов = Новый Массив;
	
	Если НЕ ПараметрыФильтра.ВсеДокументы и ПараметрыФильтра.РазмерСтраницы<>"все" Тогда
		Если ПараметрыФильтра.Страница=0 Тогда	// последняя страница
			Если ПараметрыФильтра.ФильтрСостояние = "Все документы" Тогда    // если нет фильтра по состоянию, то сразу вычисляем номера записей для последней страницы
				РезультатТаблица = РезультатЗапроса.Выгрузить();
				РезультатТаблица.Свернуть("Документ");
				НомКнц = РезультатТаблица.Количество();
				КолСтраниц = НомКнц/Число(ПараметрыФильтра.РазмерСтраницы);
				ПараметрыФильтра.Страница = ?(КолСтраниц = Цел(КолСтраниц), Цел(КолСтраниц), Цел(КолСтраниц)+1);
				КолСтраницДо = ?(КолСтраниц = Цел(КолСтраниц), КолСтраниц-1, Цел(КолСтраниц));
				НомНач = КолСтраницДо*Число(ПараметрыФильтра.РазмерСтраницы)+1;
			Иначе   // если есть фильтр по состоянию, то последнюю страницу сможем определить только после перебора всех
				НомНач = 0;
				НомКнц = Выборка.Количество();
			КонецЕсли;
		Иначе
			НомНач = (ПараметрыФильтра.Страница-1)*Число(ПараметрыФильтра.РазмерСтраницы)+1;
			НомКнц = (ПараметрыФильтра.Страница)*Число(ПараметрыФильтра.РазмерСтраницы); 
		КонецЕсли;
	Иначе
		НомНач = 0;
		НомКнц = Выборка.Количество();
	КонецЕсли;
	сч = 0;	
	Пока Выборка.СледующийПоЗначениюПоля("Документ") Цикл //перебираем документы
		ИндексКартинки = -1;
		Если РезультатЗапроса.Колонки.Найти("СтатусЭД")<>Неопределено Тогда
			ИндексКартинки = сбисИндексКартинкиПоСтатусуЭДНаСервере(Выборка.СтатусЭД);					
			Если ПараметрыФильтра.ФильтрСостояние = "Все документы" или
				(ПараметрыФильтра.ФильтрСостояние = "Недоставленные" и (ИндексКартинки=1 или ИндексКартинки=2 или ИндексКартинки=9)) или
				((ПараметрыФильтра.ФильтрСостояние = "Требующие ответа" или ПараметрыФильтра.ФильтрСостояние = "Не получен ответ") и ИндексКартинки=4) или 
				(ПараметрыФильтра.ФильтрСостояние = "Утвержденные" и ИндексКартинки=6) или 
				(ПараметрыФильтра.ФильтрСостояние = "Отклоненные" и ИндексКартинки=5) или
				(ПараметрыФильтра.ФильтрСостояние = "С ошибками" и ИндексКартинки=3) или
				(ПараметрыФильтра.ФильтрСостояние = "Удаленные" и (ИндексКартинки=7 или ИндексКартинки=8)) или // alo
				(ПараметрыФильтра.ФильтрСостояние = "Удаленные контрагентом" и ИндексКартинки=7) или // alo
				(ПараметрыФильтра.ФильтрСостояние = "Удаленные мной" и ИндексКартинки=8) или // alo
				(ПараметрыФильтра.ФильтрСостояние = "Не отправленные" и ИндексКартинки=-1) Тогда
				сч = сч+1;
			Иначе
				//сч = сч-1; // alo чтобы на странице было именно то количество что указана в переключателе
				Продолжить;
			КонецЕсли;
		Иначе
			сч = сч+1;
		КонецЕсли;
		Если сч<НомНач Тогда 
			Продолжить;
		КонецЕсли;
		Если сч>НомКнц Тогда
			ПараметрыФильтра.ФильтрЕстьЕще = Истина;
			Прервать;
		КонецЕсли;
		СписокДокументов = Новый СписокЗначений;//список документов комплекта
		НоваяСтр = Новый Структура;
		// << alo СтатусГос
		Для Каждого Колонка из РезультатЗапроса.Колонки цикл
			НоваяСтр.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла; 
		НоваяСтр.Вставить("Документ1С", Выборка.Документ);
		Документы1С = Новый СписокЗначений;
		Документы1С.Добавить(Выборка.Документ);
		НоваяСтр.Вставить("Документы1С", Документы1С);
		НоваяСтр.Вставить("Проведен", сбисИндексКартинкиДокумента1С(Выборка.ДокументПроведен, Выборка.ДокументПометкаУдаления));
		НоваяСтр.Вставить("Статус", ИндексКартинки);
		
		НоваяСтр.Вставить("Дата", Выборка.ДатаДокумента);
		НоваяСтр.Вставить("Номер", сбисНомерНаПечать(Выборка.НомерДокумента));
		НоваяСтр.Вставить("Сумма", Выборка.СуммаДокумента);	// alo СтатусГос >>
		Если РезультатЗапроса.Колонки.Найти("ФайлНастроекДокумента")<>Неопределено и ЗначениеЗаполнено(Выборка.ФайлНастроекДокумента) Тогда
			ФайлНастроек = Выборка.ФайлНастроекДокумента;
		Иначе
			ФайлНастроек = "";
		КонецЕсли;
		СписокДокументов.Добавить(Выборка.Документ,ФайлНастроек);
		Если РезультатЗапроса.Колонки.Найти("Приложение")<>Неопределено Тогда
			Пока Выборка.Следующий() Цикл //перебираем все связанные документы
				Если ЗначениеЗаполнено(Выборка.Приложение) Тогда //если есть связанный документ
					Если РезультатЗапроса.Колонки.Найти("ФайлНастроекПриложения")<>Неопределено и ЗначениеЗаполнено(Выборка.ФайлНастроекПриложения) Тогда
						ФайлНастроек = Выборка.ФайлНастроекПриложения;
					Иначе
						ФайлНастроек = "";
					КонецЕсли;
					СписокДокументов.Добавить(Выборка.Приложение,ФайлНастроек);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
		НоваяСтр.Вставить("СоставПакета", СписокДокументов);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;
	
	Если ПараметрыФильтра.Страница=0 и ПараметрыФильтра.ФильтрСостояние <> "Все документы" Тогда	// последняя страница и установлен фильтр по состоянию
		НомКнц = МассивДокументов.Количество();
		КолСтраниц = НомКнц/Число(ПараметрыФильтра.РазмерСтраницы);
		ПараметрыФильтра.Страница = ?(КолСтраниц = Цел(КолСтраниц), Цел(КолСтраниц), Цел(КолСтраниц)+1);
		КолСтраницДо = ?(КолСтраниц = Цел(КолСтраниц), КолСтраниц-1, Цел(КолСтраниц));
		НомНач = КолСтраницДо*Число(ПараметрыФильтра.РазмерСтраницы)+1;
		МассивДокументовПоследнейСтраницы = Новый Массив;
		Для сч = НомНач По НомКнц Цикл
			МассивДокументовПоследнейСтраницы.Добавить(МассивДокументов[сч-1]);
		КонецЦикла;
		МассивДокументов = МассивДокументовПоследнейСтраницы;
	КонецЕсли;
	
	Возврат МассивДокументов;
КонецФункции
&НаКлиенте
Процедура ОбновитьПанельНавигации(Кэш) Экспорт
	// функция обновляет панель навигации при переходе по страницам в разделах Полученные и Отправленные	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Кнопки = сбисПолучитьПодчиненныеЭлементы(сбисЭлементФормы(ГлавноеОкно, "КоманднаяПанельНавигация"),"Кнопки");
	ТекущаяСтраница = ГлавноеОкно.ФильтрСтраница;
	ЕстьЕще = ГлавноеОкно.ФильтрЕстьЕще;
	сбисУстановитьСвойствоЭлементаФормы(Кнопки.НавигацияТекущаяСтраница, ТекущаяСтраница);
	Если ТекущаяСтраница = 1 Тогда
		Кнопки.НавигацияПерваяСтраница.Доступность = Ложь;
		Кнопки.НавигацияПредыдущаяСтраница.Доступность = Ложь;
	КонецЕсли;
	Если ТекущаяСтраница > 1 Тогда
		Кнопки.НавигацияПерваяСтраница.Доступность = Истина;
		Кнопки.НавигацияПредыдущаяСтраница.Доступность = Истина;
	КонецЕсли;
	Если Кэш.Текущий.Раздел = "1" или Кэш.Текущий.Раздел = "2" или Кэш.Текущий.Раздел = "7" или Кэш.Текущий.Раздел = "8" Тогда   // списочные методы с онлайна не возвращают последнюю страницу
		Кнопки.НавигацияПоследняяСтраница.Видимость = Ложь;
	Иначе
		Кнопки.НавигацияПоследняяСтраница.Видимость = Истина;
	КонецЕсли;		
	Если ЕстьЕще Тогда
		Кнопки.НавигацияПоследняяСтраница.Доступность = Истина;
		Кнопки.НавигацияСледующаяСтраница.Доступность = Истина;
	Иначе
		Кнопки.НавигацияПоследняяСтраница.Доступность = Ложь;
		Кнопки.НавигацияСледующаяСтраница.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры	
//Формирование структуры по xml документа
&НаСервереБезКонтекста
Функция ЗаполнитьСтруктуруФайла(Знач СтрокаXML) Экспорт
	// Функция формирует структуру по XML	
	СтруктураФайла = Новый Структура;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	ПостроительDOM = Новый ПостроительDOM; 
	Попытка
		//UAA переделал заколоченные узлы на контекст сериализации.
		ДокументДОМ = ПостроительDOM.Прочитать(ЧтениеXML);
		КонтекстВыполнения = Новый Структура("УзелКакМассив", Новый Массив);
		КонтекстВыполнения.УзелКакМассив.Добавить("СтрТабл");
		КонтекстВыполнения.УзелКакМассив.Добавить("ИтогТабл");
		КонтекстВыполнения.УзелКакМассив.Добавить("Основание");
		КонтекстВыполнения.УзелКакМассив.Добавить("ДопСведения");
		КонтекстВыполнения.УзелКакМассив.Добавить("ДопАдрЭл");
		КонтекстВыполнения.УзелКакМассив.Добавить("НомСредИдентТов");
		КонтекстВыполнения.УзелКакМассив.Добавить("НомУпак");
		КонтекстВыполнения.УзелКакМассив.Добавить("КИЗ");
		КонтекстВыполнения.УзелКакМассив.Добавить("СведПрослеж");
		ПрочитатьУзелDOM(ДокументДОМ.ПервыйДочерний, СтруктураФайла, КонтекстВыполнения);
	Исключение
	КонецПопытки;
	Возврат СтруктураФайла;
КонецФункции
&НаСервереБезКонтекста
Функция ПрочитатьУзелDOM(УзелDOM, Узел, КонтекстВыполнения) Экспорт 
	// Функция рекурсивно заполняет структуру из узла DOM	
	Уз = УзелDOM;
	Пока Уз<>Неопределено Цикл
		Если ТипЗнч(Уз) = Тип("ТекстDOM") Тогда
			//Узел.Вставить("Значение", Уз.ПолныйТекст);
			Если Узел.Количество() = 0 Тогда
				Узел = Уз.ПолныйТекст;
			Иначеесли не Узел.свойство("Параметр") тогда
				Узел.Вставить("Параметр", Уз.ПолныйТекст);
			КонецЕсли;	
			Возврат Узел;
		Иначе	
			Если Уз.Атрибуты.Количество() <> 0 или Уз.ПервыйДочерний <> Неопределено Тогда
				НоваяСтруктура = Новый Структура;
				Атрибуты = Уз.Атрибуты;
				Для каждого Атрибут из Атрибуты Цикл
					Попытка
						НоваяСтруктура.Вставить(Атрибут.ИмяУзла, Атрибут.ЗначениеУзла);
					Исключение
					КонецПопытки;
				КонецЦикла;	
				Если Не КонтекстВыполнения.УзелКакМассив.Найти(Уз.ИмяУзла) = Неопределено Тогда
				//Если Уз.ИмяУзла = "СтрТабл" или Уз.ИмяУзла = "ИтогТабл" или Уз.ИмяУзла = "Основание" или Уз.ИмяУзла = "ДопСведения" или Уз.ИмяУзла = "ДопАдрЭл" ИЛИ Уз.ИмяУзла = "НомСредИдентТов" ИЛИ Уз.ИмяУзла = "НомУпак" ИЛИ Уз.ИмяУзла = "КИЗ" Тогда//<--KES МОТП ИСМП
					Если Узел.Свойство(Уз.ИмяУзла) = Ложь Тогда
						МассивСтрок = Новый Массив;
					Иначе
						МассивСтрок = Узел[Уз.ИмяУзла];
					КонецЕсли;	
					МассивСтрок.Добавить(НоваяСтруктура);
					Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
				ИначеЕсли Уз.ИмяУзла = "Параметр" Тогда
					Если Узел.Свойство("Параметр") = Ложь Тогда
						//МассивСтрок = Новый Массив;
						Параметр = Новый Структура;    
					Иначе
						Параметр = Узел.Параметр;//сбис Никифоров
					КонецЕсли;    
					//МассивСтрок.Добавить(НоваяСтруктура);
					//Узел.Вставить(Уз.ИмяУзла, МассивСтрок);
					Попытка
						Параметр.Вставить(СтрЗаменить(СтрЗаменить(НоваяСтруктура.Имя,"-","")," ",""), НоваяСтруктура.Значение);
						Узел.Вставить(Уз.ИмяУзла, Параметр);
					Исключение
					КонецПопытки;
				ИначеЕсли Лев(Уз.ИмяУзла, 6) = "Список" Тогда
					Если Уз.ПервыйДочерний <> Неопределено Тогда
						мУз = УЗ.ПервыйДочерний;
						ИмяУзла = мУз.ИмяУзла;
						Если Не КонтекстВыполнения.УзелКакМассив.Найти(ИмяУзла) = Неопределено Тогда
						//Если ИмяУзла = "Параметр" или ИмяУзла = "СтрТабл" или ИмяУзла = "ИтогТабл" или ИмяУзла = "Основание" или ИмяУзла = "ДопСведения" или Уз.ИмяУзла = "ДопАдрЭл" ИЛИ ИмяУзла = "НомСредИдентТов" ИЛИ ИмяУзла = "НомУпак" ИЛИ ИмяУзла = "КИЗ" Тогда
							Пока мУз<>Неопределено Цикл
								ПрочитатьУзелDOM(мУз, Узел, КонтекстВыполнения);
								мУз = мУз.СледующийСоседний;
							КонецЦикла;
						Иначе
							МассивСтрок = Новый Массив;
							Пока мУз<>Неопределено Цикл
								ДочУзел = Новый Структура;
								ВложениеУзла = Неопределено;
								ПрочитатьУзелDOM(мУз, ДочУзел, КонтекстВыполнения);
								Если ТипЗнч(ДочУзел) = Тип("Структура") Тогда
									Для Каждого Элемент Из ДочУзел Цикл
										ВложениеУзла = Элемент.Значение;
										Прервать;
									КонецЦикла; 
									Если ВложениеУзла<>Неопределено Тогда
										МассивСтрок.Добавить(ВложениеУзла);
									КонецЕсли;
								КонецЕсли;
								мУз = мУз.СледующийСоседний;
							КонецЦикла;
							Узел.Вставить(ИмяУзла, МассивСтрок);
						КонецЕсли;
					КонецЕсли;
				Иначе	
					Узел.Вставить(Уз.ИмяУзла, НоваяСтруктура);
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
		Если Уз.ПервыйДочерний <> Неопределено и Лев(Уз.ИмяУзла, 6) <> "Список" Тогда
			Уз				= УЗ.ПервыйДочерний;
			УзелНаОбработку	= Узел[УЗ.РодительскийУзел.ИмяУзла];
			ДочУзел			= сбисСкопироватьОбъект(УзелНаОбработку);
			//Если это массив, то обрабатываем последнюю строку
			Если ТипЗнч(ДочУзел) = Тип("Массив") Тогда
				УзелНаЗаполнение = ДочУзел[УзелНаОбработку.Количество()-1];
				ПрочитатьУзелDOM(Уз, УзелНаЗаполнение, КонтекстВыполнения);
				ДочУзел[УзелНаОбработку.Количество()-1] = УзелНаЗаполнение;
			Иначе
				ПрочитатьУзелDOM(Уз, ДочУзел, КонтекстВыполнения);
			КонецЕсли;
			Если ТипЗнч(ДочУзел) = Тип("Структура") 
				И	Не	КонтекстВыполнения.УзелКакМассив.Найти(УЗ.РодительскийУзел.ИмяУзла) = Неопределено Тогда
				//И	(	УЗ.РодительскийУзел.ИмяУзла = "СтрТабл"
				//Или УЗ.РодительскийУзел.ИмяУзла = "ИтогТабл"
				//Или УЗ.РодительскийУзел.ИмяУзла = "Основание"
				//Или УЗ.РодительскийУзел.ИмяУзла = "ДопСведения"
				//Или УЗ.РодительскийУзел.ИмяУзла = "ДопАдрЭл"
				//Или УЗ.РодительскийУзел.ИмяУзла = "Параметр"
				//Или УЗ.РодительскийУзел.ИмяУзла = "НомСредИдентТов"
				//Или УЗ.РодительскийУзел.ИмяУзла = "НомУпак"
				//Или УЗ.РодительскийУзел.ИмяУзла = "КИЗ") Тогда
				сбисСкопироватьСтруктуру(УзелНаОбработку[УзелНаОбработку.Количество()-1], ДочУзел);
			Иначе	
				Узел.Вставить(УЗ.РодительскийУзел.ИмяУзла, ДочУзел);
			КонецЕсли;	
			Уз = Уз.РодительскийУзел;
		КонецЕсли;
		Если Лев(Уз.РодительскийУзел.ИмяУзла, 6) = "Список" Тогда
			Прервать;
		КонецЕсли;
		Уз = Уз.СледующийСоседний;
	КонецЦикла;
	
	Возврат Узел;
	
КонецФункции		
//Блок функций, использующихся при формировании структур документов
&НаКлиенте
Функция ПолучитьСторону(Кэш, знач Контекст) Экспорт
	// Функция формирует структуру Стороны (отправителя, получателя, поставщика, покупателя) в универсальном формате (3.01).	
	Участник = Новый Структура;
	Инн = РассчитатьЗначение("Сторона_ИНН",Контекст, Кэш);
	Если Инн=Неопределено или Инн="" Тогда
		// Бухов А. доп условие, для отправки документов организации без ИНН/КПП
		Если Не (Контекст.Свойство("ИностраннаяОрганизация") И Контекст.ИностраннаяОрганизация) Тогда
			Возврат Неопределено;
		КонецЕсли;
		// Бухов А. доп условие, для отправки документов организации без ИНН/КПП
	КонецЕсли;
	//UAA Всегда выгружаем код страны. Если не ино, либо не посчиталось, то 643
	ИностраннаяОрганизация = Ложь;
	СбисКодСтраны = "643";
	Если Контекст.Свойство("КодСтраны") Тогда
		ТекКодСтраны = РассчитатьЗначение("КодСтраны", Контекст, Кэш);
		Если ЗначениеЗаполнено(ТекКодСтраны) Тогда
			СбисКодСтраны = ТекКодСтраны;
			ИностраннаяОрганизация = СбисКодСтраны <> "643";
		КонецЕсли;
	КонецЕсли;	
	
	Инн = СокрЛП(Инн);
	// добавляем рассчитанные ИНН/КПП в Контекст для правильного расчета Идентификатора (если ИНН/КПП вычисляются функцией)
	// КПП для иностранной организации не заполняем
	Контекст.Сторона_ИНН = Инн;
	Если СтрДлина(СокрЛП(Инн))<>12 И НЕ ИностраннаяОрганизация Тогда
		КПП = РассчитатьЗначение("Сторона_КПП",Контекст, Кэш);
		Если Контекст.Свойство("КПППодразделения") и ЗначениеЗаполнено(Контекст.КПППодразделения) Тогда  // в счет-фактуре КПП контрагента можно указать прямо на документе (если у контрагента есть филиалы)
			КПП = РассчитатьЗначение("КПППодразделения",Контекст, Кэш);  
		КонецЕсли;
		Контекст.Сторона_КПП = КПП;
	КонецЕсли;
	Идентификатор = РассчитатьЗначение("Сторона_Идентификатор",Контекст, Кэш);
	Участник.Вставить("Идентификатор",Идентификатор);
	
	Название = РассчитатьЗначение("Сторона_Наименование",Контекст, Кэш);
	Если Контекст.Свойство("Сторона_Роль") Тогда
		Участник.Вставить("Роль",РассчитатьЗначение("Сторона_Роль",Контекст, Кэш));
	КонецЕсли;
	Участник.Вставить("Название",Название);
	
	GLN = РассчитатьЗначение("Сторона_GLN",Контекст, Кэш);
	Участник.Вставить("GLN",GLN);
	
	Если Контекст.Свойство("мПараметр") Тогда
		Участник.Вставить("Параметр",Новый Массив);
		Для Каждого Элемент Из Контекст.мПараметр Цикл
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст,Элемент.Значение);
			Параметр = Новый Структура();
			Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Параметр",Контекст,Параметр);
			Участник.Параметр.Добавить(Параметр);
		КонецЦикла;
	КонецЕсли;
	
	АдрМассив = Новый Массив;
	Адрес = РассчитатьЗначение("Сторона_Адрес",Контекст, Кэш);
	Если Адрес<>Неопределено Тогда 
		АдрМассив.Добавить(Адрес);
	КонецЕсли;
	
	Адрес = РассчитатьЗначение("Сторона_АдресФакт",Контекст, Кэш);
	Если Адрес<>Неопределено Тогда 
		АдрМассив.Добавить(Адрес);
	КонецЕсли;
	
	//Добавляем узлы по алфавиту
	Участник.Вставить("Адрес",АдрМассив); 
	
	БанкРекв = Новый Структура();
	ЗаполнитьАтрибуты(Кэш, "БанкРекв", Контекст, БанкРекв);
	Если БанкРекв.Количество() <> 0 Тогда
		Участник.Вставить("БанкРекв", БанкРекв);
	КонецЕсли;	
	
	//Код = Новый Структура;
	//сбисПолучитьФорму("Файл_Шаблон").ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Код);
	//Если Код.Количество() <> 0 Тогда
	//	Участник.Вставить("Код", Код);
	//КонецЕсли;	
	
	Контакт = Новый Структура;
	ЗаполнитьАтрибуты(Кэш, "Контакт", Контекст, Контакт);
	Если Контакт.Количество() <> 0 Тогда
		Участник.Вставить("Контакт", Контакт);
	КонецЕсли;		
	
	ПодразделениеНазвание = РассчитатьЗначение("Подразделение_Наименование",Контекст,Кэш);
	Если ПодразделениеНазвание<>Неопределено Тогда 
		Участник.Вставить("Подразделение", Новый Структура("Название",ПодразделениеНазвание));
	КонецЕсли;
	
	ПодразделениеИдентификатор = РассчитатьЗначение("Подразделение_Идентификатор",Контекст,Кэш);
	Если ПодразделениеИдентификатор <> Неопределено Тогда
		Если Участник.Свойство("Подразделение") Тогда
			Участник.Подразделение.Вставить("Идентификатор", ПодразделениеИдентификатор);
		Иначе	
			Участник.Вставить("Подразделение", Новый Структура("Идентификатор",ПодразделениеИдентификатор));
		КонецЕсли;	
	КонецЕсли;
	
	Представители = Новый Структура;
	Если Контекст.Свойство("мПредставитель") Тогда
		Для Каждого Элемент Из Контекст.мПредставитель Цикл
			Представитель = Новый Структура;
			Кэш.ОбщиеФункции.сбисСкопироватьСтруктуруНаКлиенте(Контекст,Элемент.Значение);
			Должность=РассчитатьЗначение("Должность",Контекст,Кэш);
			ИННПредст=РассчитатьЗначение("ИНН",Контекст,Кэш);
			Фамилия = Кэш.ОбщиеФункции.РассчитатьЗначение("Фамилия", Контекст, Кэш);
			ЭлементПредставитель = Элемент.Значение;
			
			Основания = Новый Массив;
			Если Элемент.Значение.Свойство("мОснование") Тогда
				Для Каждого ЭлементОснование Из Элемент.Значение.мОснование Цикл
					сбисСкопироватьСтруктуру(ЭлементПредставитель,ЭлементОснование.Значение);
					Основание = Новый Структура();
					Кэш.ОбщиеФункции.ЗаполнитьАтрибуты(Кэш,"Основание",ЭлементПредставитель,Основание);
					Основания.Добавить(Основание);
				КонецЦикла;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Фамилия) Тогда  // если фио в базе лежит по отдельным полям
				Имя = Кэш.ОбщиеФункции.РассчитатьЗначение("Имя", Контекст, Кэш);	
				Отчество = Кэш.ОбщиеФункции.РассчитатьЗначение("Отчество", Контекст, Кэш);
				Представитель = Новый Структура("Должность,СвФЛ", Должность, Новый Структура("Фамилия,Имя,Отчество,ИНН", Фамилия, Имя, Отчество,ИННПредст));
			Иначе  // если фио в базе лежит в одном поле
				ФИО = Кэш.ОбщиеФункции.РассчитатьЗначение("ФИО", Контекст, Кэш);
				Если ЗначениеЗаполнено(ФИО) Тогда
					СвФЛ = Кэш.ОбщиеФункции.сбисПолучитьФИО(ФИО);
					СвФЛ.Вставить("ИНН",ИННПредст);
					Представитель = Новый Структура("Должность,СвФЛ",Должность,СвФЛ)
				КонецЕсли;
			КонецЕсли;
			Если Основания.Количество()>0 Тогда
				Представитель.Вставить("Основание", Основания);
			КонецЕсли;
			
			Если Представитель.Количество()>0 Тогда
				Представители.Вставить(Элемент.Ключ,Представитель);
			КонецЕсли;
		КонецЦикла;
		Участник.Вставить("Представители",Представители);
	КонецЕсли;
	
	Если ИностраннаяОрганизация Тогда
		СвЮЛ = Новый Структура;
		Участник.Вставить("СвЮЛ",СвЮЛ);
		Участник.СвЮЛ.Вставить("Название", Название);
		Участник.СвЮЛ.Вставить("ИНН",ИНН);
		Участник.СвЮЛ.Вставить("КодСтраны",СбисКодСтраны);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвЮЛ);
	ИначеЕсли СтрДлина(СокрЛП(Инн))=12 Тогда
		ФИОСтруктура = сбисПолучитьФИОИзНазвания(Название);
		СвФЛ = Новый Структура;
		Участник.Вставить("СвФЛ",СвФЛ);
		Участник.СвФЛ.Вставить("ИНН",Инн);
		Участник.СвФЛ.Вставить("Фамилия",ФИОСтруктура.Фамилия);
		Участник.СвФЛ.Вставить("Имя",ФИОСтруктура.Имя);
		Участник.СвФЛ.Вставить("Отчество",ФИОСтруктура.Отчество);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвФЛ);
	Иначе
		СвЮЛ = Новый Структура;
		Участник.Вставить("СвЮЛ",СвЮЛ);
		Участник.СвЮЛ.Вставить("Название", Название);
		Участник.СвЮЛ.Вставить("ИНН",ИНН);
		Участник.СвЮЛ.Вставить("КПП",КПП);
		//Участник.СвЮЛ.Вставить("КодСтраны",СбисКодСтраны);
		ЗаполнитьАтрибуты(Кэш, "Код", Контекст, Участник.СвЮЛ);
	КонецЕсли;
	
	Возврат Участник;
КонецФункции
&НаКлиенте
Функция сбисПолучитьФИОИзНазвания(Название) Экспорт
	ФИО = Название;
	
	Если Сред(Нрег(Название),1,3)="ип " или Сред(Нрег(Название),1,3)="чп " тогда
		ФИО =СокрЛП(Сред(Название,4));
	КонецЕсли;
	Если Сред(Нрег(Название),1,31)="индивидуальный предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,32));
	КонецЕсли;
	Если Сред(Нрег(Название),1,8)="адвокат " тогда
		ФИО =СокрЛП(Сред(Название,9));
	КонецЕсли;
	Если Сред(Нрег(Название),1,9)="нотариус " тогда
		ФИО =СокрЛП(Сред(Название,10));
	КонецЕсли;
	Если Сред(Нрег(Название),1,50)="предприниматель без образования юридического лица " тогда
		ФИО =СокрЛП(Сред(Название,51));
	КонецЕсли;
	Если Сред(Нрег(Название),1,6)="пбоюл " тогда
		ФИО =СокрЛП(Сред(Название,7));
	КонецЕсли;
	Если Сред(Нрег(Название),1,16)="предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,17));
	КонецЕсли;
	
	ФИО = РазбитьСтрокуВМассивНаКлиенте(ФИО," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
	Отчество = "";
	Если ФИО.Количество()>=3 Тогда
		Для сч=2 по ФИО.Количество()-1 Цикл
			Отчество=Отчество+ФИО[сч]+" ";
		КонецЦикла;
		Отчество=СокрЛП(Отчество);
	КонецЕсли;
	Возврат Новый Структура("Фамилия,Имя,Отчество", Фамилия, Имя, Отчество);
КонецФункции
&НаСервереБезКонтекста
Функция сбисПолучитьФИОИзНазванияНаСервере(Название) Экспорт
	ФИО = Название;
	
	Если Сред(Нрег(Название),1,3)="ип " или Сред(Нрег(Название),1,3)="чп " тогда
		ФИО =СокрЛП(Сред(Название,4));
	КонецЕсли;
	Если Сред(Нрег(Название),1,31)="индивидуальный предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,32));
	КонецЕсли;
	Если Сред(Нрег(Название),1,8)="адвокат " тогда
		ФИО =СокрЛП(Сред(Название,9));
	КонецЕсли;
	Если Сред(Нрег(Название),1,9)="нотариус " тогда
		ФИО =СокрЛП(Сред(Название,10));
	КонецЕсли;
	Если Сред(Нрег(Название),1,50)="предприниматель без образования юридического лица " тогда
		ФИО =СокрЛП(Сред(Название,51));
	КонецЕсли;
	Если Сред(Нрег(Название),1,6)="пбоюл " тогда
		ФИО =СокрЛП(Сред(Название,7));
	КонецЕсли;
	Если Сред(Нрег(Название),1,16)="предприниматель " тогда
		ФИО =СокрЛП(Сред(Название,17));
	КонецЕсли;
	
	ФИО = РазбитьСтрокуВМассив(ФИО," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
	Отчество = "";
	Если ФИО.Количество()>=3 Тогда
		Для сч=2 по ФИО.Количество()-1 Цикл
			Отчество=Отчество+ФИО[сч]+" ";
		КонецЦикла;
		Отчество=СокрЛП(Отчество);
	КонецЕсли;
	Возврат Новый Структура("Фамилия,Имя,Отчество", Фамилия, Имя, Отчество);
КонецФункции
//Функция СкопироватьУчастника(Участник,НоваяРоль) Экспорт
//	Копия = Новый Структура;
//	Для Каждого Элемент из Участник Цикл
//		Если Элемент.Ключ = "Роль" Тогда
//			Копия.Вставить("Роль",НоваяРоль);
//		Иначе
//			Копия.Вставить(Элемент.Ключ,Элемент.Значение);
//		КонецЕсли
//	КонецЦикла;
//	
//	Возврат Копия;
//КонецФункции	
&НаКлиенте
Функция ЗначениеИТипСтавки(Ставка) Экспорт
	// Функция возвращает значение и тип ставки НДС
	СтрСтавка = Новый Структура;
	//Попытка
	//	ИмяПеречисления = Ставка.Метаданные().Имя;
	//	Индекс = Перечисления[ИмяПеречисления].Индекс(Ставка);
	//	СтавкаСиноним = Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления.Получить(Индекс).Синоним;
	//Исключение
	Попытка
		СтавкаСиноним = Строка(Ставка);
	Исключение
		СтавкаСиноним = "";
	КонецПопытки;
	//КонецПопытки;
	
	Если Найти(СтавкаСиноним,"20% / 120%") > 0 или Найти(СтавкаСиноним,"20/120") > 0 Тогда
		СтрСтавка.Вставить("Ставка","20/120");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"20%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","20");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"18% / 118%") > 0 или Найти(СтавкаСиноним,"18/118") > 0 Тогда
		СтрСтавка.Вставить("Ставка","18/118");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"18%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","18");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;        
	ИначеЕсли Найти(СтавкаСиноним,"10% / 110%") > 0 или Найти(СтавкаСиноним,"10/110") > 0 Тогда
		СтрСтавка.Вставить("Ставка","10/110");
		СтрСтавка.Вставить("ТипСтавки","дробь");
		Возврат СтрСтавка; 
	ИначеЕсли Найти(СтавкаСиноним,"10%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","10");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"0%") > 0 Тогда
		СтрСтавка.Вставить("Ставка","0");
		СтрСтавка.Вставить("ТипСтавки","процент");
		Возврат СтрСтавка;
	ИначеЕсли Найти(СтавкаСиноним,"НДС исчисляется налоговым агентом") > 0 Тогда
		СтрСтавка.Вставить("Ставка","НДС исчисляется налоговым агентом");
		СтрСтавка.Вставить("ТипСтавки","текст");
		Возврат СтрСтавка;
	Иначе
		СтрСтавка.Вставить("Ставка","без НДС");
		СтрСтавка.Вставить("ТипСтавки","текст");
		Возврат СтрСтавка;	
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтавкуНДСЧисло(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = "10" или СтавкаНДС = "18" или СтавкаНДС = "20" или СтавкаНДС = "0" Тогда
		Возврат Число(СтавкаНДС);
		
	ИначеЕсли СтавкаНДС = "18/118" Тогда
		Возврат 18;
		
	ИначеЕсли СтавкаНДС = "10/110" Тогда
		Возврат 10;
		
	ИначеЕсли СтавкаНДС = "20/120" Тогда
		Возврат 20;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
&НаКлиенте
Процедура сбисРаспределитьСуммуПоСтолбцу(МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, КлючРаспределения="Сумма") Экспорт
	
	// Определяем сумму базы
	СуммаБазы = 0;
	
	Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
		СуммаБазы = СуммаБазы + МассивБазыРаспределения[Индекс];
	КонецЦикла;
	
	Если СуммаБазы > 0 Тогда
		// Выполняем распределение
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;
		
		Для Индекс = 0 По МассивБазыРаспределения.Количество() - 1 Цикл
			
			// Рассчитываем шаг распределения
			ШагРаспределения = Окр(РаспределяемаяСумма * (УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс])/СуммаБазы, 2) - УжеРаспределено;
			
			// Записываем результат
			ТаблицаРезультата[Индекс][КлючРаспределения] = Формат(ШагРаспределения, "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
			
			// Учитываем полученный результат для вычисления последующих шагов распределения
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + МассивБазыРаспределения[Индекс];
			УжеРаспределено         = УжеРаспределено + ШагРаспределения;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция сбисРаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2, ПроверкаНулевыхЗначений=Истина) Экспорт
	
	Если МассивКоэф.Количество() = 0 Или (ПроверкаНулевыхЗначений И ИсхСумма = 0) Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Массив коэффициентов необходимо упорядочить, поэтому создадим таблицу для распределения
	УпорядоченнаяТаблица = Новый ТаблицаЗначений;
	УпорядоченнаяТаблица.Колонки.Добавить("Коэф", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17,4)));
	УпорядоченнаяТаблица.Колонки.Добавить("ИсходныйИндекс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
		СтрокаТаблицы = УпорядоченнаяТаблица.Добавить();
		СтрокаТаблицы.Коэф = МассивКоэф[К];
		СтрокаТаблицы.ИсходныйИндекс = К;
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УпорядоченнаяТаблица.Сортировать("Коэф Убыв");
	
	МассивСумм = Новый Массив(УпорядоченнаяТаблица.Количество());
	
	Для каждого СтрокаТаблицы Из УпорядоченнаяТаблица Цикл
		// Возвращаемый результат должен быть в том же порядке
		МассивСумм[СтрокаТаблицы.ИсходныйИндекс] = ?(СуммаКоэф <> 0, Окр(ИсхСумма * МассивКоэф[СтрокаТаблицы.ИсходныйИндекс] / СуммаКоэф, Точность, 1), 0);
		
		ИсхСумма = ИсхСумма - МассивСумм[СтрокаТаблицы.ИсходныйИндекс]; 
		СуммаКоэф = СуммаКоэф - МассивКоэф[СтрокаТаблицы.ИсходныйИндекс]; 
	КонецЦикла;
	
	Возврат МассивСумм;
	
КонецФункции

//Блок функций, использующихся в ини файлах

// Маркировка
&НаКлиенте
Функция сбисСформироватьПредДанныеПоМаркировке(Контекст) Экспорт
	Возврат сбисСформироватьДанныеПоМаркировкеОбщее(Контекст, Контекст.мПредШтрихкодыУпаковок);
КонецФункции
&НаКлиенте
Функция сбисСформироватьДанныеПоМаркировке(Контекст) Экспорт
	Возврат сбисСформироватьДанныеПоМаркировкеОбщее(Контекст, Контекст.мШтрихкодыУпаковок);
КонецФункции
&НаКлиенте
Функция сбисСформироватьДанныеПоМаркировкеОбщее(Контекст, мШтрихкодыУпаковок) Экспорт
	Маркировка = Новый Соответствие;
	ЕстьХарактеристики = Найти(Контекст.КлючиКодовМаркировки, "Характеристика")>0;
	ЕстьСерии = Найти(Контекст.КлючиКодовМаркировки, "Серия")>0;
	Для Каждого Элемент Из мШтрихкодыУпаковок Цикл
		Если Элемент.Свойство("ТипУпаковки") Тогда  // Добавлено условие, так как встречаются случаи, когда в таб части ШтрихкодыУпаковок появляются пустые ссылки. Их нужно пропустить.
			Если Элемент.ТипУпаковки <> "МультитоварнаяУпаковка" И Элемент.Свойство("ОсобенностьУчета") Тогда   // добавлена проверка на ОсобенностьУчета, так как встречаются случаи, когда в монотоварной упаковке номенклатура не заполнена, тогда тоже смотрим на вложенные штрихкоды
				ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, Элемент.ОсобенностьУчета, Элемент.ТипУпаковки, Элемент.ЗначениеШтрихкода);
				сбисДобавитьДанныеШтрихкодаВСоответствие(Контекст, Маркировка, Элемент, ДанныеШтрихкода, ЕстьХарактеристики, ЕстьСерии);
			Иначе
				Для Каждого ВложенныйЭлемент Из Элемент.мВложенныеШтрихкоды Цикл
					ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, ВложенныйЭлемент.ОсобенностьУчета, Элемент.ТипУпаковки, Элемент.ЗначениеШтрихкода);
					сбисДобавитьДанныеШтрихкодаВСоответствие(Контекст, Маркировка, ВложенныйЭлемент, ДанныеШтрихкода, ЕстьХарактеристики, ЕстьСерии);		
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Маркировка;
КонецФункции
&НаКлиенте
Функция сбисДобавитьДанныеШтрихкодаВСоответствие(Контекст, Маркировка, Элемент, ДанныеШтрихкода, ЕстьХарактеристики, ЕстьСерии) Экспорт
	ЭлемПоНоменклатуре = Маркировка.Получить(Элемент.Номенклатура);
	Если ЭлемПоНоменклатуре = Неопределено Тогда
		Маркировка.Вставить(Элемент.Номенклатура, ?(ЕстьХарактеристики,Новый Соответствие(),Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений)));	
		ЭлемПоНоменклатуре = Маркировка.Получить(Элемент.Номенклатура);
	КонецЕсли;
	Если НЕ ЕстьХарактеристики Тогда
		Если ЭлемПоНоменклатуре[ДанныеШтрихкода.Вид].НайтиПоЗначению(ДанныеШтрихкода.ЗначениеШтрихкода) = Неопределено Тогда   // не добавляем повторно один и тот же штрихкод
			ЭлемПоНоменклатуре[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
		КонецЕсли;
	Иначе
		ЭлемПоХарактеристике = ЭлемПоНоменклатуре.Получить(Элемент.Характеристика);
		Если ЭлемПоХарактеристике = Неопределено Тогда
			ЭлемПоНоменклатуре.Вставить(Элемент.Характеристика, ?(ЕстьСерии,Новый Соответствие(),Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений)));	
			ЭлемПоХарактеристике = ЭлемПоНоменклатуре.Получить(Элемент.Характеристика);
		КонецЕсли;
		Если НЕ ЕстьСерии Тогда
			Если ЭлемПоХарактеристике[ДанныеШтрихкода.Вид].НайтиПоЗначению(ДанныеШтрихкода.ЗначениеШтрихкода) = Неопределено Тогда   // не добавляем повторно один и тот же штрихкод
				ЭлемПоХарактеристике[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
			КонецЕсли;
		Иначе
			ЭлемПоСерии = ЭлемПоХарактеристике.Получить(Элемент.Серия);
			Если ЭлемПоСерии = Неопределено Тогда
				ЭлемПоХарактеристике.Вставить(Элемент.Серия, Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений));	
				ЭлемПоСерии = ЭлемПоХарактеристике.Получить(Элемент.Серия);
			КонецЕсли;
			Если ЭлемПоСерии[ДанныеШтрихкода.Вид].НайтиПоЗначению(ДанныеШтрихкода.ЗначениеШтрихкода) = Неопределено Тогда   // не добавляем повторно один и тот же штрихкод
				ЭлемПоСерии[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисСформироватьЗначениеШтрихкода(Контекст) Экспорт
	ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, Контекст.ОсобенностьУчета, Контекст.ТипУпаковки, Контекст.ЗначениеШтрихкода);
	Возврат ДанныеШтрихкода.ЗначениеШтрихкода
КонецФункции
&НаКлиенте
Функция сбисСформироватьДанныеШтрихкода(Контекст, ОсобенностьУчета, ТипУпаковки, ЗначениеШтрихкода) Экспорт
	ДанныеШтрихкода = Новый Структура("Вид, ЗначениеШтрихкода");
	// вырезаем скобки у разделителей
	Если Лев(ЗначениеШтрихкода, 1) = "(" Тогда
		Если Сред(ЗначениеШтрихкода, 4, 1) = ")" Тогда    // (00), (01), (02)
			ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 2, 2)+ Сред(ЗначениеШтрихкода, 5);
		КонецЕсли;
		Если Сред(ЗначениеШтрихкода, 17, 1) = "(" и Сред(ЗначениеШтрихкода, 20, 1) = ")" Тогда          // (21), для коробов табака (11), (13), (37)
			ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 16) + Сред(ЗначениеШтрихкода, 18, 2) + Сред(ЗначениеШтрихкода, 21);
		КонецЕсли;
		Если ОсобенностьУчета = "Молоко" Тогда
			Если Сред(ЗначениеШтрихкода, 32, 4) = "(17)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 31) + "17" + Сред(ЗначениеШтрихкода, 36);
			КонецЕсли;
			Если Сред(ЗначениеШтрихкода, 32, 6) = "(7003)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 31) + "7003" + Сред(ЗначениеШтрихкода, 38);
			КонецЕсли;
		КонецЕсли;
		Если ОсобенностьУчета = "Обувь" Тогда   // В экспериментальных кодах (выданных в 2019 году) присутствует разделитель (240). Общая длина кода для них 38 символов.
			Если Сред(ЗначениеШтрихкода, 32, 5) = "(240)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 31) + "240" + Сред(ЗначениеШтрихкода, 37);
			КонецЕсли;
		КонецЕсли;
		Если ОсобенностьУчета = "Табак" или ОсобенностьУчета = "АльтернативныйТабак" Тогда
			Если (Сред(ЗначениеШтрихкода, 17, 2) = "11" или Сред(ЗначениеШтрихкода, 17, 2) = "13") Тогда
				Если Сред(ЗначениеШтрихкода, 25, 4) = "(21)" Тогда
					ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 24) + "21" + Сред(ЗначениеШтрихкода, 29);
				ИначеЕсли Сред(ЗначениеШтрихкода, 25, 4) = "(37)" Тогда
					ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 24) + "37" + Сред(ЗначениеШтрихкода, 29);
					Если Сред(ЗначениеШтрихкода, 35, 4) = "(21)" Тогда
						ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 34) + "21" + Сред(ЗначениеШтрихкода, 39);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Сред(ЗначениеШтрихкода, 17, 2) = "37" и Сред(ЗначениеШтрихкода, 27, 4) = "(21)" Тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 1, 26) + "21" + Сред(ЗначениеШтрихкода, 31);
			КонецЕсли;
			Если Найти(ЗначениеШтрихкода, "(240)") Тогда   // Для коробов клиенты могут сами создавать коды, в частности встречаются коды с данным разделителем после серийника, у которого требуется обрезать скобки
				ЗначениеШтрихкода = СтрЗаменить(ЗначениеШтрихкода, "(240)", "240");
			КонецЕсли;
			Если Найти(ЗначениеШтрихкода, "(8005)") Тогда  // по рекомендациям ЧЗ с 26 символа, но у клиентов встречаются коды, где данный разделитель находится дальше 
				ЗначениеШтрихкода = СтрЗаменить(ЗначениеШтрихкода, "(8005)", "8005");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипУпаковки = "МаркированныйТовар" Тогда
		ДанныеШтрихкода.Вид = "КИЗ";
		Если ОсобенностьУчета = "Обувь" Тогда
			Если Сред(ЗначениеШтрихкода, 32, 4)="(91)" Тогда
				ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 31);
			ИначеЕсли Сред(ЗначениеШтрихкода, 39, 4)="(91)" Тогда   // экспериментальный код
				ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 38);
			КонецЕсли;    // если нет разделителя (91), то считаем, что код лежит в готовом виде и ничего не обрезаем
		ИначеЕсли ОсобенностьУчета = "Шины" или ОсобенностьУчета = "Духи" или ОсобенностьУчета = "ЛегкаяПромышленность" или ОсобенностьУчета = "Велосипеды" или ОсобенностьУчета = "КреслаКоляски" или ОсобенностьУчета = "УпакованнаяВода" Тогда
			ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 31);
		ИначеЕсли ОсобенностьУчета = "Фотоаппараты" Тогда
			ЗначениеШтрихкода = Лев(ЗначениеШтрихкода, 38);
		КонецЕсли;
	ИначеЕсли ТипУпаковки = "МонотоварнаяУпаковка" И (ОсобенностьУчета = "Табак" или ОсобенностьУчета = "АльтернативныйТабак") И Лев(ЗначениеШтрихкода,2) = "01" И Сред(ЗначениеШтрихкода, 17, 2) = "21" И (Сред(ЗначениеШтрихкода, 26, 4) = "8005" или СтрДлина(СокрЛП(ЗначениеШтрихкода))=25) Тогда   // встретился у клиента непонятный штрихкод 01146033990011272001212005/05/22/2/3/0001, который не подходит ни под одно описание, но должен выгружаться в ИдентТрансУпак (как во входящем ЭД)
		ДанныеШтрихкода.Вид = "НомУпак";
	Иначе
		ДанныеШтрихкода.Вид = "ИдентТрансУпак";
		Если ОсобенностьУчета <> "Табак" и ОсобенностьУчета <> "АльтернативныйТабак" Тогда   // для всех, кроме табака надо обрезать первые два нуля
			Если СтрДлина(ЗначениеШтрихкода) = 20 и Лев(ЗначениеШтрихкода, 2) = "00" тогда
				ЗначениеШтрихкода = Сред(ЗначениеШтрихкода, 3);
			КонецЕсли
		КонецЕсли;
	КонецЕсли;
	ДанныеШтрихкода.ЗначениеШтрихкода = ЗначениеШтрихкода;
	Возврат ДанныеШтрихкода;
КонецФункции
&НаКлиенте
Функция сбисПолучитьПредКодыМаркировокПоСтроке(Контекст) Экспорт
	Попытка
		Количество = Число(Контекст.ПредКоличество);
	Исключение
		Количество = 0;
	КонецПопытки;
	Возврат сбисПолучитьКодыМаркировокПоСтрокеОбщее(Контекст, Контекст.ПредКодыМаркировки, Количество);
КонецФункции
&НаКлиенте
Функция сбисПолучитьКодыМаркировокПоСтроке(Контекст) Экспорт
	Попытка
		Количество = Число(Контекст.Количество);
	Исключение
		Количество = 0;
	КонецПопытки;
	Возврат сбисПолучитьКодыМаркировокПоСтрокеОбщее(Контекст, Контекст.КодыМаркировки, Количество);
КонецФункции
&НаКлиенте
Функция сбисПолучитьКодыМаркировокПоСтрокеОбщее(Контекст, КодыМаркировки, Количество) Экспорт
	НомСредИдентТов = Новый Массив;
	ДанныеПоМаркировке = КодыМаркировки.Получить(Контекст.Номенклатура);
	Если ЗначениеЗаполнено(ДанныеПоМаркировке) Тогда
		Если Контекст.Свойство("Характеристика") Тогда
			ДанныеПоМаркировкеХ = ДанныеПоМаркировке.Получить(Контекст.Характеристика);
			Если ДанныеПоМаркировкеХ = Неопределено И Не Контекст.Характеристика.Пустая() И ДанныеПоМаркировке.Количество() = 1 Тогда  
				// Коды маркировки заведены для номенклатуры, без указания характеристик, тогда возьмем коды с пустой характеристикой
				Для Каждого Элем Из ДанныеПоМаркировке Цикл
					Если Элем.Ключ.Пустая() Тогда
						ДанныеПоМаркировкеХ = Элем.Значение;
					КонецЕсли;
					Прервать;
				КонецЦикла;
			КонецЕсли;
			ДанныеПоМаркировке = ДанныеПоМаркировкеХ; 
			Если ЗначениеЗаполнено(ДанныеПоМаркировке) и Контекст.Свойство("Серия") Тогда
				ДанныеПоМаркировкеС = ДанныеПоМаркировке.Получить(Контекст.Серия);
				Если ДанныеПоМаркировкеС = Неопределено И Не Контекст.Серия.Пустая() И ДанныеПоМаркировке.Количество() = 1 Тогда  
					// Коды маркировки заведены без указания серий, тогда возьмем коды с пустой серией
					Для Каждого Элем Из ДанныеПоМаркировке Цикл
						Если Элем.Ключ.Пустая() Тогда
							ДанныеПоМаркировкеС = Элем.Значение;
						КонецЕсли;
						Прервать;
					КонецЦикла;
				ИначеЕсли ДанныеПоМаркировкеС = Неопределено И Контекст.Серия.Пустая() И ДанныеПоМаркировке.Количество() > 0 Тогда
					// коды маркировок заведены с указанием серий, а в аналитике учета номенклатуры серии не указаны - берем коды маркировок без учета серий по аналогии со штатным механизмом 1С
					МаркировкаСПустойСерией =  Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений);
					Для	Каждого Элем Из ДанныеПоМаркировке Цикл
						Для Каждого ИдентТрансУпак Из Элем.Значение.ИдентТрансУпак Цикл
							МаркировкаСПустойСерией.ИдентТрансУпак.Добавить(ИдентТрансУпак.Значение);	
						КонецЦикла;
						Для Каждого НомУпак Из Элем.Значение.НомУпак Цикл
							МаркировкаСПустойСерией.НомУпак.Добавить(НомУпак.Значение);	
						КонецЦикла;
						Для Каждого КИЗ Из Элем.Значение.КИЗ Цикл
							МаркировкаСПустойСерией.КИЗ.Добавить(КИЗ.Значение);	
						КонецЦикла;
					КонецЦикла;
					ДанныеПоМаркировке.Вставить(Контекст.Серия, МаркировкаСПустойСерией);
					ДанныеПоМаркировкеС = ДанныеПоМаркировке.Получить(Контекст.Серия);
				КонецЕсли;
				ДанныеПоМаркировке = ДанныеПоМаркировкеС;
			КонецЕсли;
		КонецЕсли;
		
		НомСредИдентТов = сбисЗаполнитьНомСредИдентТов(НомСредИдентТов, ДанныеПоМаркировке, Количество);
	КонецЕсли;
	Возврат НомСредИдентТов;
КонецФункции
&НаКлиенте
Функция сбисЗаполнитьНомСредИдентТов(НомСредИдентТов, ДанныеПоМаркировке, Количество) Экспорт
	Если ЗначениеЗаполнено(ДанныеПоМаркировке) Тогда
		Если ДанныеПоМаркировке.ИдентТрансУпак.Количество()>0 Тогда
			Для Каждого Элемент Из ДанныеПоМаркировке.ИдентТрансУпак Цикл 
				НомСредИдентТов.Добавить(Новый Структура("ИдентТрансУпак", Элемент.Значение));
			КонецЦикла;
		КонецЕсли;
		Если ДанныеПоМаркировке.НомУпак.Количество()>0 Тогда
			НомУпак = Новый Массив;
			Для Каждого Элемент Из ДанныеПоМаркировке.НомУпак Цикл 
				НомУпак.Добавить(Новый Структура("Значение", Элемент.Значение));
			КонецЦикла;
			НомСредИдентТов.Добавить(Новый Структура("НомУпак", НомУпак));
		КонецЕсли;
		Если ДанныеПоМаркировке.КИЗ.Количество()>0 Тогда
			КИЗ = Новый Массив;
			КИЗОчистить = Новый Массив;
			сч = Количество;
			Для Каждого Элемент Из ДанныеПоМаркировке.КИЗ Цикл 
				Если Количество > 0 и сч <= 0 Тогда
					Прервать;
				КонецЕсли;
				сч = сч -1;
				КИЗ.Добавить(Новый Структура("Значение", Элемент.Значение));
				КИЗОчистить.Добавить(Элемент);
			КонецЦикла;
			НомСредИдентТов.Добавить(Новый Структура("КИЗ", КИЗ));
			Для Каждого Элемент Из КИЗОчистить Цикл
				ДанныеПоМаркировке.КИЗ.Удалить(Элемент);  // чтобы одни и те же КИЗы не попадали на разные строки с одним товаром, почистим уже использованные
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат НомСредИдентТов;
КонецФункции

&НаКлиенте
Функция сбисПолучитьРасхКодыМаркировокПоСтроке(Контекст) Экспорт
	ДанныеШтрихкода = сбисСформироватьДанныеШтрихкода(Контекст, Контекст.ОсобенностьУчета, Контекст.ТипУпаковки, Контекст.ЗначениеШтрихкода);	
	ДанныеПоМаркировке = Новый Структура("ИдентТрансУпак,НомУпак,КИЗ", Новый СписокЗначений, Новый СписокЗначений, Новый СписокЗначений);
	ДанныеПоМаркировке[ДанныеШтрихкода.Вид].Добавить(ДанныеШтрихкода.ЗначениеШтрихкода);
	НомСредИдентТов = Новый Массив;
	Возврат сбисЗаполнитьНомСредИдентТов(НомСредИдентТов, ДанныеПоМаркировке, 0);
КонецФункции
&НаКлиенте
Функция сбисЭмитироватьКМСписок(Кэш, ВыбранныеСтроки) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	Для Каждого Элемент Из ВыбранныеСтроки Цикл
		ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(Элемент.Значение.Документы1С[0].Значение, Кэш.ГлавноеОкно.КаталогНастроек,"ДокументСБИС_Ид",Кэш.Ини);
		Если ЗначениеЗаполнено(ИдДок) Тогда         
			Отказ = Ложь;
			Рез = Кэш.Интеграция.сбисЭмитироватьКМ(Кэш, ИдДок,, Отказ);
			Если Не Отказ Тогда
				Сообщить("Запущено выполнение операции ""Эмитировать коды маркировки"" для документа "+ Элемент.Значение.Документы1С[0].Значение);
			КонецЕсли;
		Иначе
			Сообщить("Для документа "+Элемент.Значение.Документы1С[0].Значение+" нет связанного документа в СБИС.");
		КонецЕсли;
	КонецЦикла;
КонецФункции
&НаКлиенте
Функция сбисЭмитироватьКМ(Кэш, ФормаПросмотра) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение, Кэш.ГлавноеОкно.КаталогНастроек,"ДокументСБИС_Ид",Кэш.Ини);
	Если ЗначениеЗаполнено(ИдДок) Тогда
		Отказ = Ложь;
		Рез = Кэш.Интеграция.сбисЭмитироватьКМ(Кэш, ИдДок,, Отказ);
		Если Не Отказ Тогда
			Сообщить("Запущено выполнение операции ""Эмитировать коды маркировки"" для документа "+ ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение);
		КонецЕсли;
	Иначе
		Сообщить("Для документа "+ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение+" нет связанного документа в СБИС.");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеСписок(Кэш, ВыбранныеСтроки, ДополнительныеПараметры=Неопределено) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	Для Каждого Элемент Из ВыбранныеСтроки Цикл
		ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(Элемент.Значение.Документы1С[0].Значение, Кэш.ГлавноеОкно.КаталогНастроек,"ДокументСБИС_Ид",Кэш.Ини);
		Если ЗначениеЗаполнено(ИдДок) Тогда 
			Отказ = Ложь;
			Рез = Кэш.Интеграция.сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры, Отказ);
			Если Не Отказ Тогда
				Сообщить("Запущено выполнение операции ""Зарегистрировать в госсистеме"" для документа "+ Элемент.Значение.Документы1С[0].Значение);
			КонецЕсли;
		Иначе
			Сообщить("Для документа "+Элемент.Значение.Документы1С[0].Значение+" нет связанного документа в СБИС.");
		КонецЕсли;
	КонецЦикла;
КонецФункции
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистеме(Кэш, ФормаПросмотра, ДополнительныеПараметры=Неопределено) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПрочитатьПараметрыДокументаСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
	ИдДок = фрм.ПрочитатьПараметрыДокументаСБИС(ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение, Кэш.ГлавноеОкно.КаталогНастроек,"ДокументСБИС_Ид",Кэш.Ини);
	Если ЗначениеЗаполнено(ИдДок) Тогда 
		Отказ = Ложь;
		Рез = Кэш.Интеграция.сбисЗарегистрироватьВГоссистеме(Кэш, ИдДок, ДополнительныеПараметры, Отказ);
		Если Не Отказ Тогда
			Сообщить("Запущено выполнение операции ""Зарегистрировать в госсистеме"" для документа "+ ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение);
		КонецЕсли;
	Иначе
		Сообщить("Для документа "+ФормаПросмотра.СоставПакета.Вложение[0].Документы1С[0].Значение+" нет связанного документа в СБИС.");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеСписаниеСписок(Кэш, ВыбранныеСтроки) Экспорт
	сбисЗарегистрироватьВГоссистемеСписок(Кэш, ВыбранныеСтроки, Новый Структура("Операция", "Списание"));
КонецФункции
&НаКлиенте
Функция сбисЗарегистрироватьВГоссистемеСписание(Кэш, ФормаПросмотра) Экспорт
	сбисЗарегистрироватьВГоссистеме(Кэш, ФормаПросмотра, Новый Структура("Операция", "Списание"));
КонецФункции
//------------------------------
&НаКлиенте
Функция сбисИдентификаторУчастника(Контекст) Экспорт
	Если МестныйКэш = Неопределено Тогда
		МестныйКэш = сбисПолучитьФорму("ФормаГлавноеОкно").Кэш;
	КонецЕсли;
	Если ЗначениеЗаполнено(МестныйКэш) Тогда
		Возврат МестныйКэш.Интеграция.сбисИдентификаторУчастника(МестныйКэш,Контекст.Сторона_ИНН,Контекст.Сторона_КПП,Контекст.Сторона_Наименование);
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции
&НаКлиенте
Функция сбисПодписант(Контекст) Экспорт
	Если МестныйКэш = Неопределено Тогда
		МестныйКэш = сбисПолучитьФорму("ФормаГлавноеОкно").Кэш;
	КонецЕсли;
	Если ЗначениеЗаполнено(МестныйКэш) Тогда
		Возврат МестныйКэш.Интеграция.сбисПодписант(МестныйКэш,Контекст.Сторона_ИНН);
	Иначе
		Возврат Новый Структура("Должность,ФИО,ИНН");
	КонецЕсли;
КонецФункции
&НаКлиенте
Процедура сбисПроверитьПолеАдреса (АдрСтрук, Название, Поле,Формат)	
	// Функция проверяет поле адреса на соответствие формату	
	Если СтрДлина(Поле) <= Формат тогда
		АдрСтрук.Вставить(Название,Поле);
	Иначе
		ВызватьИсключение("");
	КонецЕсли;
КонецПроцедуры
// alo << изменение по кадровым документам
&НаКлиенте
Функция сбисПолучитьАдрес(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если Контекст.Свойство("АдресЮЛ") и ЗначениеЗаполнено(Контекст.АдресЮЛ) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресЮЛ);
	ИначеЕсли Контекст.Свойство("АдресФЛ") и ЗначениеЗаполнено(Контекст.АдресФЛ) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресФЛ);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтруктуруАдрес(АдресРег) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Адрес = Новый Структура;
	// alo УКД <<
	Адрес.Вставить("Тип","Юридический");
	если типЗнч(АдресРег) <> тип("Строка") тогда 
		Адрес.Вставить("АдрТекст",АдресРег.Представление);
		КодРегион = "";	
		Если АдресРег.Поле2 <> "" Тогда
			КодРегион = ПолучитьКодРегионаПоНазванию(АдресРег.Поле2);
		КонецЕсли;
		Попытка
			Если КодРегион = "" Тогда
				ВызватьИсключение("")
			КонецЕсли;
			АдрСтрук = Новый Структура;
			сбисПроверитьПолеАдреса(АдрСтрук, "Индекс", АдресРег.Поле1,6);
			сбисПроверитьПолеАдреса(АдрСтрук, "КодРегион", КодРегион,2);
			сбисПроверитьПолеАдреса(АдрСтрук, "Район", АдресРег.Поле3,50);
			сбисПроверитьПолеАдреса(АдрСтрук, "Город", АдресРег.Поле4,50);
			сбисПроверитьПолеАдреса(АдрСтрук, "НаселПункт", АдресРег.Поле5,50);
			сбисПроверитьПолеАдреса(АдрСтрук, "Улица", АдресРег.Поле6,50);
			Дом = АдресРег.Поле7;
			Корпус = АдресРег.Поле8;
			Квартира = АдресРег.Поле9;
			Попытка
				Если строка(АдресРег.ТипДома) = "владение" Тогда
					Дом = "влд."+Дом;
				КонецЕсли;
				Если строка(АдресРег.ТипКорпуса) = "строение" Тогда
					Корпус = "стр."+Корпус;
				КонецЕсли;
				Если строка(АдресРег.ТипКвартиры) = "оф." Тогда
					Квартира = "оф."+Квартира;
				КонецЕсли;
			Исключение
				
			КонецПопытки;
			сбисПроверитьПолеАдреса(АдрСтрук, "Дом", Дом,20);
			сбисПроверитьПолеАдреса(АдрСтрук, "Корпус", Корпус,20);
			сбисПроверитьПолеАдреса(АдрСтрук, "Кварт", Квартира,20);
			Адрес.Вставить("АдрРФ",АдрСтрук);
			
		Исключение
			КодСтраны = ПолучитьКодСтраныПоНазванию(АдресРег.Поле1);	
			Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(КодСтраны, АдресРег.Представление));
		КонецПопытки;	
	иначе
		Адрес.Вставить("АдрТекст",АдресРег);
		Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(,АдресРег));
	конецесли;
	//  УКД alo >>
	Возврат Адрес;
КонецФункции
&НаКлиенте
Функция сбисСтруктураАдрИно(КодСтраны,Представление) Экспорт   // alo вставлена для УКД
	АдрИно=Новый Структура;
	АдрИно.Вставить("КодСтр",?(ЗначениеЗаполнено(КодСтраны),КодСтраны,"643"));
	АдрИно.Вставить("АдрТекст",Представление);
	Возврат АдрИно;
КонецФункции
&НаКлиенте
Функция сбисПолучитьАдресФакт(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в регистре сведений КонтактнаяИнформация
	Если Контекст.Свойство("АдресФакт") и ЗначениеЗаполнено(Контекст.АдресФакт) Тогда
		возврат сбисПолучитьСтруктуруАдрес(Контекст.АдресФакт);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции
// изменение по кадровым документам >> alo
&НаКлиенте
Функция ПолучитьАдресУП(Контекст) Экспорт
	// Функция заполняет структуру адреса в универсальном формате (3.01)	
	// Используется для конфигураций, где адреса хранятся в табличной части КонтактнаяИнформация справочников Организации и Контрагенты
	Если Контекст.Свойство("Адрес") и ЗначениеЗаполнено(Контекст.Адрес) Тогда
		АдресЗапись = Контекст.Адрес;
	ИначеЕсли Контекст.Свойство("АдресФЛ") и ЗначениеЗаполнено(Контекст.АдресФЛ) Тогда
		АдресЗапись = Контекст.АдресФЛ;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Адрес = Новый Структура;
	Адрес.Вставить("Тип", "Юридический");
	Если ТипЗнч(АдресЗапись) = Тип("Строка") Тогда
		Адрес.Вставить("АдрТекст",	АдресЗапись);
		Адрес.Вставить("АдрИно",	сбисСтруктураАдрИно(,АдресЗапись));
		Возврат Адрес;
	КонецЕсли;		
	
	Адрес.Вставить("АдрТекст",АдресЗапись.Представление);
	
	АдресРег = АдресЗапись.ЗначенияПолей;
	сч = 1;
	Индекс		= "";
	КодРегион	= "";
	Регион		= "";
	Район		= "";
	Город		= "";
	НаселПункт	= "";
	Улица		= "";
	УлицаДопИнфо= "";
	Дом			= "";
	Корпус		= "";
	Квартира	= "";
	КодСтраны	= "";
	Если Лев(АдресРег,21) = "<КонтактнаяИнформация" Тогда
		АдресСтруктураXML = ЗаполнитьСтруктуруФайла(АдресЗапись.ЗначенияПолей);
		ЗначениеСостав = АдресСтруктураXML;
		Если	ЗначениеСостав.Свойство("КонтактнаяИнформация",	ЗначениеСостав) 
			И	ЗначениеСостав.Свойство("Состав",				ЗначениеСостав)
			И	ЗначениеСостав.Свойство("Состав",				ЗначениеСостав)//Да, два раза.
			И	ТипЗнч(ЗначениеСостав) = Тип("Структура") Тогда
			Если ЗначениеСостав.Свойство("ДопАдрЭл") Тогда
				Для Каждого АдрЭл Из ЗначениеСостав.ДопАдрЭл Цикл
					Если АдрЭл.Свойство("ТипАдрЭл") и АдрЭл.Свойство("Значение") Тогда
						Если АдрЭл.ТипАдрЭл = "10100000" Тогда
							Индекс = АдрЭл.Значение;
						ИначеЕсли	АдрЭл.ТипАдрЭл = "10200000"//Адресная точка
							Или		АдрЭл.ТипАдрЭл = "10300000"//Садовое товарищество
							Или		АдрЭл.ТипАдрЭл = "10400000"//Элемент улично-дорожной сети, планировочной структуры дополнительного адресного элемента
							Или		АдрЭл.ТипАдрЭл = "10500000"//Промышленная зона
							Или		АдрЭл.ТипАдрЭл = "10600000"//Гаражно-строительный кооператив
							Или		АдрЭл.ТипАдрЭл = "10700000"//Территория
							Тогда//Уже должно быть обработанное поле с сокращенным названием типа.
							УлицаДопИнфо = УлицаДопИнфо + ?(ПустаяСтрока(УлицаДопИнфо), "", ",") + АдрЭл.Значение;
						КонецЕсли;
					ИначеЕсли АдрЭл.Свойство("Номер") и АдрЭл.Номер.Свойство("Тип") и АдрЭл.Номер.Свойство("Значение") Тогда
						Если АдрЭл.Номер.Тип = "1010" Тогда
							Дом = АдрЭл.Номер.Значение;
						ИначеЕсли АдрЭл.Номер.Тип = "1020" Тогда  // владение
							Дом = "влд."+строка(АдрЭл.Номер.Значение);
						ИначеЕсли АдрЭл.Номер.Тип = "1030" Тогда  // домовладение
							Дом = "дмвлд."+строка(АдрЭл.Номер.Значение);
						ИначеЕсли АдрЭл.Номер.Тип = "1034" Тогда  // гараж
							Дом = "гар."+строка(АдрЭл.Номер.Значение);
						ИначеЕсли АдрЭл.Номер.Тип = "1036" Тогда  // здание
							Дом = "зд."+строка(АдрЭл.Номер.Значение);
						ИначеЕсли АдрЭл.Номер.Тип = "1038" Тогда  // шахта
							Дом = "шах."+строка(АдрЭл.Номер.Значение);
						ИначеЕсли АдрЭл.Номер.Тип = "1050" Тогда
							Корпус = Корпус+"корп."+АдрЭл.Номер.Значение+",";
						ИначеЕсли АдрЭл.Номер.Тип = "1040" Тогда
							Корпус = Корпус+"уч."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "1060" Тогда
							Корпус = Корпус+"стр."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "1070" Тогда
							Корпус = Корпус+"соор."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "1080" или АдрЭл.Номер.Тип = "1090" Тогда   // литера или литер
							Корпус = Корпус+"лит."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2010" Тогда
							Квартира = Квартира+"кв."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2020" Тогда
							Квартира = Квартира+"пом."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2030" Тогда
							Квартира = Квартира+"оф."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2040" Тогда
							Квартира = Квартира+"бокс."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2050" Тогда
							Квартира = Квартира+"ком."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2060" Тогда
							Квартира = Квартира+"эт."+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2070" Тогда
							Квартира = Квартира+"а/я "+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2080" Тогда
							Квартира = Квартира+"в/ч "+строка(АдрЭл.Номер.Значение)+",";
						ИначеЕсли АдрЭл.Номер.Тип = "2090" Тогда
							Квартира = Квартира+"п/о "+строка(АдрЭл.Номер.Значение)+",";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если Лев(Корпус,5) = "корп." Тогда    // отрезаем "корп." в начале, чтобы в пользовательских визуализациях не выводилось два раза "корп."
					Корпус = Сред(Корпус,6);
				КонецЕсли;
				Если Прав(Корпус,1) = "," Тогда
					Корпус = Лев(Корпус,СтрДлина(Корпус)-1);
				КонецЕсли;
				Если Лев(Квартира,3) = "кв." Тогда    // отрезаем "кв." в начале, чтобы в пользовательских визуализациях не выводилось два раза "кв."
					Квартира = Сред(Квартира,4);
				КонецЕсли;
				Если Прав(Квартира,1) = "," Тогда
					Квартира = Лев(Квартира,СтрДлина(Квартира)-1);
				КонецЕсли;
			КонецЕсли;
			//UAA Вынес дубли кода
			Город		= ПолучитьПараметрАдресаУП(ЗначениеСостав, "Город");
			Регион		= ПолучитьПараметрАдресаУП(ЗначениеСостав, "СубъектРФ");
			НаселПункт	= ПолучитьПараметрАдресаУП(ЗначениеСостав, "НаселПункт");
			Улица		= ПолучитьПараметрАдресаУП(ЗначениеСостав, "Улица");			
			Если ЗначениеСостав.Свойство("СвРайМО") Тогда
				Район = ПолучитьПараметрАдресаУП(ЗначениеСостав.СвРайМО, "Район");
			КонецЕсли;
			//UAA добавляем к улице информацию в случае нестандартных адресных объектов.
			Улица = Улица + ?(ПустаяСтрока(Улица) Или ПустаяСтрока(УлицаДопИнфо), "", ", ") + УлицаДопИнфо;
		ИначеЕсли ТипЗнч(ЗначениеСостав) = Тип("Строка") Тогда	 // иностранный адрес
			Попытка
				КодСтраны = ПолучитьКодСтраныПоНазванию(АдресСтруктураXML.КонтактнаяИнформация.Состав.Страна);	
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Пока сч<=СтрЧислоСтрок(АдресРег) Цикл
			ЭлементАдреса = СтрПолучитьСтроку(АдресРег, сч);
			сч = сч+1;
			Если Найти(нрег(ЭлементАдреса), "индекс=") Тогда
				Индекс = Сред(ЭлементАдреса, 8);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "кодрегиона=") Тогда
				КодРегион = Сред(ЭлементАдреса, 12);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "регион=") Тогда
				Регион = Сред(ЭлементАдреса, 8);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "район=") Тогда
				Район = Сред(ЭлементАдреса, 7);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "город=") Тогда
				Город = Сред(ЭлементАдреса, 7);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "населенныйпункт=") Тогда
				НаселПункт = Сред(ЭлементАдреса, 17);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "улица=") Тогда
				Улица = Сред(ЭлементАдреса, 7);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "дом=") Тогда
				Дом = Сред(ЭлементАдреса, 5);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "корпус=") Тогда
				Корпус = Сред(ЭлементАдреса, 8);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "квартира=") Тогда
				Квартира = Сред(ЭлементАдреса, 10);
			ИначеЕсли Найти(нрег(ЭлементАдреса), "кодстраны=") Тогда
				КодСтраны = Сред(ЭлементАдреса, 11);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если КодРегион = "" И Не ПустаяСтрока(Регион) Тогда
		сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.КлассификаторРегионов", Регион); 
		сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
			сбисОписаниеОбъекта.Значение = ПолучитьКодРегионаПоНазванию(сбисОписаниеОбъекта.Ключ);
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		КонецЕсли;
		КодРегион = сбисОписаниеОбъекта.Значение;
	КонецЕсли;	
	
	Попытка
		Если КодРегион = "" Тогда
			ВызватьИсключение("")
		КонецЕсли;
		АдрСтрук = Новый Структура;
		сбисПроверитьПолеАдреса(АдрСтрук, "Индекс",		Индекс,6);
		сбисПроверитьПолеАдреса(АдрСтрук, "КодРегион",	КодРегион,2);
		сбисПроверитьПолеАдреса(АдрСтрук, "Район",		Район,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Город",		Город,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "НаселПункт",	НаселПункт,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Улица",		Улица,50);
		сбисПроверитьПолеАдреса(АдрСтрук, "Дом",		Дом,20);
		сбисПроверитьПолеАдреса(АдрСтрук, "Корпус",		Корпус,20);
		сбисПроверитьПолеАдреса(АдрСтрук, "Кварт",		Квартира,20);
		Адрес.Вставить("АдрРФ",АдрСтрук);
		
	Исключение
		Адрес.Вставить("АдрИно",сбисСтруктураАдрИно(КодСтраны,АдресЗапись.Представление)); // alo УКД
	КонецПопытки;
	//  УКД alo >>
	Возврат Адрес;
КонецФункции
//Функция вынесена из ПолучитьАдресУП.
&НаКлиенте
Функция ПолучитьПараметрАдресаУП(ЗначениеСостав, КлючПараметра)
	ЗначениеПараметра = Неопределено;
	Если ЗначениеСостав.Свойство(КлючПараметра, ЗначениеПараметра) Тогда
		Если ТипЗнч(ЗначениеПараметра) = Тип("Структура") И ЗначениеПараметра.Свойство("Параметр") Тогда
			Возврат ЗначениеПараметра.Параметр;
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Строка") Тогда
			Возврат ЗначениеПараметра;
		КонецЕсли;
	КонецЕсли;
	Возврат "";	
КонецФункции
&НаКлиенте 
Функция ПолучитьТелефонБГУ2(Контекст) Экспорт 
	// Функция вычисляет номер телефона в универсальном формате (3.01) 
	// не используется в типовых инишках. оставлена для совместимости 
	// может быть использована для конфигураций, где Контрагенты это ссылка на справочник ЮрЛица или ФизЛица (БГУ 2.0,...) 
	Если Контекст.Свойство("Телефон") и ЗначениеЗаполнено(Контекст.Телефон) Тогда 
		Возврат Контекст.Телефон.Представление; 
	ИначеЕсли Контекст.Свойство("ТелефонФЛ") и ЗначениеЗаполнено(Контекст.ТелефонФЛ) Тогда 
		Возврат Контекст.ТелефонФЛ.Представление; 
	ИначеЕсли Контекст.Свойство("ТелефонОрг") и ЗначениеЗаполнено(Контекст.ТелефонОрг) Тогда 
		Возврат Контекст.ТелефонОрг.Представление;
	Иначе 
		Возврат Неопределено; 
	КонецЕсли; 
КонецФункции
Функция ПолучитьКодРегионаПоНазванию(НазваниеРегиона) Экспорт
	// функция возвращает код региона по названию из регистра сведений АдресныйКлассификатор
	ИмяРегистра = ?(Метаданные.РегистрыСведений.Найти("АдресныеОбъекты") <> Неопределено, "АдресныеОбъекты", "АдресныйКлассификатор");
	ИмяУровня = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента",?(Метаданные.РегистрыСведений[ИмяРегистра].Реквизиты.Найти("ТипАдресногоЭлемента") <> Неопределено,"ТипАдресногоЭлемента","Уровень"));
	НазваниеКода = ?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодСубъектаРФ") <> Неопределено,"КодСубъектаРФ",?(Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти("КодРегионаВКоде") <> Неопределено,"КодРегионаВКоде","КодАдресногоОбъектаВКоде"));
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	АдресныйКлассификатор."+НазваниеКода+" КАК КодРегион
	|ИЗ
	|	РегистрСведений."+ИмяРегистра+" КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор."+ИмяУровня+" = 1
	|И  АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &НазваниеРегиона";
	Запрос.УстановитьПараметр("НазваниеРегиона", НазваниеРегиона);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		КодРегион = Выборка.КодРегион;
		Если Число(КодРегион)<10 Тогда
			КодРегион = "0"+Строка(КодРегион);
		КонецЕсли;
		Возврат КодРегион;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьКодСтраныПоНазванию(НазваниеСтраны) Экспорт
	// функция возвращает код региона по названию из регистра сведений АдресныйКлассификатор
	Если Метаданные.Справочники.Найти("СтраныМира") <> Неопределено Тогда
		Возврат Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(НазваниеСтраны), Истина).Код;	
	ИначеЕсли Метаданные.Справочники.Найти("КлассификаторСтранМира") <> Неопределено Тогда
		Возврат Справочники.КлассификаторСтранМира.НайтиПоНаименованию(СокрЛП(НазваниеСтраны), Истина).Код;
	Иначе
		Возврат "643";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьЦену(Контекст) Экспорт 
	// функция рассчитывает цену без НДС	
	Если Контекст.СуммаВключаетНДС Тогда
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Попытка
			Сумма = Число(Контекст.ТаблДок_Сумма);
		Исключение
			Сумма = 0;
		КонецПопытки;
		Попытка
			СуммаНДС = Число(Контекст.СуммаНДС);
		Исключение
			СуммаНДС = 0;
		КонецПопытки;
		
		Возврат Формат(?(Кол_во = 0, (Сумма-СуммаНДС), (Сумма-СуммаНДС) / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьЦенуРОЗН(Контекст) Экспорт 
	// функция рассчитывает цену без НДС	
	Попытка
		Кол_во = Число(Контекст.ТаблДок_Кол_во);
	Исключение
		Кол_во = 0;
	КонецПопытки;
	Попытка
		Сумма = Число(Контекст.ТаблДок_Сумма);
	Исключение
		Сумма = 0;
	КонецПопытки;
	Возврат Формат(?(Кол_во = 0, 0, Сумма / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции
&НаКлиенте
Функция cбисВычислитьЦенуПоСуммеИКоличеству(Контекст) Экспорт 
	// функция рассчитывает цену без НДС	
	Попытка
		Кол_во = Число(Контекст.ТаблДок_Кол_во);
	Исключение
		Кол_во = 0;
	КонецПопытки;
	Попытка
		Сумма = Число(Контекст.ТаблДок_Сумма);
	Исключение
		Сумма = 0;
	КонецПопытки;
	Возврат Формат(?(Кол_во = 0, Сумма, Сумма / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции
&НаКлиенте
Функция сбисВычислитьЦенуСНДС(Контекст) Экспорт 
	// функция рассчитывает цену без НДС	
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(Контекст.Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Попытка
			Сумма = Число(Контекст.ТаблДок_Сумма);
		Исключение
			Сумма = 0;
		КонецПопытки;
		Попытка
			СуммаНДС = Число(Контекст.СуммаНДС);
		Исключение
			СуммаНДС = 0;
		КонецПопытки;
		
		Возврат Формат(?(Кол_во = 0, (Сумма+СуммаНДС), (Сумма+СуммаНДС) / Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредЦену(Контекст) Экспорт 
	// функция рассчитывает цену без НДС до корректировки
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(?(Число(Контекст.ПредСтрТабл_Кол_во) = 0, (Контекст.ПредСтрТабл_Сумма-Контекст.СуммаНДСДо), (Контекст.ПредСтрТабл_Сумма-Контекст.СуммаНДСДо) / Контекст.ПредСтрТабл_Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.ЦенаДо,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьРасхождениеЦены(Контекст) Экспорт 
	// функция рассчитывает цену без НДС до корректировки
	Если Контекст.СуммаВключаетНДС Тогда
		Возврат Формат(?(Число(Контекст.Расхождение_Кол_во) = 0, (Контекст.Расхождение_Сумма-Контекст.Расхождение_СуммаНДС), (Контекст.Расхождение_Сумма-Контекст.Расхождение_СуммаНДС) / Контекст.Расхождение_Кол_во),"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	Иначе
		Возврат Формат(Контекст.Расхождение_Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
	КонецЕсли;
КонецФункции
Функция ПолучитьНазваниеОснования(Контекст) Экспорт
	// Функция возвращает название договора или заказа - основания реализации	
	Если Контекст.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		И Контекст.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		Возврат Контекст.Договор_Название;
	Иначе
		Если ЗначениеЗаполнено(Контекст.Сделка) Тогда
			НазваниеНомер = Лев(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+3);
			ДатаСделки = СокрЛП(Сред(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+4));
			ДатаСделки = Лев(ДатаСделки, Найти(ДатаСделки, " ")-1);
			ДатаСделки = формат(Дата(Сред(ДатаСделки,7,4), Сред(ДатаСделки,4,2), Лев(ДатаСделки, 2)),"ДФ='дд ММММ гггг'");
			Возврат НазваниеНомер+ДатаСделки;
		КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПолучитьНазваниеСделки(Контекст) Экспорт
	// Функция возвращает название договора или заказа - основания реализации	
	Если ЗначениеЗаполнено(Контекст.Сделка) Тогда
		НазваниеНомер = Лев(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+3);
		ДатаСделки = СокрЛП(Сред(Контекст.Сделка, Найти(Контекст.Сделка, " от ")+4));
		ДатаСделки = Лев(ДатаСделки, Найти(ДатаСделки, " ")-1);
		ДатаСделки = формат(Дата(Сред(ДатаСделки,7,4), Сред(ДатаСделки,4,2), Лев(ДатаСделки, 2)),"ДФ='дд ММММ гггг'");
		Возврат НазваниеНомер+ДатаСделки;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПолучитьДатуОснованияИзНазвания(Контекст) Экспорт
	ПозицияДаты = Найти(Контекст.Основание_Название, " от ");
	Если ПозицияДаты>0 Тогда
		ДатаСтрокой = Сред(Контекст.Основание_Название, ПозицияДаты+4, 10);
		Попытка
			ДатаОсн = Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
			Возврат ДатаСтрокой
		Исключение
			Возврат "";
		КонецПопытки;
	КонецЕсли;
	Возврат "";
КонецФункции
Функция сбисНайтиСвязанныйСчет(Контекст) Экспорт
	СтруктураСчета = Новый Структура("Дата,Номер");
	Запрос = Новый Запрос("ВЫБРАТЬ 
	|	СчетНаОплатуПокупателю.Номер, 
	|	СчетНаОплатуПокупателю.Дата
	|ИЗ 
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю 
	|ГДЕ 
	|	СчетНаОплатуПокупателю.ЗаказПокупателя = &Сделка ИЛИ СчетНаОплатуПокупателю.Ссылка = &Сделка");
	Запрос.УстановитьПараметр("Сделка", Контекст.Сделка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураСчета.Дата = Формат(Выборка.Дата, "ДФ=dd.MM.yyyy");	
		СтруктураСчета.Номер = Выборка.Номер;
	КонецЕсли;
	Возврат СтруктураСчета;
КонецФункции
Функция ПолучитьНаименованиеУчережденияБГУ(Контекст) Экспорт
	// Функция возвращает название гос. учреждения	
	Если ЗначениеЗаполнено(Контекст.РеквизитыЛицевогоСчета.КорреспондентТекст) = 1 Тогда
		НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КорреспондентТекст;
	Иначе
		//AU 1176084057
		ДопНомерСчета	= "";
		ЛицевойСчетКод	= СокрЛП(Контекст.ЛицевойСчет.Код);
		Если ЗначениеЗаполнено(ЛицевойСчетКод) Тогда
			ДопНомерСчета = ", л/с " + ЛицевойСчетКод;
		КонецЕсли;
		Если Контекст.ЛицевойСчет.ТипЛицевогоСчета = Перечисления.ТипыЛицевыхСчетов.Казначейский Тогда
			НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КассовыйОрган.Наименование + ДопНомерСчета + ", " + Контекст.Наименование;
		ИначеЕсли ЗначениеЗаполнено(Контекст.РеквизитыЛицевогоСчета) Тогда
			НаимСтороны = Контекст.РеквизитыЛицевогоСчета.КассовыйОрган.Наименование + " (" + Контекст.Наименование + ДопНомерСчета + ")";
		Иначе
			НаимСтороны = Контекст.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НаимСтороны;
	
КонецФункции
функция НомерИсправленияИсходногоДокументаБГУ(Контекст) Экспорт
	// Функция возвращает номер исправления исходного СФ (для бухгалтерии гос. учреждений)
	Если ТипЗнч(Контекст.ДокОснование)=Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") Тогда
		Возврат Контекст.ДокОснование.НомерИсправления;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
функция ДатаИсправленияИсходногоДокументаБГУ(Контекст) Экспорт
	// Функция возвращает дату исправления исходного СФ (для бухгалтерии гос. учреждений)	
	Если ТипЗнч(Контекст.ДокОснование)=Тип("ДокументСсылка.НДС_ИсправительныйСчетФактураВыданный") Тогда
		Возврат Формат(Контекст.ДокОснование.Дата, "ДФ=dd.MM.yyyy");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьИдентификаторНоменклатуры(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры (он состоит из идентификатора самой номенклатуры, ее характеристики и единицы измерения). 
	// Данный идентификатор используется при сопоставлении номенклатуры
	Если Контекст.Свойство("РеквизитСопоставленияНоменклатуры") и Контекст.РеквизитСопоставленияНоменклатуры="Код" Тогда
		Возврат ОпределитьКодНоменклатуры(Контекст);
	Иначе
		Возврат ОпределитьИдентификаторНоменклатурыНаСервере(Контекст);	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьИдентификаторНоменклатурыНаСервере(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры (он состоит из идентификатора самой номенклатуры, ее характеристики и единицы измерения). 
	// Данный идентификатор используется при сопоставлении номенклатуры
	ИДТовара = строка(Контекст.Номенклатура.УникальныйИдентификатор());
	ИДХарактеристики = "";
	ИДУпаковки = "";
	Если Контекст.Свойство("Характеристика") Тогда
		Попытка
			Если ЗначениеЗаполнено(Контекст.Характеристика) Тогда
				ИДХарактеристики = Контекст.Характеристика.УникальныйИдентификатор();
			Иначе
				ИДХарактеристики = "";
			КонецЕсли;
		Исключение
			ИДХарактеристики = "";
		КонецПопытки;
	КонецЕсли;
	Если Контекст.Свойство("ЕдИзмУпаковки") и ЗначениеЗаполнено(Контекст.ЕдИзмУпаковки) Тогда
		Попытка
			ИДУпаковки = Контекст.ЕдИзмУпаковки.УникальныйИдентификатор();
		Исключение
			ИДУпаковки = "";
		КонецПопытки;
	КонецЕсли;
	Если Контекст.Свойство("ЕдИзм") и ИДУпаковки = "" Тогда
		Попытка
			Если ЗначениеЗаполнено(Контекст.ЕдИзм) Тогда
				ИДУпаковки = Контекст.ЕдИзм.УникальныйИдентификатор();
			Иначе
				ИДУпаковки = "";
			КонецЕсли;
		Исключение
			ИДУпаковки = "";
		КонецПопытки;
	КонецЕсли;
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);	
КонецФункции
&НаКлиенте
Функция ОпределитьКодНоменклатуры(Контекст) Экспорт
	// Функция возвращает код номенклатуры. 
	// Данный код используется при сопоставлении номенклатуры
	Если Контекст.Свойство("Номенклатура_Код") Тогда   // в случае, если ТаблДок_Код вычисляется с помощью функции
		ИДТовара = СокрЛП(Контекст.Номенклатура_Код);
	Иначе
		ИДТовара = СокрЛП(Контекст.ТаблДок_Код);
	КонецЕсли;
	Возврат ИДТовара;	
КонецФункции
&НаКлиенте
Функция ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст) Экспорт
	// Функция формирует идентификатор номенклатуры контрагента (если есть сопоставление по номенклатуре) 
	ГлавноеОкно = Неопределено;
	Если МестныйКэш = Неопределено
		Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	КонецЕсли;
	Если ЗначениеЗаполнено(ГлавноеОкно.Кэш) Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьИдентификаторНоменклатурыПоставщика",ГлавноеОкно.Кэш.ФормаРаботыСНоменклатурой,"", ГлавноеОкно.Кэш);
		Попытка
			стрКонтрагент = сбисЗаполнитьСтруктуруКонтрагента(Контекст.Контрагент);
			стрНоменклатура = Новый Структура("Номенклатура,Характеристика", Контекст.Номенклатура,?(Контекст.Свойство("Характеристика"),Контекст.Характеристика,Неопределено));
			Возврат фрм.ПолучитьИдентификаторНоменклатурыПоставщика(стрКонтрагент, стрНоменклатура, ГлавноеОкно.КаталогНастроек, ГлавноеОкно.Кэш.Ини);	
		Исключение
			Возврат "";		
		КонецПопытки;
	Иначе
		Возврат "";	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьКодНашейНоменклатуры(Контекст) Экспорт
	// Функция берет код из сопоставления номенклатуры (используется, если сопоставление было при загрузке исходящих документов, то есть сопоставляетя наша номенклатура с нашей же, но из другой базы) 
	Код = ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст); //
	Если НЕ ЗначениеЗаполнено(Код) Тогда   // Если нет сопоставления, то заполняем код
		Код = Контекст.Номенклатура_Код;
	КонецЕсли;
	Возврат Код;
КонецФункции
&НаКлиенте
Функция ОпределитьИдентификаторНашейНоменклатуры(Контекст) Экспорт
	// Функция берет код из сопоставления номенклатуры (используется, если сопоставление было при загрузке исходящих документов, то есть сопоставляетя наша номенклатура с нашей же, но из другой базы) 
	Код = ОпределитьИдентификаторНоменклатурыКонтрагента(Контекст); //
	Если НЕ ЗначениеЗаполнено(Код) Тогда   // Если нет сопоставления, то заполняем идентификатор
		Код = ОпределитьИдентификаторНоменклатуры(Контекст);
	КонецЕсли;
	Возврат Код;
КонецФункции
&НаСервереБезКонтекста
Функция сбисЗаполнитьДопСвойстваОбъектов(Свойства, ИниКонфигурация) Экспорт
	Для Каждого Элемент Из Свойства Цикл
		сбисЗаполнитьДопСвойствоОбъекта(Элемент.Объект1С, Элемент.ИмяСвойства, Элемент.ЗначениеСвойства, ?(Элемент.Свойство("НазначениеСвойства"), Элемент.НазначениеСвойства, Неопределено), ИниКонфигурация);	
	КонецЦикла;
КонецФункции
&НаСервереБезКонтекста
Функция сбисЗаполнитьДопСвойствоОбъекта(Объект1С, ИмяСвойства, ЗначениеСвойства, НазначениеСвойства, ИниКонфигурация) Экспорт
	Свойство = ДобавитьЗаписьВПланВидовХарактеристик(ИмяСвойства, ИниКонфигурация, НазначениеСвойства);
	Если Свойство<>Ложь Тогда
		ИмяРегистраСвойствОбъектов = ИмяРегистраСвойствОбъектов(ИниКонфигурация);
		НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Объект1С);
		НаборЗаписей.Отбор.Свойство.Установить(Свойство.Ссылка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.Объект = Объект1С;
			НоваяЗаписьНабора.Свойство = Свойство.Ссылка;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);	
		КонецЕсли;
		Попытка
			НоваяЗаписьНабора.Значение = ЗначениеСвойства;
			НаборЗаписей.Записать();
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ПолучитьНаименованиеУслуги(Контекст) Экспорт
	// Функция возвращает наименование услуги	
	НаименованиеУслуги = ?(ЗначениеЗаполнено(Контекст.Описание),Контекст.Описание,Контекст.Название);
	Возврат НаименованиеУслуги;
КонецФункции
функция ОпределитьНазваниеУпаковки(Контекст) Экспорт
	// Функция возвращает наименование упаковки товара	
	Если Контекст.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
		Возврат СокрЛП(Контекст.Номенклатура.ЕдиницаИзмерения);
	Иначе
		Возврат СокрЛП(Контекст.Упаковка.ЕдиницаИзмерения);
	КонецЕсли;
КонецФункции
функция ОпределитьКоличествоВОдномМесте(Контекст) Экспорт
	// Функция опеределяет количество товара в упаковке	
	Если Контекст.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
		Возврат "1";
	Иначе
		Возврат Формат(Контекст.Упаковка.Коэффициент, "ЧЦ=12; ЧДЦ=0; ЧРД=.; ЧГ=0;");
	КонецЕсли;
КонецФункции
Функция ОпределитьМассуБрутто(Контекст) Экспорт
	// Функция опеределяет массу брутто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			КолМест = ?(Контекст.Свойство("КолМест"), Контекст.КолМест, Контекст.Упаковка_КолМест);  // в Контекст.Упаковка_КолМест - округленное значение, а для веса нужно точное
			Если ЗначениеЗаполнено(КолМест) и Число(КолМест) > 0 и ЗначениеЗаполнено(Контекст.ВесБрутто) и Число(Контекст.ВесБрутто)<>0 Тогда 
				Возврат Формат(Число(КолМест) * Число(Контекст.ВесБрутто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			Иначе
				Возврат Формат(Число(Контекст.ТаблДок_Кол_во) * Число(Контекст.ВесНетто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			КонецЕсли;
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции
Функция ОпределитьМассуНетто(Контекст) Экспорт
	// Функция опеределяет массу нетто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		Возврат Формат(Кол_во * Число(Контекст.ВесНетто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
	КонецЕсли;	
	
КонецФункции
Функция ПараметрыМассыПрописью(Масса) Экспорт
	// Функция опеределяет параметры для получения массы прописью в определенных единицах измерения	
	КоэффициентПересчетаВТонны     = Константы.КоэффициентПересчетаВТонны.Получить();
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции
функция ОпределитьМассуИтогПрописью(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью	
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(МассаИтог) Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописью(МассаИтог);
		Возврат ЧислоПрописью(
		МассаИтог * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
функция ОпределитьМассуИтогПрописьюНеупрПрил(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью для обычных приложений	
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(Контекст.ЕдиницаИзмеренияВеса) И МассаИтог > 0 Тогда
		Возврат ЧислоПрописью(МассаИтог, ,",,,,,,,,0")+ " " +Контекст.ЕдиницаИзмеренияВеса.Наименование + ".";
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции
//НГС
Функция НайтиФизЛицоПоРеквизиту(Контекст) Экспорт
	ФИО = Контекст.Ини.ФизическоеЛицо.Значение;
	СправочникФизЛица = Вычислить(Контекст.Ини.Контрагент.Тип);
	Возврат СправочникФизЛица.НайтиПоРеквизиту(Контекст.Ини.Контрагент.Данные, ФИО);
КонецФункции
//КНГС
//// УТ 11.2+
&НаКлиенте
функция ОпределитьКоличествоВОдномМестеУТ11_2(Контекст) Экспорт
	// Функция опеределяет количество товара в упаковке 
	Если Контекст.Упаковка.Пустая() Тогда
		Возврат "1";
	Иначе
		Возврат Формат(Контекст.УпаковкаЧислитель/?(Контекст.УпаковкаЗнаменатель = 0,1,Контекст.УпаковкаЗнаменатель), "ЧЦ=12; ЧДЦ=0; ЧРД=.; ЧГ=0;");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьМассуБруттоУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу брутто	
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			КолМест = ?(Контекст.Свойство("КолМест"), Контекст.КолМест, Контекст.Упаковка_КолМест);  // в Контекст.Упаковка_КолМест - округленное значение, а для веса нужно точное
			Если ЗначениеЗаполнено(КолМест) и Число(КолМест) > 0 и ЗначениеЗаполнено(Контекст.ВесБрутто) и Число(Контекст.ВесБрутто)<>0 Тогда 
				Возврат Формат(Число(КолМест) * Число(Контекст.ВесБрутто), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			Иначе
				Возврат Формат(Число(Контекст.ТаблДок_Кол_во) * Число(ОпределитьВесНоменклатурыУТ11_2(Контекст)), "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
			КонецЕсли;
		Исключение
			Возврат 0;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ОпределитьВесНоменклатурыУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу нетто 
	Если Контекст.ВесИспользовать тогда
		ВесЧислитель = Контекст.ВесЧислитель;
		ВесЗнаменатель = Контекст.ВесЗнаменатель;
		Если ВесЗнаменатель=0 Тогда
			Возврат ВесЧислитель;
		Иначе
			Вес = Число(ВесЧислитель/ВесЗнаменатель); 
			Возврат Формат(Вес, "ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
		КонецЕсли; 
		
	иначе
		возврат 0;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ОпределитьМассуНеттоУТ11_2(Контекст) Экспорт
	// Функция опеределяет массу нетто 
	ЕдиницаИзмеренияВеса = Контекст.ЕдиницаИзмеренияВеса;
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) Тогда
		Возврат 0;
	Иначе
		Попытка
			Кол_во = Число(Контекст.ТаблДок_Кол_во);
		Исключение
			Кол_во = 0;
		КонецПопытки;
		ВесНетто = ОпределитьВесНоменклатурыУТ11_2(Контекст);
		Возврат Кол_во * Число(ВесНетто);
	КонецЕсли; 
	
КонецФункции
функция ОпределитьНазваниеУпаковкиУТ11_2(Контекст) Экспорт
	// Функция возвращает наименование упаковки товара 
	Если Контекст.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка() Тогда
		Возврат СокрЛП(Контекст.Номенклатура.ЕдиницаИзмерения);
	Иначе
		Возврат СокрЛП(Контекст.Упаковка.ЕдиницаИзмерения);
	КонецЕсли;
КонецФункции
&НаКлиенте
функция ОпределитьМассуИтогПрописьюУТ11_2(Контекст) Экспорт
	// Функция опеределяет итоговую массу товара прописью 
	МассаИтог = Контекст.МассаИтог;
	Если ЗначениеЗаполнено(МассаИтог) Тогда
		ПараметрыМассыПрописью = ПараметрыМассыПрописьюУТ11_2(МассаИтог);
		Возврат ЧислоПрописью(
		МассаИтог * ПараметрыМассыПрописью.Коэффициент,
		"ДП=Истина",
		ПараметрыМассыПрописью.Формат);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция ПараметрыМассыПрописьюУТ11_2(Масса) Экспорт
	// Функция опеределяет параметры для получения массы прописью в определенных единицах измерения 
	КоэффициентПересчетаВТонны     =  0.001;
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны > 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 > 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции
////Сверка взаиморасчетов////
&НаСервереБезКонтекста
Функция ТекстЗапросаОтборПоАналитике(ДопПараметры=Неопределено)
	// Функция возвращает часть запроса для формирования табличной части акта сверки в конфигурации УТ11
	Возврат "
	|ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборПоАналитике
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|	И (АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|		ИЛИ &НеИспользоватьОтборПоПартнеру)" +
	?(ДопПараметры=Неопределено Или ДопПараметры.АналитикаДоговор,  
	"
	|	И (АналитикаУчетаПоПартнерам.Договор = &Договор
	|		ИЛИ &НеИспользоватьОтборПоДоговору)",
	"") + 
	"
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
КонецФункции
&НаСервереБезКонтекста
функция сбисЗаполнитьТаблицуВзаиморасчетовУТ11(Контекст) Экспорт
	// Функция формирует табличную часть акта сверки для конфигурации УТ11	
	ДанныеТЧ = сбисПолучитьДанныеВзаиморасчетовУТ11(Контекст);
	Возврат ДанныеТЧ.ТабЧастьДокумента;
КонецФункции
&НаСервереБезКонтекста
функция сбисЗаполнитьНачальныйОстатокУТ11(Контекст) Экспорт
	// Функция возвращает остаток на начало периода сверки взаиморасчетов для конфигурации УТ11	
	ДанныеТЧ = сбисПолучитьДанныеВзаиморасчетовУТ11(Контекст);
	Возврат ДанныеТЧ.НачальныйОстаток;
КонецФункции
&НаСервереБезКонтекста
функция сбисПолучитьДанныеВзаиморасчетовУТ11(Контекст)
	// Функция формирует данные акта сверки для конфигурации УТ11	
	ИмяДокументаПоступления = "ПоступлениеТоваровУслуг";
	Если Метаданные.Документы.Найти("ПоступлениеТоваровУслуг")= Неопределено Тогда
		ИмяДокументаПоступления = "ПриобретениеТоваровУслуг";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаОтборПоАналитике(Новый Структура("АналитикаДоговор", Ложь)) + "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента	КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента  КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|
	|ПОМЕСТИТЬ ДокументыИнтеркампани
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Комиссионер = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента 	КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ОрганизацияПолучатель = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Номер
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента,
	|				РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Номер)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Дата
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор.ДатаВходящегоДокумента,
	|				РасчетыСКлиентамиОстаткиИОбороты.Регистратор.Дата)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента.Договор
	|	КОНЕЦ										 КАК Договор,
	|	РасчетыСКлиентамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|		 ИЛИ РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход КАК СуммаДолгПартнера,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход КАК СуммаНашДолг,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(РеализацияТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|
	|ПОМЕСТИТЬ РасчетыСПартнерами
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказКлиента ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказКлиента
	|				ИНАЧЕ
	|					ЗаказКлиента.Договор
	|				КОНЕЦ = &Договор)
	|	) КАК РасчетыСКлиентамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслугРеглУчет
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = РеализацияТоваровУслугРеглУчет.Ссылка
	|		И РеализацияТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Номер
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента,
	|				РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Номер)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Дата
	|		ИНАЧЕ
	|			ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.ДатаВходящегоДокумента,
	|				РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.Дата)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстаткиИОбороты.ЗаказПоставщику.Договор
	|	КОНЕЦ										 КАК Договор,
	|	РасчетыСПоставщикамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|		 ИЛИ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход КАК СуммаДолгПартнера,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход КАК СуммаНашДолг,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(ПоступлениеТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|			И (&НеИспользоватьОтборПоДоговору
	|				ИЛИ	ВЫБОР КОГДА ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|					ЗаказПоставщику
	|				ИНАЧЕ
	|					ЗаказПоставщику.Договор
	|				КОНЕЦ = &Договор)
	|	) КАК РасчетыСПоставщикамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ."+ИмяДокументаПоступления+" КАК ПоступлениеТоваровУслугРеглУчет
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ПоступлениеТоваровУслугРеглУчет.Ссылка
	|		И ПоступлениеТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ГДЕ
	|	НЕ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата				КАК Период,
	|	ДанныеДокумента.Ссылка				КАК Документ,
	|	Расшифровка.НомерВходящегоДокумента	КАК Номер,
	|	Расшифровка.ДатаВходящегоДокумента	КАК Дата,
	|	Расшифровка.Поставщик				КАК Партнер,
	|	ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Расшифровка.Заказ
	|	ИНАЧЕ
	|		Расшифровка.Заказ.Договор
	|	КОНЕЦ								КАК Договор,
	|	Расшифровка.ВалютаВзаиморасчетов	КАК Валюта,
	|	Истина								КАК ЭтоВходящийДокумент,
	|	Расшифровка.СуммаВзаиморасчетов		КАК СуммаДолгПартнера,
	|	0									КАК СуммаНашДолг,
	|	0									КАК СуммаНачальныйОстаток,
	|	0									КАК СуммаКонечныйОстаток,
	|	Неопределено						КАК ОрганизацияРеглУчет
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ОплатаПоставщикам КАК Расшифровка
	|		ПО Расшифровка.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И Расшифровка.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И (&НеИспользоватьОтборПоДоговору
	|		ИЛИ ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|			Расшифровка.Заказ
	|		ИНАЧЕ
	|			Расшифровка.Заказ.Договор
	|		КОНЕЦ = &Договор)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСПартнерами.Период				 		КАК Период,
	|	РасчетыСПартнерами.Документ				 		КАК Документ,
	|	РасчетыСПартнерами.Номер				 		КАК Номер,
	|	РасчетыСПартнерами.Дата					 		КАК Дата,
	|	%ПолеПартнер%
	|	%ПолеДоговор%
	|	РасчетыСПартнерами.Валюта				 		КАК Валюта,
	|	РасчетыСПартнерами.ЭтоВходящийДокумент	 		КАК ЭтоВходящийДокумент,
	|	СУММА(РасчетыСПартнерами.СуммаДолгПартнера)	 	КАК СуммаДолгПартнера,
	|	СУММА(РасчетыСПартнерами.СуммаНашДолг)			КАК СуммаНашДолг,
	|	СУММА(РасчетыСПартнерами.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(РасчетыСПартнерами.СуммаКонечныйОстаток)	КАК СуммаКонечныйОстаток,
	|	РасчетыСПартнерами.ОрганизацияРеглУчет			КАК ОрганизацияРеглУчет
	|ИЗ
	|	РасчетыСПартнерами КАК РасчетыСПартнерами
	|
	|СГРУППИРОВАТЬ ПО
	|	Период, Документ, Номер, Дата, %Партнер% %Договор% Валюта, ЭтоВходящийДокумент, ОрганизацияРеглУчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|
	|ИТОГИ ПО
	|	%Партнер%
	|	%Договор%
	|	Валюта
	|";
	Возврат сбисОбработатьЗапросВзаиморасчетов(Контекст, ТекстЗапроса);
	
КонецФункции
&НаСервереБезКонтекста
функция сбисЗаполнитьНачальныйОстатокУТ11_4(Контекст) Экспорт
	// Функция возвращает остаток на начало периода сверки взаиморасчетов для конфигурации УТ11	
	ДанныеТЧ = сбисПолучитьДанныеВзаиморасчетовУТ11_4(Контекст);
	Возврат ДанныеТЧ.НачальныйОстаток;
КонецФункции
&НаСервереБезКонтекста
функция сбисЗаполнитьТаблицуВзаиморасчетовУТ11_4(Контекст) Экспорт
	// Функция формирует табличную часть акта сверки для конфигурации УТ11	
	ДанныеТЧ = сбисПолучитьДанныеВзаиморасчетовУТ11_4(Контекст);
	Возврат ДанныеТЧ.ТабЧастьДокумента;
КонецФункции
&НаСервереБезКонтекста
функция сбисПолучитьДанныеВзаиморасчетовУТ11_4(Контекст)
	// Функция формирует данные акта сверки для конфигурации УТ11	
	ИмяДокументаПоступления = "ПоступлениеТоваровУслуг";
	Если Метаданные.Документы.Найти("ПоступлениеТоваровУслуг")= Неопределено Тогда
		ИмяДокументаПоступления = "ПриобретениеТоваровУслуг";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаОтборПоАналитике() + "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента	КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|
	|ПОМЕСТИТЬ ДокументыИнтеркампани
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Комиссионер = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	Истина									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ОрганизацияПолучатель = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	Ложь									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Номер = """"
	|				ТОГДА ДанныеПервичныхДокументов.НомерРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Номер
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ДанныеПервичныхДокументов.ДатаРегистратора
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Дата = ДАТАВРЕМЯ(1,1,1)
	|				ТОГДА ДанныеПервичныхДокументов.ДатаРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Дата
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Договор	 КАК Договор,
	|	РасчетыСКлиентамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|			ИЛИ РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход < 0 ТОГДА
	|		-РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход
	|	КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход > 0 ТОГДА
	|		РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход
	|	КОНЕЦ КАК СуммаДолгПартнера,
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход < 0 ТОГДА
	|		-РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход
	|	КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход > 0 ТОГДА
	|		РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход
	|	КОНЕЦ КАК СуммаНашДолг,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(РеализацияТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|
	|ПОМЕСТИТЬ РасчетыСПартнерами
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|	) КАК РасчетыСКлиентамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслугРеглУчет
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = РеализацияТоваровУслугРеглУчет.Ссылка
	|		И РеализацияТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РегистрАналитикаУчетаПоПартнерам.Организация = ДанныеПервичныхДокументов.Организация
	|			И РасчетыСКлиентамиОстаткиИОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Номер = """"
	|				ТОГДА ДанныеПервичныхДокументов.НомерРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Номер
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ДанныеПервичныхДокументов.ДатаРегистратора
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Дата = ДАТАВРЕМЯ(1,1,1)
	|				ТОГДА ДанныеПервичныхДокументов.ДатаРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Дата
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Договор	 КАК Договор,
	|	РасчетыСПоставщикамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|			ИЛИ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			Ложь
	|		ИНАЧЕ
	|			Истина
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход < 0 ТОГДА
	|		-РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход
	|	КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход > 0 ТОГДА
	|		РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход
	|	КОНЕЦ КАК СуммаДолгПартнера,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход < 0 ТОГДА
	|		-РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход
	|	КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход > 0 ТОГДА
	|		РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход
	|	КОНЕЦ КАК СуммаНашДолг,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|	) КАК РасчетыСПоставщикамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ."+ИмяДокументаПоступления+" КАК ПриобретениеТоваровУслугРеглУчет
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ПриобретениеТоваровУслугРеглУчет.Ссылка
	|		И ПриобретениеТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РегистрАналитикаУчетаПоПартнерам.Организация = ДанныеПервичныхДокументов.Организация
	|			И РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|ГДЕ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ЕСТЬ NULL
	|	ИЛИ НЕ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата				КАК Период,
	|	ДанныеДокумента.Ссылка				КАК Документ,
	|	Расшифровка.НомерВходящегоДокумента	КАК Номер,
	|	Расшифровка.ДатаВходящегоДокумента	КАК Дата,
	|	Расшифровка.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	Расшифровка.Поставщик				КАК Партнер,
	|	ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Расшифровка.Заказ
	|	ИНАЧЕ
	|		Расшифровка.Заказ.Договор
	|	КОНЕЦ								КАК Договор,
	|	Расшифровка.ВалютаВзаиморасчетов	КАК Валюта,
	|	Истина								КАК ЭтоВходящийДокумент,
	|	Расшифровка.СуммаВзаиморасчетов		КАК СуммаДолгПартнера,
	|	0									КАК СуммаНашДолг,
	|	0									КАК СуммаНачальныйОстаток,
	|	0									КАК СуммаКонечныйОстаток,
	|	Неопределено						КАК ОрганизацияРеглУчет
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ОплатаПоставщикам КАК Расшифровка
	|		ПО Расшифровка.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И Расшифровка.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И (&НеИспользоватьОтборПоДоговору
	|		ИЛИ ВЫБОР КОГДА Расшифровка.Заказ ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|			Расшифровка.Заказ
	|		ИНАЧЕ
	|			Расшифровка.Заказ.Договор
	|		КОНЕЦ = &Договор)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСПартнерами.Период				 		КАК Период,
	|	РасчетыСПартнерами.Документ				 		КАК Документ,
	|	РасчетыСПартнерами.Номер				 		КАК Номер,
	|	РасчетыСПартнерами.Дата					 		КАК Дата,
	|	РасчетыСПартнерами.ДатаВходящегоДокумента       КАК ДатаВходящегоДокумента,
	|	%ПолеПартнер%
	|	%ПолеДоговор%
	|	РасчетыСПартнерами.Валюта				 		КАК Валюта,
	|	РасчетыСПартнерами.ЭтоВходящийДокумент	 		КАК ЭтоВходящийДокумент,
	|	СУММА(РасчетыСПартнерами.СуммаДолгПартнера)	 	КАК СуммаДолгПартнера,
	|	СУММА(РасчетыСПартнерами.СуммаНашДолг)			КАК СуммаНашДолг,
	|	СУММА(РасчетыСПартнерами.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(РасчетыСПартнерами.СуммаКонечныйОстаток)	КАК СуммаКонечныйОстаток,
	|	РасчетыСПартнерами.ОрганизацияРеглУчет			КАК ОрганизацияРеглУчет
	|ПОМЕСТИТЬ РасчетыСПартнерамиГруппировка
	|ИЗ
	|	РасчетыСПартнерами КАК РасчетыСПартнерами
	|
	|СГРУППИРОВАТЬ ПО
	|	Период, Документ, Номер, Дата, ДатаВходящегоДокумента, %Партнер% %Договор% Валюта, ЭтоВходящийДокумент, ОрганизацияРеглУчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПартнерами.Период                 КАК Период,
	|	РасчетыСПартнерами.Документ               КАК Документ,
	|	РасчетыСПартнерами.Номер                  КАК Номер,
	|	РасчетыСПартнерами.Дата                   КАК Дата,
	|	РасчетыСПартнерами.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	%ПолеПартнер%
	|	%ПолеДоговор%
	|	РасчетыСПартнерами.Валюта                 КАК Валюта,
	|	РасчетыСПартнерами.ЭтоВходящийДокумент    КАК ЭтоВходящийДокумент,
	|	ЕстьNull(РасчетыСПартнерами.СуммаДолгПартнера,0)      КАК СуммаДолгПартнера,
	|	ЕстьNull(РасчетыСПартнерами.СуммаНашДолг,0)           КАК СуммаНашДолг,
	|	ЕстьNull(РасчетыСПартнерами.СуммаНачальныйОстаток,0)  КАК СуммаНачальныйОстаток,
	|	ЕстьNull(РасчетыСПартнерами.СуммаКонечныйОстаток,0)   КАК СуммаКонечныйОстаток,
	|	ЕстьNull(РасчетыСПартнерами.ОрганизацияРеглУчет,0)    КАК ОрганизацияРеглУчет
	|ИЗ
	|	РасчетыСПартнерамиГруппировка КАК РасчетыСПартнерами
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период, Документ
	|
	|ИТОГИ ПО
	|	%Партнер%
	|	%Договор%
	|	Валюта
	|";
	
	Возврат сбисОбработатьЗапросВзаиморасчетов(Контекст, ТекстЗапроса);
	
КонецФункции
&НаСервереБезКонтекста
функция сбисОбработатьЗапросВзаиморасчетов(Контекст, ТекстЗапроса)
	ДанныеДокумента = Контекст.Документ;
	ТабЧастьДокумента = Новый Массив;
	НачальныйОстаток = 0;
	
	ЗапросНашихДанных = Новый Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеПартнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "РасчетыСПартнерами.Партнер КАК Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Партнер%", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолеДоговор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "РасчетыСПартнерами.Договор КАК Договор,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Договор%", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "Договор,", ""));
	ЗапросНашихДанных.Текст = ТекстЗапроса;
	
	ЗапросНашихДанных.УстановитьПараметр("НачалоПериодаСверки", ДанныеДокумента.НачалоПериода);
	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки",	КонецДня(ДанныеДокумента.КонецПериода));
	ЗапросНашихДанных.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(
	КонецДня(ДанныеДокумента.КонецПериода)+1,
	ВидГраницы.Исключая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		    ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		    ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	    ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	    ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));
	
	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ВыборкаНашихДанных = РезультатЗапросаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаНашихДанных = Неопределено;
	КонецЕсли;
	
	Если ВыборкаНашихДанных = Неопределено Тогда 
		Возврат Новый Структура("ТабЧастьДокумента, НачальныйОстаток",ТабЧастьДокумента,НачальныйОстаток);
	КонецЕсли;
	
	Пока ВыборкаНашихДанных.Следующий() Цикл
		
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			ВыборкаПоДетальнымРасчетам = ВыборкаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
				сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаПоДетальнымРасчетам, ДанныеДокумента, ВыборкаНашихДанных.Договор, НачальныйОстаток);
			КонецЦикла; 
		Иначе
			сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаНашихДанных, ДанныеДокумента, ,НачальныйОстаток);
		КонецЕсли;
		
	КонецЦикла;
	Возврат Новый Структура("ТабЧастьДокумента, НачальныйОстаток",ТабЧастьДокумента,НачальныйОстаток);	
КонецФункции
&НаСервереБезКонтекста
Функция сбисВывестиДетальныеЗаписи(ТабЧастьДокумента, ВыборкаДетальныхЗаписей, ДанныеДокумента, ТекущийДоговор = Неопределено,НачальныйОстаток)
	// Функция заполняет данные по строкам акта сверки для конфигурации УТ11	
	ДетальныеЗаписи = ВыборкаДетальныхЗаписей.Выбрать();
	
	ПервыйПроход = Истина;
	Пока ДетальныеЗаписи.Следующий() Цикл
		Если ДетальныеЗаписи.Документ = Null Тогда//AU Выборка шапки итогов. Пропускаем
			Продолжить;
		КонецЕсли;
		Если ДетальныеЗаписи.Документ = Неопределено Тогда
			Если ДетальныеЗаписи.Период = ДанныеДокумента.НачалоПериода Тогда
				НачальныйОстаток = НачальныйОстаток + ДетальныеЗаписи.СуммаНачальныйОстаток;
				//Иначе
				//	КонечныйОстаток = КонечныйОстаток + ДетальныеЗаписи.СуммаКонечныйОстаток;
			КонецЕсли;
		Иначе
			
			//Если ПервыйПроход
			//	И ЗначениеЗаполнено(ДанныеДокумента.НачалоПериода) Тогда
			//	
			//	ОбластьМакетаНачОстаток.Параметры.НачалоПериодаСверки = Формат(ДанныеДокумента.НачалоПериода, "ДФ='дд ММММ гггг'");
			//	Если НачальныйОстаток > 0 Тогда
			//		ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = 0;
			//		ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = НачальныйОстаток;
			//	Иначе
			//		ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = -НачальныйОстаток;
			//		ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = 0;
			//	КонецЕсли;				
			//	ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
			//	
			//КонецЕсли;
			
			ДатаДокумента = Формат(ДетальныеЗаписи.Дата, "ДФ='дд.ММ.гггг'");
			НомерДокумента = ДетальныеЗаписи.Номер;			
			мПараметр = Новый Структура("Дата, Номер", Новый Структура("Параметр_Имя, Параметр_Значение", "Дата", Формат(ДетальныеЗаписи.Документ.Дата, "ДФ='дд.ММ.гггг'")), Новый Структура("Параметр_Имя, Параметр_Значение", "Номер", ДетальныеЗаписи.Документ.Номер));
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("ТаблДок_Дата",	ДатаДокумента); 
			НоваяСтрока.Вставить("ТаблДок_Номер",	НомерДокумента); 
			НоваяСтрока.Вставить("ДокументТабл",	ДетальныеЗаписи.Документ); 
			НоваяСтрока.Вставить("ТаблДок_Дебет",	ДетальныеЗаписи.СуммаДолгПартнера);
			НоваяСтрока.Вставить("ТаблДок_Кредит",	ДетальныеЗаписи.СуммаНашДолг);
			НоваяСтрока.Вставить("ТаблДок_Раздел",	"Отправитель");
			НоваяСтрока.Вставить("мОснование",		Новый Структура);
			НоваяСтрока.Вставить("мПараметр",		мПараметр); 
			
			НоваяСтрокаПоДаннымКонтрагента = Новый Структура;
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дата",		ДатаДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Номер",	НомерДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ДокументТабл",		ДетальныеЗаписи.Документ); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дебет",	ДетальныеЗаписи.СуммаНашДолг);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Кредит",	ДетальныеЗаписи.СуммаДолгПартнера);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Раздел",	"Получатель");
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мОснование",		Новый Структура);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мПараметр",		мПараметр); 
			
			Основание = ?(ДанныеДокумента.РасшифровкаПоДоговорам, ТекущийДоговор, ДанныеДокумента.Договор);
			Если Не Основание = Неопределено Тогда
				НоваяСтрока.мОснование.Вставить("Договор", Новый Структура());
				НоваяСтрока.мОснование.Договор.Вставить("Основание_Название",	Строка(Основание));
				НоваяСтрока.мОснование.Договор.Вставить("Основание",			Основание);
				НоваяСтрока.мОснование.Договор.Вставить("Основание_Номер",		Основание.Номер);
				НоваяСтрока.мОснование.Договор.Вставить("Основание_Дата",		Формат(Основание.Дата,"ДФ=dd.MM.yyyy"));
				
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Вставить("Договор", Новый Структура());
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Название",Строка(Основание));
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание",			Основание);
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Номер",	Основание.Номер);
				НоваяСтрокаПоДаннымКонтрагента.мОснование.Договор.Вставить("Основание_Дата",	Формат(Основание.Дата,"ДФ=dd.MM.yyyy"));
			КонецЕсли;
			ТабЧастьДокумента.Добавить(НоваяСтрока);
			ТабЧастьДокумента.Добавить(НоваяСтрокаПоДаннымКонтрагента);
			
			ПервыйПроход = Ложь;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ТабЧастьДокумента;
	
КонецФункции
//
&НаКлиенте
Функция сбисФорматСФ(Контекст) Экспорт
	// Функция определяет формат выгружаемого счета-фактуры (обычный или корректировочный)	
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "счФактКор";
	Иначе
		Возврат "СчФктр";	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисПодтипСФ(Контекст) Экспорт
	// Функция определяет формат выгружаемого счета-фактуры (обычный или корректировочный)	
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "1115127";
	Иначе
		Возврат "1115125";	
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисИмяФайлаСФ(Контекст) Экспорт
	// Функция определяет префикс имени файла выгружаемого счета-фактуры (обычный или корректировочный)		
	Если (Контекст.Свойство("Корректировочный") и Контекст.Корректировочный = Истина)
		или (Контекст.Свойство("ВидСчетаФактуры") и Найти(нрег(строка(Контекст.ВидСчетаФактуры)),"корректировочный")>0)
		или (Контекст.Свойство("ИсправляемыйДокумент") и ТипЗнч(Контекст.ИсправляемыйДокумент)=Тип("ДокументСсылка.НДС_КорректировочныйСчетФактураВыданный")) Тогда
		Возврат "ON_KORSCHFDOPPR_";
	Иначе
		Возврат "ON_SCHFDOPPR_";	
	КонецЕсли;
КонецФункции
Функция сбисПересчитатьСФВВалютеУчета(Контекст) Экспорт
	Если Контекст.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию и Контекст.ДоговорРасчетыУЕ = Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
Функция сбисИтогСуммаПоДокументамРасчетовСКонтрагентом(Контекст) Экспорт
	ЗапросКурсАванса = Новый Запрос;
	ЗапросКурсАванса.УстановитьПараметр("ДокументСсылка", Контекст.Документ);
	ЗапросКурсАванса.Текст =
	"ВЫБРАТЬ
	|	Док.СуммаВзаиморасчетов,
	|	Док.СуммаРегл
	|ИЗ 
	|	Документ.РеализацияТоваровУслуг.ДокументыРасчетовСКонтрагентом КАК Док
	|ГДЕ Док.Ссылка = &ДокументСсылка
	|ИТОГИ СУММА(СуммаВзаиморасчетов), СУММА(СуммаРегл) ПО ОБЩИЕ";
	
	Выборка = ЗапросКурсАванса.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Выборка.Следующий() Тогда
		ВыборкаСуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		ВыборкаСуммаРегл           = Выборка.СуммаРегл;
	Иначе
		ВыборкаСуммаВзаиморасчетов = 0;
		ВыборкаСуммаРегл           = 0;
	КонецЕсли;
	НеоплаченнаяСумма = Контекст.Документ.СуммаДокумента - ВыборкаСуммаВзаиморасчетов;
	НеоплаченнаяСуммаРегл = Окр(НеоплаченнаяСумма*Контекст.КурсВзаиморасчетов/?(Контекст.КратностьВзаиморасчетов=0,1,Контекст.КратностьВзаиморасчетов),2);
	Возврат НеоплаченнаяСуммаРегл+ВыборкаСуммаРегл;
КонецФункции
Функция сбисИтогСуммаПоРегиструБухгалтерииТовары(Контекст) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контекст.Документ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Контекст.Документ.СчетУчетаРасчетовСКонтрагентом);
	Текст = 
	"ВЫБРАТЬ
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
	|	И Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугТовары.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ГДЕ
	|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	Текст = Текст +") И Хозрасчетный.Содержание <> &Содержание";
	Запрос.УстановитьПараметр("Содержание", "Реализация услуг");
	Запрос.Текст = Текст;
	СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Возврат СуммаВзаиморасчетов;
КонецФункции
Функция сбисИтогСуммаПоРегиструБухгалтерииУслуги(Контекст) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Контекст.Документ);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Контекст.Документ.СчетУчетаРасчетовСКонтрагентом);
	Текст = 
	"ВЫБРАТЬ
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
	|	И Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугУслуги.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|			ГДЕ
	|				РеализацияТоваровУслугУслуги.Ссылка = &Ссылка)";
	Запрос.Текст = Текст;
	СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
	Возврат СуммаВзаиморасчетов;
КонецФункции
Функция сбисДатаПоступленияДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет дату документа-поступления в таб. части отчета комитенту		
	Если Контекст.Свойство("ПоступлениеДатаВх") и ЗначениеЗаполнено(Контекст.ПоступлениеДатаВх) Тогда
		Возврат Контекст.ПоступлениеДатаВх;
	Иначе
		Возврат Контекст.ПоступлениеДата;	
	КонецЕсли;
КонецФункции
Функция сбисНомерВхСчФДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет номер полученного СФ в таб. части отчета комитенту		
	Если Контекст.Свойство("ПредъявленСчетФактура") и Контекст.ПредъявленСчетФактура = Истина Тогда
		Возврат Контекст.НомерВходящегоСФ;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СФ.Ссылка.НомерВходящегоДокумента
		|    ИЗ 
		|       Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|	ГДЕ 
		|		СФ.ДокументОснование = &Основание";
		Запрос.УстановитьПараметр("Основание", Контекст.Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.НомерВходящегоДокумента;
		КонецЦикла;
		Возврат "";	
	КонецЕсли;
КонецФункции
Функция сбисДатаВхСчФДляОтчетаКомитенту(Контекст) Экспорт
	// Функция определяет номер полученного СФ в таб. части отчета комитенту		
	Если Контекст.Свойство("ПредъявленСчетФактура") и Контекст.ПредъявленСчетФактура = Истина Тогда
		Возврат Контекст.ДатаВходящегоСФ;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ СФ.Ссылка.ДатаВходящегоДокумента
		|    ИЗ 
		|       Документ.СчетФактураПолученный.ДокументыОснования КАК СФ
		|	ГДЕ 
		|		СФ.ДокументОснование = &Основание";
		Запрос.УстановитьПараметр("Основание", Контекст.Основание);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Возврат Формат(Выборка.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy");
		КонецЦикла;
		Возврат "";	
	КонецЕсли;
КонецФункции
Функция сбисСуммаНДСВознаграждения(Контекст) Экспорт
	Возврат Контекст.ТаблДок.Товары.Итог("СуммаНДСВознаграждения");
КонецФункции

Функция сбисСуммаВознаграждения(Контекст) Экспорт
	Возврат Контекст.ТаблДок.Товары.Итог("СуммаВознаграждения");
КонецФункции
&НаКлиенте
Функция сбисИнфПередТаблСФотКомиссионера(Контекст) Экспорт
	// Функция формирует строку для вывода перед таб. частью в СФ, составленном комиссионером	
	Если Контекст.мСторона.Свойство("Грузополучатель") Тогда
		ИмяСтороны = "Грузополучатель";
	Иначе
		ИмяСтороны = "Организация";
	КонецЕсли;
	Инф = "Составлен комиссионером(агентом):"+Контекст.мСторона[ИмяСтороны].Сторона_Наименование+"ИНН/КПП: "+Контекст.мСторона[ИмяСтороны].Сторона_ИНН+"/"+Контекст.мСторона[ИмяСтороны].Сторона_КПП+","+Контекст.мСторона[ИмяСтороны].Сторона_Адрес.АдрТекст;
	Возврат Инф
КонецФункции
Функция ЗаполнитьЕдиницуИзмеренияНоменклатуры(Контекст) Экспорт
	// Функция возвращает единицу измерения для номенклатуры в загружаемом документе (для конфигураций КА, УПП, УТ10) 
	КлассификаторЕИ = РассчитатьЗначениеНаСервере("КлассификаторЕдиницИзмерения",Контекст);
	СпрЕИ = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения",Контекст);
	// d.ch 29.07.19
	// получаем название реквизита табличной части документа куда будем записывать единицу измерения
	// берем рассчитанное значение из СтрТабл по имени реквизита
	Попытка 
		ИмяРеквизита = Сред(Контекст.ТекущееПолеИни.Значение, Найти(Контекст.ТекущееПолеИни.Значение,".")+1);
		ЕИ = КлассификаторЕИ.НайтиПоКоду(Контекст.СтрТабл[ИмяРеквизита], Истина);
	Исключение 
		//в противном случае по старинке
		ТекстОшибки = ОписаниеОшибки();
		ЕИ = КлассификаторЕИ.НайтиПоКоду(Контекст.СтрТабл.ЕдиницаИзмерения, Истина);
	КонецПопытки;
	Если ЕИ <> Неопределено Тогда
		СпрЕИ = СпрЕИ.НайтиПоРеквизиту("ЕдиницаПоКлассификатору", ЕИ, , Контекст.СтрТабл.Номенклатура);
	КонецЕсли; 
	Возврат СпрЕИ; 
КонецФункции
Функция ЗаполнитьКодГТДУТ11(Контекст) Экспорт
	НомерГТД = ЗаполнитьНомерГТДУТ11(Контекст);
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		Возврат НомерГТД.Код;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьКодСтраныПроисхожденияУТ11(Контекст) Экспорт
	НомерГТД = ЗаполнитьНомерГТДУТ11(Контекст);
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		Возврат НомерГТД.СтранаПроисхожденияКод;
	КонецЕсли;
КонецФункции
Функция ЗаполнитьНомерГТДУТ11(Контекст) Экспорт
	Результат = Новый Структура("Код, СтранаПроисхожденияКод, СтранаПроисхожденияНаименование");
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД
	|ПОМЕСТИТЬ ВсеВидыЗапасов
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовКорректировкаВыручки КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &КорректировкаРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовОприходование КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &КорректировкаРеализации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.АналитикаУчетаНаборов,
	|	ВидыЗапасов.Упаковка,
	|	ВидыЗапасов.ВидЗапасов,
	|	ВидыЗапасов.НомерГТД
	|ИЗ
	|	Документ.КорректировкаРеализации.ВидыЗапасовСписание КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &КорректировкаРеализации
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВсеВидыЗапасов.НомерСтроки)                         КАК НомерСтроки,
	|	ВсеВидыЗапасов.АналитикаУчетаНоменклатуры                    КАК АналитикаУчетаНоменклатуры,
	|	ВсеВидыЗапасов.АналитикаУчетаНаборов                         КАК АналитикаУчетаНаборов,
	|	ВсеВидыЗапасов.Упаковка                                      КАК Упаковка,
	|	ВсеВидыЗапасов.НомерГТД                                      КАК НомерГТД,
	|	ВсеВидыЗапасов.ВидЗапасов                                    КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	ВсеВидыЗапасов КАК ВсеВидыЗапасов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеВидыЗапасов.АналитикаУчетаНоменклатуры,
	|	ВсеВидыЗапасов.АналитикаУчетаНаборов,
	|	ВсеВидыЗапасов.Упаковка,
	|	ВсеВидыЗапасов.НомерГТД,
	|	ВсеВидыЗапасов.ВидЗапасов;
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаДокумента.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	|	
	|ГДЕ
	|		Аналитика.Номенклатура          = &Номенклатура
	|		И Аналитика.Характеристика        = &Характеристика
	|		И ТаблицаДокумента.Упаковка       = &Упаковка";
	
	Запрос.УстановитьПараметр("КорректировкаРеализации", Контекст.Документ);
	Запрос.УстановитьПараметр("Номенклатура", Контекст.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Контекст.Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Контекст.Упаковка);
	
	ВидыЗапасов = Запрос.Выполнить().Выбрать();
	Пока ВидыЗапасов.Следующий() Цикл
		Результат.Код = ВидыЗапасов.НомерГТД.Код;
		Результат.СтранаПроисхожденияКод = ВидыЗапасов.НомерГТД.СтранаПроисхождения.Код;
		Результат.СтранаПроисхожденияНаименование = ВидыЗапасов.НомерГТД.СтранаПроисхождения.Наименование;
		Возврат Результат;
	КонецЦикла;
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредЦенуУТ11(Контекст) Экспорт
	Если Контекст.СуммаВключаетНДС Тогда
		Кол_во = сбисВычислитьПредКоличествоУТ11(Контекст);
		Сумма = сбисВычислитьПредСуммуУТ11(Контекст);
		СуммаНДС = сбисВычислитьПредСуммуНДСУТ11(Контекст);
		ЦенаБезНДС = ?(Число(Кол_во) = 0, (Сумма-СуммаНДС), (Сумма-СуммаНДС) / Кол_во);
		Возврат Формат(ЦенаБезНДС,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");	
	Иначе
		// alo <<
		если Контекст.свойство("Расхождение_Цена") тогда
			Возврат Формат(Контекст.Цена - Контекст.Расхождение_Цена,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
		иначе
			Кол_во = сбисВычислитьПредКоличествоУТ11(Контекст);
			Сумма = сбисВычислитьПредСуммуУТ11(Контекст);
			ЦенаБезНДС = ?(Число(Кол_во) = 0, Сумма, Сумма / Кол_во);
			Возврат Формат(ЦенаБезНДС,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");	
		конецесли;
		// >> alo
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредКоличествоУТ11(Контекст) Экспорт
	Попытка
		Кол_во = Число(Контекст.ТаблДок_Кол_во);
	Исключение
		Кол_во = 0;
	КонецПопытки;
	Возврат Формат(Кол_во - Число(Контекст.Расхождение_Кол_во),"ЧЦ=17; ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=0.000");
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредСуммуУТ11(Контекст) Экспорт
	Попытка
		Сумма = Число(Контекст.ТаблДок_Сумма);
	Исключение
		Сумма = 0;
	КонецПопытки;
	Возврат Формат(Сумма - Контекст.Расхождение_Сумма,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции
&НаКлиенте
Функция сбисВычислитьПредСуммуНДСУТ11(Контекст) Экспорт
	Попытка
		СуммаНДС = Число(Контекст.СуммаНДС);
	Исключение
		СуммаНДС = 0;
	КонецПопытки;
	Возврат Формат(СуммаНДС - Контекст.Расхождение_СуммаНДС,"ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
КонецФункции
Процедура ЗаполнитьСписокПартнераСРодителями(Партнер,СписокПартнераСРодителями) Экспорт
	// процедура используется при заполнении договора в загружаемых документах для конфигурации УТ11	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Получить родителей партнера
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Наименование
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|");
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ДеревоИерархии = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьСписокПартнеровИзДерева(ДеревоИерархии.Строки, СписокПартнераСРодителями,Партнер);
	
КонецПроцедуры
Процедура ЗаполнитьСписокПартнеровИзДерева(СтрокиДерева, СписокПартнеров, Партнер)
	// процедура используется при заполнении договора в загружаемых документах для конфигурации УТ11	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СписокПартнеров.Добавить(СтрокаДерева.Ссылка, СтрокаДерева.Наименование);
		Если СтрокаДерева.Ссылка <> Партнер Тогда
			ЗаполнитьСписокПартнеровИзДерева(СтрокаДерева.Строки, СписокПартнеров,Партнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
Функция ЗаполнитьВалюту(Контекст) Экспорт
	// Функция заполняет валюту в загружаемых документах	
	Валюты = Справочники.Валюты;
	Возврат Валюты.НайтиПоКоду(Контекст.Документ.Валюта);
КонецФункции
Функция сбисЗаполнитьБанкСчет(Контекст) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БанковскиеСчета.Ссылка
	|ИЗ 	
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета 		
	|ГДЕ 
	|	НЕ БанковскиеСчета.ПометкаУдаления И БанковскиеСчета.НомерСчета=&НомерСчета");
	Запрос.УстановитьПараметр("НомерСчета", Контекст.Документ.СтруктурнаяЕдиница);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат выборка.Ссылка;
	КонецЦикла;
	
КонецФункции
Функция сбисЗаполнитьБанкСчетОрганизации(Контекст) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БанковскиеСчета.Ссылка
	|ИЗ 	
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета 		
	|ГДЕ 
	|	НЕ БанковскиеСчета.ПометкаУдаления И БанковскиеСчета.НомерСчета=&НомерСчета");
	Запрос.УстановитьПараметр("НомерСчета", Контекст.Документ.БанковскийСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат выборка.Ссылка;
	КонецЦикла;
	
КонецФункции
&НаКлиенте
Функция сбисИмяРеквизитаСуммыДокумента1С(ИниЗагрузки) Экспорт
	Если ЗначениеЗаполнено(иниЗагрузки) и иниЗагрузки.Свойство("Документ_Сумма") Тогда
		ИмяРеквизитаСуммы = сбисСообщитьИмяРеквизита(иниЗагрузки.Документ_Сумма.Значение);
	Иначе
		ИмяРеквизитаСуммы = "СуммаДокумента";
	КонецЕсли;
	Возврат ИмяРеквизитаСуммы;
КонецФункции
&НаКлиенте
Функция сбисИниЗагрузкиПоДокументу1С(Кэш, Документ1С) Экспорт
	ИмяДок = Кэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ1С, "Имя");
	Если Кэш.КэшЗначенийИни.ИниЗагрузки.Свойство(ИмяДок) Тогда
		Возврат Кэш.ФормаНастроек.Ини(Кэш, Кэш.КэшЗначенийИни.ИниЗагрузки[ИмяДок]).мДокумент[ИмяДок]
	Иначе
		Для Каждого Ини Из Кэш.Ини Цикл
			ЗначениеИни = Кэш.ФормаНастроек.Ини(Кэш, Ини.Ключ);
			Если ЗначениеИни.Свойство("мДокумент") и ЗначениеИни.мДокумент.Свойство(ИмяДок) Тогда
				Кэш.КэшЗначенийИни.ИниЗагрузки.Вставить(ИмяДок, Ини.Ключ);
				Возврат ЗначениеИни.мДокумент[ИмяДок];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли
КонецФункции
//Березкин
&НаКлиенте
Функция сбисВидОперацииКорректировочногоДокумента(Контекст) Экспорт
	// Функция вычисляет ДокументВидОперации в корректировочных документах	
	Попытка	
		Если Найти(НРег(Контекст.ВидОперации), "исправление") Тогда
			Возврат "Исправление";
		Иначе //Если Контекст.ВидОперации = СогласованноеИзменение или КорректировкаПоСогласованиюСторон Тогда	
			Возврат "Корректировка";
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат "";
КонецФункции
Функция сбисЗаполнитьВидХозяйственнойОперации(Контекст) Экспорт
	// Функция заполняет ВидОперации в полученных корректировочных документах	
	Попытка
		Если Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Исправление" Тогда
			Возврат Перечисления.ХозяйственныеОперации.ИсправлениеОшибок;
		ИначеЕсли Контекст.СтруктураФайла.Файл.Документ.Параметр.ДокументВидОперации = "Корректировка" Тогда	
			Возврат Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон;
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецФункции
&НаСервереБезКонтекста
Функция сбисСтрокаВДату(ДатаСтрокой) Экспорт
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=10 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;		
	Если Сред(ДатаСтрокой,3,1)="." и Сред(ДатаСтрокой,6,1)="." и СтрДлина(ДатаСтрокой)=19 Тогда //видимо это дата
		Попытка
			Возврат Дата(Сред(ДатаСтрокой,7,4), Сред(ДатаСтрокой,4,2), Лев(ДатаСтрокой, 2), Сред(ДатаСтрокой,12, 2), Сред(ДатаСтрокой,15, 2), Сред(ДатаСтрокой,18, 2));
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции
&НаКлиенте
функция ПолучитьСкладТекущегоПользователяРОЗН(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.Склады", "Склад"); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		Магазин=неопределено;
		Если Контекст.Свойство("Документ") и Контекст.Документ.Свойство("Магазин") и ЗначениеЗаполнено(Контекст.Документ.Магазин) Тогда
			Магазин = Контекст.Документ.Магазин;
		КонецЕсли;
		сбисОписаниеОбъекта.Значение = ПолучитьСкладТекущегоПользователяРОЗННаСервере(Магазин);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
		Если ЗначениеЗаполнено(Магазин) И Контекст.Свойство("Документ") Тогда
			Контекст.Документ.Вставить("Магазин", Магазин);
		КонецЕсли;
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции
&НаСервереБезКонтекста
функция ПолучитьСкладТекущегоПользователяРОЗННаСервере(Магазин) Экспорт
	Если не ЗначениеЗаполнено(Магазин) Тогда
		Магазин = Вычислить("ПараметрыСеанса.ТекущийМагазин");
		Если не ЗначениеЗаполнено(Магазин) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Магазины.Ссылка КАК Магазин
			|ИЗ	Справочник.Магазины КАК Магазины
			|ГДЕ (НЕ Магазины.ПометкаУдаления)");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
				Магазин = Выборка.Магазин;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Попытка	
		ТекущийПользователь = Вычислить("глЗначениеПеременной(""глТекущийПользователь"")");
		Если не ЗначениеЗаполнено(ТекущийПользователь) Тогда
			ТекущийПользователь = Вычислить("Пользователи.ТекущийПользователь()");
		КонецЕсли;
	Исключение
		ТекущийПользователь = неопределено;
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Если ЗначениеЗаполнено(Магазин) Тогда
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.СкладПоступленияПоУмолчанию(Магазин,,, ТекущийПользователь)"); // Розница 2.3
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПоУмолчанию(Магазин,,, ТекущийПользователь)");// Розница 2.2
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	Иначе
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.СкладПоступленияПользователяПоУмолчанию(ТекущийПользователь)");	// Розница 2.3		
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		Попытка	
			Возврат Вычислить("ЗначениеНастроекПовтИсп.ПолучитьСкладПоступленияПользователяПоУмолчанию(ТекущийПользователь)");// Розница 2.2
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	Возврат неопределено;
КонецФункции     	// alo розница >>
Функция ЗаполнитьФизическоеЛицо(Контекст) Экспорт
	Если Контекст.Ини.Свойство("ФизическоеЛицо") и Контекст.Ини.ФизическоеЛицо.Свойство("РассчитанноеЗначение") Тогда
		Возврат Справочники.ФизическиеЛица.НайтиПоНаименованию(Контекст.Ини.ФизическоеЛицо.РассчитанноеЗначение);
	КонецЕсли;
КонецФункции
Функция ПолучитьКассуККМ(Контекст) Экспорт 
	КассаККМ = Справочники.КассыККМ.ПустаяСсылка();
	ПараметрыДокумента = Контекст.СтруктураФайла.Файл.Документ.Параметр;
	Если ПараметрыДокумента.Свойство("ККМСерНомер") Тогда
		Попытка
			КассаККМ = Справочники.КассыККМ.НайтиПоРеквизиту("СерийныйНомер", ПараметрыДокумента.ККМСерНомер);
		Исключение
		Конецпопытки;
		
		Если КассаККМ = Справочники.КассыККМ.ПустаяСсылка() Тогда
			Попытка
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ 
				|	КассыККМ.Ссылка 
				|ИЗ 
				|	Справочник.КассыККМ КАК КассыККМ 
				|ГДЕ
				|	КассыККМ.Наименование ПОДОБНО &Наименование";
				Запрос.УстановитьПараметр("Наименование", "%" + ПараметрыДокумента.ККМСерНомер + "%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Количество() <> 0 Тогда
					Выборка.Следующий();
					КассаККМ = Выборка.Получить(0);
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат КассаККМ;
КонецФункции
&НаКлиенте
Функция ПолучитьТекущуюДату(Контекст) Экспорт 
	Возврат Строка(ТекущаяДата());
КонецФункции
&НаКлиенте
Функция ПолучитьДатуДокумента(Контекст) Экспорт
	ДокументСБиС = Контекст.СтруктураФайла.Файл.Документ;
	ДатаДокумента = ДокументСБиС.Дата;
	ВремяДокумента = "";
	Если ДокументСБиС.Свойство("Время") Тогда
		ВремяДокумента = СтрЗаменить(ДокументСБиС.Время, ".", ":") 	
	КонецЕсли;
	Если Контекст.СоставПакета.Свойство("ДатаВремяСоздания") И (ВремяДокумента = "" ИЛИ ВремяДокумента = "00:00:00") Тогда
		ВремяДокумента = Прав(Строка(Контекст.СоставПакета.ДатаВремяСоздания), 8);
	КонецЕсли;
	Возврат Дата(ДатаДокумента + " " + ВремяДокумента);
КонецФункции
&НаКлиенте
функция сбисПолучитьФИО(Название) Экспорт
	// Функция формирует структуру ФИО из строки	
	ФИО = РазбитьСтрокуВМассивНаКлиенте(Название," ");
	
	Фамилия  = ?(ФИО.Количество()>0,ФИО[0],"");
	Имя      = ?(ФИО.Количество()>=2,ФИО[1],"");
	Отчество = "";
	Если ФИО.Количество()>=3 Тогда
		Для сч=2 по ФИО.Количество()-1 Цикл
			Отчество=Отчество+ФИО[сч]+" ";
		КонецЦикла;
		Отчество=СокрЛП(Отчество);
	КонецЕсли;
	Возврат Новый Структура("Фамилия, Имя, Отчество", Фамилия, Имя, Отчество);
КонецФункции
&НаКлиенте
Функция СокращенноеФИО(Кэш, ФИО) Экспорт
	// Формирует сокращенное ФИО из полного	
	_ФИО = РазбитьСтрокуВМассивНаКлиенте(ФИО," ");
	
	Фамилия  = ?(_ФИО.Количество()>0,_ФИО[0],"");
	Имя      = ?(_ФИО.Количество()>=2,Лев(_ФИО[1],1)+".","");
	Отчество = ?(_ФИО.Количество()>=3,Лев(_ФИО[2],1)+".","");
	Возврат Фамилия+" "+Имя+Отчество;
КонецФункции
//функция сбисРазложитьСтрокуВСтруктуру(знач Строка, Разделитель) Экспорт
//	
//	РезСтруктура = Новый Структура;
//	Строка = СтрЗаменить(Строка, Разделитель, Символы.ПС);
//	КолЭлементов = СтрЧислоСтрок(Строка);
//	Для сч = 1 по КолЭлементов Цикл
//		Попытка
//			РезСтруктура.Вставить(СокрЛП(СтрПолучитьСтроку(Строка,сч)));
//		Исключение
//		КонецПопытки;
//	КонецЦикла;
//	Возврат РезСтруктура
//КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(Объект1С, ИмяРеквизита) Экспорт
	// Функция возвращает значение реквизита объекта 1С
	Возврат Объект1С[ИмяРеквизита];	
КонецФункции
Функция ПроверитьНаличиеМетаданных(ИмяМетаданных, ИмяРеквизита)
	// Функция проверяет наличие матаданных в конфигурации	
	Если Метаданные[ИмяМетаданных].Найти(ИмяРеквизита)<>Неопределено Тогда
		возврат Истина;
	КонецЕсли;	
	Возврат Ложь;
КонецФункции
Функция сбисВыбратьПодходящийДокумент(Документы1С,ТипДокумента) Экспорт
	// выбирает из списка документов 1С документ определенного типа
	Для Каждого Документ1С Из Документы1С Цикл
		Если Документ1С.Значение.Метаданные().Имя = ТипДокумента Тогда
			Возврат Документ1С.Значение;
		КонецЕсли;
	КонецЦикла;
КонецФункции
//Функция ПолучитьЗначениеПеречисления(ИмяПеречисления, ИмяРеквизита)
//	Возврат Перечисления[ИмяПеречисления][ИмяРеквизита];
//КонецФункции

//Поиск документов в 1С по реквизитам входящих документов
&НаКлиенте
Функция НайтиПодходящиеДокументы(Кэш, оДокумент) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту	
	СписокДокументов = Новый СписокЗначений;
	ИниЗагрузки = оДокумент.Ини;
	фрмНайтиДок = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиПодходящиеДокументыОпределенногоТипа","РаботаСДокументами1С",,Кэш);
	Если ИниЗагрузки.Свойство("мДокумент") Тогда
		Для Каждого РазделДокумент Из ИниЗагрузки.мДокумент Цикл
			
			Ини = РазделДокумент.Значение;
			Если Ини.Документ.Значение = "''" Тогда  // в случае, если в пользовательской настройке прописали пустой документ
				Продолжить;
			КонецЕсли;
			фрмНайтиДок.НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, Кэш.Ини, Кэш.Парам, оДокумент);	
			Если СписокДокументов.Количество() = 1 Тогда  //если нашли 1 подходящий документ в одном реестре, то в остальных не ищем
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокДокументов;
КонецФункции
&НаКлиенте
Процедура НайтиПодходящиеДокументыОпределенногоТипа(СписокДокументов, Ини, КэшИни, Парам, оДокумент) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту
	
	Если НЕ ЗначениеЗаполнено(оДокумент.Дата) и НЕ ЗначениеЗаполнено(оДокумент.Номер) Тогда   //  Если в СБИС не заполнены дата и номер, то нет смысла сопоставлять
		Возврат;
	КонецЕсли;
	ПараметрыЗапроса = Новый Структура;
	//НГС
	ИмяРеквизитаКонтрагента = "";
	Если Ини.Свойство("Контрагент_Роль") Тогда
		РольКонтрагента = СтрЗаменить(Ини.Контрагент_Роль.Значение,"'","");
		Если Ини.мСторона.Свойство(РольКонтрагента) Тогда
			ИмяРеквизитаКонтрагента = сбисСообщитьИмяРеквизита(Ини.мСторона[РольКонтрагента].Сторона.Значение);
		КонецЕсли;
		//ИмяРеквизитаИННКонтрагента = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Контрагенты_ИНН.Значение,"'",""));
		//ИмяРеквизитаКППКонтрагента = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Контрагенты_КПП.Значение,"'",""));
		//Попытка
		//	ИННКонтрагента = ?(оДокумент.Контрагент.Свойство("СвЮЛ"),оДокумент.Контрагент.СвЮЛ.ИНН,оДокумент.Контрагент.СвФЛ.ИНН);
		//Исключение
		//	ИННКонтрагента = "";
		//КонецПопытки;
		//Попытка
		//	КППКонтрагента = ?(оДокумент.Контрагент.Свойство("СвЮЛ"),оДокумент.Контрагент.СвЮЛ.КПП,"");
		//Исключение
		//	КППКонтрагента = "";
		//КонецПопытки;
		
	КонецЕсли;
	//КНГС
	РольОрганизации = СтрЗаменить(Ини.Организация_Роль.Значение,"'",""); 
	ИмяРеквизитаОрганизации = сбисСообщитьИмяРеквизита(Ини.мСторона[РольОрганизации].Сторона.Значение); 
	ИмяРеквизитаИННОрганизации = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Организации_ИНН.Значение,"'","")); 
	ИмяРеквизитаКППОрганизации = сбисСообщитьИмяРеквизита(СтрЗаменить(КэшИни.Конфигурация.Организации_КПП.Значение,"'",""));	
	ИмяРеквизитаДатаВх = сбисСообщитьИмяРеквизита(?(Ини.Свойство("Документ_ДатаВх"), Ини.Документ_ДатаВх.Значение, ?(Ини.Свойство("Документ_Дата"), Ини.Документ_Дата.Значение, "")));
	ИмяРеквизитаНомерВх = сбисСообщитьИмяРеквизита(?(Ини.Свойство("Документ_НомерВх"), Ини.Документ_НомерВх.Значение, ?(Ини.Свойство("Документ_Номер"), Ини.Документ_Номер.Значение, "")));
	
	ТекстЗапроса = "ВЫБРАТЬ
	|Док.Ссылка КАК Док
	|ИЗ
	|"+Ини.Документ.Значение+" КАК Док"+"
	|";
	УсловияЗапроса = "";
	
	Если ЗначениеЗаполнено(ИмяРеквизитаДатаВх) Тогда
		Если Парам.СопоставлениеПериод = "Дата документа" Тогда
			УсловияЗапроса = УсловияЗапроса + " И НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ)=НАЧАЛОПЕРИОДА(&ДатНач, ДЕНЬ)";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
		ИначеЕсли Парам.СопоставлениеПериод = "Месяц с даты документа" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док.Дата МЕЖДУ &ДатНач И ДОБАВИТЬКДАТЕ(&ДатНач, МЕСЯЦ, 1)";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
			// << alo Календарный месяц документа
		ИначеЕсли Парам.СопоставлениеПериод = "Календарный месяц документа" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док.Дата МЕЖДУ &ДатНач И &ДатКнц";
			ПараметрыЗапроса.Вставить("ДатНач", НачалоМесяца(оДокумент.Дата));
			ПараметрыЗапроса.Вставить("ДатКнц", КонецМесяца(оДокумент.Дата));
			// alo Календарный месяц документа >>
		КонецЕсли;
		
		Если Парам.СопоставлениеПоДате = "Точное совпадение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаДатаВх+"=&ДатНач";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
		ИначеЕсли Парам.СопоставлениеПоДате = "Отклонение 1 день" и ЗначениеЗаполнено(оДокумент.Дата) Тогда
			УсловияЗапроса = УсловияЗапроса + " И РАЗНОСТЬДАТ(Док."+ИмяРеквизитаДатаВх+", &ДатНач, ДЕНЬ)<2 И РАЗНОСТЬДАТ(Док."+ИмяРеквизитаДатаВх+", &ДатНач, ДЕНЬ)>-2";
			ПараметрыЗапроса.Вставить("ДатНач", оДокумент.Дата);
			ПараметрыЗапроса.Вставить("ДатКнц", КонецДня(оДокумент.Дата+1));
		КонецЕсли;
	КонецЕсли;
	
	
	Если Ини.Свойство("Контрагент_Роль") и ЗначениеЗаполнено(ИмяРеквизитаКонтрагента) и Парам.СопоставлениеПоКонтрагенту <> "Не использовать" и оДокумент.Свойство("Контрагент") и ЗначениеЗаполнено(оДокумент.Контрагент) Тогда
		//d.ch
		Если КэшИни.Конфигурация.Свойство("ЗапросКонтрагента") и КэшИни.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") И НРег(КэшИни.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да" Тогда
			оДокумент.Контрагент.Вставить("Ограничения", Новый Структура("Организация",НайтиОрганизациюИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.НашаОрганизация)));
		КонецЕсли;
		Контрагент = НайтиКонтрагентаИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.Контрагент, Ини, Истина);
		УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаКонтрагента+" В (&Контрагент)";
		ПараметрыЗапроса.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	Если Парам.СопоставлениеПоОрганизации <> "Не использовать" Тогда 
		Организация = НайтиОрганизациюИзДокументаСБИС(КэшИни.Конфигурация, оДокумент.НашаОрганизация); 
		УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаОрганизации+"=&Организация"; 
		ПараметрыЗапроса.Вставить("Организация", Организация); 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяРеквизитаНомерВх) Тогда
		Если Парам.СопоставлениеПоНомеру = "Точное совпадение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаНомерВх+"=&НомерВх";
			ПараметрыЗапроса.Вставить("НомерВх", оДокумент.Номер);
		ИначеЕсли Парам.СопоставлениеПоНомеру = "Вхождение" Тогда
			УсловияЗапроса = УсловияЗапроса + " И Док."+ИмяРеквизитаНомерВх+" ПОДОБНО &НомерВх";
			ПараметрыЗапроса.Вставить("НомерВх", "%"+оДокумент.Номер+"%");
		КонецЕсли;
	КонецЕсли;
	
	УсловияЗапроса = Сред(УсловияЗапроса,3);
	Если ЗначениеЗаполнено(УсловияЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + " ГДЕ Док.ПометкаУдаления = Ложь И "+УсловияЗапроса;
	КонецЕсли;
	
	НайтиПодходящиеДокументыОпределенногоТипаНаСервере(СписокДокументов,ТекстЗапроса, ПараметрыЗапроса);
КонецПроцедуры

Процедура НайтиПодходящиеДокументыОпределенногоТипаНаСервере(СписокДокументов,ТекстЗапроса, ПараметрыЗапроса) Экспорт
	// Функция ищет документы для сопоставления по входящим дате, номеру и по контрагенту
	Запрос = Новый Запрос;
	Для Каждого Элемент Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Запрос.Текст=ТекстЗапроса;
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокДокументов.Добавить(Результат.Док);
	КонецЦикла;	
КонецПроцедуры
&НаКлиенте
Функция НайтиОрганизациюИзДокументаСБИС(Ини, оУчастник) Экспорт
	// Функция ищет организацию в базе 1С по данным участника в универсальном формате	
	Если Ини.Свойство("ЗапросОрганизации") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросОрганизации.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Организации.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Организации_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Организации_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;
	ГлавноеОкно = Неопределено;
	Если МестныйКэш = Неопределено
		Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	КонецЕсли;
	ТолькоПоИНН = ГлавноеОкно.СопоставлениеПоОрганизации="Только по ИНН";	
	Возврат НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН);
КонецФункции
Функция НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН = Ложь, МножественныйВыбор = Ложь) Экспорт
	// Функция ищет организацию или контрагента в базе 1С по ИНН/КПП	
	Если Не оУчастник.Свойство("СвЮЛ") и Не оУчастник.Свойство("СвФЛ") Тогда
		Возврат Ложь;
	КонецЕсли;
	ЮлОрг   = оУчастник.Свойство("СвЮЛ");
	Если (ЮлОрг и Не оУчастник.СвЮЛ.Свойство("ИНН")) или (Не ЮлОрг и Не оУчастник.СвФЛ.Свойство("ИНН")) Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ?(ЮлОрг, оУчастник.СвЮЛ.ИНН, оУчастник.СвФЛ.ИНН));
	
	Если ЮлОрг и НЕ ТолькоПоИНН и оУчастник.СвЮЛ.Свойство("КПП") Тогда
		Запрос.УстановитьПараметр("КПП",оУчастник.СвЮЛ.КПП);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И Участник.КПП=&КПП","");
	КонецЕсли;
	
	Если оУчастник.Свойство("Подразделение") и оУчастник.Подразделение.Свойство("Идентификатор") Тогда
		Запрос.УстановитьПараметр("КодФилиала",оУчастник.Подразделение.Идентификатор);
	Иначе
		Запрос.УстановитьПараметр("КодФилиала","");
	КонецЕсли;
	
	Если оУчастник.Свойство("GLN") Тогда
		Запрос.УстановитьПараметр("GLN",оУчастник.GLN);
	Иначе
		Запрос.УстановитьПараметр("GLN","");
	КонецЕсли;
	
	// d.ch 26.06.15
	Если оУчастник.Свойство("Ограничения") Тогда
		Для Каждого Параметр из оУчастник.Ограничения Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатМассив = Новый Массив();
	Пока РезультатЗапроса.Следующий() Цикл
		Если Не МножественныйВыбор Тогда
			Возврат РезультатЗапроса.Ссылка;
		Иначе
			РезультатМассив.Добавить(РезультатЗапроса.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Если МножественныйВыбор Тогда
		Возврат РезультатМассив;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции
&НаКлиенте
Функция НайтиКонтрагентаИзДокументаСБИС(Ини, оУчастник, ИниДок = Неопределено, МножественныйВыбор = Ложь) Экспорт
	// Функция ищет контрагента в базе 1С по данным участника в универсальном формате		
	Если ЗначениеЗаполнено(ИниДок) и ИниДок.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(ИниДок.ЗапросКонтрагента.Значение,"'","");
	ИначеЕсли Ини.Свойство("ЗапросКонтрагента") Тогда
		ТекстЗапроса = СтрЗаменить(Ини.ЗапросКонтрагента.Значение,"'","");
	Иначе
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|Участник.Ссылка
		|ИЗ
		|"+СтрЗаменить(Ини.Контрагенты.Значение,"'","")+" КАК Участник
		|ГДЕ НЕ Участник.ПометкаУдаления И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_ИНН.Значение,"'",""))+" =&ИНН
		|И Участник."+сбисСообщитьИмяРеквизита(СтрЗаменить(Ини.Контрагенты_КПП.Значение,"'","")) +"=&КПП";
	КонецЕсли;
	ГлавноеОкно = Неопределено;
	Если МестныйКэш = Неопределено
		Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
		ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
	КонецЕсли;
	ТолькоПоИНН = ГлавноеОкно.СопоставлениеПоКонтрагенту="Только по ИНН";
	Контрагент = НайтиУчастникаВСправочнике(оУчастник, ТекстЗапроса, ТолькоПоИНН, МножественныйВыбор);
	Если оУчастник.Свойство("GLN") и ЗначениеЗаполнено(оУчастник.GLN) и Контрагент = Ложь Тогда
		Сообщить("Не найден контрагент с GLN "+оУчастник.GLN);
	КонецЕсли;
	
	Возврат Контрагент;
КонецФункции
Функция сбисСообщитьИмяРеквизита(ЗначениеРеквизита)Экспорт
	// Функция возвращает название реквизита для значений из файлов настроек (например, для [Документ].Контрагент)	
	Возврат Сред(ЗначениеРеквизита,Найти(ЗначениеРеквизита,".")+1,СтрДлина(ЗначениеРеквизита)-Найти(ЗначениеРеквизита,"."));	
КонецФункции
Функция СформироватьНазваниеВходящегоДокумента1С(Документ1С) Экспорт
	// Функция формирует название входящего документа 1С (используется при сопоставлении документов)	
	Попытка
		Возврат Документ1С.Метаданные().Синоним + " вх. № "+ Документ1С.НомерВходящегоДокумента+" от " + формат(Документ1С.ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг") + " на сумму " + Документ1С.СуммаДокумента + " (№ "+Документ1С.Номер+" от "+ формат(Документ1С.Дата, "ДФ=дд.ММ.гггг")+")";
	Исключение
		Возврат строка(Документ1С)
	КонецПопытки;
КонецФункции

//регистры сведений
//TODO40 Сделать вменяемый результат работы формирования планов характеристик для обработки ошибок
&НаКлиенте
Процедура ДобавитьЗаписиВПланВидовХарактеристик(ИниКонфигурация) Экспорт
	// Функция добавляет записи в план видов характеристик, необходимые для хранения статусов и идентификаторов в регистрах сведений	
	ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Ид", ИниКонфигурация);
	ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_ИдВложения", ИниКонфигурация);
	ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_Статус", ИниКонфигурация);
	ДобавитьЗаписьВПланВидовХарактеристик("ДокументСБИС_СтатусГос", ИниКонфигурация);	// alo СтатусГос
	ДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_СпособДоставки", ИниКонфигурация, "СправочникСвойствОбъектов");
	ДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту("СБИС_КодФилиала", ИниКонфигурация, "Строка");
	
	//KES 050751151 Статусы в разрезе регламентов (ОБРАБОТКА НАСТРОЙКИ КОНФИГУРАЦИИ) --> 3 +
	Если ИниКонфигурация.Свойство("СтатусРегламент") Тогда
		МассивСтатусРегламент = ?( ИниКонфигурация.Свойство("СтатусРегламент"),РазбитьСтрокуВМассивНаКлиенте(ИниКонфигурация.СтатусРегламент.Значение,","),Новый Массив );
		Для Каждого Элемент из МассивСтатусРегламент Цикл
			ДобавитьЗаписьВПланВидовХарактеристик(Элемент+"ДокументСБИС_Ид", ИниКонфигурация);
			ДобавитьЗаписьВПланВидовХарактеристик(Элемент+"ДокументСБИС_ИдВложения", ИниКонфигурация);
			ДобавитьЗаписьВПланВидовХарактеристик(Элемент+"ДокументСБИС_Статус", ИниКонфигурация);
			ДобавитьЗаписьВПланВидовХарактеристик(Элемент+"ДокументСБИС_СтатусГос", ИниКонфигурация);	// alo СтатусГос
		КонецЦикла;
	КонецЕсли;
	//<-- KES 050751151 Статусы в разрезе регламентов (ОБРАБОТКА НАСТРОЙКИ КОНФИГУРАЦИИ)
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ДобавитьЗаписьВПланВидовХарактеристик(ИмяЗаписи, ИниКонфигурация, НазначениеСвойства = Неопределено) Экспорт
	// Функция добавляет запись в план видов характеристик
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов) <> Неопределено Тогда
		НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(ИмяЗаписи, Истина).Ссылка;
		Если НЕ НайденнаяЗапись.Пустая() Тогда
			Возврат НайденнаяЗапись;
		КонецЕсли;	
		Попытка
			СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
			СвойствоОбъект.Наименование = ИмяЗаписи;
			Если НЕ СвойствоОбъект.Метаданные().Реквизиты.Найти("Имя") = Неопределено Тогда
				СвойствоОбъект.Имя = ИмяЗаписи;
			КонецЕсли;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки());
			Попытка
				СвойствоОбъект.Заголовок = ИмяЗаписи;
			Исключение
			КонецПопытки;
			Попытка
				Если ЗначениеЗаполнено(НазначениеСвойства) Тогда
					СвойствоОбъект.НазначениеСвойства = НазначениеСвойства;
				Иначе
					СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Документы;
				КонецЕсли;
			Исключение
			КонецПопытки;
			СвойствоОбъект.УстановитьНовыйКод();
			СвойствоОбъект.Записать();
			Возврат СвойствоОбъект.Ссылка;
		Исключение
			Ошибка = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	Возврат Ложь;
КонецФункции
&НаСервереБезКонтекста
Функция ДобавитьЗаписьВПланВидовХарактеристикПоКонтрагенту(ИмяЗаписи, ИниКонфигурация, ТипЗначения) Экспорт
	// Функция добавляет запись в план видов характеристик		
	ИмяПланаВидовХарактеристикСвойствОбъектов = ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация);
	Если Метаданные.ПланыВидовХарактеристик.Найти(ИмяПланаВидовХарактеристикСвойствОбъектов) <> Неопределено Тогда
		НайденнаяЗапись = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].НайтиПоНаименованию(ИмяЗаписи).Ссылка;
		Если НЕ НайденнаяЗапись.Пустая() Тогда
			Возврат НайденнаяЗапись;
		КонецЕсли;	
		Попытка
			СвойствоОбъект = ПланыВидовХарактеристик[ИмяПланаВидовХарактеристикСвойствОбъектов].СоздатьЭлемент();
			СвойствоОбъект.Наименование = ИмяЗаписи;
			Если ТипЗначения = "СправочникСвойствОбъектов" Тогда
				СправочникСвойствОбъектов = ИмяСправочникаСвойствОбъектов(ИниКонфигурация);
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка." + СправочникСвойствОбъектов);
			Иначе
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			КонецЕсли;
			Попытка
				СвойствоОбъект.НазначениеСвойства = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Контрагенты;
			Исключение
			КонецПопытки;
			Попытка
				СвойствоОбъект.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты;
				СвойствоОбъект.Заголовок = ИмяЗаписи;
			Исключение
			КонецПопытки;
			СвойствоОбъект.УстановитьНовыйКод();
			СвойствоОбъект.Записать();
			Попытка
				НаборДопСвойствКонтр = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты.ПолучитьОбъект();
				НовоеСведение = НаборДопСвойствКонтр.ДополнительныеСведения.Добавить();
				НовоеСведение.Свойство = СвойствоОбъект.Ссылка;
				НаборДопСвойствКонтр.Записать();
			Исключение
			КонецПопытки;
			Если ТипЗначения = "СправочникСвойствОбъектов" Тогда
				ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
				ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
				ЗначениеСпр.Наименование = "ЭДО";
				ЗначениеСпр.Записать();
				ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
				ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
				ЗначениеСпр.Наименование = "Бумага";
				ЗначениеСпр.Записать();
				ЗначениеСпр = Справочники[СправочникСвойствОбъектов].СоздатьЭлемент();
				ЗначениеСпр.Владелец = СвойствоОбъект.Ссылка;
				ЗначениеСпр.Наименование = "Бумага, хочет ЭДО";
				ЗначениеСпр.Записать();
			КонецЕсли;
			
			Возврат СвойствоОбъект.Ссылка;
		Исключение
			Ошибка = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	Возврат Ложь;
КонецФункции
&НаСервереБезКонтекста
Функция ИмяПланаВидовХарактеристикСвойствОбъектов(ИниКонфигурация)
	// Функция возвращает имя плана видов характеристик, необходимого для хранения статусов и идентификаторов в регистрах сведений	
	Если ИниКонфигурация.Свойство("ИмяПланаВидовХарактеристикСвойствОбъектов") Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяПланаВидовХарактеристикСвойствОбъектов.Значение,"'","");
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения")<>Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов")<>Неопределено Тогда
		Возврат "СвойстваОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции
&НаСервереБезКонтекста
Функция ИмяРегистраСвойствОбъектов(ИниКонфигурация) Экспорт
	// возвращает имя регистра, где хранятся статусы и идентификаторы СБИС	
	Если ИниКонфигурация.Свойство("ИмяРегистраСвойствОбъектов") Тогда
		Возврат СтрЗаменить(ИниКонфигурация.ИмяРегистраСвойствОбъектов.Значение,"'","");
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ДополнительныеСведения")<>Неопределено Тогда
		Возврат "ДополнительныеСведения";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов")<>Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	Иначе
		// ??? где храним статусы
	КонецЕсли
КонецФункции
&НаСервереБезКонтекста
Функция ИмяСправочникаСвойствОбъектов(ИниКонфигурация) Экспорт
	// возвращает имя справочника, где хранятся свойства для статусов контрагентов	
	Если ИниКонфигурация.Свойство("СправочникСвойствОбъектов") Тогда
		СправочникСвойствОбъектов = СтрЗаменить(ИниКонфигурация.СправочникСвойствОбъектов.Значение, "'","");
	Иначе
		СправочникСвойствОбъектов = "ЗначенияСвойствОбъектов";
	КонецЕсли;
	Возврат СправочникСвойствОбъектов;
КонецФункции
// статусы документов
&НаКлиенте
Функция сбисИндексКартинкиПоСтатусуЭД(СтатусЭД) Экспорт
	// Функция возвращает индекс картинки по статусу электронного документа	
	Если		Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1    
		Или	СтатусЭД = "10"
		Или	СтатусЭД = "0"	Тогда// Выгружен или загружен на сервер 
		Возврат 0;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отослано приглашение")=1
		Или	СтатусЭД = "2" Тогда// Отправлено приглашение
		Возврат 1;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отправлен")=1
		Или	СтатусЭД = "3"	Тогда// Отправлен
		Возврат 2;
	ИначеЕсли	Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0
		Или	СтатусЭД = "6"	Тогда// Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли	Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1
		Или СтатусЭД = "4"	Тогда// Доставлен
		Возврат 4;
	ИначеЕсли	Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 
		Или	СтатусЭД = "9"	Тогда// Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 
		Или СтатусЭД = "7"	Тогда// Утвержден
		Возврат 6;
	ИначеЕсли	Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 
		Или СтатусЭД = "20"	Тогда// Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 8;
	ИначеЕсли Найти(нрег(СтатусЭД), "ожидает подписания")=1 Или СтатусЭД = "23" Тогда                        // Ожидает подписания
		Возврат 9;
	Иначе
		Возврат -1;
	КонецЕсли;		
КонецФункции
&НаСервереБезКонтекста
Функция сбисИндексКартинкиПоСтатусуЭДНаСервере(СтатусЭД) Экспорт
	// Функция возвращает индекс картинки по статусу электронного документа	
	Если		Найти(нрег(СтатусЭД), "выгружен")=1 или Найти(нрег(СтатусЭД), "загружен на сервер")=1 или Найти(нрег(СтатусЭД), "документ редактируется")=1 или Найти(нрег(СтатусЭД), "есть документ")=1 или Найти(нрег(СтатусЭД), "в обработке")=1    
		Или	СтатусЭД = "10"
		Или	СтатусЭД = "0"	Тогда// Выгружен или загружен на сервер 
		Возврат 0;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отослано приглашение")=1
		Или	СтатусЭД = "2" Тогда// Отправлено приглашение
		Возврат 1;
	ИначеЕсли	Найти(нрег(СтатусЭД), "отправлен")=1
		Или	СтатусЭД = "3"	Тогда// Отправлен
		Возврат 2;
	ИначеЕсли	Найти(нрег(СтатусЭД), "ошибка")>0 или Найти(нрег(СтатусЭД), "проблемы при доставке")>0
		Или	СтатусЭД = "6"	Тогда// Ошибки при отправке или при доставке
		Возврат 3;
	ИначеЕсли	Найти(нрег(СтатусЭД),"на утверждении")=1 или Найти(нрег(СтатусЭД),"доставлен")=1
		Или СтатусЭД = "4"	Тогда// Доставлен
		Возврат 4;
	ИначеЕсли	Найти(нрег(СтатусЭД), "выполнение завершено с проблемами")=1 
		Или	СтатусЭД = "9"	Тогда// Отклонен
		Возврат 5;
	ИначеЕсли Найти(нрег(СтатусЭД), "выполнение завершено успешно")=1 
		Или СтатусЭД = "7"	Тогда// Утвержден
		Возврат 6;
	ИначеЕсли	Найти(нрег(СтатусЭД), "удален")=1 или Найти(нрег(СтатусЭД), "аннулирован")=1 
		Или СтатусЭД = "20"	Тогда// Удален контрагентом
		Возврат 7;
	ИначеЕсли Найти(нрег(СтатусЭД), "отозван мной")=1 Тогда                        // Удален мной
		Возврат 8;
	ИначеЕсли Найти(нрег(СтатусЭД), "ожидает подписания")=1 Или СтатусЭД = "23" Тогда                        // Ожидает подписания
		Возврат 9;
	Иначе
		Возврат -1;
	КонецЕсли;	
КонецФункции
&НаСервереБезКонтекста
Функция сбисИндексКартинкиДокумента1С(ДокументПроведен, ДокументПометкаУдаления) Экспорт
	// Функция возвращает индекс картинки по статусу документа 1С	
	Если ДокументПроведен Тогда 
		Возврат 0;
	ИначеЕсли ДокументПометкаУдаления Тогда 
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция НеверныеКодыКонтрагентовНаСервере() Экспорт
	ОшибкиКонтрагентовИННКонтрРазряд = Новый СписокЗначений();
	ошИНН_КонтрРазряд=0;
	
	Выборка = Справочники.Контрагенты.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		КонтрагентИНН=Выборка.ИНН;
		
		// если не правльный контрольный разряд в ИНН и наименование контрагента еще нет списке значений то добавляем его
		Если НЕ сбисИННСоответствуетТребованиямБезТипа(КонтрагентИНН) и ОшибкиКонтрагентовИННКонтрРазряд.НайтиПоЗначению(Выборка.Ссылка)=Неопределено тогда
			ОшибкиКонтрагентовИННКонтрРазряд.Добавить(Выборка.Ссылка,КонтрагентИНН);
			ошИНН_КонтрРазряд=ошИНН_КонтрРазряд+1;
		КонецЕсли;
		
	КонецЦикла;	
	
	
	Макет = сбисПолучитьМакет("МакетОшибки");
	Таб = Новый ТабличныйДокумент;
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Таб.Вывести(ОбластьЗаголовок);
	
	//------ вывод строк с неправильным контрольным разрядом в ИНН
	Если ошИНН_КонтрРазряд>0 Тогда
		ОбластьОписание = Макет.ПолучитьОбласть("ОписаниеОшибки");
		ОбластьОписание.Параметры.ОписаниеОшибки="Неверная контрольная сумма ИНН (кол-во ошибок: "+строка(ошИНН_КонтрРазряд)+"):";
		Таб.Вывести(ОбластьОписание);
		
		Для Каждого Элемент Из ОшибкиКонтрагентовИННКонтрРазряд Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Контрагент = Элемент.Значение;
			ОбластьСтрока.Параметры.ИНН = Элемент.Представление;
			Таб.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	ОбластьИтоги.Параметры.КоличествоОшибок = строка(ошИНН_КонтрРазряд);
	Таб.Вывести(ОбластьИтоги);
	
	Таб.ОтображатьГруппировки = Ложь;
	Таб.ОтображатьЗаголовки   = Ложь;
	Таб.ОтображатьСетку       = Ложь;
	Возврат Таб;
КонецФункции
Функция сбисИННСоответствуетТребованиямБезТипа(Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИННФизЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИННФизЛицо = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат сбисИННСоответствуетТребованиям(ИНН, ВладелецИННФизЛицо);
	
КонецФункции
Функция сбисИННСоответствуетТребованиям(Знач ИНН, Знач ТипЛица) Экспорт
	
	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);
	
	Если НЕ сбисТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Перечисления.Найти("ЮрФизЛицо") = Неопределено Тогда
		ПроверяетсяИННФизЛица = ТипЛица;
	Иначе
		ПроверяетсяИННФизЛица = (ТипЛица = Истина ИЛИ ТипЛица = Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма = 0;
		
		Для Н = 1 По 9 Цикл
			
			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции
Функция сбисТолькоЦифрыВСтроке(Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина) Экспорт
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если НЕ УчитыватьПробелы Тогда
		СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");
	КонецЕсли;
	
	Если НЕ УчитыватьЛидирующиеНули Тогда
		НомерПервойЦифры = 0;
		Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
			НомерПервойЦифры = НомерПервойЦифры + 1;
			КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
			Если КодСимвола <> 48 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);
	КонецЕсли;
	
	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если НЕ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция СформироватьКэшСБИСини(Кэш) Экспорт
	// Функция формирует структуру, содержащую соответствия типов документов СБИС и 1С. Используется при сопоставлении документов.	
	КэшСБИС = Неопределено;
	Если Не Кэш.Свойство("СБИС", КэшСБИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	КэшСБИС.Ини = Новый Структура;
	Для Каждого Ини Из Кэш.Ини Цикл
		СписокТипов = РассчитатьЗначение("РеестрСБИС_Тип",Ини.Значение,Кэш);
		Если СписокТипов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокТипов = СтрЗаменить(СписокТипов, ",", Символы.ПС);
		Для НомерСтроки = 1 По СтрЧислоСтрок(СписокТипов) Цикл 
			ТипДок = СокрЛП(СтрПолучитьСтроку(СписокТипов, НомерСтроки));
			ТипДокИни = Неопределено;
			Если Не КэшСБИС.Ини.Свойство(ТипДок, ТипДокИни) Тогда
				ТипДокИни = Новый Массив;
				КэшСБИС.Ини.Вставить(ТипДок,ТипДокИни);
			КонецЕсли;
			ДокументЗначение = Неопределено;
			Если Не Ини.Значение.Свойство("Документ", ДокументЗначение) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ИмяДокумента1С = Кэш.ОбщиеФункции.сбисСообщитьИмяРеквизита(ДокументЗначение.Значение);
				СсылкаПустая = СформироватьПустуюСсылкуДокумента(ИмяДокумента1С);
				ТипДокИни.Добавить(Новый Структура("Тип,ПустаяСсылка,ини",ИмяДокумента1С,СсылкаПустая,Ини.Ключ));
			Исключение;
			КонецПопытки;
		КонецЦикла
	КонецЦикла;
	Возврат Истина;	
КонецФункции
Функция СформироватьПустуюСсылкуДокумента(ТипДок)
	// Функция формирует пустую ссылку на документ	
	Возврат Документы[ТипДок].ПустаяСсылка();
КонецФункции
&НаКлиенте
Функция ПолучитьПредставлениеПакетаДляОшибки(Строка) Экспорт
	// Функция возвращает представление пакета. Используется при выводе ошибки.
	Попытка
		ПредставлениеПакета = "Пакет документов: " + СокрЛП(Строка.Значение.Вложения) + "; ";
	Исключение
		ПредставлениеПакета = "Пакет документов: " + Строка.Значение.СоставПакета[0].Значение.Название + "; ";
	КонецПопытки;
	Возврат ПредставлениеПакета;
	
КонецФункции	
&НаКлиенте
Функция сбисУтвердитьОтклонить(Кэш,СписокОтмеченныхДокументов, ИмяКоманды) Экспорт
	//При попытке отклонения нескольких документов ничего не делаем
	Если СписокОтмеченныхДокументов.Количество()>1 и ИмяКоманды = "Отклонить" Тогда
		Сообщить("Отклонять документы можно только по одному.");
		Возврат Ложь;
	КонецЕсли;
	
	СписокИНН = Новый СписокЗначений;
	Для Каждого Строка из СписокОтмеченныхДокументов Цикл
		оОрганизация = Строка.Значение.СоставПакета[0].Значение.НашаОрганизация;
		Если оОрганизация.Свойство("СвФЛ") Тогда
			Если СписокИНН.НайтиПоЗначению(оОрганизация.СвФЛ.ИНН)=Неопределено Тогда 
				СписокИНН.Добавить(оОрганизация.СвФЛ.ИНН);
			КонецЕсли;
		Иначе
			Если СписокИНН.НайтиПоЗначению(оОрганизация.СвЮЛ.ИНН)=Неопределено Тогда
				СписокИНН.Добавить(оОрганизация.СвЮЛ.ИНН);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокСертификатов = Кэш.Интеграция.ПолучитьСертификатыДляАктивации(Кэш, СписокИНН);
	Если СписокСертификатов.Количество()>0 Тогда
		Сертификат = СписокСертификатов[0].Значение;
		Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
			Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
		КонецЕсли;
		СертификатИмя = "Введите код активации сертификата "+СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
		ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.ФормаВводаПинкода",Новый Структура("СертификатИмя",СертификатИмя),ЭтаФорма,,,,Новый ОписаниеОповещения("сбисУтвердитьОтклонитьЗавершение",ЭтаФорма,Новый Структура("СчСерт, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды", 0, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды)));	
	Иначе
		сбисУтвердитьОтклонитьЗавершение(Истина, Новый Структура("СчСерт, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды", 0, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды));
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Функция сбисУтвердитьОтклонитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	//При попытке отклонения нескольких документов ничего не делаем
	Кэш = ДополнительныеПараметры.Кэш;
	Если Результат = Неопределено Тогда   // не ввели пин-код
		ТекстОшибки = "Не активирован сертификат для подписания документов.";
		сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
		Возврат Ложь;	
	Иначе  // ввели пин-код или не требуется активация
		СчСерт = ДополнительныеПараметры.СчСерт;
		СписокСертификатов = ДополнительныеПараметры.СписокСертификатов;
		СписокОтмеченныхДокументов = ДополнительныеПараметры.СписокОтмеченныхДокументов;
		ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
		Если СписокСертификатов.Количество()>0 Тогда
			Серт = СписокСертификатов[СчСерт].Значение;
			Серт.Вставить("КодАктивации", Результат.ПинКод);
		КонецЕсли;
		Если СчСерт<СписокСертификатов.Количество()-1 Тогда    // еще не все пин-коды ввели
			Сертификат = СписокСертификатов[СчСерт+1].Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
			КонецЕсли;
			СертификатИмя = "Введите код активации сертификата "+СокращенноеФИО(Кэш,Сертификат.ФИО)+?(Сертификат.Свойство("Должность"),"("+Сертификат.Должность+")", "")+", "+Сертификат.Название+?(Сертификат.Свойство("ИНН"),"(ИНН "+Сертификат.ИНН+")","");
			ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.ФормаВводаПинкода",Новый Структура("СертификатИмя",СертификатИмя),ЭтаФорма,,,,Новый ОписаниеОповещения("сбисУтвердитьОтклонитьЗавершение",ЭтаФорма,Новый Структура("СчСерт, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды", СчСерт+1, СписокСертификатов, Кэш, СписокОтмеченныхДокументов, ИмяКоманды)));		
		Иначе  // ввели пин-коды для всех сертов
			Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов);
			Если ИмяКоманды = "Утвердить" Тогда
				ТекстСообщения = "утверждение";
			Иначе
				ТекстСообщения = "отклонение";
			КонецЕсли;
			ГлавноеОкно = Кэш.ГлавноеОкно;	
			фрм = ГлавноеОкно.сбисНайтиФормуФункции("сбисВыполнитьКоманду",Кэш.ИнтеграцияИмя,"",Кэш);	
			Всего = СписокОтмеченныхДокументов.Количество();
			сч = 0;
			Для Каждого Строка из СписокОтмеченныхДокументов Цикл        
				
				сч = сч + 1;
				ГлавноеОкно.сбисПоказатьСостояние("Идет "+ТекстСообщения+" документов",ГлавноеОкно, Мин(100,Окр(сч*100/Всего)));
				Если Строка.Значение.Статус = 5 Тогда //Если документ уже отклонен
					Сообщить(ПолучитьПредставлениеПакетаДляОшибки(Строка) + ?(ИмяКоманды = "Отклонить", "уже отклонен", "нельзя утвердить") + ".");			
					Продолжить;
				ИначеЕсли Строка.Значение.Статус = 6 Тогда //Если уже утвержден
					Сообщить(ПолучитьПредставлениеПакетаДляОшибки(Строка) + ?(ИмяКоманды = "Утвердить", "уже утвержден", "нельзя отклонить") + ".");			
					Продолжить;
				КонецЕсли;	
				//Если Строка.Значение.СоставПакета[0].Значение.Свойство("Комплект") Тогда
				//	Кэш.ВИ.ВыполнитьКоманду(Кэш, Строка.Значение.СоставПакета[0].Значение.Комплект.Идентификатор,Кнопка.Имя, ПолучитьПредставлениеПакетаДляОшибки(Строка));
				//Иначе
				фрм.сбисВыполнитьКоманду(Кэш, Строка.Значение.СоставПакета[0].Значение.Идентификатор,ИмяКоманды, ПолучитьПредставлениеПакетаДляОшибки(Строка));	
				//КонецЕсли;
				
			КонецЦикла;
			ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
			Если ИмяКоманды = "Утвердить" Тогда
				ГлавноеОкно.ОбновитьКонтент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция РассчитатьЗначениеИзСтруктуры(Путь, СтруктураФайла) Экспорт
	// Функция получает значение из структуры по указанному пути	
	ПутьКДаннымФайла = РазбитьСтрокуВМассивНаКлиенте(Путь, ".");
	ЗначениеРеквизита = Новый Структура;	
	//сбисСкопироватьСтруктуру(ЗначениеРеквизита, СтруктураФайла);
	ЗначениеРеквизита = СтруктураФайла;
	
	Для Каждого Узел Из ПутьКДаннымФайла Цикл
		Если ТипЗнч(ЗначениеРеквизита) = Тип("Структура") и ЗначениеРеквизита.Свойство(Узел) Тогда
			ЗначениеРеквизита = ЗначениеРеквизита[Узел];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗначениеРеквизита;
КонецФункции
&НаСервереБезКонтекста
Процедура сбисУдалитьРассчитанныеЗначения(СтруктураРаздела)  Экспорт
	// Процедура копирует структуру	
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");
	Если ТипЗнч(СтруктураРаздела) = ТипСтруктура Тогда
		Для Каждого Элемент Из СтруктураРаздела Цикл	
			
			
			Если ТипЗнч(Элемент.Значение) = ТипСтруктура Тогда
				Если Элемент.Значение.Свойство("Значение") Тогда
					СтруктураРаздела[Элемент.Ключ].Удалить("РассчитанноеЗначение");
				Иначе
					сбисУдалитьРассчитанныеЗначения(СтруктураРаздела[Элемент.Ключ]);				
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Функция СписокДопустимыхТипов()
	// Функция возвращает список типов переменных, которые можно вернуть с сервера на клиент (нужна для управляемых приложений)	
	СписокДопустимыхТипов = Новый СписокЗначений;
	СписокДопустимыхТипов.Добавить(Тип("Число"));
	СписокДопустимыхТипов.Добавить(Тип("Булево"));
	СписокДопустимыхТипов.Добавить(Тип("Строка"));
	СписокДопустимыхТипов.Добавить(Тип("Дата"));
	СписокДопустимыхТипов.Добавить(Тип("Массив"));
	СписокДопустимыхТипов.Добавить(Тип("Структура"));
	СписокДопустимыхТипов.Добавить(Тип("Неопределено"));
	СписокДопустимыхТипов.Добавить(Тип("УникальныйИдентификатор")); // alo
	Для Каждого Перечисление Из Метаданные.Перечисления Цикл
		СписокДопустимыхТипов.Добавить(Тип("ПеречислениеСсылка."+Перечисление.Имя));
	КонецЦикла;
	Для Каждого Справочник Из Метаданные.Справочники Цикл
		СписокДопустимыхТипов.Добавить(Тип("СправочникСсылка."+Справочник.Имя));
	КонецЦикла;
	Для Каждого Документ Из Метаданные.Документы Цикл
		СписокДопустимыхТипов.Добавить(Тип("ДокументСсылка."+Документ.Имя));
	КонецЦикла;
	Возврат СписокДопустимыхТипов;
КонецФункции
&НаСервереБезКонтекста
Функция ЗаполнимДаннымиДокументаСтруктуру(Раздел, знач Контекст = "", СписокДопустимыхТипов,КэшЗначенийИни, Путь)
	// Функция рекурсивно заполняет структуру файла настроек данными из документа
	Результат = Новый Структура;
	Контекст.Вставить("Путь", Путь);
	Если Не Контекст.Свойство("ТекущийРазделИни") Тогда
		Контекст.Вставить("ТекущийРазделИни", Контекст.Ини);
	КонецЕсли;
	Для каждого Элемент из Раздел Цикл
		Если Лев(Элемент.Ключ, 4) = "сбис" Тогда   // служебные параметры не получаем
			Продолжить;
		КонецЕсли;	
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Не Элемент.Значение.Свойство("Значение") Тогда
				Если Лев(Элемент.Ключ, 5) = "Выбор" Тогда
					Путь.Добавить(Элемент.Ключ);
					РассчитатьЗначениеВыбора(Контекст, Элемент.Значение, Результат, СписокДопустимыхТипов, КэшЗначенийИни, Путь);
					Путь.Удалить(Путь.Количество()-1);
					Продолжить;
				КонецЕсли;
				Если НЕ (Результат.Свойство(Элемент.Ключ) и ТипЗнч(Результат[Элемент.Ключ]) = Тип("Структура")) Тогда
					Результат.Вставить(Элемент.Ключ, Новый Структура);
				КонецЕсли;	
				Для Каждого ПодРаздел из Элемент.Значение Цикл //Выбираем подузлы
					Если ПодРаздел.Значение.Количество() <> 0 Тогда 
						Если ПодРаздел.Значение.Свойство("Значение") Тогда  // если структура содержит на верхнем уровне узлы, которые нужно рассчитать, то передаем всю эту структуру в функцию рекурсивно и прерываем цикл по подразделам
							Путь.Добавить(Элемент.Ключ);
							ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, Контекст.ТекущийРазделИни[Элемент.Ключ]);
							Результат[Элемент.Ключ] = ЗаполнимДаннымиДокументаСтруктуру(Элемент.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
							Всего = Путь.Количество();
							Путь.Удалить(Всего-1);
							Прервать;
						Иначе   //   если есть подструктуры, то делаем расчет для каждого подраздела
							Путь.Добавить(Элемент.Ключ);
							Путь.Добавить(ПодРаздел.Ключ);
							ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, Контекст.ТекущийРазделИни[Элемент.Ключ][ПодРаздел.Ключ]);
							ЗначениеПараметра = ЗаполнимДаннымиДокументаСтруктуру(ПодРаздел.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
							//Элемент.Значение.Вставить(ПодРаздел.Ключ, ЗначениеПараметра);	
							Результат[Элемент.Ключ].Вставить(ПодРаздел.Ключ, ЗначениеПараметра);
							Всего = Путь.Количество();
							Путь.Удалить(Всего-1);
							Путь.Удалить(Всего-2);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;								
			Иначе
				ЗначениеЭлемента = Элемент.Значение.Значение;
				
				Если Элемент.Значение.Свойство("Кэш") и ЗначениеЗаполнено(Элемент.Значение.Кэш) Тогда
					Если Элемент.Значение.Кэш = "Организация" Тогда
						ИНН = СокрЛП(РассчитатьЗначениеНаСервере("Сторона_ИНН", Контекст));
						КПП = СокрЛП(РассчитатьЗначениеНаСервере("Сторона_КПП", Контекст));
						Если КэшЗначенийИни.Организации.Свойство("к"+ИНН+КПП+"_"+Элемент.Ключ) Тогда
							ЗначениеПараметра = КэшЗначенийИни.Организации["к"+ИНН+КПП+"_"+Элемент.Ключ];	
						Иначе
							ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);
							Если Лев(ЗначениеПараметра,1)<>"!" Тогда
								КэшЗначенийИни.Организации.Вставить("к"+ИНН+КПП+"_"+Элемент.Ключ, ЗначениеПараметра);
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если КэшЗначенийИни.ТекущийПакет.Свойство(Элемент.Значение.Кэш+"_"+Элемент.Ключ) Тогда
							ЗначениеПараметра = КэшЗначенийИни.ТекущийПакет[Элемент.Значение.Кэш+"_"+Элемент.Ключ];	
						Иначе
							ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);
							Если Лев(ЗначениеПараметра,1)<>"!" Тогда
								КэшЗначенийИни.ТекущийПакет.Вставить(Элемент.Значение.Кэш+"_"+Элемент.Ключ, ЗначениеПараметра);
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли
				Иначе
					ЗначениеПараметра = РассчитатьЗначениеНаСервере(Элемент.Ключ, Контекст);	
				КонецЕсли;
				Если СписокДопустимыхТипов.НайтиПоЗначению(ТипЗнч(ЗначениеПараметра)) <> Неопределено Тогда
					Результат.Вставить(Элемент.Ключ, ЗначениеПараметра);
					Контекст.ТекущийРазделИни[Элемент.Ключ].Вставить("РассчитанноеЗначение", ЗначениеПараметра);
				КонецЕсли;
				
				
				// Если это табличная часть без отбора и в значениии получилось неопределено, то возвращаем пустой массив. 
				// Получается, если нет такой таб части в документе. Например для счета в УТ11, если основание счета Акт, то нет ТЧ Товары, а если Реализация, то нет ТЧ Услуги.
				Если Элемент.Значение.Свойство("Тип") и Элемент.Значение.Тип="ТабличнаяЧасть" и НЕ Элемент.Значение.Свойство("Отбор") и (ЗначениеПараметра=Неопределено или ЗначениеПараметра="") Тогда
					Возврат Новый Массив;	
				КонецЕсли;
				
				Если (Элемент.Значение.Свойство("Тип") и Элемент.Значение.Тип = "ТабличнаяЧасть" и (Найти(строка(ЗначениеПараметра),"ТабличнаяЧасть")>0 или Найти(строка(ЗначениеПараметра),"TabularSection")>0)) или ТипЗнч(ЗначениеПараметра)=Тип("Массив") Тогда
					Если Элемент.Значение.Свойство("КолонкиГруппировок") и Элемент.Значение.Свойство("КолонкиСуммирования") Тогда
						ТабЧасть = ЗначениеПараметра.Выгрузить();
						ТабЧасть.Свернуть(Элемент.Значение.КолонкиГруппировок, Элемент.Значение.КолонкиСуммирования);
						ЗначениеПараметра = ТабЧасть;
					КонецЕсли;
					
					Если Элемент.Значение.Свойство("Сортировать") Тогда
						если типЗнч(ЗначениеПараметра)=Тип("ТаблицаЗначений") тогда
							ЗначениеПараметра.Сортировать(Элемент.Значение.Сортировать);
						иначе
							ТабЧасть = ЗначениеПараметра.Выгрузить();
							ТабЧасть.Сортировать(Элемент.Значение.Сортировать);
							ЗначениеПараметра = ТабЧасть;
						конецесли
					конецесли;
					
					МассивСтрок = Новый Массив;				
					ТекущийРаздел = Новый Структура;
					ПараметрыКопированияСтрок = Новый Структура("КлючиНеКопировать", Новый Массив);
					ПараметрыКопированияСтрок.КлючиНеКопировать.Добавить("РассчитанноеЗначение");
					
					ЗначениеКопия = Элемент.Значение;
					Раздел[Элемент.Ключ] = Неопределено;
					СбисСкопироватьСтруктуруСПараметрами(ТекущийРаздел, Контекст.ТекущийРазделИни, ПараметрыКопированияСтрок);
					Для Каждого СтрокаТаблЧасти Из ЗначениеПараметра Цикл
						//Подготавливаем структуру для строки документа
						Контекст.СтрТабл = СтрокаТаблЧасти; //Записываем в контекст строку документа
						СтруктураСтроки = ЗаполнимДаннымиДокументаСтруктуру(Раздел, Контекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь); 
						МассивСтрок.Добавить(СтруктураСтроки);
						
						Контекст.ТекущийРазделИни.Очистить();
						СбисСкопироватьСтруктуруСПараметрами(Контекст.ТекущийРазделИни, ТекущийРаздел, ПараметрыКопированияСтрок);
						//Контекст.ТекущийРазделИни = СбисСкопироватьОбъектСПараметрами(ТекущийРаздел, ПараметрыКопированияСтрок);
						//сбисУдалитьРассчитанныеЗначения(Контекст.ТекущийРазделИни);  // очищаем рассчитанные значения для правильного расчета следующей строки
					КонецЦикла;
					Раздел[Элемент.Ключ] = ЗначениеКопия;
					Возврат МассивСтрок;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	Возврат Результат;
КонецФункции	
//UAA Отдельная процедура для лучшей читабельности
&НаСервереБезКонтекста
Процедура РассчитатьЗначениеВыбора(Контекст, ЗначениеУзлаИни, Результат, СписокДопустимыхТипов, КэшЗначенийИни, Путь)
	Перем ВыбранныйУзел, ЛокальныйТекущийРазделИни;
	Для Каждого ПодРазделВыбор Из ЗначениеУзлаИни Цикл //Выбираем подузлы
		Путь.Добавить(ПодРазделВыбор.Ключ);
		Если ТипЗнч(ПодРазделВыбор.Значение) = Тип("Структура") и ПодРазделВыбор.Значение.Количество() <> 0 Тогда													
			Если ПодРазделВыбор.Значение.Свойство("Условие") = Истина Тогда															
				Путь.Добавить("Условие");
				РезультатУсловия = РассчитатьЗначениеНаСервере("Условие", Контекст);
				Путь.Удалить(Путь.Количество() - 1);
				Если РезультатУсловия = Истина Тогда									
					ВыбранныйУзел = ПодРазделВыбор;									
					Путь.Удалить(Путь.Количество() - 1);
					Прервать;
				КонецЕсли;								
			Иначе
				ВыбранныйУзел = ПодРазделВыбор;
			КонецЕсли;								
		КонецЕсли;
		Путь.Удалить(Путь.Количество()-1);
	КонецЦикла;	
	Если ВыбранныйУзел = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Выбираем подузлы
	Путь.Добавить(ПодРазделВыбор.Ключ);
	Для Каждого ПодЭлемент Из ВыбранныйУзел.Значение Цикл 							
		Если (Нрег(ПодЭлемент.Ключ) = "условие") Тогда
			Продолжить;
		КонецЕсли;								
		Если ТипЗнч(ПодЭлемент.Значение) = Тип("Структура") И Не ПодЭлемент.Значение.Свойство("Значение") Тогда
			Если Не Результат.Свойство(ПодЭлемент.Ключ) Тогда//Проверим наличие узла. Если есть, не добавляем.
				Результат.Вставить(ПодЭлемент.Ключ, Новый Структура);
			КонецЕсли;
			Для Каждого ПодРаздел Из ПодЭлемент.Значение Цикл //Выбираем подузлы
				Если	ПодРаздел.Значение.Количество() = 0
					Или	(	Контекст.ТекущийРазделИни.Свойство(ПодЭлемент.Ключ)
					И	Контекст.ТекущийРазделИни[ПодЭлемент.Ключ].Свойство(ПодРаздел.Ключ)) Тогда//Узел есть в текущем контексте(сохранение приоритета пользовательской ини)
					Продолжить;
				КонецЕсли;
				Путь.Добавить(ПодЭлемент.Ключ);
				Путь.Добавить(ПодРаздел.Ключ);
				ТекущийРазделИни = Контекст.ТекущийРазделИни;
				Для СбисИндексПути = (Путь.Количество() - 4) По Путь.Количество() - 1 Цикл
					ТекущийРазделИни = ТекущийРазделИни[Путь[СбисИндексПути]];
				КонецЦикла;
				//ТекущийРазделИни = Контекст.ТекущийРазделИни[Элемент.Ключ][ПодРазделВыбор.Ключ][ПодЭлемент.Ключ][ПодРаздел.Ключ];
				ВременныйКонтекст = Новый Структура("Документ, СтрТабл, Ини, ТекущийРазделИни",Контекст.Документ, Контекст.СтрТабл, Контекст.Ини, ТекущийРазделИни);
				ЗначениеПараметра = ЗаполнимДаннымиДокументаСтруктуру(ПодРаздел.Значение, ВременныйКонтекст, СписокДопустимыхТипов,КэшЗначенийИни, Путь);
				Результат[ПодЭлемент.Ключ].Вставить(ПодРаздел.Ключ, ЗначениеПараметра);
				Всего = Путь.Количество();
				Путь.Удалить(Всего-1);
				Путь.Удалить(Всего-2);
			КонецЦикла;
		Иначе
			//Если значение узла занулено, то выбор срабатывает с заменой зануленного значения.
			Если	Контекст.ТекущийРазделИни.Свойство(ПодЭлемент.Ключ, ЛокальныйТекущийРазделИни)
				И	Контекст.ТекущийРазделИни[ПодЭлемент.Ключ].Значение = "''" Тогда
				Контекст.ТекущийРазделИни.Удалить(ПодЭлемент.Ключ);
			КонецЕсли;
			Если Не Контекст.ТекущийРазделИни.Свойство(ПодЭлемент.Ключ) Тогда 
				Путь.Добавить(ПодЭлемент.Ключ);
				ЗначениеПараметра = РассчитатьЗначениеНаСервере(ПодЭлемент.Ключ, Контекст);
				//AU добавляем в текущий раздел ини значение параметра, так как в ини его нет. Для обсчета связанных параметров.
				Контекст.ТекущийРазделИни.Вставить(ПодЭлемент.Ключ, Новый Структура("Значение, РассчитанноеЗначение", "", ЗначениеПараметра));
				Результат.Вставить(ПодЭлемент.Ключ, ЗначениеПараметра);
				Путь.Удалить(Путь.Количество() - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Путь.Удалить(Путь.Количество()-1);
	
КонецПроцедуры
Функция ПолучитьДанныеДокументов1С(СоответствиеДокументДанные, КэшЗначенийИни, СоставПакета, КэшПарам=неопределено) Экспорт	// alo Меркурий
	// Функция заполняет структуру файла настроек данными из документа
	Для каждого Док из СоставПакета Цикл
		Документ = Док.Значение;
		ЭлементСоответствия = СоответствиеДокументДанные.Получить(Документ);
		Если ЭлементСоответствия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураИниФайла = ЭлементСоответствия.ДокументДанные;
		
		ГрязныйИни = ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, КэшЗначенийИни, КэшПарам);  // alo Меркурий
		СоответствиеДокументДанные.Вставить(Документ,  Новый Структура("ИмяИни, ДокументДанные",ЭлементСоответствия.ИмяИни,ГрязныйИни));
	КонецЦикла;
КонецФункции

Функция ПолучитьДанныеДокумента1С(СтруктураИниФайла, Документ, КэшЗначенийИни, КэшПарам=Неопределено) Экспорт // alo Меркурий
	// Функция заполняет структуру файла настроек данными из документа
	//ГрязныйИни = Новый Структура;
	//сбисСкопироватьСтруктуру(ГрязныйИни, СтруктураИниФайла);
	
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	сбисСкопироватьСтруктуру(Контекст.Ини, СтруктураИниФайла);
	// << alo Меркурий
	Контекст.Ини.Вставить("Парам",Новый Структура("Значение,РассчитанноеЗначение","",Новый Структура));
	Если Не КэшПарам = Неопределено Тогда
		сбисСкопироватьСтруктуру(Контекст.Ини.Парам.РассчитанноеЗначение, КэшПарам);
	КонецЕсли;
	// alo Меркурий >>
	Контекст.Документ = Документ;
	
	Если СписокДопустимыхТипов.Количество() = 0 Тогда
		СписокДопустимыхТипов = СписокДопустимыхТипов();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ГрязныйИни = ЗаполнимДаннымиДокументаСтруктуру(СтруктураИниФайла, Контекст, СписокДопустимыхТипов,КэшЗначенийИни,Новый Массив);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ГрязныйИни;
	
КонецФункции
&НаКлиенте
Функция РассчитатьЗначение(Параметр, Контекст, ВходящийКэш="") Экспорт //Контекст{ини,Документ,СтрТабл}
	// Функция рассчитывает значение параметра из файла настроек на клиенте.
	// Используется непосредственно при формировании структуры файла, после того, как все данные с сервера получены.
	Если ВходящийКэш <> "" Тогда
		Кэш = ВходящийКэш;
		МестныйКэш = ВходящийКэш;
	КонецЕсли;	
	Если Контекст=Ложь Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
	Иначе
		Попытка
			ЗнПер=Контекст[Параметр];
			Если ТипЗнч(ЗнПер) = Тип("Структура") и ЗнПер.Свойство("Значение") Тогда
				ЗнПер = ЗнПер.Значение;
			КонецЕсли;
		Исключение
			возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	КэшироватьФункцию = Ложь;
	Если Лев(ЗнПер, 1)="!" и Найти(ЗнПер,"{")>1 и Прав(ЗнПер, 1)="}" Тогда // кешируемая функция
		КэшироватьФункцию = сред(ЗнПер,2,Найти(ЗнПер,"{")-2);
		ЗнПер = сред(ЗнПер,Найти(ЗнПер,"{"));
		Если КэшироватьФункцию = "Организация" Тогда 
			ИНН = СокрЛП(РассчитатьЗначение("Сторона_ИНН", Контекст, ВходящийКэш));
			КПП = СокрЛП(РассчитатьЗначение("Сторона_КПП", Контекст, ВходящийКэш));
			Если Кэш.КэшЗначенийИни.Организации.Свойство("к"+ИНН+КПП+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.Организации["к"+ИНН+КПП+"_"+Параметр];
			КонецЕсли;
		Иначе	
			Если Кэш.КэшЗначенийИни.ТекущийПакет.Свойство(КэшироватьФункцию+"_"+Параметр) Тогда
				Возврат Кэш.КэшЗначенийИни.ТекущийПакет[КэшироватьФункцию+"_"+Параметр];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Найти(ЗнПер,"{")=1 Тогда // функция
		ИмяФункции=сред(ЗнПер,2,Найти(ЗнПер,"(")-2);
		Попытка
			ГлавноеОкно = Неопределено;
			Если ВходящийКэш <> "" Тогда
				ГлавноеОкно = Кэш.ГлавноеОкно;
			ИначеЕсли МестныйКэш = Неопределено
				Или Не МестныйКэш.Свойство("ГлавноеОкно", ГлавноеОкно) Тогда 
				ГлавноеОкно = сбисПолучитьФорму("ФормаГлавноеОкно");
			КонецЕсли;
			фрм = ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,"РаботаСДокументами1С","", Кэш);
			Результат=вычислить("фрм."+ИмяФункции+"(Контекст)");
			Если КэшироватьФункцию<>Ложь Тогда
				Если КэшироватьФункцию = "Организация" Тогда
					Кэш.КэшЗначенийИни.Организации.Вставить("к"+ИНН+КПП+"_"+Параметр, Результат);
				Иначе
					Кэш.КэшЗначенийИни.ТекущийПакет.Вставить(КэшироватьФункцию+"_"+Параметр, Результат);
				КонецЕсли;
			КонецЕсли;
		Исключение
			Если Найти(ЗнПер, "()}")>0 Тогда
				Ошибка = ОписаниеОшибки();
				сообщить(Ошибка);
			Иначе  // если фигурная скобка присутствует в каком-то значении в базе 1С, например, в названии договора
				возврат ЗнПер;
			КонецЕсли;
		КонецПопытки;	
		возврат Результат;
	ИначеЕсли Найти(ЗнПер,"[")=1 Тогда  // ссылка на структуру, полученную в результате выполнения функции
		Если Найти(ЗнПер, "].")>0 Тогда
			СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
			Объект1С=РассчитатьЗначение(СтрОбъекта,Контекст,ВходящийКэш);
			Если Найти(ЗнПер,".")>0 Тогда
				ИмяРек=сред(ЗнПер,Найти(ЗнПер,".")+1);
			Иначе
				ИмяРек = "";
			КонецЕсли;
			
			Попытка
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Объект1С = Объект1С[ИмяРек];
				КонецЕсли;
				Возврат Объект1С;
			Исключение
			КонецПопытки;
		Иначе   // если квадратная скобка присутствует в каком-то значении в базе 1С, например, в названии договора
			возврат ЗнПер;
		КонецЕсли;
	ИначеЕсли Найти(ЗнПер,"'")=1 Тогда	 // строка
		ЗнПер = СокрЛП(ЗнПер);
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	Иначе
		возврат ЗнПер;
	КонецЕсли	
КонецФункции
&НаСервереБезКонтекста
Функция РассчитатьЗначениеНаСервере(Параметр,Контекст) Экспорт
	// Функция рассчитывает значение параметра из файла настроек на сервере.	
	// Используется при заполнении структуры файла настроек данными из документа.
	ПервыйСимвол = Лев(Параметр,1);
	Если ПервыйСимвол="[" или ПервыйСимвол="'" Тогда  // в случае, если в качестве параметра функции используется, не имя, а значение параметра
		ЗнПер=СокрЛП(Параметр);
		ИмяПеременнойВПараметре = Ложь;
	Иначе
		ИмяПеременнойВПараметре = Истина;
		Если Контекст.Свойство("ТекущийРазделИни") Тогда
			ПараметрИни = НайтиПараметрВИерархическойСтруктуре(Параметр, Контекст);
			Попытка
				ЗнПер=ПараметрИни.Значение;
			Исключение
				возврат Неопределено;
			КонецПопытки
		Иначе
			Попытка
				ПараметрИни = Контекст.Ини[Параметр]; 
				ЗнПер=Контекст.Ини[Параметр].Значение;
			Исключение
				возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		Если ПараметрИни.Свойство("РассчитанноеЗначение") Тогда
			Возврат ПараметрИни.РассчитанноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ЗнПер)<>Тип("Строка") Тогда  // Если в ЗнПер уже лежит нужное значение
		Возврат ЗнПер;
	КонецЕсли;
	ПозТочки = Найти(ЗнПер, ".");
	ПервыйСимвол = Лев(ЗнПер,1);
	Если ПервыйСимвол="[" Тогда  // ссылка на объект (другую переменную)
		СтрОбъекта=Сред(ЗнПер,2,Найти(ЗнПер,"]")-2);
		Если Контекст.Свойство("ТекущийРазделИни") Тогда
			СтрОбъектаИни = НайтиПараметрВИерархическойСтруктуре(СтрОбъекта, Контекст);
		Иначе
			СтрОбъектаИни = Контекст.Ини[СтрОбъекта];
		КонецЕсли;
		Если СтрОбъектаИни<>Неопределено и СтрОбъектаИни.Свойство("РассчитанноеЗначение") Тогда
			Объект1С=СтрОбъектаИни.РассчитанноеЗначение;
		Иначе	
			Объект1С=РассчитатьЗначениеНаСервере(СтрОбъекта,Контекст);
		КонецЕсли;
		ТипОбъект1С = ТипЗнч(Объект1С);
		Если ПозТочки > 0 Тогда
			Если ТипОбъект1С = Тип("Строка") и Найти(Объект1С, "{") Тогда  // Переменная ссылается на результат функции, значит будем рассчитывать позже на клиенте, в функции РассчитатьЗначение
				Возврат ЗнПер;
			КонецЕсли;
			ИмяРек=сред(ЗнПер,ПозТочки + 1);
		Иначе
			ИмяРек = "";
		КонецЕсли;
		
		Попытка
			//Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это строка табличной части
			Если СтрОбъектаИни.Свойство("Тип") и (СтрОбъектаИни.Тип="ТабличнаяЧасть" или (СтрОбъектаИни.Тип="Запрос" и СтрОбъектаИни.Свойство("Выбрать") и нрег(СтрОбъектаИни.Выбрать)="все")) и ТипОбъект1С <> Тип("Структура") и Объект1С <> Неопределено Тогда
				Объект1С = Контекст.СтрТабл[ИмяРек];
			Иначе
				Если ЗначениеЗаполнено(ИмяРек) Тогда
					Если ИмяРек = "Метаданные" Тогда // Никита
						Объект1С = Объект1С.Метаданные();
						// alo <<
					ИначеЕсли ИмяРек = "УникальныйИдентификатор" Тогда 
						Объект1С = строка(Объект1С.УникальныйИдентификатор());
						// >>alo
					ИначеЕсли ИмяРек = "ПустаяСсылка" Тогда 
						Объект1С = Объект1С.ПустаяСсылка();
					Иначе						
						Объект1С = Объект1С[ИмяРек];
					КонецЕсли;
				КонецЕсли;
				
				//Если Найти(строка(Объект1С),"ТабличнаяЧасть")>0 Тогда //это сама табличная часть
				Если ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип="ТабличнаяЧасть" Тогда
					Если ПараметрИни.Свойство("Отбор") Тогда
						Отбор = Новый Структура;
						Для Каждого Элемент Из ПараметрИни.Отбор Цикл
							Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
						КонецЦикла;
						Если Лев(строка(Объект1С),10) = "Справочник" Тогда
							ТипМетаданных = "Справочники";
						Иначе
							ТипМетаданных = "Документы";
						КонецЕсли;
						ИмяОбъектаИТЧ = РазбитьСтрокуВМассив(строка(Объект1С), ".");
						Реквизиты = Метаданные[ТипМетаданных][ИмяОбъектаИТЧ[1]].ТабличныеЧасти[ИмяОбъектаИТЧ[2]].Реквизиты;
						
						Если Отбор.Свойство("НомерСтроки") Тогда
							СтрокиТЧ = Новый Массив;
							СтрокиТЧ.Добавить(Объект1С.Получить(Отбор.НомерСтроки));
						Иначе
							СтрокиТЧ = Объект1С.НайтиСтроки(Отбор);
						КонецЕсли;
						ВыбратьВсе = Ложь;
						МассивСтрокТЧ = Новый массив;
						Если ПараметрИни.Свойство("Выбрать") и нрег(ПараметрИни.Выбрать) = "все" Тогда
							ВыбратьВсе = Истина;
						КонецЕсли;
						
						Если СтрокиТЧ.Количество()>0 и ПараметрИни.Свойство("Упорядочить") и ЗначениеЗаполнено(ПараметрИни.Упорядочить) Тогда
							Упорядочить = РассчитатьЗначениеНаСервере(ПараметрИни.Упорядочить, Контекст);
							СтрокиТЧ = Объект1С.Выгрузить(СтрокиТЧ);
							СтрокиТЧ.Сортировать(Упорядочить);
						КонецЕсли;
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл 
							СтруктураСтрокиТЧ = Новый Структура();
							Для Каждого Реквизит Из Реквизиты Цикл 
								СтруктураСтрокиТЧ.Вставить(Реквизит.Имя, СтрокаТЧ[Реквизит.Имя]);
							КонецЦикла;
							Если Не ВыбратьВсе Тогда
								Возврат СтруктураСтрокиТЧ;
							Иначе
								МассивСтрокТЧ.Добавить(СтруктураСтрокиТЧ);
							КонецЕсли;
						КонецЦикла;
						Если МассивСтрокТЧ.Количество()>0 Тогда
							Возврат МассивСтрокТЧ;
						КонецЕсли;
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			Если ИмяПеременнойВПараметре и ПараметрИни.Свойство("Формат") Тогда 
				Объект1С = Формат(Объект1С,	ПараметрИни.Формат);
			КонецЕсли;
			
			Возврат Объект1С;
			
		Исключение
			ошибка = ОписаниеОшибки();
		КонецПопытки;	
	ИначеЕсли ПервыйСимвол="'" Тогда	 // строка
		Если ЗнПер="'Истина'" Тогда
			Возврат Истина;
		ИначеЕсли ЗнПер="'Ложь'" Тогда
			Возврат Ложь;
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
			возврат Число(Сред(ЗнПер,2,СтрДлина(ЗнПер)-2));
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Дата" Тогда
			возврат сбисСтрокаВДату(Сред(ЗнПер,2,СтрДлина(ЗнПер)-2));
		ИначеЕсли ИмяПеременнойВПараметре и ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Запрос" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст=Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
			КонецЕсли;
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Если ПараметрИни.Свойство("Выбрать") и нрег(ПараметрИни.Выбрать) = "все" Тогда
				РезультатМассив = Новый Массив;
				Пока Выборка.Следующий() Цикл
					РезультатСтруктура = Новый Структура;
					Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
						РезультатСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
					КонецЦикла;
					РезультатМассив.Добавить(РезультатСтруктура);
				КонецЦикла;
				Возврат РезультатМассив;
			Иначе
				Если Выборка.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				РезультатСтруктура = Новый Структура;
				Выборка.Следующий();
				Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
					РезультатСтруктура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
				КонецЦикла;
				Возврат РезультатСтруктура;
			КонецЕсли;
		Иначе
			возврат Сред(ЗнПер,2,СтрДлина(ЗнПер)-2);
		КонецЕсли;
	ИначеЕсли ПервыйСимвол="{" Тогда 
		Если ПараметрИни.Свойство("Кэш") и ЗначениеЗаполнено(ПараметрИни.Кэш) Тогда
			ЗнПер = "!" + ПараметрИни.Кэш + ЗнПер;
		КонецЕсли;
		Возврат ЗнПер;
	ИначеЕсли ПервыйСимвол="^" Тогда  // формула, которую необходимо вычислить
		// alo <<
		ЗнПер=сбисВычислитьФормулу(ЗнПер,ПараметрИни,Контекст);
		Если ПараметрИни.Свойство("Формат") Тогда 
			ЗнПер = Формат(ЗнПер, ПараметрИни.Формат);
		КонецЕсли;
		Возврат ЗнПер;
		// >> alo
	ИначеЕсли ПозТочки>0 Тогда
		ПервыйСимвол = Лев(ЗнПер, ПозТочки-1);
		
		Если ПервыйСимвол = "Справочник" Тогда	// ссылка на справочник
			ИмяРек=сред(ЗнПер,12);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Отбор = Новый Структура;
				Владелец = Неопределено;
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Если Элемент.Ключ = "Владелец" Тогда
						Владелец = РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст);
					Иначе
						Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(Владелец) Тогда
					Выборка = Справочники[ИмяРек].Выбрать(,Владелец,Отбор);
				Иначе
					Выборка = Справочники[ИмяРек].Выбрать(,,Отбор);
				КонецЕсли;
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Ссылка;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				возврат Справочники[ИмяРек];
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "Документ" Тогда // ссылка на документ	
			ИмяРек=сред(ЗнПер,10);
			возврат Контекст.Документ;
		ИначеЕсли ПервыйСимвол = "ЗаписьСправочника" Тогда // ссылка на запись справочника 
			ИмяРек=сред(ЗнПер,21);
			возврат Контекст.Документ;
		ИначеЕсли ПервыйСимвол = "Константа" Тогда	// константа
			ИмяРек=сред(ЗнПер,11);
			возврат Константы[ИмяРек].Получить();
		ИначеЕсли ПервыйСимвол = "Перечисление" Тогда	// значение перечисления
			ИмяРек=сред(ЗнПер,14);
			возврат Перечисления[ИмяРек];
		ИначеЕсли ПервыйСимвол = "РегистрыСведений" Тогда	// ссылка на регистр сведений
			ИмяРек=сред(ЗнПер,18);
			
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат Неопределено;
			КонецЕсли;
			Отбор = Новый Структура;
			Если ПараметрИни.Свойство("СрезПоследних") Тогда
				
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				ДатаСреза = РассчитатьЗначениеНаСервере(ПараметрИни.СрезПоследних, Контекст);
				НаборЗаписей = РегистрыСведений[ИмяРек].СрезПоследних(ДатаСреза,Отбор);
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				Запись = НаборЗаписей.Получить(0);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ *
				|ИЗ
				|   РегистрСведений."+ИмяРек+" КАК Рег
				|ГДЕ
				| ";
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					Запрос.Текст=Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
				КонецЦикла;
				Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
				НаборЗаписей = Запрос.Выполнить().Выбрать();
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				НаборЗаписей.Следующий();
				Запись = НаборЗаписей;
				//НаборЗаписей = РегистрыСведений[ИмяРек].СоздатьНаборЗаписей();
				//
				//Для Каждого Элемент Из Контекст.Ини[Параметр].Отбор Цикл
				//	
				//	НаборЗаписей.Отбор[Элемент.Ключ].Установить(РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				//КонецЦикла;
				//НаборЗаписей.Прочитать();
			КонецЕсли;
			
			Результат = Новый Структура();
			Ресурсы = Метаданные.РегистрыСведений[ИмяРек].Ресурсы;	
			Для Каждого Ресурс Из Ресурсы Цикл 
				Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
			КонецЦикла;
			Измерения = Метаданные.РегистрыСведений[ИмяРек].Измерения;	
			Для Каждого Измерение Из Измерения Цикл 
				Результат.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
			КонецЦикла;
			СтандартныеРеквизиты = Метаданные.РегистрыСведений[ИмяРек].СтандартныеРеквизиты;	
			Попытка
				Для Каждого Реквизит Из СтандартныеРеквизиты Цикл 
					Результат.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
				КонецЦикла;
			Исключение
			КонецПопытки;
			возврат Результат;
			// +tda//2018.07.05//
		ИначеЕсли ПервыйСимвол = "РегистрыНакопления" Тогда	// ссылка на регистр накопления
			ИмяРек=сред(ЗнПер,20);
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат Неопределено;
			КонецЕсли;
			Отбор = Новый Структура;
			Если ПараметрИни.Свойство("СрезОстатка") Тогда
				
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				ДатаСреза = РассчитатьЗначениеНаСервере(ПараметрИни.СрезОстатка, Контекст);
				НаборЗаписей = РегистрыНакопления[ИмяРек].Остатки(ДатаСреза,Отбор);
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				Запись = НаборЗаписей.Получить(0);
			Иначе
				Запрос = Новый Запрос;
				Запрос.Текст="ВЫБРАТЬ *
				|ИЗ
				|   РегистрНакопления."+ИмяРек+" КАК Рег
				|ГДЕ
				| ";
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
					Запрос.Текст=Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
				КонецЦикла;
				Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
				НаборЗаписей = Запрос.Выполнить().Выбрать();
				Если НаборЗаписей.Количество()=0 Тогда
					Возврат Неопределено;
				КонецЕсли;
				НаборЗаписей.Следующий();
				Запись = НаборЗаписей;
			КонецЕсли;
			Результат = Новый Структура();
			Ресурсы = Метаданные.РегистрыНакопления[ИмяРек].Ресурсы;	
			Для Каждого Ресурс Из Ресурсы Цикл 
				Результат.Вставить(Ресурс.Имя, Запись[Ресурс.Имя]);
			КонецЦикла;
			Измерения = Метаданные.РегистрыНакопления[ИмяРек].Измерения;	
			Для Каждого Измерение Из Измерения Цикл 
				Результат.Вставить(Измерение.Имя, Запись[Измерение.Имя]);
			КонецЦикла;
			СтандартныеРеквизиты = Метаданные.РегистрыНакопления[ИмяРек].СтандартныеРеквизиты;	
			Попытка
				Для Каждого Реквизит Из СтандартныеРеквизиты Цикл 
					Результат.Вставить(Реквизит.Имя, Запись[Реквизит.Имя]);
				КонецЦикла;
			Исключение
			КонецПопытки;
			возврат Результат;
			//-tda	
		ИначеЕсли ПервыйСимвол = "ПланыВидовХарактеристик" Тогда	// ссылка на план видов характеристик
			ИмяРек=сред(ЗнПер,25);
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат ПланыВидовХарактеристик[ИмяРек];
			КонецЕсли;
			Отбор = Новый Структура;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ *
			|ИЗ
			|   ПланВидовХарактеристик."+ИмяРек+" КАК План
			|ГДЕ
			| ";
			Для Каждого Элемент Из ПараметрИни.Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				Запрос.Текст=Запрос.Текст+"План."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "ПланыВидовРасчета" Тогда // ссылка на план видов Расчета
			ИмяРек=сред(ЗнПер,19);
			
			Если Не ПараметрИни.Свойство("Отбор") Тогда
				Возврат ПланыВидовРасчета[ИмяРек];
			КонецЕсли;
			Отбор = Новый Структура;
			Запрос = Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ *
			|ИЗ
			|   ПланВидовРасчета."+ИмяРек+" КАК План
			|ГДЕ
			| ";
			Для Каждого Элемент Из ПараметрИни.Отбор Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				Запрос.Текст=Запрос.Текст+"План."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
			КонецЦикла;
			Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ПервыйСимвол = "ПланыСчетов" Тогда	// alo ПланыСчетов
			ИмяРек=сред(ЗнПер,13);
			Если ПараметрИни.Свойство("Отбор") Тогда
				Отбор = Новый Структура;
				Для Каждого Элемент Из ПараметрИни.Отбор Цикл
					Отбор.Вставить(Элемент.Ключ, РассчитатьЗначениеНаСервере(Элемент.Значение, Контекст));
				КонецЦикла;
				Выборка = ПланыСчетов[ИмяРек].Выбрать(,Отбор);
				Если Выборка.Следующий() Тогда
					Возврат Выборка.Ссылка;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			Иначе
				возврат ПланыСчетов[ИмяРек];
			КонецЕсли;
		КонецЕсли;
		возврат Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ЗнПер) Тогда //Возможно, это имя узла в котором должно лежать наше значение
		Возврат РассчитатьЗначениеНаСервере(ЗнПер, Контекст);
	КонецЕсли;
	
КонецФункции
&НаСервереБезКонтекста
Функция сбисВычислитьФормулу(ЗнПер,ПараметрИни,Контекст)
	Попытка
		ВычисляемаяСтрока = СокрЛП(Сред(ЗнПер, 2));
		ПозСкобки = Найти(ВычисляемаяСтрока, "(");
		ИмяФормулы = нрег(СокрЛП(Лев(ВычисляемаяСтрока, ПозСкобки-1)));
		СтрокаПараметров = Сред(ВычисляемаяСтрока,ПозСкобки+1, СтрДлина(ВычисляемаяСтрока)-ПозСкобки-1);
		МассивПараметров = РазбитьСтрокуВМассив(СтрокаПараметров, ",");
		Если ИмяФормулы = ">" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]>МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "<" Тогда
			Если МассивПараметров.Количество()<>4 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров[0]<МассивПараметров[1] Тогда
				Возврат МассивПараметров[2];
			Иначе
				Возврат МассивПараметров[3];
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]=МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "!=" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=3 или КолПараметров=4) Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров = 3 Тогда
				Если НЕ ЗначениеЗаполнено(МассивПараметров[0]) Тогда
					Возврат МассивПараметров[1];
				Иначе
					Возврат МассивПараметров[2];
				КонецЕсли;
			Иначе
				Если МассивПараметров[0]<>МассивПараметров[1] Тогда
					Возврат МассивПараметров[2];
				Иначе
					Возврат МассивПараметров[3];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "+" Тогда
			Если ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
				Результат = 0;
			Иначе
				Результат = "";
			КонецЕсли;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				Если ПараметрИни.Свойство("Тип") и ПараметрИни.Тип = "Число" Тогда
					Результат = Результат + Число(Элемент);
				Иначе
					Результат = Результат + Элемент;
				КонецЕсли;	
			КонецЦикла;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "-" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат 0;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Попытка
				Уменьшаемое = Число(МассивПараметров[0]);
			Исключение
				Уменьшаемое = 0;
			КонецПопытки;
			Попытка
				Вычитаемое = Число(МассивПараметров[1]);
			Исключение
				Вычитаемое = 0;
			КонецПопытки;
			Результат = Уменьшаемое - Вычитаемое;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "/" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат 0;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Попытка
				Результат = ?(Число(МассивПараметров[1]) = 0, Число(МассивПараметров[0]), Число(МассивПараметров[0]) / Число(МассивПараметров[1]));
			Исключение
				Результат = 0;
			КонецПопытки;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "*" Тогда
			Результат = 1;
			Для Каждого Элемент Из МассивПараметров Цикл
				Элемент = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				Результат = Результат * Число(Элемент);
			КонецЦикла;
			Если ПараметрИни.Свойство("Формат") Тогда
				Результат = Формат(Результат,ПараметрИни.Формат);
			КонецЕсли;
			Возврат Результат;
		ИначеЕсли ИмяФормулы = "сред" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если НЕ (КолПараметров=2 или КолПараметров=3) Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если КолПараметров=2 Тогда
				Возврат Сред(МассивПараметров[0],МассивПараметров[1]);
			Иначе
				Возврат Сред(МассивПараметров[0],МассивПараметров[1],МассивПараметров[2]);	
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "найти" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если КолПараметров<>2 Тогда
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Возврат Найти(МассивПараметров[0],МассивПараметров[1]);	
		ИначеЕсли ИмяФормулы = "или" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Истина Тогда
					Возврат МассивПараметров[КолПараметров-2];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-1];
		ИначеЕсли ИмяФормулы = "и" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<3 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[КолПараметров-1] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-1], Контекст);
			МассивПараметров[КолПараметров-2] = РассчитатьЗначениеНаСервере(МассивПараметров[КолПараметров-2], Контекст);
			Для сч = 0 По КолПараметров-3 Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(МассивПараметров[сч], Контекст);
				Если МассивПараметров[сч] = Ложь или МассивПараметров[сч] = Неопределено Тогда
					Возврат МассивПараметров[КолПараметров-1];
				КонецЕсли;
			КонецЦикла;
			Возврат МассивПараметров[КолПараметров-2];
		ИначеЕсли ИмяФормулы = "окрбольше" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<>1 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			МассивПараметров[0] = РассчитатьЗначениеНаСервере(МассивПараметров[0], Контекст);
			Если Цел(МассивПараметров[0]) = МассивПараметров[0] Тогда
				Возврат МассивПараметров[0];
			Иначе
				Возврат Цел(МассивПараметров[0])+1;
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "окр" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<2 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			сч = 0;
			Для Каждого Элемент Из МассивПараметров Цикл
				МассивПараметров[сч] = РассчитатьЗначениеНаСервере(Элемент, Контекст);
				сч = сч+1;
			КонецЦикла;
			Если МассивПараметров.Количество() = 2 Тогда
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]));
			Иначе
				Возврат Окр(Число(МассивПараметров[0]), Число(МассивПараметров[1]), РежимОкругления.Окр15как10);
			КонецЕсли;
		ИначеЕсли ИмяФормулы = "типзнч" Тогда
			КолПараметров = МассивПараметров.Количество();
			Если МассивПараметров.Количество()<>1 Тогда   // неправильно написана формула
				Возврат Неопределено;
			КонецЕсли;
			Парам = РассчитатьЗначениеНаСервере(МассивПараметров[0], Контекст);
			Попытка
				Рез = Парам.Метаданные().ПолноеИмя();
				ПозТочки = Найти(Рез, ".");
				ТипОбъекта = Лев(Рез, ПозТочки-1);
				Если ТипОбъекта = "Справочник" или ТипОбъекта = "Catalog" Тогда
					ТипОбъекта = "СправочникСсылка";
				ИначеЕсли ТипОбъекта = "Документ" или ТипОбъекта = "Document" Тогда
					ТипОбъекта = "ДокументСсылка";
				КонецЕсли;
				Возврат ТипОбъекта+Сред(Рез, ПозТочки);
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
		Возврат Неопределено
	КонецПопытки
	
КонецФункции
&НаСервереБезКонтекста
Функция НайтиПараметрВИерархическойСтруктуре(Параметр,Контекст)
	ТекущийРаздел = Контекст.ТекущийРазделИни;
	Если ТекущийРаздел.Свойство(Параметр) и ТекущийРаздел[Параметр].Свойство("Значение") Тогда
		Возврат ТекущийРаздел[Параметр];	
	КонецЕсли;
	Результат = Неопределено;
	ТекущийРаздел = Контекст.Ини;
	Для Каждого ЭлементПуть Из Контекст.Путь Цикл
		Если ТекущийРаздел.Свойство(Параметр) и ТекущийРаздел[Параметр].Свойство("Значение") Тогда
			Результат = ТекущийРаздел[Параметр];	
		КонецЕсли;
		ТекущийРаздел = ТекущийРаздел[ЭлементПуть];
	КонецЦикла;
	Возврат Результат;
КонецФункции
&НаСервереБезКонтекста
Функция НайтиПараметрыВСтроке(знач Условие)
	МассивПараметров = Новый Массив;
	Пока Найти(Условие,")")>0 Цикл 
		Подстрока = Лев(Условие, Найти(Условие,")")-1);
		Если Найти(Подстрока, "(")>0 Тогда
			Пока Найти(Подстрока, "(")>0 Цикл
				Подстрока = Сред(Подстрока, Найти(Подстрока,"(")+1);
			КонецЦикла;
			Если Подстрока <> "" Тогда
				МассивПараметровПодстроки = РазбитьСтрокуВМассив(Подстрока, ",");
				Для Каждого Элемент Из МассивПараметровПодстроки Цикл
					МассивПараметров.Добавить(Подстрока);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Условие = Сред(Условие,Найти(Условие,")")+1);
	КонецЦикла;	
	Возврат МассивПараметров;
КонецФункции
// alo <<
&НаКлиенте
Функция ЗаполнениеАдресовПоКЛАДР(Контекст) экспорт
	// открывает форму заполнения адресов контрагентов по КЛАДР	
	ФормаАдреса = сбисПолучитьФорму("ФормаАдресаПоКЛАДР");
	ФормаАдреса.Показать(Новый Структура("КэшСовместимостьМетодов, КэшПарам, АдресСервера, РезервныйДомен", МестныйКэш.СовместимостьМетодов, МестныйКэш.Парам, МестныйКэш.СБИС.АдресСервера, МестныйКэш.СБИС.ПараметрыИнтеграции.РезервныйДомен));
КонецФункции
&НаКлиенте
Функция НеверныеКодыКонтрагентов(Контекст) экспорт
	// Показывает отчет по неверным ИНН контрагентов	
	Таб = Контекст.Кэш.ОбщиеФункции.НеверныеКодыКонтрагентовНаСервере();
	Таб.Показать("Ошибки по контрагентам");
КонецФункции
&НаКлиенте
Функция МассоваяРассылка(Контекст) экспорт
	// Процедура открывает форму для выбора файлов, которые необходимо приложить к каждому отправляемому пакету.
	фрм = Контекст.Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьФорму","МассоваяРассылка","",Контекст.Кэш);	
	фрм.ПоказатьФорму(Контекст.Кэш);
КонецФункции
&НаКлиенте
функция ВосстановлениеСостояниеЭД(Контекст) экспорт
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИмяПодсистемы",	"БиблиотекаЭлектронныхДокументов");
	ПараметрыПоиска.Вставить("ИмяФункции",		"ВосстановлениеСостояниеЭД");
	фрм = сбисНайтиФормуФункцииПодсистемы(Контекст.Кэш, ПараметрыПоиска);
	Если Не фрм=ложь Тогда
		фрм.ВосстановлениеСостояниеЭД();
	КонецЕсли;
Конецфункции
// >> alo
&НаКлиенте
Функция сбисЗаполнитьДанныеАдминистратора(Контекст) экспорт
	// Процедура открывает форму для выбора файлов, которые необходимо приложить к каждому отправляемому пакету.
	фрм = сбисПолучитьФорму("ФормаДанныеАдминистратора");	
	фрм.Показать(Контекст.Кэш);
КонецФункции

// << alo EDI_ДозаписьЮЗДО
&НаКлиенте
функция ДобавитьДокументыЮЗДО(МестныйКэш,ФормаПросмотра) экспорт
	ЕстьСвязанныйДокумент=Ложь;
	Если ФормаПросмотра.СоставПакета.Свойство("Вложение") Тогда
		ИниТекущегоРеестра = МестныйКэш.Текущий.ТипДок;	
		Документы1С=Новый СписокЗначений;
		Для Каждого Вложение Из ФормаПросмотра.СоставПакета.Вложение Цикл
			Для Каждого Документ Из Вложение.Документы1С Цикл
				Если Документы1С.НайтиПоЗначению(Документ.Значение) = Неопределено Тогда
					Документы1С.Добавить(Документ.Значение);
					ЕстьСвязанныйДокумент=Истина;
				конецесли;
			КонецЦикла;
		КонецЦикла;
		Для Каждого Документ Из Документы1С Цикл
			ИмяДокумента = МестныйКэш.ОбщиеФункции.ПолучитьРеквизитМетаданныхОбъекта(Документ.Значение, "Имя");
			//Получим настройки документа
			СписокИни = Новый СписокЗначений;
			Для Каждого Ини Из МестныйКэш.Ини Цикл
				ЗначениеИни = МестныйКэш.ФормаНастроек.Ини(МестныйКэш, Ини.Ключ);
				Если ЗначениеИни.Свойство("Реестр1С_Тип") и ЗначениеИни.Свойство("ЗапросСпискаДокументов") Тогда
					Реестр1С_Тип = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Тип", ЗначениеИни, МестныйКэш);
					Если Реестр1С_Тип = ИмяДокумента Тогда
						Реестр1С_Название = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("Реестр1С_Название", ЗначениеИни, МестныйКэш);
						СписокИни.Добавить(Ини.Ключ, ?(ЗначениеЗаполнено(Реестр1С_Название),Реестр1С_Название,Реестр1С_Тип));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если СписокИни.Количество() = 0 тогда
				Если МестныйКэш.ини.Свойство(ИмяДокумента) Тогда	
					СписокИни.Добавить(ИмяДокумента, ИмяДокумента);
				Иначе
					Сообщить("Выгрузка данного документов "+ИмяДокумента+" не поддерживается!");
				КонецЕсли;
			КонецЕсли;
			Если СписокИни.Количество() = 1 Тогда
				ДозаписьПослеВыбораИни(СписокИни[0].Значение, Новый Структура("Документ,ФормаПросмотра",Документ.Значение,ФормаПросмотра));
			Иначе
				Оповещение = Новый ОписаниеОповещения("ДозаписьПослеВыбораИни", ЭтаФорма, Новый Структура("Документ,ФормаПросмотра",Документ.Значение,ФормаПросмотра));
				ОткрытьФорму("ВнешняяОбработка.СБИС.Форма.Форма_ВыборИзСписка",Новый Структура("СписокДляВыбора, Заголовок",СписокИни, "Выберите настройку для формирования документов для "+Документ.Значение),,,,,Оповещение);
			КонецЕсли;
		КонецЦикла;
		МестныйКэш.Текущий.ТипДок = ИниТекущегоРеестра;	
	КонецЕсли;
	Если не ЕстьСвязанныйДокумент Тогда
		Сообщить("Нет сопоставленного документа 1С!");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ДозаписьПослеВыбораИни(Результат, Параметры) Экспорт
	если ЗначениеЗаполнено(Результат) тогда
		Ини = МестныйКэш.Ини[Результат];
		МестныйКэш.Текущий.ТипДок = Результат;
		
		ПараметрыФильтра = Новый Структура;
		ПараметрыФильтра.Вставить( "ФильтрДокумент", Параметры.Документ); 		
		ПараметрыФильтра.Вставить( "ФильтрДатаНач", дата(1,1,1)); 
		ПараметрыФильтра.Вставить( "ФильтрДатаКнц", дата(1,1,1)); 
		ПараметрыФильтра.Вставить("ЗначениеДатаКонЗаполнено", Ложь );
		ПараметрыФильтра.Вставить( "ФильтрКонтрагент", "");
		ПараметрыФильтра.Вставить( "ФильтрКонтрагентПодключен", "");
		ПараметрыФильтра.Вставить( "ФильтрОрганизация", "");	
		ПараметрыФильтра.Вставить( "ФильтрСостояние", "Все документы");
		ПараметрыФильтра.Вставить( "ФильтрОтветственный", ПолучитьПустуюСсылку("Пользователи"));
		ПараметрыФильтра.Вставить( "ФильтрМаска", "");
		ПараметрыФильтра.Вставить( "РазмерСтраницы", 1 ); 
		ПараметрыФильтра.Вставить( "Страница", 1 );
		ПараметрыФильтра.Вставить( "ВсеДокументы", Истина );
		ПараметрыФильтра.Вставить( "ФильтрЕстьЕще", Ложь );
		
		Если МестныйКэш.ПараметрыФильтра.Количество()>0 Тогда
			ПараметрыФильтра.Вставить( "Пользовательские", Новый Структура);
			Для Каждого Элемент Из МестныйКэш.ПараметрыФильтра Цикл
				ПараметрыФильтра.Пользовательские.Вставить( Элемент.Ключ, Элемент.Значение);		
			КонецЦикла;
		КонецЕсли;
		
		//Получим массив выгружаемых документов по запросу
		ТекстЗапроса = МестныйКэш.ОбщиеФункции.РассчитатьЗначение("ЗапросСпискаДокументов", Ини, МестныйКэш);
		
		СоставПакета = Параметры.ФормаПросмотра.СоставПакета;
		МассивДокументов1С = МестныйКэш.ОбщиеФункции.ЗаполнитьМассивДокументов1С(ТекстЗапроса, ПараметрыФильтра, МестныйКэш.ГлавноеОкно.КаталогНастроек);
		Для каждого СтрокаСпискаДокументов из МассивДокументов1С цикл
			МассивПакетов = МестныйКэш.ОбщиеФункции.ПодготовитьСтруктуруДокумента1С(СтрокаСпискаДокументов, МестныйКэш);	
			Для каждого Пакет из МассивПакетов Цикл
				Для каждого Вложение из Пакет.Вложение Цикл
					ДобавитьВложение=Истина;
					Для каждого СуществующееВложение из СоставПакета.Вложение Цикл
						Если СуществующееВложение.Тип= Вложение.Тип Тогда
							Если СуществующееВложение.Свойство("Номер") = Вложение.Свойство("Номер") И СуществующееВложение.Номер= Вложение.Номер тогда
								Если СуществующееВложение.Свойство("Дата") = Вложение.Свойство("Дата") И СуществующееВложение.Дата= Вложение.Дата тогда
									ДобавитьВложение=Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Конецесли;
					Конеццикла;
					Если ДобавитьВложение Тогда
						Если Вложение.Свойство("XMLДокумента") И ЗначениеЗаполнено(Вложение.XMLДокумента) Тогда
							ТекстHTML = МестныйКэш.Интеграция.ПолучитьHTMLПоXML(МестныйКэш, Вложение);
							Вложение.Вставить("ТекстHTML",ТекстHTML);
						КонецЕсли;
						СоставПакета.Вложение.Добавить(Вложение);
						МестныйКэш.Интеграция.СБИСЗаписатьВложения(МестныйКэш,СоставПакета, Вложение);
					Конецесли;
				Конеццикла;
			КонецЦикла;
		КонецЦикла;
		Параметры.ФормаПросмотра.ЗаполнитьТаблицуДокументов(СоставПакета);
	КонецЕсли;
КонецФункции
&НаСервере
Функция ПолучитьПустуюСсылку(ИмяСправочника) Экспорт
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
КонецФункции
// alo EDI_ДозаписьЮЗДО >>

Функция ЗаполнитьEDIТЧ(Контекст) Экспорт
	Если Контекст.СтруктураФайла.Файл.Документ.Покупатель.Свойство("GLN") и ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.Покупатель.GLN) Тогда
		Свойства = Новый Массив;
		Для Каждого Элемент Из Контекст.СтруктураФайла.Файл.Документ.ТаблДок.СтрТабл Цикл
			Если Не Элемент.Свойство("Номенклатура") Тогда
				Возврат Ложь;
			КонецЕсли;
			Если	Элемент.Свойство("GTIN")
				И	ЗначениеЗаполнено(Элемент.GTIN) Тогда
				Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "GTIN", Элемент.GTIN));
			КонецЕсли;	
			Если Контекст.СтруктураФайла.Файл.Документ.Свойство("ПодТип") Тогда
				Если(ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.ПодТип) и Контекст.СтруктураФайла.Файл.Документ.ПодТип = "Fresh") Тогда
					Если Элемент.Свойство("Параметр") Тогда
						Если Элемент.Параметр.Свойство("Калибр") Тогда
							Если (ЗначениеЗаполнено(Элемент.Параметр.Калибр)) Тогда
								Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "Калибр", Элемент.Параметр.Калибр));	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если Элемент.Свойство("Упаковка") Тогда
						Если Элемент.Упаковка.Свойство("Название") Тогда
							Если (ЗначениеЗаполнено(Элемент.Упаковка.Название)) Тогда
								Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "УпаковкаНазвание", Элемент.Упаковка.Название));	
							КонецЕсли;	
						КонецЕсли;
						Если Элемент.Упаковка.Свойство("КолМест") Тогда
							Если (ЗначениеЗаполнено(Элемент.Упаковка.КолМест)) Тогда
								Свойства.Добавить(Новый Структура("Объект1С, ИмяСвойства, ЗначениеСвойства", Элемент.номенклатура, "КолМест", Элемент.Упаковка.КолМест));	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		сбисЗаполнитьДопСвойстваОбъектов(Свойства, ?(Контекст.Свойство("ИниКонфигурация"), Контекст.ИниКонфигурация, Новый Структура));
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция ИмяФайлаНастроекРасхожденияЗаказаПокупателя(Контекст) Экспорт
	Если Контекст.СтруктураФайла.Файл.Документ.Покупатель.Свойство("GLN") Тогда
		Если ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.Покупатель.GLN) Тогда
			Возврат "EDI_ЗаказПокупателя";
		КонецЕсли;
	КонецЕсли;
	Возврат "ЗаказПокупателя";
КонецФункции
&НаКлиенте
Функция ИмяФайлаНастроекРасхожденияЗаказаКлиента(Контекст) Экспорт
	Если Контекст.СтруктураФайла.Файл.Документ.Покупатель.Свойство("GLN") Тогда
		Если ЗначениеЗаполнено(Контекст.СтруктураФайла.Файл.Документ.Покупатель.GLN) Тогда
			Возврат "EDI_ЗаказКлиента";
		КонецЕсли;
	КонецЕсли;
	Возврат "ЗаказКлиента";
КонецФункции

////////////////////////////////////////////////////
////////////////Выгрузка документов/////////////////
////////////////////////////////////////////////////

////////////////////////////////////////////////////
//////////////////Номер документов//////////////////

//+++ МАИ 14.09.2021 универсальная функция получения номера документа
&НаКлиенте
Функция сбисПолучитьНомерДокумента(Контекст) Экспорт
	ОсновнойНомерДокумента = Неопределено;
	Контекст.Свойство("НомДокОсновнойНомерДокумента", ОсновнойНомерДокумента);
	
	Если ПустаяСтрока(ОсновнойНомерДокумента) Тогда
		ПринадлежностьНомера="";	
		Если Контекст.Свойство("НомДокПринадлежностьНомера", ПринадлежностьНомера) 
			И НЕ ПустаяСтрока(ПринадлежностьНомера) Тогда
			Если ПринадлежностьНомера = "ИсхДокумент" ИЛИ ПринадлежностьНомера = "ИсходныйДокумент" Тогда
				сбисДокумент = Контекст.ИсходныйДокумент;
			ИначеЕсли ПринадлежностьНомера = "ОказаниеУслуг" ИЛИ ПринадлежностьНомера = "ТаблДок" Тогда
				сбисДокумент = Контекст.ТаблДок;	
			ИначеЕсли ПринадлежностьНомера = "Основание" ИЛИ ПринадлежностьНомера = "ДокумеентОснование" ИЛИ ПринадлежностьНомера = "ДокОснование" Тогда
				сбисДокумент = Контекст.ДокОснование;
			ИначеЕсли ПринадлежностьНомера = "ИсправляемыйСчетФактура" Тогда
				сбисДокумент = Контекст.ИсправляемыйСчетФактура;
			Иначе
				сбисДокумент = Контекст.Документ;		
			КонецЕсли;	
		Иначе
			сбисДокумент = Контекст.Документ;	
		КонецЕсли;
	КонецЕсли;
	
	Возврат сбисНомерДокументаНаПечатьСервер(сбисФункцияНомераНаПечать(МестныйКэш), сбисДокумент, ОсновнойНомерДокумента, сбисДобавитьЗначениеПослеНомера(Контекст)); 
КонецФункции
//--- МАИ 14.09.2021 универсальная функция получения номера документа

&НаКлиенте
Функция ПолучитьНомерДокумента(Контекст) Экспорт
	сбисНомерДокумента = Неопределено;
	Контекст.Свойство("НомерДокумента", сбисНомерДокумента);
	Возврат сбисНомерДокументаНаПечатьСервер(сбисФункцияНомераНаПечать(МестныйКэш), Контекст.Документ, сбисНомерДокумента, сбисДобавитьЗначениеПослеНомера(Контекст)); 
КонецФункции

&НаКлиенте
Функция ПолучитьНомерДокументаОказаниеУслуг(Контекст) Экспорт
	Возврат сбисНомерДокументаНаПечатьСервер(сбисФункцияНомераНаПечать(МестныйКэш), Контекст.ТаблДок, , сбисДобавитьЗначениеПослеНомера(Контекст)); 
КонецФункции

&НаКлиенте
Функция сбисНомерИсходногоДокументаНаПечать(Контекст) Экспорт 
	Возврат сбисНомерДокументаНаПечатьСервер(сбисФункцияНомераНаПечать(МестныйКэш), Контекст.ИсходныйДокумент); 
КонецФункции

&НаКлиенте
Функция сбисНомерОснованияНаПечать(Контекст) Экспорт
	Возврат сбисНомерДокументаНаПечатьСервер(сбисФункцияНомераНаПечать(МестныйКэш), Контекст.ДокОснование,,сбисДобавитьЗначениеПослеНомера(Контекст)); 
КонецФункции

&НаКлиенте
Функция сбисНомерИсходнойФактурыНаПечать(Контекст) Экспорт
	Возврат сбисНомерДокументаНаПечатьСервер(сбисФункцияНомераНаПечать(МестныйКэш), Контекст.ИсходнаяФактура); 
КонецФункции

//Функция возвращает строку, для добавления после номера документа.
&НаКлиенте
Функция сбисДобавитьЗначениеПослеНомера(Контекст)
	
	СтрокаВозврат = Неопределено;
	Если	Контекст.Свойство("ИндексОбособленногоПодразделения", СтрокаВозврат)
		И	ЗначениеЗаполнено(СтрокаВозврат) Тогда
		Если ТипЗнч(СтрокаВозврат) = Тип("Число") Тогда
			СтрокаВозврат = Формат(СтрокаВозврат, "ЧН=0; ЧГ=0");
		Иначе
			СтрокаВозврат = СокрЛП(Строка(СтрокаВозврат));
		КонецЕсли;
	Иначе
		СтрокаВозврат = "";
	КонецЕсли;
	
	//+++ МАИ 14.09.2021 поддержка дополнительного постфикса 
	Постфикс = "";
	Контекст.Свойство("НомДокПостфикс", Постфикс);
	Если ПустаяСтрока(СтрокаВозврат) И НЕ ПустаяСтрока(Постфикс) Тогда
		СтрокаВозврат = Постфикс;
	ИначеЕсли НЕ ПустаяСтрока(Постфикс) Тогда
			СтрокаВозврат = СтрокаВозврат + "/" + Постфикс;	
	КонецЕсли;
	//--- МАИ 14.09.2021 поддержка дополнительного постфикса
	
	Возврат	СтрокаВозврат;	
	
КонецФункции

//Возвращает строку функции, которая вызывается для получения номера
&НаКлиенте
Функция сбисФункцияНомераНаПечать(Кэш)
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.Функции", "НомерДокумента");
	сбисРезультат = сбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, сбисОписаниеОбъекта);
	Если Не сбисРезультат = Неопределено Тогда
		Возврат сбисРезультат;
	КонецЕсли;
	сбисСтрокаФункцииКонец	=	"," + Формат(Кэш.Парам.УдалятьПрефиксИнформационнойБазы,"БЛ=Ложь; БИ=Истина") +
	"," + Формат(Кэш.Парам.УдалятьПользовательскийПрефикс,	"БЛ=Ложь; БИ=Истина") + ")";
	сбисНомерДокумента		= "001";
	сбисДокумент			= Неопределено;
	сбисСписокФункций		= Новый Массив;
	Если Не Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		сбисСписокФункций.Добавить("ОбщегоНазначения.ПолучитьНомерНаПечать(сбисДокумент)");
	КонецЕсли;
	сбисСписокФункций.Добавить("ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(сбисНомерДокумента" + сбисСтрокаФункцииКонец);
	сбисСписокФункций.Добавить("ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(сбисНомерДокумента" + сбисСтрокаФункцииКонец);
	сбисСписокФункций.Добавить("СокрЛП(сбисНомерДокумента)");
	Для Каждого сбисСтрокаФункции Из сбисСписокФункций Цикл 
		Попытка
			ТестНомерДокумента = Вычислить(сбисСтрокаФункции);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Продолжить;
		КонецПопытки;
		Прервать;
	КонецЦикла;
	сбисОписаниеОбъекта.Значение = сбисСтрокаФункции;
	сбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, сбисОписаниеОбъекта);
	Возврат сбисОписаниеОбъекта.Значение; 
КонецФункции

//Делает вызов стандартного механизма 1С для получения номера
&НаСервереБезКонтекста
Функция сбисНомерДокументаНаПечатьСервер(сбисСтрокаФункции, сбисДокумент, сбисОсновнойНомерДокумента=Неопределено, сбисПостфикс="")
	//Не указан номер, тогда берем его из документа руками.
	Если сбисОсновнойНомерДокумента = Неопределено Тогда
		сбисНомерДокумента = сбисДокумент.Номер;
	Иначе
		сбисНомерДокумента = сбисОсновнойНомерДокумента;
	КонецЕсли;
	Попытка 
		сбисРезультат = Вычислить(сбисСтрокаФункции); 
	Исключение
		сбисРезультат = Строка(сбисНомерДокумента);
	КонецПопытки;
	//1173125472 для добавления значения после номера документа.
	Если Не ПустаяСтрока(сбисПостфикс) Тогда
		сбисРезультат = Строка(сбисРезультат) + "/" + сбисПостфикс;
	КонецЕсли;
	
	Возврат сбисРезультат; 
КонецФункции

//TODO45 спилить. Старая функция получения номера. Пока оставлена для совместимости.
&НаСервере
Функция сбисНомерДокументаНаПечать(Документ,УдалятьПрефиксИнформационнойБазы=Ложь,УдалятьПользовательскийПрефикс=Ложь,Постфикс	= "",НомерДокументаИни="") Экспорт 
	
	Если НЕ НомерДокументаИни = "" Тогда
		Попытка 
			НомерДокумента = Вычислить("ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(НомерДокументаИни, УдалятьПрефиксИнформационнойБазы, УдалятьПользовательскийПрефикс)"); 
		Исключение 
			НомерДокумента = НомерДокументаИни; 
		КонецПопытки; 	
	Иначе	
		Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда 
			Попытка 
				НомерДокумента = Вычислить("ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Документ.Номер, УдалятьПрефиксИнформационнойБазы, УдалятьПользовательскийПрефикс)"); 
			Исключение 
				НомерДокумента = Документ.Номер; 
			КонецПопытки; 
		Иначе 
			Попытка 
				НомерДокумента = Вычислить("ОбщегоНазначения.ПолучитьНомерНаПечать(Документ)"); 
			Исключение 
				НомерДокумента = Документ.Номер;                                                               
			КонецПопытки; 
		КонецЕсли;
	КонецЕсли;
	
	//1173125472 для добавления значения после номера документа.
	Если Не ПустаяСтрока(Постфикс) Тогда
		НомерДокумента = Строка(НомерДокумента) + "/" + Постфикс;
	КонецЕсли;
	
	Возврат НомерДокумента; 
КонецФункции

////////////////////////////////////////////////////
////////////////Загрузка документов/////////////////
////////////////////////////////////////////////////

//Вынесено в отдельную функцию, общую для просмотра и массовой загрузки.
&НаКлиенте
Функция ЗаполнитьДанныеДляЗагрузкиПоУмолчанию(Кэш,СоставПакета,Вложение, ДополнительныеПараметры=Неопределено) Экспорт
	
	Результат = Новый Структура("МожемЗагрузитьВ1С,Статус,СтатусКартинка", 0,"",0);
	ГлавноеОкно = Кэш.ГлавноеОкно;
	
	//Определяем первоначальные данные вложения
	СтруктураИниФайла = Неопределено;
	СтруктураФайла = Неопределено;
	Если	Не Вложение.Свойство("Направление")
		Или	Не Вложение.Свойство("СтруктураИниФайла",СтруктураИниФайла)
		Или Не Вложение.Свойство("СтруктураФайла",СтруктураФайла) Тогда
		Результат.Статус = "Загрузка документа не поддерживается.";
		Возврат Результат;
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураИниФайла) Тогда
		Результат.Статус = "В настройках не указан тип документа 1С, которому соответствует данный файл.";
		Возврат Результат;
	КонецЕсли;
	ФормаВызова = Неопределено;
	Если 		ДополнительныеПараметры = Неопределено
		Или	Не	ДополнительныеПараметры.Свойство("ФормаВызова", ФормаВызова) Тогда
		ФормаВызова = "ФормаПросмотрДокумента";
	КонецЕсли;
	
	Результат.МожемЗагрузитьВ1С = Истина;
	ЕстьВходящиеВложения = Истина;
	
	ПараметрыНоменклатуры = Новый Структура("НадоСопоставлять, ЕстьХарактеристики, Сопоставлено",Ложь,Ложь);
	Если Не СоставПакета.Свойство("НоменклатураСопоставлена",ПараметрыНоменклатуры.Сопоставлено) Тогда 
		ПараметрыНоменклатуры.Сопоставлено = Истина;
	КонецЕсли;
	
	КонтрагентРоль = РассчитатьЗначение("Контрагент_Роль", СтруктураИниФайла, Кэш);
	ОрганизацияРоль = РассчитатьЗначение("Организация_Роль", СтруктураИниФайла, Кэш);
	
	Если Вложение.Свойство("Документы1С") И Вложение.Документы1С.Количество() > 0 Тогда
		Результат.СтатусКартинка = 3;
	КонецЕсли;
	Если Вложение.Свойство("НоменклатураКодКонтрагента") Тогда
		ПутьКонтрагента = "Файл.Документ."+Вложение.Получатель;
	КонецЕсли;
	
	//НГС
	Если Не КонтрагентРоль = Неопределено Тогда
		Попытка
			ПутьКонтрагента = Вложение.СтруктураИниФайла.мСторона[КонтрагентРоль].Сторона.Данные;
			СтрКонтрагента = РассчитатьЗначениеИзСтруктуры(ПутьКонтрагента, СтруктураФайла);
		Исключение
			ПутьКонтрагента = "Файл.Документ."+КонтрагентРоль;
			СтрКонтрагента = ?(СтруктураФайла.Файл.Документ.Свойство(КонтрагентРоль),СтруктураФайла.Файл.Документ[КонтрагентРоль], Неопределено);
		КонецПопытки;
	КонецЕсли;
	//КНГС
	
	Попытка
		ПутьОрганизации = Вложение.СтруктураИниФайла.мСторона[ОрганизацияРоль].Сторона.Данные;
		СтрОрганизации = РассчитатьЗначениеИзСтруктуры(ПутьОрганизации, СтруктураФайла);
		Если СтрОрганизации = Неопределено Тогда
			ВызватьИсключение("");
		КонецЕсли;
	Исключение
		Если НЕ СтруктураФайла.Файл.Документ.Свойство(ОрганизацияРоль) Тогда
			СтруктураФайла.Файл.Документ.Вставить(ОрганизацияРоль, СоставПакета.НашаОрганизация);
		КонецЕсли;
		СтрОрганизации = СтруктураФайла.Файл.Документ[ОрганизацияРоль];
		ПутьОрганизации = "Файл.Документ."+ОрганизацияРоль;
	КонецПопытки;
	
	ОрганизацияВложения = ?(ЗначениеЗаполнено(СтрОрганизации), НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, СтрОрганизации), Ложь);
	Если ЗначениеЗаполнено(СтрКонтрагента) и Кэш.Ини.Конфигурация.Свойство("ЗапросКонтрагента") и Кэш.Ини.Конфигурация.ЗапросКонтрагента.Свойство("ОграничениеПоОрганизации") и НРег(Кэш.Ини.Конфигурация.ЗапросКонтрагента.ОграничениеПоОрганизации)="да"  Тогда
		СтрКонтрагента.Вставить("Ограничения", Новый Структура("Организация",ОрганизацияВложения));
	КонецЕсли;
	
	Если Вложение.Направление = "Исходящий" Тогда  // при загрузке исходящих сопоставляем номенклатуру с номенклатурой нашей организации
		КонтрагентДляСопоставления = СтрОрганизации;
		ПутьКонтрагента = ПутьОрганизации;//AU для исходящего документа для сопоставления должна быть организация
	Иначе
		КонтрагентДляСопоставления = СтрКонтрагента;
	КонецЕсли;
	
	ПутьТаблДок = "Файл.Документ.ТаблДок.СтрТабл";
	Если СтруктураИниФайла.Свойство("мТаблДок") Тогда
		//Определим параметры номенклатуры ини в мТаблДок
		Для Каждого мТаблДокКлючИЗначение Из СтруктураИниФайла.мТаблДок Цикл
			ТабЧасть = мТаблДокКлючИЗначение.Значение;
			Если ТабЧасть.Свойство("Номенклатура") Тогда
				ПараметрыНоменклатуры.НадоСопоставлять = Истина;
			КонецЕсли;
			Если ТабЧасть.Свойство("Характеристика") Тогда
				ПараметрыНоменклатуры.ЕстьХарактеристики = Истина;
			КонецЕсли;
			Если	ТабЧасть.Свойство("ТаблДок")
				И	ТабЧасть.ТаблДок.Свойство("Данные") Тогда
				ПутьТаблДок = ТабЧасть.ТаблДок.Данные;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтруктураИниФайла.Свойство("мОснование") Тогда
		ПараметрыНоменклатуры.НадоСопоставлять = Истина;// если не окажется в пакете документа основания, надо будет сопоставлять
		Для Каждого Основание Из СтруктураИниФайла.мОснование Цикл
			Если Не (	Основание.Значение.Свойство("Основание_Документ")
				И	Основание.Значение.Основание_Документ.Свойство("Тип")) Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				ТипыОснований = Новый ОписаниеТипов(Основание.Значение.Основание_Документ.Тип);
				// Ищем в пакете Документ, который будет основанием СФ
				Для Каждого ВложениеОснование Из СоставПакета.Вложение Цикл
					ИниФайл_Документ = Неопределено;
					Если	Не ВложениеОснование.Свойство("СтруктураИниФайла", ИниФайл_Документ)
						Или	Не ИниФайл_Документ.Свойство("Документ", ИниФайл_Документ) Тогда
						Продолжить;
					КонецЕсли;
					ДокументСсылка = СтрЗаменить(ИниФайл_Документ.Значение,"Документ.","ДокументСсылка.");
					Если ТипыОснований.СодержитТип(Тип(ДокументСсылка)) Тогда	
						//такой тип будет загружен из пакета, И будет использовано его сопоставление
						ПараметрыНоменклатуры.НадоСопоставлять = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Если нет подходящих оснований в пакете, проверим основания, которые можно загрузить по текущей инишке. 
				// Если ни в одном основании сопоставление не требуется, то и для текущего документа не требуется.
				Если ПараметрыНоменклатуры.НадоСопоставлять Тогда
					счОснССопост = 0;
					Для Каждого РазделДок Из Кэш.ФормаНастроек.Ини(Кэш, Вложение.ИмяИни).мДокумент Цикл   // Ищем в инишке мДокумент с типом, который может быть основанием текущего документа
						РазделДокСтруктураИни = РазделДок.Значение;
						ТипМДок = Сред(РазделДокСтруктураИни.Документ.Значение, Найти(РазделДокСтруктураИни.Документ.Значение, ".")+1);
						Если	Не ТипыОснований.СодержитТип(Тип("ДокументСсылка."+ТипМДок))
							Или	Не РазделДокСтруктураИни.Свойство("мТаблДок") Тогда
							Продолжить;
						КонецЕсли;
						Для Каждого Элемент Из РазделДокСтруктураИни.мТаблДок Цикл
							Если Элемент.Значение.Свойство("Номенклатура") Тогда
								счОснССопост = счОснССопост + 1;    // Если хотя бы для одного основания требуется сопоставление, то считаем, что требуется сопоставление
								// << alo загрузка 3.03
								Если Элемент.Значение.Свойство("ТаблДок") И Элемент.Значение.ТаблДок.Свойство("Данные") Тогда
									ПутьТаблДок = Элемент.Значение.ТаблДок.Данные;
								конецесли;
								// alo загрузка 3.03 >>
							КонецЕсли;
							Если Элемент.Значение.Свойство("Характеристика") Тогда
								ПараметрыНоменклатуры.ЕстьХарактеристики = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Если счОснССопост = 0 Тогда   // Если ни для одного основания не требуется сопоставление, то и для текущего документа не требуется
						ПараметрыНоменклатуры.НадоСопоставлять = Ложь;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Результат.Вставить("ТекстОшибки", ОписаниеОшибки());
				Результат.Статус = "Ошибка при получении данных.";
				Результат.МожемЗагрузитьВ1С = Ложь;
				Возврат Результат;
			КонецПопытки;
		КонецЦикла;
		// >> alo
	КонецЕсли;
	Если ПараметрыНоменклатуры.НадоСопоставлять и ЗначениеЗаполнено(КонтрагентДляСопоставления) Тогда
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",Кэш.ФормаРаботыСНоменклатурой,"", Кэш);
		Попытка
			фрм.МестныйКэш	= Кэш;
		Исключение
			//Это старая пользовательская функция. По-хорошему, надо добавить туда переменную МестныйКэш
		КонецПопытки;
		НашаНоменклатура = РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, Кэш);
		ТаблДок = РассчитатьЗначениеИзСтруктуры(ПутьТаблДок, СтруктураФайла);
		Если ЗначениеЗаполнено(ТаблДок) Тогда
			Попытка   //d.ch 29.06.15
				стрТаблДок = фрм.НайтиНоменклатуруПоставщикаПоТабличнойЧасти(КонтрагентДляСопоставления, ТаблДок, Кэш.Парам.КаталогНастроек, Кэш.Ини);
			Исключение	
				Ошибка = ОписаниеОшибки();
				Если Найти(Ошибка, "Проблема с драйвером ODBC")=0 Тогда
					Результат.Вставить("ТекстОшибки", Ошибка); 
				КонецЕсли;
				стрТаблДок = Новый Структура;
			КонецПопытки;
			
			счСтр = 0;
			Для Каждого СтрТабл Из ТаблДок Цикл
				ДанныеНоменклатуры = Неопределено;
				Если ЗначениеЗаполнено(НашаНоменклатура) Тогда//UAA убрано условие на наличие свойства НашаНоменклатура по ошибке 1177970522.
					ДанныеНоменклатуры = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение(Вложение.СтруктураИниФайла.НашаНоменклатура.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", Вложение.СтруктураИниФайла, , , , СтруктураФайла, СтрТабл),Кэш);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
					Если стрТаблДок.Количество()>0 Тогда //d.ch 29.06.15
						ДанныеНоменклатуры = стрТаблДок["СтрТабл_"+Формат(счСтр, "ЧН=0; ЧГ=0")].НоменклатураПоставщика;
					Иначе
						Попытка
							ДанныеНоменклатуры = фрм.НайтиНоменклатуруПоставщика(КонтрагентДляСопоставления, СтрТабл, Кэш.Парам.КаталогНастроек, Кэш.Ини);
						Исключение
							Ошибка = ОписаниеОшибки();
							Если Найти(Ошибка, "Проблема с драйвером ODBC")>0 Тогда
								Прервать; 
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;	
				КонецЕсли;	
				Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
					ТаблДок[счСтр].Вставить("Номенклатура", ДанныеНоменклатуры.Номенклатура);
					Если ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
						ТаблДок[счСтр].Вставить("ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Характеристика);
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
					Результат.Статус = "Не вся номенклатура сопоставлена.";
					Результат.СтатусКартинка = 1;
					ПараметрыНоменклатуры.Сопоставлено = Ложь;
				КонецЕсли;
				счСтр = счСтр+1;
			КонецЦикла;
		КонецЕсли;
		Результат.Вставить("ТаблДок", ТаблДок);
	Иначе
		Результат.Статус = "Сопоставление не требуется. ";
	КонецЕсли;
	ОрганизацияВложения = ?(ЗначениеЗаполнено(СтрОрганизации), НайтиОрганизациюИзДокументаСБИС(Кэш.Ини.Конфигурация, СтрОрганизации), Ложь);
	КонтрагентВложения = ?(ЗначениеЗаполнено(СтрКонтрагента), НайтиКонтрагентаИзДокументаСБИС(Кэш.Ини.Конфигурация, СтрКонтрагента, Вложение.СтруктураИниФайла), Ложь);
	Если  Вложение.Свойство("РучноеИзменение") И Вложение.РучноеИзменение = Истина и Вложение.Свойство("Контрагент1С") и ЗначениеЗаполнено(Вложение.Контрагент1С) Тогда
		КонтрагентВложения = Вложение.Контрагент1С;
	КонецЕсли;
	Если ТипЗнч(ОрганизацияВложения) = Тип("Булево") Тогда
		Результат.МожемЗагрузитьВ1С = Ложь;
		Результат.Статус = СокрЛП(Результат.Статус + " Не найдена организация.");
		Результат.СтатусКартинка = 1;
	КонецЕсли;
	Если ТипЗнч(КонтрагентВложения) = Тип("Булево") И СтруктураИниФайла.Свойство("Контрагент_Роль")  Тогда
		Результат.МожемЗагрузитьВ1С = Ложь;
		Результат.Статус = СокрЛП(Результат.Статус + " Не найден контрагент.");
		Результат.СтатусКартинка = 1;
	КонецЕсли;
	Если Результат.МожемЗагрузитьВ1С и ПараметрыНоменклатуры.Сопоставлено Тогда
		Если ПараметрыНоменклатуры.НадоСопоставлять Тогда
			Результат.Статус = "Номенклатура сопоставлена. ";
		КонецЕсли;
		Если Не (Вложение.Свойство("Документы1С") И Вложение.Документы1С.Количество() > 0) Тогда // alo Меркурий 
			Результат.Статус = Результат.Статус + "Загрузка возможна.";
			Результат.СтатусКартинка = 2;
		Иначе
			Результат.Статус = Результат.Статус + "Возможно перезаполнение.";
			Если ЗначениеЗаполнено(Вложение.Документ1СПроведен) и Вложение.Документ1СПроведен Тогда
				Результат.Статус = Результат.Статус + " Необходимо отменить проведение документа.";
			КонецЕсли;	
		КонецЕсли;		
	КонецЕсли;
	СоставПакета.Вставить("НоменклатураСопоставлена",	ПараметрыНоменклатуры.Сопоставлено);	
	Результат.Вставить("ПутьОрганизации",				ПутьОрганизации);
	Результат.Вставить("ПутьКонтрагента",				ПутьКонтрагента);
	Результат.Вставить("ПутьТаблДок", 					ПутьТаблДок);
	Результат.Вставить("ОрганизацияВложения",			ОрганизацияВложения);
	Результат.Вставить("КонтрагентВложения",			КонтрагентВложения);
	Результат.Вставить("ЕстьВходящиеВложения",			ЕстьВходящиеВложения);
	Результат.Вставить("КонтрагентДляСопоставления",	КонтрагентДляСопоставления);
	Результат.Вставить("ПараметрыНоменклатуры",			ПараметрыНоменклатуры);
	Возврат Результат;
КонецФункции

//Функции с формы просмотра документов. Вынесены для использования в алгоритмах массовой загрузки.
&НаКлиенте
Функция СоздатьПерезаполнитьДокументы(Кэш,СоставПакета,СписокВложений,Параметры,ДополнительныеПараметры) Экспорт
	
	//Режим 0 Перезаполнить
	//Режим 1 Создать новые
	//Режим 2 Отменить
	//Режим 3 Загружать ещё не загруженные
	РежимДокументов = Параметры.РежимДокументов;
	//Режим 0 Документ не загружается, если нет сопоставления.
	//Режим 1 Для несопоставленных позиций создавать карточки номенклатуры и контрагента.
	//Режим 2 В табличную часть загружать только сопоставленную номенклатуру.                             
	РежимНоменклатуры = Параметры.РежимНоменклатуры;
	Если РежимДокументов = 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//Берем как результат созданный объект РезультатДействия и возвращаем его везде, где можно. 
	//Его можно взять в любом другом месте из Кэш.РезультатДействия, но для нормальной проброски результата выше, сделаю ещё возвратом.
	Результат				= Кэш.РезультатДействия;
	ГлавноеОкно				= Кэш.ГлавноеОкно;
	ФормаВызова				= Результат.Параметры.ФормаВызова;
	СоздаемНовый			= РежимДокументов = 1;
	
	СписокВесов				= Новый СписокЗначений;
	ИсходящиеДокументы1С	= Новый СписокЗначений;  // при загрузке расхождения редактируем исходящий документ
	НоменклатураСопоставлена= Истина;
	СтатусНеПоддерживается	= "Загрузка документа не поддерживается.";
	
	РезультатДетализация	= Новый Структура("Отказ,Строки,ГлобальнаяОшибка",Ложь);
	РезультатДетализация.Строки = Новый Структура("Выполнено,НеВыполнено,Ошибки",Новый Соответствие, Новый Соответствие, Новый Соответствие);
	РезультатДетализация.ГлобальнаяОшибка = Новый Структура("Вложение, Текст"); 	
	Для каждого СтрокаТаблДок из СписокВложений Цикл
		ОшибкаЗаполненияНоменклатуры = Ложь;
		Вложение = СтрокаТаблДок.Вложение[0].Значение;
		СтрокаРезультат = РезультатДействия_СформироватьСтрокуДетализации(Кэш, "Загрузка");
		СтрокаРезультат.ИдентификаторПакета		= СоставПакета.Идентификатор;
		СтрокаРезультат.ИдентификаторВложения	= Вложение.Идентификатор;
		СтрокаРезультат.Название				= Вложение.Название;
		//СтрокаРезультат = Новый Структура(	"ИдентификаторПакета, 		ИдентификаторВложения,	Номенклатура,Документы1С,Название,ОбработанДокумент1С,СостояниеДокумента,Сообщение", 
		//СоставПакета.Идентификатор,	Вложение.Идентификатор,	Новый Массив);
		
		//Возможные состояния документа в результате:
		//Выполнено:	"Обработан." - вложение было обработано и по нему созданы/перезаполнены, либо были найдены существующие документы/справочники. 
		//				Так, как по одному вложению может быть создано более одного документа, то подробнее смотреть в расшифровке обработанных объектов 1С:
		//					"Создан." - успешно создан новый документ 1С
		//					"Перезаполнен." - выбран режим 0, документ уже был создан и успешно перезаполнен
		//					"Найден." - такой документ есть
		//НеВыполнено:	"Загрузка документа не поддерживается." - отсутствует ини для загрузки
		//				"Документ уже загружен." - установлен режим 3, документ существует и не обрабатывается
		//				"Ошибки в связанном документе." при загрузке пакета в одном из документов были ошибки. Пакет не загружаем, а все документы, кроме того что с ошибкой попадают в этот раздел.
		//Ошибки:		"Не вся номенклатура сопоставлена."
		//				"Не найден контрагент."
		//				"Ошибка поиска номенклатуры."
		//				"Ошибка автоматического сопоставления/создания номенклатуры." - режим номенклатуры 0, при попытке создать новую карточку возникли проблемы.
		//				"Ошибка записи документа." - в процессе записи нового документа, либо заполнения возникли проблемы.
		//				Так же тут идет составной статус документа после заполнения данных по-умолчанию, например "Не вся номенклатура сопоставлена. Не найдена организация. Не найден контрагент."
		
		Если Вложение.Свойство("Направление") И Вложение.Направление = "Исходящий" и Вложение.Документы1С.Количество()>0 Тогда
			ИсходящиеДокументы1С.Добавить(Вложение.Документы1С[0].Значение);	
		КонецЕсли;
		Пропускаем = Ложь;
		Если РезультатДетализация.Отказ Тогда
			//При ошибке в одном из докумтов, чтобы не тратить лишних действий на проверку оставшихся, сразу объявляем их пропущенными, так как пакет всё равно не грузим.
			СтрокаРезультат.Состояние = "Ошибки в связанном документе.";
			Пропускаем = Истина;
		ИначеЕсли СтрокаТаблДок.МожемЗагрузитьВ1С <=0 Тогда 
			//Если не можем загрузить в 1С, то по ключевому слову проверим, что это не ошибка отсутствия организации, либо контрагента.
			Если Найти(СтрокаТаблДок.Статус," Не найден") Тогда
				СтрокаРезультат.Состояние = СтрокаТаблДок.Статус;
				СтрокаРезультат.Сообщение = СтрокаТаблДок.Статус + ?(Не ФормаВызова="ФормаПросмотрДокумента", " Откройте карточку документа для исправления.", "");
				РезультатДетализация.ГлобальнаяОшибка.Текст = СтрокаТаблДок.Статус;
				РезультатДетализация.ГлобальнаяОшибка.Вложение = Вложение;
				РезультатДетализация.Отказ = Истина;
				РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
				Продолжить;
				//На вложение нет ИНИшки для загрузки то ничего не делаем
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблДок.Статус) Тогда 
				СтрокаРезультат.Состояние = СтрокаТаблДок.Статус;
			Иначе
				СтрокаРезультат.Состояние = СтатусНеПоддерживается;
			КонецЕсли;
			Пропускаем = Истина;
		ИначеЕсли 	РежимДокументов = 3
			И	ЗначениеЗаполнено(Вложение.Документы1С) Тогда
			СтрокаРезультат.Состояние = "Документ уже загружен.";
			СтрокаРезультат.Сообщение = "Документ " + СтрокаРезультат.Название + " уже загружен.";
			Пропускаем = Истина;
		ИначеЕсли	РежимНоменклатуры = 0//Прерываем формирование пакета, если у какого-нибудь вложения уже не сопоставлена номенклатура, и выбран соответствующий режим.
			И	Найти(СтрокаТаблДок.Статус, "Не вся номенклатура сопоставлена.") Тогда
			СтрокаРезультат.Состояние = "Не вся номенклатура сопоставлена.";
			СтрокаРезультат.Сообщение = СтрокаТаблДок.Статус + ?(Не ФормаВызова="ФормаПросмотрДокумента", " Для сопоставления откройте карточку документа.", "");
			РезультатДетализация.ГлобальнаяОшибка.Текст = "Не вся номенклатура сопоставлена.";
			РезультатДетализация.ГлобальнаяОшибка.Вложение = Вложение;
			РезультатДетализация.Отказ = Истина;
			РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
			Продолжить;
		КонецЕсли;
		Если Пропускаем Тогда
			РезультатДетализация.Строки.НеВыполнено.Вставить(Вложение.Идентификатор, СтрокаРезультат);
			Продолжить;
		КонецЕсли;
		
		//Если нет контрагента и работаем в режиме автоматического создания карточек номенклатуры
		Если	РежимНоменклатуры = 1
			И	Найти(СтрокаТаблДок.Статус," Не найден контрагент.") Тогда 
			Если Кэш.ТихийРежим Тогда
				СтрокаТаблДок.МожемЗагрузитьВ1С		= Ложь;
				СтрокаРезультат.Состояние = "Не заполнен контрагент.";
				СтрокаРезультат.Сообщение = "Отсутствует контрагент для автоматического сопоставления и загрузки номенклатуры.";
				РезультатДетализация.ГлобальнаяОшибка.Текст = СтрокаРезультат.Сообщение;
				РезультатДетализация.ГлобальнаяОшибка.Вложение = Вложение;
				РезультатДетализация.Отказ = Истина;
				РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
				Продолжить;
			КонецЕсли;
			СтрокаПоУмолчанию = ?(ДополнительныеПараметры.Свойство("СтрокаПоУмолчанию"), ДополнительныеПараметры.СтрокаПоУмолчанию, СтрокаТаблДок); 
			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ЗаполнитьИзФайла","ФормаСозданияКонтрагента",,Кэш); 
			фрм.ЗаполнитьИзФайла(СтрокаПоУмолчанию, СоставПакета, Кэш); // alo загрузка из 3,03
		КонецЕсли;	
		
		//Если заходим в условие, то значит с номенклатурой не всё в порядке и необходимо выполнить ряд действий для загрузки документа в зависимости от выбранного способа.
		//Тогда в строке результата будут записи с описанием того, что было проделано с номенклатурой.
		//Если не заходим, то в номенклатуре будет пусто и это значит, что ориентироваться надо на детализацию ошибок, если с номенклатурой что-то пошло не так.
		Если	НЕ СоставПакета.НоменклатураСопоставлена
			И	НЕ Найти(СтрокаТаблДок.Статус,"Сопоставление не требуется. ") Тогда			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("фрмСозданияНоменклатуры",	ГлавноеОкно.сбисНайтиФормуФункции("СоздатьНоменклатуруПоДаннымПоставщика","РаботаСДокументами1С","", Кэш));
			ПараметрыЗаполнения.Вставить("фрмНоменклатуры",			ГлавноеОкно.сбисНайтиФормуФункции("НайтиНоменклатуруПоставщика",Кэш.ФормаРаботыСНоменклатурой,"", Кэш));
			ПараметрыЗаполнения.Вставить("ПараметрыРезультат",		Результат.Параметры);
			ПараметрыЗаполнения.Вставить("СтрКонтрагента",			РассчитатьЗначениеИзСтруктуры(СтрокаТаблДок.ПутьКонтрагента, Вложение.СтруктураФайла));
			ПараметрыЗаполнения.Вставить("Вложение",				Вложение);
			ПараметрыЗаполнения.Вставить("РежимНоменклатуры",		РежимНоменклатуры);
			ПараметрыЗаполнения.Вставить("НашаНоменклатура",		РассчитатьЗначение("НашаНоменклатура", Вложение.СтруктураИниФайла, Кэш));
			ПараметрыЗаполнения.Вставить("ДанныеНоменклатуры",		Неопределено);
			ПараметрыЗаполнения.Вставить("СтрокаДетализации",		СтрокаРезультат);
			
			ТаблДок = Неопределено;
			Если		ФормаВызова = "ФормаПросмотрДокумента"
				Или	Не	СтрокаТаблДок.Свойство("ТаблДок",ТаблДок) Тогда//Если есть расчитанный ТаблДок, то берём его
				ТаблДок = РассчитатьЗначениеИзСтруктуры(СтрокаТаблДок.ПутьТаблДок, Вложение.СтруктураФайла);
			КонецЕсли;
			
			Попытка
				стрТаблДок = ПараметрыЗаполнения.фрмНоменклатуры.НайтиНоменклатуруПоставщикаПоТабличнойЧасти(ПараметрыЗаполнения.СтрКонтрагента, ТаблДок, Кэш.Парам.КаталогНастроек, Кэш.Ини);
			Исключение
				//Тут пробрасываем ошибку, не формируя документ, так как упало в исключение.
				СтрокаРезультат.Состояние = "Ошибка поиска номенклатуры.";
				СтрокаРезультат.Сообщение = ОписаниеОшибки();
				РезультатДетализация.ГлобальнаяОшибка.Текст		= СтрокаРезультат.Сообщение;
				РезультатДетализация.ГлобальнаяОшибка.Вложение	= Вложение;
				РезультатДетализация.Отказ = Истина;
				РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
				Продолжить;
			КонецПопытки;
			
			//Так передаем данные детализации и информации об ошибке в функцию создания номенклатуры. Ниже что не заполнилось, заполняем тем, что есть.
			ДанныеДозаполнить = Новый Структура("СтрокаДетализации, ЗаполнитьДетализацию, Отказ", СтрокаРезультат, Истина, Ложь);
			Результат.Вставить("ВременныеДанные", ДанныеДозаполнить);
			Для СчСтр = 0 По ТаблДок.Количество()-1 Цикл
				СтрТабл = ТаблДок[СчСтр];
				Если стрТаблДок.Свойство("СтрТабл_"+Формат(СчСтр, "ЧН=0; ЧГ=0"),ПараметрыЗаполнения.ДанныеНоменклатуры) Тогда//AU берём предварительно найденные данные					
					ПараметрыЗаполнения.ДанныеНоменклатуры = ПараметрыЗаполнения.ДанныеНоменклатуры.НоменклатураПоставщика;			
				КонецЕсли;
				СтрокаНоменклатуры = ЗаполнитьСопоставитьНоменклатуру(Кэш, СтрТабл, ПараметрыЗаполнения, ОшибкаЗаполненияНоменклатуры);
				
				//Здесь считаем это ошибкой, так как номенклатура должна была создаться
				Если	ОшибкаЗаполненияНоменклатуры Тогда 
					СтрокаРезультат.Состояние = "Ошибка автоматического сопоставления/создания номенклатуры.";
					Если Не ДанныеДозаполнить.Отказ Тогда//Если в переданных данных не проставился отказ, значит в стандартный метод создания не заходили, а значит надо проставить сообщение из того, что вернулось.
						СтрокаРезультат.Сообщение = СтрокаНоменклатуры.ТекстОшибки;
					КонецЕсли;
					РезультатДетализация.ГлобальнаяОшибка.Текст		= " при автоматическом сопоставление и создании номенклатуры возникла ошибка: " + СтрокаРезультат.Сообщение;
					РезультатДетализация.ГлобальнаяОшибка.Вложение	= Вложение;
					РезультатДетализация.Отказ = Истина;
					РезультатДетализация.Строки.Ошибки.Вставить(Вложение.Идентификатор, СтрокаРезультат);
					Прервать;
				КонецЕсли;
				СтрТабл.Вставить("Номенклатура", СтрокаНоменклатуры.Номенклатура);
				Если СтрокаНоменклатуры.НеЗагружать Тогда
					СтрТабл.Вставить("НеЗагружать", СтрокаНоменклатуры.НеЗагружать);
				КонецЕсли;
				Если СтрокаНоменклатуры.Свойство("ХарактеристикаНоменклатуры") Тогда
					СтрТабл.Вставить("ХарактеристикаНоменклатуры", СтрокаНоменклатуры.ХарактеристикаНоменклатуры);
				КонецЕсли;
				ТаблДок[СчСтр] = СтрТабл;
			КонецЦикла;
			Результат.Удалить("ВременныеДанные");
			
			Если ОшибкаЗаполненияНоменклатуры Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Вес = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение("Вес",Новый Структура("Ини", Вложение.СтруктураИниФайла), Кэш);
		Попытка
			Вес = Число(Вес);
		Исключение
			Вес = 0;
		КонецПопытки;
		Если СписокВесов.НайтиПоЗначению(Вес)=Неопределено Тогда
			СписокВесов.Добавить(Вес);
		КонецЕсли;
		Вложение.Вставить("Вес", Вес);
		Вложение.Вставить("ТипДокумента", сбисСообщитьИмяРеквизита(РассчитатьЗначение("Документ", Вложение.СтруктураИниФайла, Кэш)));	
		РезультатДетализация.Строки.Выполнено.Вставить(Вложение.Идентификатор, СтрокаРезультат);
	КонецЦикла;
	
	сбисПараметрыСчетчика	= Новый Структура;
	СообщениеВоВложения		= "";
	Если РезультатДетализация.Отказ Тогда
		//Если были ошибки, не дающие загрузить пакет целиком, то все вложения, которые могли бы загрузить добавляем в детализацию как не выполненные.
		СообщениеВоВложения = "В " + РезультатДетализация.ГлобальнаяОшибка.Вложение.Название + " " + РезультатДетализация.ГлобальнаяОшибка.Текст;
		Для Каждого КлючИЗначение Из РезультатДетализация.Строки.Ошибки Цикл
			СтрокаРезультат = КлючИЗначение.Значение;
			РезультатДействия_ДобавитьОшибку(Кэш, Результат, СтрокаРезультат, Новый Структура("message,details", СтрокаРезультат.Состояние, СтрокаРезультат.Сообщение), Новый Структура("ТипОшибки", "Подготовка"));
		КонецЦикла;
		Для Каждого КлючИЗначение Из РезультатДетализация.Строки.Выполнено Цикл
			СтрокаРезультат = КлючИЗначение.Значение;
			СтрокаРезультат.Сообщение = СообщениеВоВложения;
			СтрокаРезультат.Состояние = "Ошибки в связанном документе.";
			ПараметрыВыполнения = Новый Структура("Выполнено, КлючГруппировки, ПараметрыСчетчика", Ложь, СтрокаРезультат.Состояние, сбисПараметрыСчетчика);
			РезультатДействия_ДобавитьРезультат(Кэш, Результат, СтрокаРезультат, ПараметрыВыполнения);
		КонецЦикла;
		СписокВесов.Очистить();
	КонецЕсли;
	//Получим список документов к загрузке
	СписокВесов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	УпорядоченныйСоставПакета = Новый Массив;
	Для Каждого Элемент Из СписокВесов Цикл
		Для каждого СтрокаТаблДок из СписокВложений Цикл
			Если СтрокаТаблДок.МожемЗагрузитьВ1С <=0 Тогда   
				Продолжить;
			КонецЕсли;
			Вложение = СтрокаТаблДок.Вложение[0].Значение;
			Если Вложение.Свойство("Вес") И Элемент.Значение = Вложение.Вес Тогда
				УпорядоченныйСоставПакета.Добавить(Вложение);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	//Не выполненые добавляем в детализацию. Считаем не выполненным весь пакет только если все вложения не загружаются.
	Для Каждого КлючИЗначение Из РезультатДетализация.Строки.НеВыполнено Цикл
		СтрокаРезультат = КлючИЗначение.Значение;
		Если	ПустаяСтрока(СтрокаРезультат.Сообщение)
			И	СтрокаРезультат.Состояние = "Ошибки в связанном документе." Тогда
			СтрокаРезультат.Сообщение = СообщениеВоВложения;
		КонецЕсли;
		ПараметрыВыполнения = Новый Структура("Выполнено, КлючГруппировки, ПараметрыСчетчика", Ложь, СтрокаРезультат.Состояние, сбисПараметрыСчетчика);
		//Если загрузка не поддерживается, не считаем это как не выполнено.
		//НО только если есть другие вложения к загрузке, оценка успешности/не удачи будет тогда проходить по ним.
		Если СтрокаРезультат.Состояние = СтатусНеПоддерживается Тогда
			ПараметрыВыполнения.Вставить("Считать", (Не УпорядоченныйСоставПакета.Количество()));
		КонецЕсли;
		РезультатДействия_ДобавитьРезультат(Кэш, Результат, СтрокаРезультат, ПараметрыВыполнения);
	КонецЦикла;
	
	Если Не РезультатДетализация.Количество() Тогда
		РезультатДетализация = Неопределено;
	КонецЕсли;
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("Кэш",						Кэш);
	ПараметрыЗагрузки.Вставить("ДополнительныеПараметры",	ДополнительныеПараметры);
	ПараметрыЗагрузки.Вставить("СоздаемНовый",				СоздаемНовый);
	ПараметрыЗагрузки.Вставить("ПараметрыСчетчика",			сбисПараметрыСчетчика);
	ПараметрыЗагрузки.Вставить("УпорядоченныйСоставПакета",	УпорядоченныйСоставПакета);
	ПараметрыЗагрузки.Вставить("ИсходящиеДокументы1С",		ИсходящиеДокументы1С);
	ПараметрыЗагрузки.Вставить("СоставПакета",				СоставПакета);
	
	Возврат ЗагрузитьУпорядоченныйСоставПакета(РезультатДетализация, ПараметрыЗагрузки);
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьУпорядоченныйСоставПакета(Результат, ПараметрыЗагрузки) 
	
	Кэш = ПараметрыЗагрузки.Кэш;
	УпорядоченныйСоставПакета = ПараметрыЗагрузки.УпорядоченныйСоставПакета;
	ИсходящиеДокументы1С = ПараметрыЗагрузки.ИсходящиеДокументы1С;
	СоздаемНовый = ПараметрыЗагрузки.СоздаемНовый;
	СоставПакета = ПараметрыЗагрузки.СоставПакета;
	МассивОснований = Новый Массив;
	ДополнительныеПараметры = Неопределено;
	//Если в дополнительных параметрах указан обработчик результата(описание оповещения, куда надо попасть после не модального диалога), то передаём его дальше 
	Если	ПараметрыЗагрузки.Свойство("ДополнительныеПараметры", ДополнительныеПараметры) Тогда 
		Если ДополнительныеПараметры.Свойство("ОбработчикРезультата") Тогда 
			ПараметрыЗагрузки.Вставить("ОбработчикРезультата",ДополнительныеПараметры.ОбработчикРезультата);
		КонецЕсли;
		ПараметрыЗагрузки.Вставить("ВыполнитьОбработчик", Ложь);
		ПараметрыЗагрузки.Удалить("ДополнительныеПараметры");
	Иначе
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	//Дальше результат передаётся как параметр
	ПараметрыЗагрузки.Вставить("Результат", Результат);
	Ответ = Неопределено;
	Для Каждого Вложение Из УпорядоченныйСоставПакета Цикл
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+Вложение.ТипДокумента,"Документ_Шаблон",Кэш);
		ПродолжитьПеребор = Истина;
		Если Вложение.Документы1С.Количество()=0 Тогда
			ТекущийДокумент1С = Неопределено;
			Если ИсходящиеДокументы1С.Количество()>0 Тогда
				Для Каждого Док1С Из ИсходящиеДокументы1С Цикл
					ТипДок1С = ПолучитьРеквизитМетаданныхОбъекта(Док1С.Значение, "Имя");
					Если ТипДок1С = Вложение.ТипДокумента Тогда
						Если ДополнительныеПараметры.Свойство("ОтветНаИзмененияВИсходныйДокумент") Тогда
							Ответ = ДополнительныеПараметры.ОтветНаИзмененияВИсходныйДокумент;
						Иначе
							ТекстВопроса = "Внести изменения в исходный документ "+строка(Док1С.Значение)+"?";
							КнопкиВопроса = РежимДиалогаВопрос.ОКОтмена; 
							ПараметрыЗагрузки.Вставить("ВыполнитьОбработчик", Истина);
							#Если ТолстыйКлиентОбычноеПриложение Тогда
								Ответ = Вопрос(ТекстВопроса,КнопкиВопроса,0);
							#Иначе
								ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом",ЭтаФорма, ПараметрыЗагрузки),ТекстВопроса, КнопкиВопроса, 0);
								Возврат Неопределено;
							#КонецЕсли
							//Возвращаем неопределено, так как в дилог в дополнительных параметрах должен быть передан обработчик результата, куда попадём после выбора способа загрузки
						КонецЕсли;
						ПродолжитьПеребор = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Не ПродолжитьПеребор Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом(Ответ, ПараметрыЗагрузки);	
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом(РезультатВопроса, ПараметрыЗагрузки) Экспорт	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат Неопределено;
	КонецЕсли;
	Кэш = ПараметрыЗагрузки.Кэш;
	Результат = Кэш.РезультатДействия;//Как результат идёт структура из Кэша. В его детализацию добрасываем либо выполненный результат, либо ошибку.
	РезультатСоответствие = ПараметрыЗагрузки.Результат;
	УпорядоченныйСоставПакета = ПараметрыЗагрузки.УпорядоченныйСоставПакета;
	ИсходящиеДокументы1С = ПараметрыЗагрузки.ИсходящиеДокументы1С;	
	СоздаемНовый = ПараметрыЗагрузки.СоздаемНовый;
	СоставПакета = ПараметрыЗагрузки.СоставПакета;
	
	ОшибкиЗагрузки = Ложь;
	МассивОснований = Новый Массив;
	сбисПараметрыСчетчика = ПараметрыЗагрузки.ПараметрыСчетчика;//Если уже упало на стадии подготовки, то весь результат был обработан и посчитан. Сюда приходим только для вызова ОбработчикРезультата
	Для Каждого Вложение Из УпорядоченныйСоставПакета Цикл
		СтрокаРезультат = РезультатСоответствие.Строки.Выполнено.Получить(Вложение.Идентификатор);
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("СоздатьДокумент","Документ_"+Вложение.ТипДокумента,"Документ_Шаблон",Кэш);
		Если Вложение.Документы1С.Количество()>0 Тогда
			ТекущийДокумент1С = сбисВыбратьПодходящийДокумент(Вложение.Документы1С,Вложение.ТипДокумента);
		Иначе
			ТекущийДокумент1С = Неопределено;
			Если ИсходящиеДокументы1С.Количество()>0 и РезультатВопроса = КодВозвратаДиалога.ОК Тогда
				Для Каждого Док1С Из ИсходящиеДокументы1С Цикл
					ТипДок1С = ПолучитьРеквизитМетаданныхОбъекта(Док1С.Значение, "Имя");
					Если ТипДок1С = Вложение.ТипДокумента Тогда
						ТекущийДокумент1С = Док1С.Значение;
						СоздаемНовый = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		//Так передаем данные детализации и информации об ошибке в функцию создания документа. Ниже что не заполнилось, заполняем тем, что есть.
		ДанныеДозаполнить = Новый Структура("СтрокаДетализации, ЗаполнитьДетализацию, Отказ", СтрокаРезультат, Истина, Ложь);
		Результат.Вставить("ВременныеДанные", ДанныеДозаполнить);
		Документ1С = фрм.СоздатьДокумент(Кэш, Вложение, Вложение.СтруктураИниФайла, СоставПакета, МассивОснований, ?(Не СоздаемНовый, ТекущийДокумент1С, Неопределено));
		Если	ДанныеДозаполнить.Отказ
			Или	Документ1С = Неопределено Тогда
			//Были ошибки формирования документа(ов), дозаполнить состяние и сообщение, если в функциях что-то упущено
			Если ПустаяСтрока(СтрокаРезультат.Состояние) Тогда
				СтрокаРезультат.Состояние = "Ошибка формирования документа.";
			КонецЕсли;
			Если ПустаяСтрока(СтрокаРезультат.Сообщение) Тогда
				СтрокаРезультат.Сообщение = "Не удалось " + ?(СоздаемНовый, "создать новый документ " + СтрокаРезультат.Название, "перезаполнить " + ТекущийДокумент1С);
			КонецЕсли;
			ПараметрыОшибки = Новый Структура("message,details", СтрокаРезультат.Состояние, СтрокаРезультат.Сообщение);
			РезультатДействия_ДобавитьОшибку(Кэш, Результат, СтрокаРезультат, ПараметрыОшибки, Новый Структура("ПараметрыСчетчика", сбисПараметрыСчетчика),ОшибкиЗагрузки);
		Иначе
			СтрокаРезультат.Состояние = "Обработан";
			РезультатДействия_ДобавитьРезультат(Кэш, Результат, СтрокаРезультат, Новый Структура("КлючГруппировки, ПараметрыСчетчика", СтрокаРезультат.Состояние, сбисПараметрыСчетчика));
			МассивОснований.Добавить(Документ1С);
		КонецЕсли;
		Результат.Удалить("ВременныеДанные");
	КонецЦикла;
	Если Не ОшибкиЗагрузки Тогда
		Выполнено = Булево(УпорядоченныйСоставПакета.Количество());
		РезультатДействия_ДобавитьРезультат(Кэш, Результат, Неопределено, Новый Структура("Выполнено, ПараметрыСчетчика", Выполнено, сбисПараметрыСчетчика));
		//AU tda//Если все документы были загружены успешно, то удаляем файл
		Если Выполнено И Кэш.ИнтеграцияИмя = "ИнтеграцияКаталог"  Тогда
			Кэш.Интеграция.УдалитьФайлПакетаДокументов(УпорядоченныйСоставПакета[0].Файл.СсылкаНаФайл);
		КонецЕсли;
	КонецЕсли;
	сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие, Результат", "Загрузка", Кэш.РезультатДействия), Ложь);
	
	ОписаниеОповещенияРезультат = Неопределено;
	Если	ПараметрыЗагрузки.Свойство("ОбработчикРезультата",ОписаниеОповещенияРезультат)
		И	ПараметрыЗагрузки.ВыполнитьОбработчик Тогда 
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			РезультатВычислить = Вычислить(ОписаниеОповещенияРезультат.Модуль + "." + ОписаниеОповещенияРезультат.Функция + "(Результат, ОписаниеОповещенияРезультат.Параметры)");
		#Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияРезультат, Результат);
		#КонецЕсли
		Возврат Неопределено;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//////////////////Разбор документов/////////////////

// функция формирует структуру данных по пакету электронных документов, необходимую для его загрузки в 1С
&НаКлиенте
Функция РазобратьСтруктуруДокументаСбис(ПолныйСоставПакета, Кэш, ИмяРеквизитаВложений = "Вложение") Экспорт
	Если Не ПолныйСоставПакета.Свойство(ИмяРеквизитаВложений) Тогда
		Сообщить("В пакете " + ПолныйСоставПакета.Название + " отсутствуют вложения.");
		Возврат ПолныйСоставПакета
	КонецЕсли;
	ПараметрыРазбора = Новый Структура;
	
	ИндексВложенияВПакете	= 0;
	ОшибкиРазбораВложений	= Ложь;
	
	Кэш.Вставить("ЕстьОшибкиРасшифровки", Ложь);
	Для Каждого Вложение Из ПолныйСоставПакета[ИмяРеквизитаВложений] Цикл
		РазобранныеДанныеВложения = ПолучитьРазобранныеДанныеВложенияСбис(Кэш, ПолныйСоставПакета, Вложение, ПараметрыРазбора, ОшибкиРазбораВложений);
		Если ОшибкиРазбораВложений Тогда
			Прервать;
		КонецЕсли;
		// UAA38 Так, как нельзя гарантировать что переданное вложение не прокатится до сервера и взад через пользовательские функции
		//считаем что Вложение - уже может быть другим объектом. Чтоб не поломалась ссылочность на форме просмотра, костыль с дозаполнением.
		Для Каждого КлючИЗначениеДанных Из РазобранныеДанныеВложения Цикл
			ПолныйСоставПакета[ИмяРеквизитаВложений][ИндексВложенияВПакете].Вставить(КлючИЗначениеДанных.Ключ, КлючИЗначениеДанных.Значение);
		КонецЦикла;
		ИндексВложенияВПакете = ИндексВложенияВПакете + 1;
	КонецЦикла;	
	Кэш.Удалить("ЕстьОшибкиРасшифровки");
	Возврат ПолныйСоставПакета;
	
КонецФункции

//Функция возвращает разобрынные данные вложения XMLДокумента, СтруктураФайла, ФорматДляЗагрузки, ВерсияФорматаДляЗагрузки
&НаКлиенте
Функция ПолучитьРазобранныеДанныеВложенияСбис(Кэш, ПолныйСоставПакета, Вложение, ДополнительныеПараметры, Отказ) Экспорт
	Перем Файл_Формат, Файл_ВерсияФормата;
	
	Результат = Новый Структура("XMLДокумента", "");
	ИдентификаторВложения = Вложение.Файл.Ссылка;
	Если Кэш.Парам.СпособОбмена = 1 Тогда
		//Если интеграция через каталог, передаём не идентификатор, а само вложение
		ИдентификаторВложения = Вложение.Файл;
	КонецЕсли;
	
	Если Вложение.Зашифрован = "Да" Тогда
		ДвоичныеДанныеBase64 = Кэш.Интеграция.ПолучитьДанныеЗашифрованногоФайла(Кэш,ИдентификаторВложения);
		Вложение.Файл.Вставить("ДвоичныеДанные", ДвоичныеДанныеBase64);
		XMLФайла = сбисТекстИзBase64(ДвоичныеДанныеBase64, Кэш.КэшЗначенийИни);
	Иначе
		XMLФайла = Кэш.Интеграция.ПолучитьДанныеФайла(Кэш, ИдентификаторВложения);
	КонецЕсли;
	XMLИсходногоФайла = XMLФайла;
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""SFAKT""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""OTORG12""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""IAKTPRM""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns:xs=""http://www.w3.org/2001/XMLSchema""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""","");
	XMLФайла = СтрЗаменить(XMLФайла,"xmlns=""urn:schemas-microsoft-com:office:spreadsheet""","");
	
	ЕстьXSLT= Ложь;
	ИмяXSLT	= "";
	
	ПодТип				= ?(Вложение.Свойство("ПодТип"),СтрЗаменить(Вложение.ПодТип,"-",""), "");
	Файл_Формат			= СтрЗаменить(Вложение.Тип, " ", "");
	Файл_ВерсияФормата	= СтрЗаменить(СтрЗаменить(Вложение.ВерсияФормата, ".", "_"), " ", "");		
	СтруктураФайла		= Новый Структура;
	Если ЗначениеЗаполнено(Файл_Формат) Тогда
		ИмяXSLT	= Файл_Формат + "_" + ПодТип + "_" + Файл_ВерсияФормата;
		ЕстьXSLT= Кэш.XSLT.Свойство(ИмяXSLT);
		
		ОшибкаПреобразования= Ложь;
		ДопПараметрыXSLT	= Неопределено;
		Если Кэш.Парам.РежимОтладки Тогда
			ДопПараметрыXSLT = Новый Структура;
			ДопПараметрыXSLT.Вставить("Название", сбисФорматКаталога("Загрузка", Кэш.ПараметрыСистемы.Клиент));
			Если ПолныйСоставПакета.Свойство("Название") Тогда
				ДопПараметрыXSLT.Название = ДопПараметрыXSLT.Название + ПолныйСоставПакета.Название;
			КонецЕсли;
		КонецЕсли;
		XMLФайла = сбисПрименитьXSLT(Кэш, XMLФайла, ИмяXSLT, ДопПараметрыXSLT, ОшибкаПреобразования);
		Если ОшибкаПреобразования Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, XMLФайла);
			XMLФайла = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(Файл_ВерсияФормата) Тогда
			Результат.Вставить("XMLДокумента", XMLИсходногоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(XMLФайла) Тогда
			Попытка
				СтруктураФайла	= ЗаполнитьСтруктуруФайла(XMLФайла);
			Исключение
				//Возможна ошибка транспорта строки не XML вложений на УФ
				СтруктураФайла	= Новый Структура;
				XMLФайла		= "";
			КонецПопытки;
		КонецЕсли;
	Иначе
		XMLФайла= "";
	КонецЕсли;
	
	//Пробуем преобразовать XML только если он есть, дабы избежать лишних вызовов сервера
	Результат.Вставить("СтруктураФайла", СтруктураФайла);
	Если	ЕстьXSLT 
		И	СтруктураФайла.Свойство("Файл")
		И	СтруктураФайла.Файл.Свойство("Формат")
		И	СтруктураФайла.Файл.Свойство("ВерсияФормата") Тогда
		Файл_Формат			= СтрЗаменить(СтруктураФайла.Файл.Формат, " ", "");
		Файл_ВерсияФормата	= СтрЗаменить(СтрЗаменить(СтруктураФайла.Файл.ВерсияФормата, ".", "_"), " ", "");
	ИначеЕсли ЗначениеЗаполнено(XMLФайла) Тогда	// XMLФайла может быть пустым, если вложение не удалось расшифровать
		Файл_Формат			= СтрЗаменить(Вложение.Тип, " ", "");
		Файл_ВерсияФормата	= СтрЗаменить(СтрЗаменить(Вложение.ВерсияФормата, ".", "_"), " ", "");
	Иначе
		Возврат Результат;
	КонецЕсли;					
	Результат.Вставить("ФорматДляЗагрузки",			Файл_Формат);
	Результат.Вставить("ВерсияФорматаДляЗагрузки",	Файл_ВерсияФормата);
	
	//AU Вынесено определение ини для загрузки.
	Если	Вложение.Свойство("Направление") 
		И	ЗначениеЗаполнено(Файл_Формат) Тогда
		ИмяИни = "";
		Если Вложение.Направление = "Входящий" Тогда
			ИмяИни = Файл_Формат+"_"+Файл_ВерсияФормата;
			Если НЕ Кэш.Ини.Свойство(ИмяИни) Тогда // если нет файла настроек со старым именем, то пытаемся найти с новым
				ИмяИни = "Загрузка_" + Вложение.Направление + "_" + Файл_Формат + "_" + Файл_ВерсияФормата;
			КонецЕсли;
		ИначеЕсли Вложение.Направление = "Исходящий" Тогда 
			ИмяИни = "Загрузка_" + Вложение.Направление + "_" + Файл_Формат + "_" + Файл_ВерсияФормата;
		КонецЕсли;
		Если Не	(	ЗначениеЗаполнено(ИмяИни) 
			И	Кэш.Ини.Свойство(ИмяИни)) Тогда
			Возврат Результат;
		КонецЕсли; 
		Ини = Кэш.ФормаНастроек.Ини(Кэш, ИмяИни);
		Результат.Вставить("ИмяИни", ИмяИни);
		Если Вложение.Свойство("СтруктураИниФайла") Тогда
			Возврат Результат;
		КонецЕсли;
		Результат.Вставить("СтруктураИниФайла", Новый Структура);
		Если Не Ини.Свойство("мДокумент") Тогда
			Возврат Результат;
		КонецЕсли;
		//По-дефолту берётся первый мДокумент из Ини
		Для Каждого ИниДокумент Из Ини.мДокумент Цикл
			Результат.СтруктураИниФайла = ИниДокумент.Значение;
			Прервать;
		КонецЦикла;	
		
		//НГС Выбор мДокумента из инишки
		// KES 1178492498 Загрузка входящего, созданного вручную -->
		//значения по умолчанию
		РегламентВоВложении = РассчитатьЗначениеИзСтруктуры("Файл.Документ.Параметр.ДокументВидОперации", СтруктураФайла); 
		РегламентНаПакете = ПолныйСоставПакета.Регламент.Название; 
		
		ДокументПриоритетЗагрузки = Новый СписокЗначений;
		
		Для Каждого ИниДокумент из Ини.мДокумент Цикл
			
			РеглНаПакетеСовпал = Ложь; 
			Если ИниДокумент.Значение.Свойство("РеестрСБИС_Операция") Тогда
				РегламентПакет_мДокумент = РассчитатьЗначение("РеестрСБИС_Операция", ИниДокумент.Значение,Кэш);
				РеглНаПакетеСовпал = ( НРег(РегламентПакет_мДокумент) = НРег(РегламентНаПакете) );
			КонецЕсли;
			
			РеглНаВложенииСовпал = Ложь;
			Если ИниДокумент.Значение.Свойство("ДокументВидОперации") Тогда
				
				Если ИниДокумент.Значение.ДокументВидОперации.Свойство("Данные") Тогда
					РегламентВоВложении = РассчитатьЗначениеИзСтруктуры(ИниДокумент.Значение.ДокументВидОперации.Данные, СтруктураФайла);
				КонецЕсли;
				
				РегламентВложение_мДокумент = РассчитатьЗначение("ДокументВидОперации", ИниДокумент.Значение,Кэш);
				Если ЗначениеЗаполнено(РегламентВложение_мДокумент) Тогда
					РегламентВложение_мДокумент = РазбитьСтрокуВМассивНаКлиенте(РегламентВложение_мДокумент,",");
					Для Каждого Регл Из РегламентВложение_мДокумент Цикл
						Если ( НРег(Регл) = НРег(РегламентВоВложении) )  Тогда
							РеглНаВложенииСовпал = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если РеглНаПакетеСовпал И РеглНаВложенииСовпал Тогда
				//Регламент на пакете и вложении совпадают - наивысший приоритет
				ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ,0);
			ИначеЕсли РеглНаВложенииСовпал Тогда    
				ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ,1);
			ИначеЕсли РеглНаПакетеСовпал Тогда     //на пакете совпал, на вложении нет
				ДокументПриоритетЗагрузки.Добавить(ИниДокумент.Ключ,2);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДокументПриоритетЗагрузки.Количество() Тогда
			ДокументПриоритетЗагрузки.СортироватьПоПредставлению();
			Результат.СтруктураИниФайла = Ини.мДокумент[ДокументПриоритетЗагрузки[0].Значение];
		КонецЕсли;
		//<-- KES 1178492498 Загрузка входящего, созданного вручную
		//КНГС-------------------------
		
		фрмПольз = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("ОпределитьТипЗагружаемогоДокумента","Файл_"+Файл_Формат+"_"+Файл_ВерсияФормата,"", Кэш);
		Если фрмПольз<>Ложь Тогда
			ТипДок = фрмПольз.ОпределитьТипЗагружаемогоДокумента(Новый Структура("СоставПакета,Вложение,Ини,Кэш",ПолныйСоставПакета,Вложение,Ини,Кэш));
			Результат.СтруктураИниФайла = Ини.мДокумент[ТипДок];
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////
///////////////Загрузка номенклатуры////////////////
////////////////////////////////////////////////////

//Функция вынесена из СоздатьПерезаполнитьДокументы. Сопоставляет, либо загружает не сопоставленную номенклатуру в зависимости от выбранного режима.
//Как результат идёт структура с описанием выполненного действия с номенклатурой. 
&НаКлиенте
Функция ЗаполнитьСопоставитьНоменклатуру(Кэш, СтрТабл, ПараметрыЗаполнения, Отказ) Экспорт
	
	СтрТаблНазвание = ?(СтрТабл.Свойство("Название"), СтрТабл.Название, "");
	Результат = Новый Структура("Название, Номенклатура, Новый, НеЗагружать", СтрТаблНазвание, Неопределено, Ложь, Ложь);
	
	НашаНоменклатура	= ПараметрыЗаполнения.НашаНоменклатура;
	СтруктураИниФайла	= ПараметрыЗаполнения.Вложение.СтруктураИниФайла;
	СтруктураФайла		= ПараметрыЗаполнения.Вложение.СтруктураФайла;
	РежимНоменклатуры	= ПараметрыЗаполнения.РежимНоменклатуры;
	СтрКонтрагента		= ПараметрыЗаполнения.СтрКонтрагента;
	ПараметрыРезультат	= ПараметрыЗаполнения.ПараметрыРезультат;
	
	Если	Не СтрТабл.Свойство("Номенклатура", Результат.Номенклатура)
		Или	Не ЗначениеЗаполнено(Результат.Номенклатура) Тогда
		ДанныеНоменклатуры = Неопределено;
		Если ЗначениеЗаполнено(НашаНоменклатура) И СтрТабл.Свойство(НашаНоменклатура) Тогда
			ДанныеНоменклатуры = сбисПолучитьФорму("Документ_Шаблон").РассчитатьЗначение(СтруктураИниФайла.НашаНоменклатура.Вычислить,Новый Структура("Ини, Документ, СтрТабл, Переменные, СтруктураФайла, СтрокаФайла", СтруктураИниФайла, , , , СтруктураФайла, СтрТабл),Кэш);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			Если ПараметрыЗаполнения.ДанныеНоменклатуры = Неопределено Тогда
				Попытка
					ДанныеНоменклатуры = ПараметрыЗаполнения.фрмНоменклатуры.НайтиНоменклатуруПоставщика(СтрКонтрагента, СтрТабл, Кэш.Парам.КаталогНастроек, Кэш.Ини);
				Исключение
				КонецПопытки;
			Иначе//Берем предварительно найденное значение, если не удалось рассчитать. 
				ДанныеНоменклатуры = ПараметрыЗаполнения.ДанныеНоменклатуры;
			КонецЕсли;	
		КонецЕсли;	
		Если ЗначениеЗаполнено(ДанныеНоменклатуры) Тогда
			Результат.Номенклатура = ДанныеНоменклатуры.Номенклатура;
			ПараметрыРасшифровки = Новый Структура("Название, Ссылка, Тип, Состояние, Сообщение", СтрТаблНазвание, Результат.Номенклатура, Кэш.Ини.Конфигурация.НоменклатураПоставщиков.Значение, "Найден.", "Для позиции " + СтрТаблНазвание + " найдена подходящая номенклатура.");
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ПараметрыЗаполнения.СтрокаДетализации, ПараметрыРасшифровки);
		Иначе
			Результат.Номенклатура = Неопределено;
		КонецЕсли;
		Если РежимНоменклатуры = 2 И Результат.Номенклатура=Неопределено Тогда 
			Результат.Вставить("НеЗагружать", Истина);
		Иначе                                         
			Если ЗначениеЗаполнено(ДанныеНоменклатуры) и ЗначениеЗаполнено(ДанныеНоменклатуры.Характеристика) Тогда
				Результат.Вставить("ХарактеристикаНоменклатуры", ДанныеНоменклатуры.Характеристика);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Если Результат.Номенклатура = Неопределено Тогда
		Если РежимНоменклатуры = 1 Тогда
			НоменклатураНов = ПараметрыЗаполнения.фрмСозданияНоменклатуры.СоздатьНоменклатуруПоДаннымПоставщика(Кэш,СтрТабл,СтруктураФайла);
			Если Не НоменклатураНов = Неопределено Тогда
				НазваниеНоменклатуры = Неопределено;
				Идентификатор = Неопределено;
				Если Не СтрТабл.Свойство("Название", НазваниеНоменклатуры) Тогда
					НазваниеНоменклатуры = "";
				КонецЕсли;
				Если Не СтрТабл.Свойство("Идентификатор", Идентификатор) Тогда
					Идентификатор = "";
				КонецЕсли;
				ДанныеНоменклатуры = Новый Структура("Название,Идентификатор,Номенклатура,Характеристика",НазваниеНоменклатуры,Идентификатор,НоменклатураНов,"");
				//Записываем соответствие
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("УстановитьСоответствиеНоменклатуры",Кэш.ФормаРаботыСНоменклатурой,"", Кэш);
				фрм.УстановитьСоответствиеНоменклатуры(СтрКонтрагента, ДанныеНоменклатуры, Кэш.Парам.КаталогНастроек, Кэш.Ини);
				
				Результат.Номенклатура = НоменклатураНов;
				Результат.Новый = Истина;			
			Иначе
				//ПараметрыЗаполнения.РежимНоменклатуры = 1;
				Результат.Вставить("ТекстОшибки", "Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации");
				Отказ = Истина;//Не переключаем режим номенклатуры, а даём понять, что с номенклатурой что-то не так. Тогда вложение мы не обрабатываем и добавляем ошибку.
			КонецЕсли;
		ИначеЕсли РежимНоменклатуры = 0 Тогда
			Результат.Вставить("ТекстОшибки", "Не вся номенклатура сопоставлена." + ?(Не ПараметрыРезультат.ФормаВызова="ФормаПросмотрДокумента", " Для сопоставления откройте карточку документа.", ""));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;	
	
КонецФункции

&НаКлиенте
Функция СоздатьНоменклатуруПоДаннымПоставщика(Кэш, СтрТабл, СтруктураФайла) Экспорт  	// сбисНикифоров  Функция создает Карточку номенклатуры по данным из файла
	//Проверяем вызов: если есть необходимость заполнения детализции, то формируем структуру ответа с детальным описанием обработчки карточки.
	Результат = Новый Структура("Название, Ссылка, Тип, Состояние, Сообщение, Ошибки", ?(СтрТабл.Свойство("Название"), СтрТабл.Название, ""), Неопределено, Неопределено,"", "", Ложь);
	ОшибкаСостояние = "Ошибка автоматического сопоставления/создания номенклатуры.";
	ОшибкаСообщение = "";
	//ОшибкаСообщение = "Автоматическое создание номенклатуры при загрузке не поддерживается для Вашей конфигурации.";
	ДанныеДетализации = РезультатДействия_ИзвлечьВременныеДанные(Кэш);
	Если Кэш.Ини.Конфигурация.Свойство("Номенклатура") Тогда
		Результат.Тип = Кэш.Ини.Конфигурация.Номенклатура.Значение;
		СправочникНоменклатура = сбисСообщитьИмяРеквизита(Результат.Тип);
	Иначе
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			ДанныеДетализации.Отказ = Истина;
			ДанныеДетализации.СтрокаДетализации.Состояние = ОшибкаСостояние;
			ДанныеДетализации.СтрокаДетализации.Сообщение = ОшибкаСообщение;
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Результат.Ссылка = сбисНайтиНоменклатуруПоНаименованию(СправочникНоменклатура, ?(СтрТабл.Свойство("Название"), СтрТабл.Название, ""));	//Пытаемся найти уже имеющуюся в базе по наименованию
	Если ЗначениеЗаполнено(Результат.Ссылка) Тогда
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			Результат.Состояние = "Найден.";
			Результат.Сообщение = "Для позиции " + Результат.Название + " найдена карточка номенклатуры с таким же названием.";
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ДанныеДетализации.СтрокаДетализации, Результат);
		КонецЕсли;
		Возврат Результат.Ссылка;             										//Если находим то возвращаем уже существующую карточку
	КонецЕсли;
	
	//Иначе создаем новый элемент справочника
	СтруктураСправочника = Новый Структура();               		//Создаем структуру, где ключ - название реквизита справочника, а значение - значение из файла
	ЗаполнитьСтруктуруЭлементаСправочника(Кэш,СтрТабл,СтруктураФайла,СтруктураСправочника); //Заполняем ее
	РезультатСоздания = СоздатьНоменклатуруИзСтруктуры(СправочникНоменклатура, СтруктураСправочника, ДанныеДетализации.Отказ);
	Если ДанныеДетализации.Отказ Тогда
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			//Если не удаётся создать карточку номенклатуры, то не поддерживаем (как было раньше)
			ДанныеДетализации.СтрокаДетализации.Состояние = ОшибкаСостояние;
			ДанныеДетализации.СтрокаДетализации.Сообщение = ОшибкаСообщение;
			Результат.Состояние = РезультатСоздания.message;
			Результат.Сообщение = РезультатСоздания.details;
			Результат.Ошибки	= Истина;
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ДанныеДетализации.СтрокаДетализации, Результат);
		Иначе
			Сообщить(РезультатСоздания.details);
		КонецЕсли;
		Возврат Неопределено;
	Иначе
		Если ДанныеДетализации.ЗаполнитьДетализацию Тогда
			Результат.Состояние = "Создан.";
			Результат.Сообщение = "Создана карточка номенклатуры " + РезультатСоздания;
			Результат.Ссылка	= РезультатСоздания;
			РезультатДействия_ДобавитьВРасшифровку(Кэш, "ЗагрузкаСправочника", ДанныеДетализации.СтрокаДетализации, Результат);
		КонецЕсли;
		Возврат РезультатСоздания;                                  	//Возвращаем ее
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция сбисНайтиНоменклатуруПоНаименованию(СправочникНоменклатура, Название)
	Возврат Справочники[СправочникНоменклатура].НайтиПоНаименованию(Название,Истина);
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьНоменклатуруИзСтруктуры(СправочникНоменклатура, СтруктураСправочника, Отказ)
	// Функция заполняет реквизиты документа 1С из одноименных полей структуры	
	Номенклатура = Справочники[СправочникНоменклатура].СоздатьЭлемент();
	Для Каждого Элемент Из СтруктураСправочника Цикл
		Если ТипЗнч(Элемент.Значение)<>Тип("Массив") Тогда
			Номенклатура[Элемент.Ключ] = Элемент.Значение;
		Иначе
			Номенклатура[Элемент.Ключ].Очистить();
			Для Каждого Строка Из Элемент.Значение Цикл
				НоваяСтрока = Номенклатура[Элемент.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Попытка
		Номенклатура.Записать();    								//Если карточка нормально записалась
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Ошибка записи номенклатуры.", "При записи карточки номенклатуры " + Номенклатура.Наименование + " возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	Возврат Номенклатура.Ссылка;
КонецФункции

////////////////////////////////////////////////////
///////////////////Отправка прайса//////////////////
////////////////////////////////////////////////////

&НаСервере
Процедура сбисЗаполнитьНоменклатуру(ДокументДанные, ГрязныйИни, ДанныеПоНоменклатуре, Предложения, ИниНоменклатура, Номенклатура, СтруктураПараметров)
	БазоваяЕдиница = Новый Структура("Атрибуты", Новый Структура);
	БазоваяЕдиница.Атрибуты.Вставить("МеждународноеСокращение",ДокументДанные.БазоваяЕдиница_МеждународноеСокращение);
	БазоваяЕдиница.Атрибуты.Вставить("НаименованиеПолное",ДокументДанные.БазоваяЕдиница_НаименованиеПолное);
	БазоваяЕдиница.Атрибуты.Вставить("Код",ДокументДанные.БазоваяЕдиница_Код);
	БазоваяЕдиница.Вставить("ЗначениеУзла",ДокументДанные.БазоваяЕдиница_Наименование);
	ПолноеНаименование = ДокументДанные.Номенклатура_ПолноеНаименование;
	НоменклатураНаименование = ?(ЗначениеЗаполнено(ПолноеНаименование),ПолноеНаименование,Номенклатура.Наименование);
	СтавкаНалога = Новый Структура("СтавкаНалога", Новый Структура("Наименование, Ставка", "НДС", строка(ДокументДанные.Номенклатура_СтавкаНДС)));
	ЕдИзм = ДокументДанные.БазоваяЕдиница;
	ИдЕдИзм = "";
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		ИдЕдИзм = строка(ЕдИзм.УникальныйИдентификатор());
	КонецЕсли;
	Если СтруктураПараметров.РеквизитСопоставленияНоменклатуры = "Код" Тогда
		Если ТипЗнч(Номенклатура.Код) = Тип("Число") Тогда
			ИдНоменклатуры = СокрЛП(Формат( Номенклатура.Код ,"ЧН=0; ЧГ=0"));	
		Иначе
			ИдНоменклатуры = СокрЛП(Номенклатура.Код);
		КонецЕсли;
	Иначе
		ИдНоменклатуры = строка(Номенклатура.УникальныйИдентификатор())+"##"+ИдЕдИзм;
	КонецЕсли;
	Если ИниНоменклатура.Свойство("ХарактеристикиНоменклатуры") и ЗначениеЗаполнено(ИниНоменклатура.ХарактеристикиНоменклатуры.Значение) Тогда
		ЕстьХарактеристики = Ложь;
		ИмяСправочникаХарактеристики = Сред(ИниНоменклатура.ХарактеристикиНоменклатуры.Значение, Найти(ИниНоменклатура.ХарактеристикиНоменклатуры.Значение, ".")+1);
		Характеристики = Справочники[ИмяСправочникаХарактеристики];
		Выборка = Характеристики.Выбрать(,Номенклатура);
		Пока Выборка.Следующий() Цикл
			ЕстьХарактеристики = Истина;
			ДокументДанные.Вставить("ХарактеристикаНоменклатуры",Выборка.Ссылка);
			ГрязныйИни.Вставить("ХарактеристикаНоменклатуры",Новый Структура("Значение",Выборка.Ссылка));
			Ид = строка(Номенклатура.УникальныйИдентификатор())+"#"+строка(Выборка.Ссылка.УникальныйИдентификатор())+"#"+ИдЕдИзм;
			Наименование = НоменклатураНаименование+" ("+Выборка.Ссылка.Наименование+")";
			
			ХарактеристикиТовара = Неопределено;
			//		Если ИниНоменклатура.Свойство("СвойстваХарактеристики") и ЗначениеЗаполнено(ИниНоменклатура.СвойстваХарактеристики.Значение) Тогда
			//			ИмяРегистраСвойствОбъектов = Сред(ИниНоменклатура.СвойстваХарактеристики.Значение, Найти(ИниНоменклатура.СвойстваХарактеристики.Значение, ".")+1);
			//			НаборЗаписей = РегистрыСведений[ИмяРегистраСвойствОбъектов].СоздатьНаборЗаписей();
			//			НаборЗаписей.Отбор.Объект.Установить(Выборка.Ссылка);
			//			НаборЗаписей.Прочитать();
			//
			//			Если НаборЗаписей.Количество()>0 Тогда	
			//				ХарактеристикиТовара = Новый Структура("ХарактеристикаТовара", Новый Массив);
			//				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
			//					ХарактеристикиТовара.ХарактеристикаТовара.Добавить(Новый Структура("Наименование,Значение", строка(ЗаписьРегистра.Свойство), строка(ЗаписьРегистра.Значение)));
			//				КонецЦикла;
			//			КонецЕсли;
			//		КонецЕсли;
			
			
			сбисСформироватьЗаписьПоНоменклатуре(Ид, Наименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, ХарактеристикиТовара,ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
		КонецЦикла;
		Если ЕстьХарактеристики = Ложь Тогда
			ДокументДанные.Вставить("ХарактеристикаНоменклатуры",Справочники[ИмяСправочникаХарактеристики].ПустаяСсылка());
			ГрязныйИни.Вставить("ХарактеристикаНоменклатуры",Новый Структура("Значение",Справочники[ИмяСправочникаХарактеристики].ПустаяСсылка()));
			сбисСформироватьЗаписьПоНоменклатуре(ИдНоменклатуры, НоменклатураНаименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, Неопределено, ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
		КонецЕсли;
	Иначе
		сбисСформироватьЗаписьПоНоменклатуре(ИдНоменклатуры, НоменклатураНаименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, Неопределено, ДанныеПоНоменклатуре,Предложения,СтруктураПараметров);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция сбисСформироватьДанныеПоНоменклатуре(Номенклатура,Знач ИниНоменклатура, ДанныеПоНоменклатуре, Предложения, СтруктураПараметров)
	// Формирует данные по номенклатуре
	ИниНоменклатура.Вставить("Номенклатура", Новый Структура("Значение",Номенклатура));
	Если СтруктураПараметров.Свойство("ДатаЦен") и ЗначениеЗаполнено(СтруктураПараметров.ДатаЦен) Тогда
		ИниНоменклатура.Вставить("ТекущаяДата", Новый Структура("Значение",СтруктураПараметров.ДатаЦен));
	Иначе
		ИниНоменклатура.Вставить("ТекущаяДата", Новый Структура("Значение",ТекущаяДата()));
	КонецЕсли;
	
	
	ГрязныйИни = Новый Структура;
	сбисСкопироватьСтруктуру(ГрязныйИни, ИниНоменклатура); 
	
	Контекст = Новый Структура("Документ, СтрТабл, Ини",,);
	Контекст.Ини = Новый Структура;
	сбисСкопироватьСтруктуру(Контекст.Ини, ГрязныйИни);
	Контекст.Документ = Номенклатура;
	
	Если СписокДопустимыхТипов.Количество() = 0 Тогда
		СписокДопустимыхТипов = СписокДопустимыхТипов();
	КонецЕсли;
	ДокументДанные = ЗаполнимДаннымиДокументаСтруктуру(ГрязныйИни, Контекст, СписокДопустимыхТипов, Новый Структура("ТекущийПакет",Новый Структура),Новый Массив);
	
	//+tda// Добавляю возможность работы, если в ДокументДанные вернулся массив
	Если ТипЗнч(ДокументДанные) = Тип("Массив") Тогда
		Для Каждого ДокументДанныеСтрока из ДокументДанные Цикл
			сбисЗаполнитьНоменклатуру(ДокументДанныеСтрока, ГрязныйИни, ДанныеПоНоменклатуре, Предложения, ИниНоменклатура, Номенклатура, СтруктураПараметров);
		КонецЦикла;
	Иначе
		сбисЗаполнитьНоменклатуру(ДокументДанные, ГрязныйИни, ДанныеПоНоменклатуре, Предложения, ИниНоменклатура, Номенклатура, СтруктураПараметров);
	КонецЕсли;
	//-tda//	
КонецФункции

&НаСервере
Функция сбисСформироватьЗаписьПоНоменклатуре(Ид, Наименование, ДокументДанные, ГрязныйИни, Номенклатура, БазоваяЕдиница, СтавкаНалога, ХарактеристикиТовара, ДанныеПоНоменклатуре, Предложения, СтруктураПараметров)
	// Формирует данные по номенклатуре
	СтруктураТовара = Новый Структура;		
	СтруктураТовара.Вставить("Ид", Ид);
	Если ДокументДанные.Свойство("Штрихкод") Тогда
		Штрихкод = РассчитатьЗначениеНаСервере("Штрихкод", Новый Структура("Ини", ГрязныйИни));
		СтруктураТовара.Вставить("Штрихкод", Штрихкод);
	КонецЕсли;
	Если ДокументДанные.Свойство("Номенклатура_Артикул") и ЗначениеЗаполнено(ДокументДанные.Номенклатура_Артикул) Тогда
		СтруктураТовара.Вставить("Артикул", ДокументДанные.Номенклатура_Артикул);	
	конецЕсли;
	СтруктураТовара.Вставить("Наименование", Наименование);
	СтруктураТовара.Вставить("БазоваяЕдиница", БазоваяЕдиница);
	Если Не Номенклатура.Родитель.Пустая() Тогда
		СтруктураТовара.Вставить("Группы", Новый Структура("Ид", строка(Номенклатура.Родитель.УникальныйИдентификатор())));
	КонецЕсли;
	СтруктураТовара.Вставить("СтавкиНалогов", СтавкаНалога);
	Если ЗначениеЗаполнено(ХарактеристикиТовара) Тогда
		СтруктураТовара.Вставить("ХарактеристикиТовара", ХарактеристикиТовара);
	КонецЕсли;
	Если ДокументДанные.Свойство("мПараметр") Тогда
		СтруктураТовара.Вставить("ЗначенияРеквизитов",Новый Структура("ЗначениеРеквизита",Новый Массив));
		Для Каждого Элемент Из ДокументДанные.мПараметр Цикл
			сбисСкопироватьСтруктуру(ГрязныйИни,ГрязныйИни.мПараметр[Элемент.Ключ]);
			Параметр = Новый Структура();
			Параметр.Вставить("Наименование",Элемент.Значение.Параметр_Имя);
			Параметр.Вставить("Значение",Элемент.Значение.Параметр_Значение);
			СтруктураТовара.ЗначенияРеквизитов.ЗначениеРеквизита.Добавить(Параметр);
		КонецЦикла;
	КонецЕсли;
	ДанныеПоНоменклатуре.Добавить(СтруктураТовара);	
	Если СтруктураПараметров.Свойство("ТипЦены") Тогда
		ЦенаЗаЕдиницу = ДокументДанные.Номенклатура_Цена;
		// Добавляем проверку на остатки, если такой параметр есть и остатки пустые - не выводим Предложение. Если параметра нет, то остатки не контролируем и выводим все.
		Если ДокументДанные.Свойство("мПараметр") И ДокументДанные.мПараметр.Свойство("Остаток") И НЕ ЗначениеЗаполнено(ДокументДанные.мПараметр.Остаток.Параметр_Значение) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦенаЗаЕдиницу) Тогда
			Предложение = Новый Структура;
			сбисСкопироватьСтруктуру(Предложение,СтруктураТовара);
			//Предложение.Удалить("Группы");
			Предложение.Вставить("Цены", Новый Структура("Цена", Новый Массив));
			Предложение.Цены.Цена.Добавить(Новый Структура("ИдТипаЦены,ЦенаЗаЕдиницу",СтруктураПараметров.ТипЦены.Ид, ЦенаЗаЕдиницу));
			Предложения.Добавить(Предложение);
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция сбисСформироватьКаталогТоваров(Знач ДанныеКаталога, Знач ИниНоменклатура, Знач СтруктураПараметров, Отказ=Ложь) Экспорт
	// Формирует каталог товаров в формате CommerceML
	ДанныеПоНоменклатуре	= Новый Массив;
	Предложения				= Новый Массив;
	СтруктураГрупп			= Новый Структура;
	ПлоскоеСоответствиеГрупп= Новый Соответствие;
	ПлоскоеСоответствиеГрупп.Вставить("Корень", Новый Соответствие);
	
	СписокНоменклатуры = ДанныеКаталога.СписокНоменклатуры;
	
	Если ИниНоменклатура.Свойство("ТипЦенНоменклатуры") Тогда
		Контекст = Новый Структура("Ини",ИниНоменклатура); 
		Если СтруктураПараметров.Свойство("ТипЦенНоменклатуры") и ЗначениеЗаполнено(СтруктураПараметров.ТипЦенНоменклатуры) Тогда
			ТипЦенНоменклатуры = СтруктураПараметров.ТипЦенНоменклатуры;
			ИниНоменклатура.ТипЦенНоменклатуры.Значение = СтруктураПараметров.ТипЦенНоменклатуры;
		Иначе
			ТипЦенНоменклатуры = РассчитатьЗначениеНаСервере("ТипЦенНоменклатуры", Контекст);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипЦенНоменклатуры) Тогда
			ТипЦены = Новый Структура;
			ТипЦены.Вставить("Ид", РассчитатьЗначениеНаСервере("ТипЦены_Код", Контекст));
			ТипЦены.Вставить("Наименование", РассчитатьЗначениеНаСервере("ТипЦены_Наименование", Контекст));
			ТипЦены.Вставить("Валюта", РассчитатьЗначениеНаСервере("ТипЦены_Валюта", Контекст));
			ЦенаВключаетНДС = РассчитатьЗначениеНаСервере("ТипЦены_ВключаетНДС", Контекст);
			Если ЦенаВключаетНДС = Истина Тогда
				ЦенаВключаетНДС = "true";
			Иначе
				ЦенаВключаетНДС = "false";
			КонецЕсли;
			ТипЦены.Вставить("Налог", Новый Структура("Наименование, УчтеноВСумме", "НДС", ЦенаВключаетНДС));
			СтруктураПараметров.Вставить("ТипЦены", ТипЦены);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из СписокНоменклатуры Цикл
		Номенклатура = Элемент.Значение;
		сбисСформироватьПлоскоеСоответствиеГрупп(ПлоскоеСоответствиеГрупп,Номенклатура);
		сбисСформироватьДанныеПоНоменклатуре(Номенклатура,ИниНоменклатура,ДанныеПоНоменклатуре,Предложения, СтруктураПараметров);
	КонецЦикла;
	сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, ПлоскоеСоответствиеГрупп["Корень"], СтруктураГрупп);
	СтруктураФайла = Новый Структура("КоммерческаяИнформация",Новый Структура("Классификатор", Новый Структура));
	СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Ид",строка(Новый УникальныйИдентификатор()));
	СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Наименование","Классификатор товаров");
	
	Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
		Владелец = Новый Структура;
		Владелец.Вставить("Ид", строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		Владелец.Вставить("Наименование", ДанныеКаталога.Организация.Наименование);
		Если ИниНоменклатура.Свойство("Организации_ИНН") Тогда
			ИмяРеквизитаИНН = СокрЛП(Сред(ИниНоменклатура.Организации_ИНН.Значение, Найти(ИниНоменклатура.Организации_ИНН.Значение, ".")+1));
		Иначе
			ИмяРеквизитаИНН = "ИНН";
		КонецЕсли;
		Если ИниНоменклатура.Свойство("Организации_КПП") Тогда
			ИмяРеквизитаКПП = СокрЛП(Сред(ИниНоменклатура.Организации_КПП.Значение, Найти(ИниНоменклатура.Организации_КПП.Значение, ".")+1));
		Иначе
			ИмяРеквизитаКПП = "КПП";
		КонецЕсли;
		Владелец.Вставить("ИНН", ДанныеКаталога.Организация[ИмяРеквизитаИНН]);
		Владелец.Вставить("КПП", ДанныеКаталога.Организация[ИмяРеквизитаКПП]);
		СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Владелец",Владелец);
	КонецЕсли;
	
	Если СтруктураГрупп.Свойство("Группы") Тогда
		СтруктураФайла.КоммерческаяИнформация.Классификатор.Вставить("Группы",СтруктураГрупп.Группы);
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("ТипCML") Тогда
		СтруктураФайла.КоммерческаяИнформация.Вставить("Каталог", Новый Структура);
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Ид",строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Наименование", "Каталог товаров от "+Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Владелец",Владелец);
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.Каталог.Вставить("Товары",Новый Структура("Товар",ДанныеПоНоменклатуре));
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипЦены) Тогда
		ТипыЦен = Новый Массив;
		ТипыЦен.Добавить(ТипЦены);
		СтруктураФайла.КоммерческаяИнформация.Вставить("ПакетПредложений", Новый Структура);
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Ид",строка(ДанныеКаталога.Организация.УникальныйИдентификатор()));
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Наименование", "Прайс-лист от " + Формат(ТекущаяДата(),"ДФ=дд.ММ.гггг"));
		Если ЗначениеЗаполнено(ДанныеКаталога.Организация) Тогда
			СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Владелец",Владелец);
		КонецЕсли;
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("ТипыЦен",Новый Структура("ТипЦены",ТипыЦен));
		СтруктураФайла.КоммерческаяИнформация.ПакетПредложений.Вставить("Предложения",Новый Структура("Предложение",Предложения));
	КонецЕсли;
	Если	СтруктураПараметров.Свойство("ОжидаемыйРезультат")
		И	СтруктураПараметров.ОжидаемыйРезультат = "СтруктураФайла" Тогда
		СтруктураФайла.Вставить("Формат",		"CommerceML");
		СтруктураФайла.Вставить("ВерсияФормата","2.10"); 
		ФайлРезультат = Новый Структура("Файл", СтруктураФайла);
		Возврат ФайлРезультат;
	КонецЕсли;
	//Совместимость со старой доработкой для отправки каталога с XSLT.
	ШаблонXML = ПолучитьXMLСПростымиЭлементами(СтруктураФайла, "UTF-16");
	Возврат ШаблонXML;		
	
КонецФункции

&НаКлиенте
Функция сбисСформироватьОтправитьКаталогТоваров(Кэш, ДанныеКаталога, ИниНоменклатура, Параметры) Экспорт
	Если Кэш.Парам.СпособОбмена = 1 Тогда // каталог
		Возврат Ложь;
	КонецЕсли;
	ПолныйСписокНоменклатуры = ДанныеКаталога.СписокНоменклатуры;
	ВсеОтправлено = Истина;
	Шаг		= 1000;    // отправляем по 1000 карточек номенклатуры
	Всего	= ПолныйСписокНоменклатуры.Количество();
	сч		= 0;
	
	сбисКонтекст		= Новый Структура("Ини", ИниНоменклатура); 
	лДанныеКаталога		= Новый Структура("СписокНоменклатуры, Организация");
	лСтруктураПараметров= Новый Структура("СПростымиЭлементами, РеквизитСопоставленияНоменклатуры, ОжидаемыйРезультат, Кодировка", Истина, Кэш.КэшЗначенийИни.РеквизитСопоставленияНоменклатуры, "СтруктураФайла", "UTF-16");
	
	ФайлФормат			= РассчитатьЗначениеНаСервере("Файл_Формат",		сбисКонтекст);
	ФайлВерсияФормата	= РассчитатьЗначениеНаСервере("Файл_ВерсияФормата",	сбисКонтекст);
	сбисИмяXSLT			= СтрЗаменить(СтрЗаменить("{0}_{1}", "{0}", ФайлФормат), "{1}", ФайлВерсияФормата);
	Пока сч < Всего Цикл
		Кэш.ГлавноеОкно.сбисПоказатьСостояние("Формирование каталога номенклатуры", Кэш.ГлавноеОкно, Мин(100,Окр((сч+Шаг)*100/Всего)));
		лДанныеКаталога.СписокНоменклатуры = Новый СписокЗначений;
		ТекущееКоличество = Мин(сч+Шаг, Всего);
		лСтруктураПараметров.Вставить("Название", СтрЗаменить(СтрЗаменить("Номенклатура {0}-{1}", "{0}", сч), "{1}", ТекущееКоличество));
		счТек = сч;
		Пока счТек < ТекущееКоличество Цикл
			лДанныеКаталога.СписокНоменклатуры.Добавить(ПолныйСписокНоменклатуры[счТек].Значение);
			счТек = счТек + 1;			
		КонецЦикла;
		ОшибкаФормирования	= Ложь;
		лСтруктураКаталога	= сбисСформироватьКаталогТоваров(лДанныеКаталога, ИниНоменклатура, лСтруктураПараметров, ОшибкаФормирования);
		КаталогТоваров		= Новый Структура("КоммерческаяИнформация");
		ЗаполнитьЗначенияСвойств(КаталогТоваров, лСтруктураКаталога.Файл);
		КаталогТоваров		= сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент(Кэш, КаталогТоваров, сбисИмяXSLT, лСтруктураПараметров, ОшибкаФормирования);
		Если ОшибкаФормирования Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, КаталогТоваров);
			ВсеОтправлено = Ложь;
			Прервать;
		КонецЕсли;
		КаталогОтправлен= Кэш.Интеграция.ОтправитьКаталогТоваров(Кэш, КаталогТоваров);
		Если КаталогОтправлен = Ложь Тогда
			ВсеОтправлено = Ложь;
		КонецЕсли;
		сч = сч + Шаг;
	КонецЦикла;
	сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	Возврат ВсеОтправлено;
КонецФункции

&НаСервере
Функция сбисСформироватьПлоскоеСоответствиеГрупп(ПлоскоеСоответствиеГрупп, Номенклатура)
	// Формирует плоское соответствие групп (каждой группе соответствют вложенные в нее группы первого уровня, ключ корневой группы - "Корень")
	СписокРодителей = Новый СписокЗначений;
	ТекЭлемент = Номенклатура;
	сч = 1;
	Пока НЕ ТекЭлемент.Родитель.Пустая() Цикл
		Если ПлоскоеСоответствиеГрупп.Получить(ТекЭлемент.Родитель)=Неопределено Тогда
			ПлоскоеСоответствиеГрупп.Вставить(ТекЭлемент.Родитель, Новый Соответствие);
		КонецЕсли;
		Если ТекЭлемент.ЭтоГруппа и ПлоскоеСоответствиеГрупп[ТекЭлемент.Родитель].Получить(ТекЭлемент) = Неопределено Тогда
			ПлоскоеСоответствиеГрупп[ТекЭлемент.Родитель].Вставить(ТекЭлемент)
		КонецЕсли;
		ТекЭлемент = ТекЭлемент.Родитель;
	КонецЦикла;
	Если ТекЭлемент.ЭтоГруппа и ПлоскоеСоответствиеГрупп["Корень"].Получить(ТекЭлемент) = Неопределено Тогда
		ПлоскоеСоответствиеГрупп["Корень"].Вставить(ТекЭлемент)
	КонецЕсли;
КонецФункции

&НаСервере
Функция сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, ТекЭлемент, ТекСтруктураГрупп) 
	// Формирует иерархическую структуру групп из плоского соответствия, начиная перебор с ключа "Корень"
	Если ТекЭлемент.Количество()>0 Тогда
		ТекСтруктураГрупп.Вставить("Группы", Новый Структура);	
		ТекСтруктураГрупп.Группы.Вставить("Группа", Новый Массив);
		Для Каждого Элемент из ТекЭлемент Цикл
			НоваяГруппа = Новый Структура;
			НоваяГруппа.Вставить("Ид", строка(Элемент.Ключ.УникальныйИдентификатор()));
			НоваяГруппа.Вставить("Наименование", строка(Элемент.Ключ.Наименование));
			
			НовыйТекЭлемент = ПлоскоеСоответствиеГрупп.Получить(Элемент.Ключ);
			сбисСформироватьСтруктуруГрупп(ПлоскоеСоответствиеГрупп, НовыйТекЭлемент, НоваяГруппа);
			ТекСтруктураГрупп.Группы.Группа.Добавить(НоваяГруппа);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////
///////////////////Загрузка сотрудников/////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция сбисСформироватьДанныеСотрудников(Кэш, СписокОтмеченных, ИниСотрудника) Экспорт
	// Формирует данные по отмеченным сотрудникам для загрузки в СБИС
	СоответствиеОбъектовиИни = Новый Соответствие;
	Для Каждого Элемент Из СписокОтмеченных Цикл
		СоответствиеОбъектовиИни.Вставить(Элемент.Значение, ИниСотрудника);
	КонецЦикла;
	СоответствиеРезультат = ПолучитьДанныеОбъектовНаСервере(СоответствиеОбъектовиИни, Кэш.КэшЗначенийИни, Кэш.Парам);
	Для Каждого Элемент Из СоответствиеРезультат Цикл
		Попытка
			Данные = Элемент.Значение;
			Если Данные.Сотрудник.Свойство("ФИО") и НЕ Данные.Сотрудник.Свойство("Фамилия") Тогда
				ФИО = сбисПолучитьФИОИзНазвания(Данные.Сотрудник.ФИО);
				Данные.Сотрудник.Вставить("Фамилия", ФИО.Фамилия);
				Данные.Сотрудник.Вставить("Имя", ФИО.Имя);
				Данные.Сотрудник.Вставить("Отчество", ФИО.Отчество);
				Данные.Сотрудник.Удалить("ФИО");
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	Возврат СоответствиеРезультат;
КонецФункции

&НаСервере
Функция ПолучитьДанныеОбъектовНаСервере(СоответствиеОбъектовиИни, КэшЗначенийИни, КэшПарам) Экспорт	
	// Функция заполняет структуру файла настроек данными из документа
	СоответствиеРезультат = Новый Соответствие;
	Для каждого Элемент из СоответствиеОбъектовиИни Цикл
		Объект1С = Элемент.Ключ;
		СтруктураИниФайла = Элемент.Значение;
		
		ГрязныйИни = ПолучитьДанныеДокумента1С(СтруктураИниФайла, Объект1С, КэшЗначенийИни, КэшПарам); 
		ГрязныйИни = сбисПочиститьСтруктуру(ГрязныйИни);
		СоответствиеРезультат.Вставить(Объект1С,  ГрязныйИни);
	КонецЦикла;
	Возврат СоответствиеРезультат;
КонецФункции

&НаСервере
Функция сбисПочиститьСтруктуру(ГрязныйИни) Экспорт	
	// Функция заполняет структуру файла настроек данными из документа
	Если ТипЗнч(ГрязныйИни) = Тип("Структура") Тогда
		Для каждого Элемент из ГрязныйИни Цикл
			Если Лев(Элемент.Ключ, 1) = "_" Тогда
				ГрязныйИни.Удалить(Элемент.Ключ);
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				сбисПочиститьСтруктуру(Элемент.Значение);
			ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
				Для Каждого ЭлемМас Из Элемент.Значение Цикл
					сбисПочиститьСтруктуру(ЭлемМас);	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ГрязныйИни;
КонецФункции

&НаКлиенте
Функция сбисСформироватьДанныеТекущегоПользователя(Кэш) Экспорт
	Возврат сбисСформироватьДанныеТекущегоПользователяНаСервере();	
КонецФункции

&НаСервереБезКонтекста
функция сбисСформироватьДанныеТекущегоПользователяНаСервере() Экспорт
	// функция ид текущего пользователя 1С	
	ТекПользователь = ПараметрыСеанса.ТекущийПользователь;
	ФизЛицо = ТекПользователь.ФизическоеЛицо;
	ДанныеСотрудника = Новый Структура("Сотрудник, Права", Новый Структура, Новый Структура("Роль", Новый Массив));
	ДанныеСотрудника.Сотрудник.Вставить("ИдентификаторИС", Строка(ФизЛицо.УникальныйИдентификатор()));
	Попытка
		Фамилия = ФизЛицо.Фамилия;
		Имя = ФизЛицо.Имя;
		Отчество = ФизЛицо.Отчество;
	Исключение
		ФИО = сбисПолучитьФИОИзНазванияНаСервере(ФизЛицо.Наименование);
		Фамилия = ФИО.Фамилия;
		Имя = ФИО.Имя;
		Отчество = ФИО.Отчество;
	КонецПопытки;
	ДанныеСотрудника.Сотрудник.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Сотрудник.Вставить("Имя", Имя);
	ДанныеСотрудника.Сотрудник.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Сотрудник.Вставить("ДоступВСистему", "Да");	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ГруппыДоступа.Профиль.Наименование КАК ПрофильНаименование
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	НЕ ГруппыДоступа.ПометкаУдаления
	|	И НЕ ГруппыДоступа.Профиль.ПометкаУдаления
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.ГруппыДоступа.Пользователи КАК ПользователиГруппДоступа
	|			ГДЕ
	|				ПользователиГруппДоступа.Ссылка = ГруппыДоступа.Ссылка
	|				И НЕ(ПользователиГруппДоступа.Пользователь <> &Пользователь
	|						И НЕ ПользователиГруппДоступа.Пользователь В
	|								(ВЫБРАТЬ
	|									СоставыГруппПользователей.ГруппаПользователей
	|								ИЗ
	|									РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|								ГДЕ
	|									СоставыГруппПользователей.Пользователь = &Пользователь)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыДоступа.Профиль";
	Запрос.УстановитьПараметр("Пользователь", ТекПользователь);
	ТабПрофили = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Для Каждого Элемент Из ТабПрофили Цикл
		ДанныеСотрудника.Права.Роль.Добавить(Новый Структура("Название", Элемент.ПрофильНаименование));	
	КонецЦикла;
	Возврат ДанныеСотрудника;
КонецФункции

////////////////////////////////////////////////////
///////////////API функции загрузки/////////////////
////////////////////////////////////////////////////

////////////////////////////////////////////////////
//////////////////////Шапка/////////////////////////

//Функция заполняет валюту в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьВалютуУНФ(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.Валюты", Контекст.Документ.ВалютаДокумента); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = сбисПолучитьВалюту_Сервер(сбисОписаниеОбъекта.Ключ);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

// Функция заполняет договор в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьДоговор(Контекст) Экспорт
	Если	Контекст.Свойство("Вложение")
		И	Контекст.Вложение.Свойство("РучноеИзменение")
		И	Контекст.Вложение.РучноеИзменение = Истина
		И	Контекст.Вложение.Свойство("Договор1С")
		И	ЗначениеЗаполнено(Контекст.Вложение.Договор1С) Тогда
		// Если договор выбран вручную в форме просмотра, то возвращаем его
		Результат = Контекст.Вложение.Договор1С;
	ИначеЕсли	Не Контекст.Документ.Свойство("Контрагент")
		Или Не ЗначениеЗаполнено(Контекст.Документ.Контрагент) Тогда
		//Нет контрагента, пустая ссылка договора. Чтоб лишний раз не дергать сервер, храним в кэше.
		СбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочник.ДоговорыКонтрагентов", "ПустаяСсылка"); 
		СбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеПустойСсылкиОбъекта);
		Если СбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			СбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(СбисОписаниеПустойСсылкиОбъекта, СбисОписаниеПустойСсылкиОбъекта.Ключ);
			СбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Результат = СбисОписаниеПустойСсылкиОбъекта.Значение;
	Иначе
		Результат = СбисНайтиДоговорНаСервере(Контекст);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция заполняет договор в загружаемых документах для конфигурации УТ11	
&НаКлиенте
Функция ЗаполнитьДоговорУТ11(Контекст) Экспорт
	// Если договор выбран вручную в форме просмотра, то возвращаем его
	Договор1С = Контекст;
	Если	Договор1С.Свойство("Вложение",	Договор1С)
		И	Договор1С.Свойство("РучноеИзменение")
		И	Договор1С.РучноеИзменение = Истина
		И	Договор1С.Свойство("Договор1С",	Договор1С)
		И	ЗначениеЗаполнено(Договор1С) Тогда
		Возврат Договор1С;
	КонецЕсли;
	сбисКонтекстСервера	= Новый Структура("Документ", Контекст.Документ);
	Возврат сбисПолучитьДоговорУТ11_Сервер(сбисКонтекстСервера);
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьДоговорАА(Контекст) Экспорт
	// Функция заполняет договор в загружаемых документах
	НовыйДоговор = Справочники.ДоговорыВзаиморасчетов.ПустаяСсылка();
	Попытка  // Сначала пытаемся найти договор по дате, номеру
		ДатаДоговора = Дата(Контекст.СтруктураФайла.Файл.Документ.Параметр.ДоговорДата+" 00:00:00");
		НомерДоговора = Контекст.СтруктураФайла.Файл.Документ.Параметр.ДоговорНомер;       
		
		
		//Поиск договора по номеру дате
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ДоговорыДоговорыВзаиморасчетов.Ссылка
		|ИЗ
		| Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		| ДоговорыВзаиморасчетов.ДатаНачала = &Дата
		| И ДоговорыВзаиморасчетов.НомерДоговора = &Номер";
		Запрос.УстановитьПараметр("Дата", ДатаДоговора);
		Запрос.УстановитьПараметр("Номер", НомерДоговора);
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НовыйДоговор = Выборка.Ссылка;
			Возврат НовыйДоговор; 
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	
	//++ Описание из Альфа-авто
	// В первую очередь необходимо получить договор, удовлетворяющий
	// всем условиям, в т.ч. у которого совпадают реквизиты "Подразделение компании" и "Организация".
	// Если такого договора нет, то необходимо попытаться получить договор, у которого хотя бы организация совпадет.
	// Если и такого договора нет, то пытаемся получить договор, у которого подразделение совпадает.
	// Если и такого нет, то получаем любой договор (в пределах подчинения, разумеется).
	Попытка
		Контрагент = Контекст.Документ.Контрагент;
		Организация = Контекст.Документ.Организация;
		ПодразделениеКомпании = Неопределено;
		ДатаДоговора = ТекущаяДата();
		ПустаяДата = Дата("00010101");
		ВидДоговора = Перечисления.ВидыДоговоров.Покупка;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		| ДоговорыВзаиморасчетов.Ссылка КАК Договор,
		| ВЫБОР
		|  КОГДА ДоговорыВзаиморасчетов.Организация = &Организация
		|   И ДоговорыВзаиморасчетов.Подразделение = &Подразделение ТОГДА
		|   0
		|  КОГДА ДоговорыВзаиморасчетов.Организация = &Организация ТОГДА
		|   1
		|  КОГДА ДоговорыВзаиморасчетов.Подразделение = &Подразделение ТОГДА
		|   2
		|  ИНАЧЕ
		|   3
		| КОНЕЦ КАК ПорядокПоПринадлежности,
		| ДоговорыВзаиморасчетов.Основной КАК Основной,
		| ДоговорыВзаиморасчетов.ДатаКонца КАК ДатаКонца,
		| ДоговорыВзаиморасчетов.ДатаНачала КАК ДатаНачала
		|ИЗ
		| Справочник.ДоговорыВзаиморасчетов КАК ДоговорыВзаиморасчетов
		|ГДЕ
		| ДоговорыВзаиморасчетов.Владелец = &Владелец И
		| ДоговорыВзаиморасчетов.ЭтоГруппа = ЛОЖЬ И
		| ДоговорыВзаиморасчетов.ВидДоговора = &ВидДоговора
		| И (ДоговорыВзаиморасчетов.ДляАвтосалона = ИСТИНА
		| ИЛИ ДоговорыВзаиморасчетов.ДляАвтосервиса = ИСТИНА
		| ИЛИ ДоговорыВзаиморасчетов.Внутренний = ИСТИНА)
		| И (ДоговорыВзаиморасчетов.ДатаКонца = &ПустаяДата
		|    И ДоговорыВзаиморасчетов.ДатаНачала <= &ДатаДоговора
		|   ИЛИ &ДатаДоговора МЕЖДУ ДоговорыВзаиморасчетов.ДатаНачала И ДоговорыВзаиморасчетов.ДатаКонца)
		| И ДоговорыВзаиморасчетов.ПометкаУдаления = ЛОЖЬ
		|УПОРЯДОЧИТЬ ПО
		| ПорядокПоПринадлежности ВОЗР,
		| Основной УБЫВ,
		| ДатаКонца ВОЗР,
		| ДатаНачала УБЫВ";
		
		
		Запрос.УстановитьПараметр("ВидДоговора",          ВидДоговора);
		Запрос.УстановитьПараметр("Владелец",             Контрагент);
		Запрос.УстановитьПараметр("Организация",          ?(ЗначениеЗаполнено(Организация), Организация, ПараметрыСеанса.Организация));
		Запрос.УстановитьПараметр("Подразделение",        ПараметрыСеанса.ПодразделениеКомпании);
		Запрос.УстановитьПараметр("ДатаДоговора",         ДатаДоговора);
		Запрос.УстановитьПараметр("ПустаяДата",           ПустаяДата);
		Результат = Запрос.Выполнить();
		
		
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Договор;
		КонецЕсли; 
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	
	Возврат НовыйДоговор;
КонецФункции

// функция ищет по коду единицу измерения, кэширует её. Если по классификатору, не должно быть много значений.	
&НаКлиенте
Функция ЗаполнитьЕдиницуИзмеренияНовойНоменклатуры(Контекст) Экспорт
	СправочникЕдИзм = РассчитатьЗначение("ЕдиницаИзмерения", Контекст.Ини);  //Определяем объект справочника единиц измерения
	Если СправочникЕдИзм = Неопределено Тогда
		Сообщить("В настройках не указан справочник для загрузки/создания единиц измерения");
		Возврат Неопределено;
	КонецЕсли;
	СбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", СправочникЕдИзм, Контекст.Ини.Номенклатура_ОКЕИ.Значение); 
	СбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеОбъекта);
	Если СбисОписаниеОбъекта.Значение = Неопределено Тогда
		СбисОписаниеОбъекта.Значение = Объект1СПоОписанию(СбисОписаниеОбъекта,,Истина);
		СбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, СбисОписаниеОбъекта);
	КонецЕсли;
	Возврат СбисОписаниеОбъекта.Значение;
КонецФункции

// функция заполняет приложения в приходных/расходных ордерах	
&НаКлиенте
Функция ЗаполнитьПриложениеКО(Контекст) Экспорт 
	Приложения = "";
	Попытка
		Для Каждого Элемент Из Контекст.Приложения Цикл
			Приложения = Приложения + Элемент.Название + ", ";
		КонецЦикла;
		Приложения = Лев(Приложения, СтрДлина(Приложения)-2);
	Исключение
	КонецПопытки;
	Возврат Приложения;
КонецФункции

// Функция определяет название табличной части акта сверки, в которую нужно загружать данные (для УТ11)	
&НаКлиенте
Функция ИмяТЧВзаиморасчетов(Контекст) Экспорт
	Если Контекст.Свойство("СтрТабл") и Контекст.СтрТабл.Раздел = "Отправитель" Тогда
		Возврат "ДанныеКонтрагента";
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Функция определяет название табличной части акта сверки, в которую нужно загружать данные	
&НаКлиенте
Функция ИмяТЧАктаСверки(Контекст) Экспорт
	Если Контекст.Свойство("СтрТабл") и Контекст.СтрТабл.Раздел = "Отправитель" Тогда
		Возврат "ПоДаннымКонтрагента";
	КонецЕсли;
	Возврат "ПоДаннымОрганизации";
КонецФункции

//TODO42 удалить Не использовать эту функцию. Оставлено для совместимости!
&НаКлиенте
функция ПолучитьСклад(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.ЗначенияПоУмолчанию", "ОсновнойСклад"); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		Попытка
			сбисОписаниеОбъекта.Значение = Вычислить("ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(""ОсновнойСклад"")");
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаКлиенте
функция ПолучитьСкладТекущегоПользователя(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.ЗначенияПоУмолчанию", "ОсновнойСклад"); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		Попытка
			сбисОписаниеОбъекта.Значение = Вычислить("УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""),""ОсновнойСклад"")");
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Переделана функция с кэшированием кассы
&НаКлиенте
Функция ПолучитьКассу(Контекст) Экспорт
	Перем КассаНазвание;
	Если	Не	Контекст.Ини.Свойство("КассаНазвание")
		Или	Не	Контекст.Ини.КассаНазвание.Свойство("РассчитанноеЗначение", КассаНазвание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если КассаНазвание = Неопределено Тогда
		КассаНазвание = "";
	КонецЕсли;
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.Кассы", КассаНазвание); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта, "ПоНаименованию");
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаКлиенте
Функция ПолучитьХозрасчетныйСчетПоКоду(Контекст) Экспорт
	ХозрасчетныйСчет = Неопределено;
	//AU Берем счет из ини из расчитанного значения, по аналогии с плагином. Делаем соответствие счетов.
	Если	Не Контекст.Ини.Свойство("ХозрасчетныйСчет", ХозрасчетныйСчет)
		Или	Не ХозрасчетныйСчет.Свойство("РассчитанноеЗначение", ХозрасчетныйСчет)
		Или Не ЗначениеЗаполнено(ХозрасчетныйСчет) Тогда
		Возврат Неопределено;
	ИначеЕсли	ХозрасчетныйСчет = "58-03-01" Тогда
		ХозрасчетныйСчет = "58.03";
	ИначеЕсли   ХозрасчетныйСчет = "71" Тогда
		ХозрасчетныйСчет = "71.01";
	ИначеЕсли   ХозрасчетныйСчет = "76-ПРОЧ" Тогда
		ХозрасчетныйСчет = "76.05";
	ИначеЕсли   ХозрасчетныйСчет = "90-01" Тогда
		ХозрасчетныйСчет = "90.01.1";
	Иначе
		ХозрасчетныйСчет = СтрЗаменить(ХозрасчетныйСчет,"-",".")
	КонецЕсли;
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПланыСчетов.Хозрасчетный", ХозрасчетныйСчет); 
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция определяет параметры учета НДС по данным электронного документа
&НаКлиенте
Функция СбисПараметрыНДСДокумента(Контекст) Экспорт
	Перем ТаблЧасть;
	
	СбисРезультат = Новый Структура("СуммаВключаетНДС, УчитыватьНДС", Ложь, Ложь);
	
	Для Каждого ИмяТаблЧасть из Контекст.Ини.мТаблДок Цикл
		//выбираем табличные части по ини
		Если Не Контекст.Документ.Свойство(ИмяТаблЧасть.Ключ, ТаблЧасть) Тогда
			Продолжить;
		КонецЕсли;
		//выбираем строки из табличной части
		Для Каждого Стр Из ТаблЧасть Цикл
			Если Стр.Свойство("СтавкаНДС") И НРег(Стр.СтавкаНДС) <> "без ндс" Тогда
				СбисРезультат.УчитыватьНДС = Истина;
			КонецЕсли;
			Если	Стр.Свойство("Сумма")
				И	Стр.Свойство("СуммаНДС")
				И	Стр.Сумма = Стр.СуммаСНДС Тогда
				СбисРезультат.СуммаВключаетНДС = Истина;
			КонецЕсли;
			Если СбисРезультат.УчитыватьНДС Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		Если СбисРезультат.УчитыватьНДС Тогда
			//если уже нашли строки в которых ставка <> "без ндс", то остальные табличные части не проверяем
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат СбисРезультат;
	
КонецФункции

//Функция возвращает вид операции
&НаКлиенте
Функция сбисЗаполнитьВидОперации(Контекст) Экспорт
	Перем ДокументВидОперации;
	Если	Не	Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр", ДокументВидОперации)
		Или	Не	ДокументВидОперации.Свойство("ДокументВидОперации", ДокументВидОперации) Тогда
		Возврат Неопределено;
	ИначеЕсли ДокументВидОперации = "Исправление" Тогда
		ДокументВидОперации = "ИсправлениеОшибки";
	ИначеЕсли ДокументВидОперации = "Корректировка" Тогда
		ДокументВидОперации = "СогласованноеИзменение";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Перечисления.ВидыОперацийИсправленияПоступленияРеализации", ДокументВидОперации); 
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаКлиенте
Функция сбисЗаполнитьДанныеНоменклатуры(Контекст) Экспорт
	Попытка
		НашаНоменклатура = РассчитатьЗначение("НашаНоменклатура", Контекст.Ини);
		Идентификатор = РассчитатьЗначениеИзСтруктуры(НашаНоменклатура, Контекст.СтрокаФайла);
		Возврат сбисЗаполнитьДанныеНоменклатурыНаСервере(Идентификатор);	
	Исключение
	КонецПопытки
КонецФункции

&НаКлиенте
Функция сбисЗаполнитьДанныеИсходногоДокумента(Контекст) Экспорт
	Перем ДокументПоступленияНомер, ДокументПоступленияДата;
	
	Отказ = Ложь;
	КонтекстСервера = Новый Структура;
	Если Контекст.Документ.Контрагент = Ложь Тогда 
		Сообщить("Не найден исходный документ"); 
		Отказ = Истина;
	ИначеЕсли Контекст.СтруктураФайла.Файл.Формат = "счФактКор" Тогда
		//KES первое основание. Теперь основания - это массив
		Если	(	Контекст.СтруктураФайла.Файл.Документ.Свойство("НомерСчФ", ДокументПоступленияНомер)
			И	Контекст.СтруктураФайла.Файл.Документ.Свойство("ДатаСчФ", ДокументПоступленияДата))
			Или	(	Контекст.СтруктураФайла.Файл.Документ.Свойство("Основание") И ТипЗнч(Контекст.СтруктураФайла.Файл.Документ.Основание)=Тип("Массив")
			И 	Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Номер", ДокументПоступленияНомер)
			И	Контекст.СтруктураФайла.Файл.Документ.Основание[0].Свойство("Дата", ДокументПоступленияДата)) Тогда
		Иначе
			Сообщить("Не указаны номер или дата исходного документа"); 
			Отказ = Истина
		КонецЕсли;
	ИначеЕсли	Контекст.СтруктураФайла.Файл.Формат = "ЭДОНакл"
		Или Контекст.СтруктураФайла.Файл.Формат = "АктВР" 
		Или Контекст.СтруктураФайла.Файл.Формат = "УкдДис"
		Или Контекст.СтруктураФайла.Файл.Формат = "УкдКсчфДис" Тогда // alo
		Попытка
			ДокументПоступленияНомер = Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументНомер;
			ДокументПоступленияДата = Контекст.СтруктураФайла.Файл.Документ.Параметр.ИсходныйДокументДата;
		Исключение	
			Сообщить("Не указаны номер или дата исходного документа"); 
			Отказ = Истина;
		КонецПопытки;  
	Иначе
		Сообщить("Неизвестный формат файла для поиска исходного документа"); 
		Отказ = Истина;
	КонецЕсли;
	Если	Не Отказ
		И	(	Не ЗначениеЗаполнено(ДокументПоступленияНомер)
		Или Не ЗначениеЗаполнено(ДокументПоступленияДата)) Тогда 
		Сообщить("Не заполнены номер или дата исходного документа"); 
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		сбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Документ.ПоступлениеТоваровУслуг", "ПустаяСсылка"); 
		сбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		Если сбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			сбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеПустойСсылкиОбъекта, сбисОписаниеПустойСсылкиОбъекта.Ключ);;
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Возврат сбисОписаниеПустойСсылкиОбъекта.Значение;
	КонецЕсли;
	
	КонтекстСервера.Вставить("Контрагент",				Контекст.Документ.Контрагент);
	КонтекстСервера.Вставить("Файл_Формат",				Контекст.СтруктураФайла.Файл.Формат);
	КонтекстСервера.Вставить("ТЧ",						Новый Структура);
	КонтекстСервера.Вставить("ДокументПоступленияНомер",ДокументПоступленияНомер);
	КонтекстСервера.Вставить("ДокументПоступленияДата",	ДокументПоступленияДата);
	Если Контекст.Документ.Свойство("Товары") Тогда
		КонтекстСервера.ТЧ.Вставить("Товары", Контекст.Документ.Товары);
	КонецЕсли;
	Если Контекст.Документ.Свойство("Услуги") Тогда
		КонтекстСервера.ТЧ.Вставить("Услуги", Контекст.Документ.Услуги);
	КонецЕсли;
	
	РезультатЗаполнения = сбисЗаполнитьДанныеИсходногоДокументаНаСервере(КонтекстСервера, Отказ);
	Если Отказ Тогда
		Сообщить(РезультатЗаполнения.details);
		сбисОписаниеПустойСсылкиОбъекта = Новый Структура("Тип, Ключ, Значение", "Документ.ПоступлениеТоваровУслуг", "ПустаяСсылка"); 
		сбисОписаниеПустойСсылкиОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		Если сбисОписаниеПустойСсылкиОбъекта.Значение = Неопределено Тогда
			сбисОписаниеПустойСсылкиОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеПустойСсылкиОбъекта, сбисОписаниеПустойСсылкиОбъекта.Ключ);
			сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеПустойСсылкиОбъекта);
		КонецЕсли;
		Возврат сбисОписаниеПустойСсылкиОбъекта.Значение;
	КонецЕсли;
	Для Каждого ТабЧастьЗаполнена Из РезультатЗаполнения.ТЧ Цикл
		Контекст.Документ[ТабЧастьЗаполнена.Ключ] = ТабЧастьЗаполнена.Значение;
	КонецЦикла;
	Возврат РезультатЗаполнения.ОснованиеСсылка;
КонецФункции

//Функция формирует табличную часть акта сверки для конфигураций УТ11-KА2	
&НаКлиенте
функция сбисПолучитьДанныеВзаиморасчетов(Контекст) Экспорт
	сбисОписаниеНастроек = Новый Структура("Тип, Ключ, Значение", "РассчитанныеЗначения.НастройкиСверки", "ПечатьСверкиВзаиморасчетов"); 
	сбисОписаниеНастроек.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеНастроек);
	Если сбисОписаниеНастроек.Значение = Неопределено Тогда
		фрм = МестныйКэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПолучитьНастройкиАктаСверки", "Файл_АктСвер_3_01", "РаботаСДокументами1С");
		сбисОписаниеНастроек = фрм.сбисПолучитьНастройкиАктаСверки(Контекст, сбисОписаниеНастроек);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеНастроек);
	КонецЕсли;
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Контекст.Документ);
	сбисКонтекстСервер = Новый Структура("Настройки, Объекты", сбисОписаниеНастроек.Значение, МассивОбъектов);
	
	Возврат сбисПолучитьДанныеВыборки(сбисКонтекстСервер);
КонецФункции

&НаСервереБезКонтекста              
Функция сбисПолучитьНастройкиАктаСверки(Знач Контекст, Знач сбисОписаниеНастроек) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	сбисОписаниеНастроек.Значение = Документы.СверкаВзаиморасчетов.НастройкиПечатиПоУмолчанию();	
	сбисОписаниеНастроек.Значение.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Если Контекст.Свойство("Детализация") и Контекст.Детализация = "Договор" Тогда
		сбисОписаниеНастроек.Значение.ДетализацияВзаиморасчетов = 1;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат сбисОписаниеНастроек;
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДанныеВыборки(Знач Контекст)
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ДанныеЗапроса = Документы.СверкаВзаиморасчетов.ВыборкаДанныхДокумента(Контекст.Объекты, Контекст.Настройки);
	Исключение
		ЗапросДанныеНаПечать = Документы.СверкаВзаиморасчетов.ЗапросДанныеНаПечать(Контекст.Объекты, Контекст.Настройки);
		ДанныеЗапроса = ЗапросДанныеНаПечать.Выполнить();
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабЧастьДокумента	= Новый Массив;
	ДанныеПоОстакам		= Новый Структура("НачальныйОстатокДебет, НачальныйОстатокКредит, НачальныйОстатокДебетКонтрагент, НачальныйОстатокКредитКонтрагент", 0,0,0,0);	
	Если НЕ ДанныеЗапроса.Пустой() Тогда
		ДанныеДокумента = ДанныеЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		Возврат Новый Структура("ТабЧастьДокумента, Остатки",ТабЧастьДокумента, Неопределено);
	КонецЕсли;
	Если Не ДанныеДокумента.Следующий() Тогда
		Возврат Новый Структура("ТабЧастьДокумента, Остатки",ТабЧастьДокумента, Неопределено);
	КонецЕсли;
	
	ДанныеПоТипуРасчетов = ДанныеДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ДанныеПоТипуРасчетов.Следующий() Цикл		
		ВыборкаПоДетальнымРасчетам = ДанныеПоТипуРасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
			Если	ВыборкаПоДетальнымРасчетам.НачальноеСальдоДт <> 0
				Или ВыборкаПоДетальнымРасчетам.НачальноеСальдоКт <> 0
				Или ВыборкаПоДетальнымРасчетам.ЕстьОбороты Тогда
				сбисЗаполнитьДанныеПоНачальнымОстаткам(ВыборкаПоДетальнымРасчетам, ДанныеПоОстакам, Контекст.Настройки);
				сбисСформироватьДетальнуюЗаписьВзаиморасчетов(ТабЧастьДокумента, ВыборкаПоДетальнымРасчетам, ДанныеДокумента, ДанныеПоОстакам, Контекст.Настройки);
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	Возврат Новый Структура("ТабЧастьДокумента, Остатки", ТабЧастьДокумента, ДанныеПоОстакам);	
КонецФункции

&НаСервереБезКонтекста
Процедура сбисЗаполнитьДанныеПоНачальнымОстаткам(ВыборкаДетальныхЗаписей, ДанныеПоОстакам, НастройкиПечати)
	
	ДанныеПоОстакам.НачальныйОстатокДебет = ВыборкаДетальныхЗаписей.НачальноеСальдоДт;
	ДанныеПоОстакам.НачальныйОстатокКредит = Мин(-ВыборкаДетальныхЗаписей.НачальноеСальдоКт, ВыборкаДетальныхЗаписей.НачальноеСальдоКт);//Для совместимости со старыми функциями, должно быть отрицательное значение
	
	ДанныеПоОстакам.НачальныйОстатокДебетКонтрагент = ВыборкаДетальныхЗаписей.НачальноеСальдоКт;
	ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = Мин(-ВыборкаДетальныхЗаписей.НачальноеСальдоДт, ВыборкаДетальныхЗаписей.НачальноеСальдоДт);//Для совместимости со старыми функциями, должно быть отрицательное значение
	
	Если НЕ ВыборкаДетальныхЗаписей.ФинансовыеИнструменты И НЕ НастройкиПечати.ДолгКакДебет Тогда
		Если ВыборкаДетальныхЗаписей.НачальноеСальдо > 0 Тогда
			ДанныеПоОстакам.НачальныйОстатокДебет = ВыборкаДетальныхЗаписей.НачальноеСальдо;
			ДанныеПоОстакам.НачальныйОстатокДебетКонтрагент = ВыборкаДетальныхЗаписей.НачальноеСальдо;
		Иначе
			ДанныеПоОстакам.НачальныйОстатокКредит = -ВыборкаДетальныхЗаписей.НачальноеСальдо;
			//ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = -ВыборкаДетальныхЗаписей.НачальноеСальдо;
			ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = ВыборкаДетальныхЗаписей.НачальноеСальдо;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ДанныеПоОстакам.НачальныйОстатокДебетКонтрагент = 0;
		ДанныеПоОстакам.НачальныйОстатокКредитКонтрагент = 0;
	КонецЕсли;
КонецПроцедуры

// Функция заполняет данные по строкам акта сверки для конфигурации УТ11.4.8 и выше	
&НаСервереБезКонтекста
Функция сбисСформироватьДетальнуюЗаписьВзаиморасчетов(ТабЧастьДокумента, ВыборкаДетальныхЗаписей, ДанныеДокумента, ДанныеПоОстакам, НастройкиПечати)
	Перем ДетальныеЗаписи;
	Если ВыборкаДетальныхЗаписей.ЕстьОбороты Тогда
		ДетальныеЗаписи = ВыборкаДетальныхЗаписей.Выбрать();
		Пока ДетальныеЗаписи.Следующий() Цикл
			Если ДетальныеЗаписи.ОписаниеДокумента = NULL Тогда
				Продолжить;
			КонецЕсли;
			ДатаДокумента		= Формат(ДетальныеЗаписи.ДатаДокумента, "ДФ='дд.ММ.гггг'");
			НомерДокумента		= ДетальныеЗаписи.Номер;			
			НазваниеДокумента	= ?(ДетальныеЗаписи.ОписаниеДокумента = NULL, "", ДетальныеЗаписи.ОписаниеДокумента);
			мПараметр		= Новый Структура("Дата, Номер", Новый Структура("Параметр_Имя, Параметр_Значение", "Дата", ДатаДокумента), Новый Структура("Параметр_Имя, Параметр_Значение", "Номер", ДетальныеЗаписи.НомерДокумента));
			
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("ТаблДок_Дата",		ДатаДокумента); 
			НоваяСтрока.Вставить("ТаблДок_Номер",		НомерДокумента);
			НоваяСтрока.Вставить("ТаблДок_Примечание",	НазваниеДокумента); 
			НоваяСтрока.Вставить("ДокументТабл",		Неопределено);
			НоваяСтрока.Вставить("ТаблДок_Дебет",		ДетальныеЗаписи.СуммаДебет);
			НоваяСтрока.Вставить("ТаблДок_Кредит",		ДетальныеЗаписи.СуммаКредит);
			НоваяСтрока.Вставить("ТаблДок_Раздел",		"Отправитель");
			НоваяСтрока.Вставить("мОснование",			Новый Структура);
			НоваяСтрока.Вставить("мПараметр",			мПараметр);
			Основание = Неопределено;
			
			НоваяСтрокаПоДаннымКонтрагента = Новый Структура;
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дата",			ДатаДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Номер",		НомерДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Примечание",	НазваниеДокумента); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ДокументТабл",			Неопределено); 
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Дебет",		ДетальныеЗаписи.СуммаДебетКонтрагент);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Кредит",		ДетальныеЗаписи.СуммаКредитКонтрагент);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("ТаблДок_Раздел",		"Получатель");
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мОснование",			Новый Структура);
			НоваяСтрокаПоДаннымКонтрагента.Вставить("мПараметр",			мПараметр); 
			
			КлючДетализации = "Договор";
			Если НастройкиПечати.ДетализацияВзаиморасчетов = "Договор" Тогда 
				мОснование = ДетальныеЗаписи.Договор;
				Если мОснование = Неопределено Тогда
					мОснование = ДетальныеЗаписи.ОбъектГруппировки;
				КонецЕсли;
			Иначе
				мОснование = ДетальныеЗаписи.ДокументСсылка;
				КлючДетализации = "Документ";
			КонецЕсли;
			сбисОснование = Новый Структура;
			сбисОснование.Вставить("Основание",			мОснование);
			сбисОснование.Вставить("Основание_Название",Строка(мОснование));
			сбисОснование.Вставить("Основание_Номер",	мОснование.Номер);
			сбисОснование.Вставить("Основание_Дата",	Формат(мОснование.Дата,"ДФ=dd.MM.yyyy"));
			
			НоваяСтрока.мОснование.Вставить(КлючДетализации, сбисОснование);
			НоваяСтрокаПоДаннымКонтрагента.мОснование.Вставить(КлючДетализации, сбисОснование);
			ТабЧастьДокумента.Добавить(НоваяСтрока);
			ТабЧастьДокумента.Добавить(НоваяСтрокаПоДаннымКонтрагента);		
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ТабЧастьДокумента;
	
КонецФункции

//Функция заполняет договор в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьДоговорУНФ(Контекст) Экспорт
	
	ОшибкаПоиска = Ложь;
	сбисРезультат = сбисПолучитьДоговорУНФ_Сервер(Контекст.Документ, Контекст.СтруктураФайла, ОшибкаПоиска);
	Если ОшибкаПоиска Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат сбисРезультат;
	
КонецФункции

&НаКлиенте
функция ПолучитьСкладУНФ(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ПользовательскиеЗначения.ЗначенияПоУмолчанию", "ОсновнойСклад"); 
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеПользователяПоУмолчанию_УНФ_Сервер(сбисОписаниеОбъекта);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции	

&НаСервереБезКонтекста
Функция СуммаВключаетНДС_УНФ(Знач Контекст) Экспорт
	Если Не Контекст.Документ.Свойство("НалогообложениеНДС") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат Контекст.Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
КонецФункции

&НаКлиенте
Функция УчитыватьНДС(Контекст) Экспорт
	//Функция определяет необходимость учитывать НДС в загружаемых документах	
	УчитыватьНДС = Ложь;
	Для каждого ИмяТаблЧасть из Контекст.Ини.мТаблДок Цикл
		//выбираем табличные части по ини
		Если Контекст.Документ.Свойство(ИмяТаблЧасть.Ключ) Тогда
			ТаблЧасть = Контекст.Документ[ИмяТаблЧасть.Ключ];
			//выбираем строки из табличной части
			Для каждого Стр из ТаблЧасть Цикл
				Если Стр.Свойство("СтавкаНДС") и нрег(Стр.СтавкаНДС) <> "без ндс" Тогда
					УчитыватьНДС = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если УчитыватьНДС Тогда
			//если уже нашли строки в которых ставка <> "без ндс", то остальные табличные части не проверяем
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	Возврат УчитыватьНДС;
КонецФункции

//Функция определяет необходимость учитывать НДС в загружаемых документах	
&НаСервереБезКонтекста
Функция УчитыватьНДС_УНФ(Знач Контекст) Экспорт
	Для Каждого ИмяТаблЧасть Из Контекст.Ини.мТаблДок Цикл
		//выбираем табличные части по ини
		ТаблЧасть = Неопределено;
		Если Не Контекст.Документ.Свойство(ИмяТаблЧасть.Ключ, ТаблЧасть) Тогда
			Продолжить;
		КонецЕсли;
		//выбираем строки из табличной части
		Для Каждого Стр Из ТаблЧасть Цикл
			Если Стр.Свойство("СтавкаНДС") И НРег(Стр.СтавкаНДС) <> "без ндс" Тогда
				Возврат Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	Возврат Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
КонецФункции

////////////////////////////////////////////////////
/////////////////Табличная часть////////////////////

&НаКлиенте
Функция ЗаполнитьЕдиницуИзмеренияУНФ(Контекст) Экспорт
	Если Контекст.СтрТабл.ЕдиницаИзмерения = Неопределено Тогда
		сбисКонтекстСервер = Новый Структура("Ссылка, ИмяРеквизита", Контекст.СтрТабл.Номенклатура, "ЕдиницаИзмерения");
		Возврат СбисПолучитьРеквизит(сбисКонтекстСервер);
	КонецЕсли;
	Возврат ЗаполнитьЕдиницуИзмерения(Контекст);
КонецФункции

//Функция заполняет ставку НДС в загружаемых документах	
&НаКлиенте
Функция ЗаполнитьСтавкуНДС(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Перечисления.СтавкиНДС"); 
	Если	Не Контекст.СтрТабл.Свойство("СтавкаНДС", сбисОписаниеОбъекта.Ключ)
		Или	Не ЗначениеЗаполнено(сбисОписаниеОбъекта.Ключ) Тогда
		Если Контекст.Свойство("СтрокаФайла") тогда
			сбисОписаниеОбъекта.Ключ = сбисРассчитатьСтавкуНДС(Контекст.СтрокаФайла);
		Иначе
			сбисОписаниеОбъекта.Ключ = сбисРассчитатьСтавкуНДС(Контекст.СтрТабл);
		КонецЕсли;
	КонецЕсли;
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = сбисПолучитьСтавкуНДС_Перечисление_НаСервере(сбисОписаниеОбъекта.Ключ);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция заполняет ставку НДС в загружаемых документах если это справочник со значениями ставок	
&НаКлиенте
Функция ЗаполнитьСтавкуНДСИзСправочника(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.СтавкиНДС"); 
	Если	Не Контекст.СтрТабл.Свойство("СтавкаНДС", сбисОписаниеОбъекта.Ключ)
		Или	Не ЗначениеЗаполнено(сбисОписаниеОбъекта.Ключ) Тогда
		сбисОписаниеОбъекта.Ключ = сбисРассчитатьСтавкуНДС(Контекст.СтрокаФайла);
	КонецЕсли;
	сбисОписаниеОбъекта.Значение= сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = сбисПолучитьСтавкуНДС_Справочник_НаСервере(сбисОписаниеОбъекта.Ключ);
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция определяет название табличной части документа поступления, в которую нужно загружать данные	
&НаКлиенте
Функция сбисИмяТЧ(Контекст) Экспорт
	сбисСтрТабл	= Неопределено;
	сбисИмяТЧ	= "Товары";
	Если	Не Контекст.Свойство("СтрТабл", сбисСтрТабл)
		Или	Не сбисСтрТабл.Свойство("Номенклатура") Тогда
		//Что-то не заполнено, считаем что это товары (старая логика)
	ИначеЕсли сбисНоменклатураУслуга(Контекст) Тогда
		//UAA Немного меняется логика: теперь сперва проверяем формат и тип и если ничего не соответсвует, то проверяем признак услуги
		сбисИмяТЧ = "Услуги";	
	ИначеЕсли сбисНоменклатура1СУслуга_Сервер(Новый Структура("Номенклатура", сбисСтрТабл.Номенклатура)) Тогда
		сбисИмяТЧ = "Услуги";	
	КонецЕсли;	
	Возврат сбисИмяТЧ;
КонецФункции

//Функция определяет название табличной части документа поступления, в которую нужно загружать данные	
&НаКлиенте
Функция сбисИмяТЧ_УНФ(Контекст) Экспорт
	Если	Контекст.Свойство("СтрТабл")
		И	Контекст.СтрТабл.Свойство("Номенклатура")
		И	сбисНоменклатура1СЗапас_УНФ_Сервер(Новый Структура("Номенклатура", Контекст.СтрТабл.Номенклатура))Тогда
		Возврат "Запасы";
	Иначе
		Возврат "Расходы";
	КонецЕсли;
КонецФункции

//Функция возвращает вид номенклатуры по признаку услуги позиции
&НаКлиенте
Функция сбисНоменклатураВид(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.ВидыНоменклатуры", "Товары"); 
	Если сбисНоменклатураУслуга(Контекст) Тогда
		сбисОписаниеОбъекта.Ключ = "Услуги";
	КонецЕсли;
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = Объект1СПоОписанию(сбисОписаниеОбъекта, "ПоНаименованию");
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция возвращает признак номенклатуры услуга по данным файла
&НаКлиенте
Функция сбисНоменклатураУслуга(Контекст) Экспорт
	Перем ВидОперации;
	Возврат	(	Контекст.СтруктураФайла.Файл.Формат = "АктВР"
		И	Не	(	Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр", ВидОперации)
		И	ВидОперации.Свойство("ДокументВидОперации", ВидОперации)
		И	ВидОперации = "АктПП"))
			Или (	Контекст.Свойство("СтрТабл")
				И	Контекст.СтрТабл.Свойство("Тип")
				И	(	Контекст.СтрТабл.Тип = "2" 
					Или	Контекст.СтрТабл.Тип = "3"));
КонецФункции

&НаКлиенте
Функция сбисПроверитьЗаполнитьШтрихкод(Контекст) Экспорт
	
	сбисКонтекстСервер = Новый Структура("Ини, Документ, СтрТабл, СтрокаФайла");
	ЗаполнитьЗначенияСвойств(сбисКонтекстСервер, Контекст);
	сбисПроверитьЗаполнитьШтрихкод_Сервер(сбисКонтекстСервер);
	
КонецФункции

//Функция рассчитывает цену из суммы и количества
&НаКлиенте
Функция сбисРассчитатьЦену(Контекст) Экспорт
	Попытка
		СуммаСНДС = ?(Контекст.СтрТабл.Свойство("СуммаСНДС"), Контекст.СтрТабл.СуммаСНДС, ?(Контекст.СтрТабл.Свойство("Сумма"), Контекст.СтрТабл.Сумма, Контекст.СтрТабл.СуммаБезНал)); 
		Цена = ?((Не Контекст.СтрТабл.Свойство("Количество")) или Число(Контекст.СтрТабл.Количество) = 0, Окр(Число(СуммаСНДС), 2), Окр(Число(СуммаСНДС) / Число(Контекст.СтрТабл.Количество), 2));
		Возврат Цена;
	Исключение
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция сбисРассчитатьЦенуИзАктаПриемки(Контекст) Экспорт
	Цена = 0;
	Попытка
		Если Контекст.СтрокаФайла.ПоФакту.Свойство("Цена") Тогда
			Если ЗначениеЗаполнено(Контекст.СтрокаФайла.ПоФакту.Цена) и Число(Контекст.СтрокаФайла.ПоФакту.Цена) <> 0 Тогда
				Цена = Контекст.СтрокаФайла.ПоФакту.Цена;
			КонецЕсли;
		ИначеЕсли Контекст.СтрокаФайла.ПоФакту.Свойство("Сумма") Тогда
			Если ЗначениеЗаполнено(Контекст.СтрокаФайла.ПоФакту.Сумма) и Число(Контекст.СтрокаФайла.ПоФакту.Сумма) <> 0 Тогда
				Цена = Контекст.СтрокаФайла.ПоФакту.Сумма / Контекст.СтрокаФайла.ПоФакту.Кол_во;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	Возврат Цена;
КонецФункции

////////Функции оставлены для совместимости/////////
///////////////Делать запись через ини//////////////

// Функция заполняет договор в загружаемых заказах для конфигурации УТ11	
&НаКлиенте
Функция ЗаполнитьДоговорСКлиентомУТ11(Контекст) Экспорт
	сбисКонтекстСервер = Новый Структура("Документ", Контекст.Документ);
	Возврат сбисПолучитьДоговорСКлиентомУТ11_Сервер(сбисКонтекстСервер);
КонецФункции

//Функция возвращает единицу измерения для номенклатуры в загружаемом документе (для конфигураций БУХ) 
&НаКлиенте
Функция ЗаполнитьЕдиницуИзмерения(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", РассчитатьЗначение("СправочникЕдиницИзмерения", Контекст.Ини)); 
	// d.ch 29.07.19
	// получаем название реквизита табличной части документа куда будем записывать единицу измерения
	// берем рассчитанное значение из СтрТабл по имени реквизита
	ИмяРеквизита = Сред(Контекст.ТекущееПолеИни.Значение, Найти(Контекст.ТекущееПолеИни.Значение,".") + 1);
	Если Не Контекст.СтрТабл.Свойство(ИмяРеквизита, сбисОписаниеОбъекта.Ключ) Тогда
		сбисОписаниеОбъекта.Ключ = Контекст.СтрТабл.ЕдиницаИзмерения;
	КонецЕсли;
	
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда
		сбисКонтекстСервера = Новый Структура("Ини, ТекущееПолеИни, СтрТабл");
		ЗаполнитьЗначенияСвойств(сбисКонтекстСервера, Контекст);
		сбисКонтекстСервера.Вставить("ОписаниеОбъекта", сбисОписаниеОбъекта);
		сбисОписаниеОбъекта.Значение = сбисПолучитьЕдиницуИзмерения_Справочник_НаСервере(сбисКонтекстСервера);
		Если Не ЗначениеЗаполнено(сбисОписаниеОбъекта.Значение) Тогда    // если не нашли по коду ОКЕИ, попробуем по наименованию (например, для блоков сигарет код ОКЕИ 0000 в файле)
			Попытка
				сбисКонтекстСервера.ОписаниеОбъекта.Ключ = Контекст.СтрокаФайла.ЕдИзм;
				сбисОписаниеОбъекта.Значение = сбисПолучитьЕдиницуИзмеренияПоНаименованию_Справочник_НаСервере(сбисКонтекстСервера);
			Исключение
			КонецПопытки;
		КонецЕсли;
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

//Функция заполняет менеджера в загружаемых документах для конфигурации УТ11	
&НаКлиенте
Функция ЗаполнитьМенеджераУТ11(Контекст) Экспорт
	сбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "Справочники.Пользователи", "ТекущийПользовательИБ"); 
	сбисОписаниеОбъекта.Значение = сбисПолучитьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	Если сбисОписаниеОбъекта.Значение = Неопределено Тогда	
		сбисОписаниеОбъекта.Значение = сбисПолучитьМенеджераУТ11_Сервер();
		сбисЗакэшироватьЗначениеРассчитанногоОбъекта(МестныйКэш, сбисОписаниеОбъекта);
	КонецЕсли;
	Возврат сбисОписаниеОбъекта.Значение;
КонецФункции

&НаКлиенте
Функция ЗаполнитьСоглашениеСКлиентомУТ11(Контекст) Экспорт
	// Функция заполняет соглашение в загружаемых заказах для конфигурации УТ11	
	сбисКонтекстСервер = Новый Структура("Контрагент", Контекст.Документ.Контрагент);
	Возврат сбисПолучитьСоглашениеСКлиентомУТ11_Сервер(сбисКонтекстСервер);
КонецФункции

// Функция заполняет соглашение в загружаемых документах для конфигурации УТ11	
&НаКлиенте
Функция ЗаполнитьСоглашениеУТ11(Контекст) Экспорт
	сбисКонтекстСервера = Новый Структура("Контрагент", Контекст.Документ.Контрагент);
	Возврат сбисПолучитьСоглашениеУТ11_Сервер(сбисКонтекстСервера);
КонецФункции

////////////////////////////////////////////////////
/////////Вспомогательные функции загрузки///////////

// Функция заполняет ДокументПоступления в загружаемых документах	
&НаСервереБезКонтекста
Функция сбисЗаполнитьДанныеИсходногоДокументаНаСервере(Знач Контекст, Отказ)
	
	Док = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Контрагент = Контекст.Контрагент;
	
	ДокументПоступленияДата = сбисСтрокаВДату(Контекст.ДокументПоступленияДата);
	ДокументПоступленияНомер = Контекст.ДокументПоступленияНомер;
	Если Контекст.Файл_Формат = "счФактКор" Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.НомерВходящегоДокумента,
		|	СчетФактураПолученный.ДатаВходящегоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДатаВходящегоДокумента МЕЖДУ &ДатаОт И &ДатаДо
		|	И СчетФактураПолученный.НомерВходящегоДокумента В ИЕРАРХИИ(&Номер) 
		|	И СчетФактураПолученный.Контрагент = &Контрагент 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
		ТекстЗапроса2 = "ВЫБРАТЬ
		|	СчетФактураПолученный.Ссылка КАК Ссылка,
		|	СчетФактураПолученный.НомерИсходногоДокумента,
		|	СчетФактураПолученный.ДатаИсходногоДокумента
		|ИЗ
		|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|ГДЕ
		|	СчетФактураПолученный.ДатаИсходногоДокумента МЕЖДУ &ДатаОт И &ДатаДо
		|	И СчетФактураПолученный.НомерИсходногоДокумента В ИЕРАРХИИ(&Номер) 
		|	И СчетФактураПолученный.Контрагент = &Контрагент 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента МЕЖДУ &ДатаОт И &ДатаДо
		|	И ПоступлениеТоваровУслуг.НомерВходящегоДокумента В ИЕРАРХИИ(&Номер)
		|	И ПоступлениеТоваровУслуг.Контрагент = &Контрагент 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка УБЫВ";
	КонецЕсли;
	
	ДокументПоступленияНомерСписок = Новый СписокЗначений;
	ДокументПоступленияНомерСписок.Добавить(ДокументПоступленияНомер);
	//Удаление префиксов и лидирующих нулей
	НомерОбъекта = ДокументПоступленияНомер;
	Если Найти(НомерОбъекта,"-")=0 Тогда НомерОбъекта = "000-" + НомерОбъекта; КонецЕсли;
	Ном1 = Лев(НомерОбъекта,Найти(НомерОбъекта,"-")-1);
	Ном2 = Прав(НомерОбъекта,СтрДлина(НомерОбъекта)-Найти(НомерОбъекта,"-"));
	СтрДл = СтрДлина(ном1);т = 1;СтрНом = "";
	Пока т <= СтрДл Цикл
		б = Сред(Ном1, т,1);
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда
			СтрНом = СтрНом + б;
		КонецЕсли;
		т = т + 1;
	КонецЦикла;
	Ном1 = СтрНом;
	СтрДл = СтрДлина(Ном2);т = 1;СтрНом = "";
	Пока т <= СтрДл Цикл
		б = Сред(Ном2, т,1);
		Если НЕ (б="0" и СтрНом="") И НЕ (б="0" и Найти(СтрНом,"1")=0 и Найти(СтрНом,"2")=0 и Найти(СтрНом,"3")=0 и Найти(СтрНом,"4")=0 и Найти(СтрНом,"5")=0 и Найти(СтрНом,"6")=0 и Найти(СтрНом,"7")=0 и Найти(СтрНом,"8")=0 и Найти(СтрНом,"9")=0) Тогда
			СтрНом = СтрНом + б;
		КонецЕсли;
		т = т + 1;
	КонецЦикла;
	Ном2 = СтрНом;	
	НомерОбъекта = ?(Ном1="",Ном2,Ном1+"-"+Ном2);
	Если НомерОбъекта <> ДокументПоступленияНомер Тогда ДокументПоступленияНомерСписок.Добавить(НомерОбъекта); КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номер",		ДокументПоступленияНомерСписок);
	Запрос.УстановитьПараметр("ДатаОт",		НачалоДня(ДокументПоступленияДата));
	Запрос.УстановитьПараметр("ДатаДо",		КонецДня(ДокументПоступленияДата));
	Запрос.УстановитьПараметр("Контрагент", Контрагент);	
	Запрос.Текст = ТекстЗапроса;
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",773,"Неизвестная ошибка при выполнении метода",ОписаниеОшибки());
	КонецПопытки;
	Если Отказ И ЗначениеЗаполнено(ТекстЗапроса2) Тогда
		Запрос.Текст = ТекстЗапроса2;
		Попытка
			РезультатЗапроса = Запрос.Выполнить();
			Отказ = Ложь;
		Исключение
			Отказ = Истина;
			Результат = Новый Структура("code,message,details",773,"Неизвестная ошибка при выполнении метода",ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатТЧ = Новый Структура;
		
		Если Контекст.Файл_Формат = "счФактКор" Тогда 
			Док = Выборка.Ссылка.ДокументОснование; 
		Иначе	
			Док = Выборка.Ссылка;
		КонецЕсли;
		Для Каждого КлючИЗначениеТЧ Из Контекст.ТЧ Цикл
			Попытка	                                
				сбисЗаполнитьДанныеИсходнойТЧДокументаНаСервере(Док, КлючИЗначениеТЧ.Значение, КлючИЗначениеТЧ.Ключ, Отказ);
			Исключение
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 773, "Неизвестная ошибка при выполнении метода", ОписаниеОшибки());
			КонецПопытки;
			РезультатТЧ.Вставить(КлючИЗначениеТЧ.Ключ, КлючИЗначениеТЧ.Значение);
		КонецЦикла;
		Результат = Новый Структура("ОснованиеСсылка, ТЧ", Док, РезультатТЧ);
	Иначе
		Отказ = Истина;
		Результат = Новый Структура("code,message,details",779,"Не найден объект","Не найден исходный документ");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция сбисЗаполнитьДанныеИсходнойТЧДокументаНаСервере(ДокументОснованиеСсылка, СбисЗначениеТЧ, СбисКлючТЧ, Отказ)
	КлючиТчЗаполнить = СтрЗаменить("Количество,Сумма,Цена,СуммаНДС,СтавкаНДС", ",", Символы.ПС);
	Для Каждого СбисСтрокаТЧ Из СбисЗначениеТЧ Цикл
		Отбор = Новый Структура("Номенклатура", СбисСтрокаТЧ.Номенклатура);
		Если		СбисСтрокаТЧ.Свойство("ХарактеристикаНоменклатуры")
			И Не	СбисСтрокаТЧ.ХарактеристикаНоменклатуры = Неопределено Тогда
			Отбор.Вставить("ХарактеристикаНоменклатуры", СбисСтрокаТЧ.ХарактеристикаНоменклатуры);
		КонецЕсли;
		СтрокиТовараОснования = ДокументОснованиеСсылка[СбисКлючТЧ].НайтиСтроки(Отбор);
		Если Не СтрокиТовараОснования.Количество() Тогда
			//Нет строк, нечего обрабатывать.
			Продолжить;
		КонецЕсли;
		Для НомерСтрЗамены = 1 По СтрЧислоСтрок(КлючиТчЗаполнить) Цикл
			КлючТчЗамены = СтрПолучитьСтроку(КлючиТчЗаполнить, НомерСтрЗамены);
			Если СбисСтрокаТЧ.Свойство(КлючТчЗамены+"ДоИзменения") Тогда
				Попытка
					СбисСтрокаТЧ[КлючТчЗамены+"ДоИзменения"] = СтрокиТовараОснования[0][КлючТчЗамены];
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисЗаполнитьДанныеНоменклатурыНаСервере(Знач Идентификатор) Экспорт
	Попытка
		Результат = Новый Структура("Номенклатура, Характеристика");
		Если Найти(Идентификатор,"#")>0 Тогда   // Ид номенклатуры, характеристики, упаковки, разделенные #
			МассивИдентификаторов = РазбитьСтрокуВМассив(Идентификатор,"#");
			Если МассивИдентификаторов.Количество()>0 Тогда
				ИДТовара = МассивИдентификаторов[0];
				Результат.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДТовара));	
			КонецЕсли;
			Если МассивИдентификаторов.Количество()>1 Тогда
				ИДХарактеристики = МассивИдентификаторов[1];
				Если ЗначениеЗаполнено(ИДХарактеристики) Тогда
					Результат.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДХарактеристики));	
				КонецЕсли;
			КонецЕсли;
			Если Найти(Результат.Номенклатура,"Объект не найден")=0 Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		ИначеЕсли Найти(Идентификатор,":")>0 Тогда   // Код номенклатуры, характеристики, упаковки, разделенные :
			МассивИдентификаторов = РазбитьСтрокуВМассив(Идентификатор,":");
			Если МассивИдентификаторов.Количество()>0 Тогда
				ИДТовара = МассивИдентификаторов[0];
				Результат.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ИДТовара);	
			КонецЕсли;
			Если МассивИдентификаторов.Количество()>1 Тогда
				ИДХарактеристики = МассивИдентификаторов[1];
				Если ЗначениеЗаполнено(ИДХарактеристики) Тогда
					Результат.Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоКоду(ИДХарактеристики);	
				КонецЕсли;
			КонецЕсли;
			Если Найти(Результат.Номенклатура,"Объект не найден")=0 и НЕ Результат.Номенклатура.Пустая() Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		Иначе   // код номенклатуры
			Результат.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Идентификатор);	
			Если НЕ Результат.Номенклатура.Пустая() Тогда   // нашли номенклатуру
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки
КонецФункции

// Функция возвращает договор после поиска.
&НаСервереБезКонтекста
Функция СбисНайтиДоговорНаСервере(Знач Контекст)
	Перем ДатаДоговора, НомерДоговора;
	
	Отказ = Ложь;
	НаименованиеРеквизитаОрганизация = РассчитатьЗначениеНаСервере("НаименованиеРеквизитаОрганизация",Контекст);	
	
	Если НаименованиеРеквизитаОрганизация = Неопределено Тогда
		НаименованиеРеквизитаОрганизация = "Организация";
	КонецЕсли;
	Организация = Контекст.Документ[НаименованиеРеквизитаОрганизация];
	Контрагент = Контекст.Документ.Контрагент;
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();		
	Если	Контекст.СтруктураФайла.Файл.Документ.Свойство("Параметр")
		И	Контекст.СтруктураФайла.Файл.Документ.Параметр.Свойство("ДоговорДата",	ДатаДоговора)
		И	Контекст.СтруктураФайла.Файл.Документ.Параметр.Свойство("ДоговорНомер", НомерДоговора) Тогда
		//Возможность поиска по дате и номеру договора
		Попытка
			ДатаДоговора = Дата(ДатаДоговора + " 00:00:00");
		Исключение
			ДатаДоговора = Неопределено;
			НомерДоговора = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Не	(	ДатаДоговора = Неопределено
		И 	НомерДоговора = Неопределено) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Дата = &Дата
		|	И ДоговорыКонтрагентов.Номер = &Номер
		|	И ДоговорыКонтрагентов."+НаименованиеРеквизитаОрганизация+" = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
		Запрос.УстановитьПараметр("ВладелецДоговора",		Контрагент);
		Запрос.УстановитьПараметр("ОрганизацияДоговора",	Организация);
		Запрос.УстановитьПараметр("Дата",					ДатаДоговора);
		Запрос.УстановитьПараметр("Номер",					НомерДоговора);	
		Попытка
			//Сначала пытаемся найти договор по дате, номеру
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	СписокВидовДоговора = Новый СписокЗначений;
	ВидДоговора = РассчитатьЗначениеНаСервере("ВидДоговора",Контекст);
	ИспользоватьОрганизациюВДоговоре = РассчитатьЗначениеНаСервере("ИспользоватьОрганизациюВДоговоре",Контекст);
	
	Если ВидДоговора = Неопределено Тогда
		СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе
		СписокВидовДоговора.Добавить(ВидДоговора);
	КонецЕсли;
	
	Если ИспользоватьОрганизациюВДоговоре = Неопределено Тогда
		ИспользоватьОрганизациюВДоговоре = Истина;
	КонецЕсли;
	
	СтруктураПараметров = Неопределено;
	
	Запрос = Новый Запрос;
	
	Если Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ОсновнойДоговорКонтрагента") <> Неопределено Тогда
		ИмяРеквизитаОсновногоДоговора = "ОсновнойДоговорКонтрагента";
	ИначеЕсли Метаданные.Справочники.Контрагенты.Реквизиты.Найти("ДоговорПоУмолчанию") <> Неопределено Тогда
		ИмяРеквизитаОсновногоДоговора = "ДоговорПоУмолчанию";
	Иначе
		ИмяРеквизитаОсновногоДоговора = "";
	КонецЕсли;
	
	Если ИмяРеквизитаОсновногоДоговора <> "" Тогда    // основной договор в реквизите контрагента
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Основной
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
		|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
		| И ДоговорыКонтрагентов.Ссылка = СправочникВладелец."+ИмяРеквизитаОсновногоДоговора+"
		|ГДЕ
		|	&ТекстФильтра
		|
		|УПОРЯДОЧИТЬ ПО
		|Основной УБЫВ";
	Иначе   // основные договора в регистре сведений
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	ДоговорыКонтрагентов.Ссылка,
		|	НЕ ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL КАК Основной
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
		|			И ДоговорыКонтрагентов."+НаименованиеРеквизитаОрганизация+" = ОсновныеДоговорыКонтрагента.Организация
		|			И ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
		|			И ДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
		|ГДЕ
		|	&ТекстФильтра
		|УПОРЯДОЧИТЬ ПО
		|Основной УБЫВ"
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВладелецДоговора", Контрагент);
	Если ИспользоватьОрганизациюВДоговоре = Истина Тогда
		Запрос.УстановитьПараметр("ОрганизацияДоговора", Организация);
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	| И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","")
	+?(ИспользоватьОрганизациюВДоговоре = Истина,"
	| И ДоговорыКонтрагентов."+НаименованиеРеквизитаОрганизация+" В (&ОрганизацияДоговора)","");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Основной;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйДоговор;
	
КонецФункции	

&НаСервереБезКонтекста
Функция сбисПолучитьВалюту_Сервер(Знач сбисКодВалютыДокумента) Экспорт
	Возврат Справочники.Валюты.НайтиПоКоду(сбисКодВалютыДокумента);
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДоговорСКлиентомУТ11_Сервер(Контекст)
	ДоговорПоУмолчанию = Неопределено;
	Попытка
		Контекст.Документ.Вставить("Партнер", Контекст.Документ.Контрагент.Партнер);
		Контекст.Документ.Вставить("Договор", ДоговорПоУмолчанию);
		ДоговорПоУмолчанию = Вычислить("ПродажиСервер.ПолучитьДоговорПоУмолчанию(Контекст.Документ,Перечисления.ХозяйственныеОперации.РеализацияКлиенту)");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат ДоговорПоУмолчанию;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьЗначениеПользователяПоУмолчанию_УНФ_Сервер(Знач сбисОписаниеОбъекта) Экспорт
	Попытка
		Возврат Вычислить("УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.ТекущийПользователь(),сбисОписаниеОбъекта.Ключ)");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьСоглашениеСКлиентомУТ11_Сервер(Знач Контекст)
	Соглашение = Неопределено;
	Попытка
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ПустаяСсылкаДокумента", Истина, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Документы.ЗаказКлиента.ПустаяСсылка());
		Соглашение = Вычислить("ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Контекст.Контрагент.Партнер, ПараметрыОтбора)").Соглашение;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Соглашение;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДоговорУНФ_Сервер(Знач Документ, Знач СтруктураФайла, Отказ)
	ДоговорУНФ = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Контрагент = Документ.Контрагент;
	Организация = Документ.Организация;
	
	ДатаДоговора = Неопределено;
	НомерДоговора = Неопределено;
	мПараметр = СтруктураФайла;
	
	Запрос = Новый Запрос;
	
	Если	мПараметр.Свойство("Файл",			мПараметр)
		И	мПараметр.Свойство("Документ",		мПараметр)
		И	мПараметр.Свойство("Параметр",		мПараметр)
		И	мПараметр.Свойство("ДоговорДата",	ДатаДоговора)
		И	мПараметр.Свойство("ДоговорНомер",	НомерДоговора) Тогда
		Попытка
			ДатаДоговора = Дата(ДатаДоговора + " 00:00:00");
		Исключение
			Отказ = Истина;
			Возврат ОписаниеОшибки();
		КонецПопытки;
		Запрос.Текст =	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ДатаДоговора = &Дата
		|	И ДоговорыКонтрагентов.НомерДоговора = &Номер
		|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
		Запрос.УстановитьПараметр("ВладелецДоговора",		Контрагент);
		Запрос.УстановитьПараметр("ОрганизацияДоговора",	Организация);
		Запрос.УстановитьПараметр("Дата",					ДатаДоговора);
		Запрос.УстановитьПараметр("Номер",					НомерДоговора);	
		Попытка
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;		
			КонецЕсли;
		Исключение
			Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	
	СписокВидовДоговора = Новый СписокЗначений;
	//ВидДоговора = РассчитатьЗначениеНаСервере("ВидДоговора",Контекст);
	//Если ВидДоговора = Неопределено Тогда
	СписокВидовДоговора.Добавить(Перечисления.ВидыДоговоров.СПоставщиком);
	//Иначе
	//	СписокВидовДоговора.Добавить(ВидДоговора);
	//КонецЕсли;
	СтруктураПараметров = Неопределено;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагента.Договор ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Приоритет,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДоговорУНФ = Выборка.Ссылка;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат ДоговорУНФ;
	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьДоговорУТ11_Сервер(Контекст)
	ДоговорПоУмолчанию	= Неопределено;
	Контекст.Документ.Вставить("Партнер", Контекст.Документ.Контрагент.Партнер);
	Контекст.Документ.Вставить("Договор", Неопределено);
	Попытка
		ДоговорПоУмолчанию = Вычислить("ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Контекст.Документ,Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика)");
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат ДоговорПоУмолчанию;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьСоглашениеУТ11_Сервер(Знач Контекст)
	Соглашение = Неопределено;
	Попытка
		ПараметрыОтбора = Новый Структура("УчитыватьГруппыСкладов, ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение", Истина, Истина, Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		РезультатЗапроса = Вычислить("ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Контекст.Контрагент.Партнер, ПараметрыОтбора)");
		Если Не РезультатЗапроса = Неопределено Тогда
			Соглашение = РезультатЗапроса.Соглашение;
		КонецЕсли;
	Исключение
		Ошибка = ОписаниеОшибки();
	КонецПопытки;
	Возврат Соглашение;	
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьМенеджераУТ11_Сервер(Знач Контекст=Неопределено)
	ИдПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	Возврат Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ИдПользователяИБ);
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьЕдиницуИзмерения_Справочник_НаСервере(Знач Контекст)
	СправочникМенеджерЕдиниц = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения", Контекст);
	Возврат СправочникМенеджерЕдиниц.НайтиПоКоду(Контекст.ОписаниеОбъекта.Ключ, Истина);
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьЕдиницуИзмеренияПоНаименованию_Справочник_НаСервере(Знач Контекст)
	СправочникМенеджерЕдиниц = РассчитатьЗначениеНаСервере("СправочникЕдиницИзмерения", Контекст);
	Рез = СправочникМенеджерЕдиниц.НайтиПоНаименованию(Контекст.ОписаниеОбъекта.Ключ, Истина);
	Если Не ЗначениеЗаполнено(Рез) Тогда
		Рез = СправочникМенеджерЕдиниц.НайтиПоНаименованию(Контекст.ОписаниеОбъекта.Ключ);	
	КонецЕсли;
	Возврат Рез;
КонецФункции

//Получает ссылку объекта 1С (Справочник/ПланСчетов/Перечисление) по его описанию
&НаСервереБезКонтекста
Функция Объект1СПоОписанию(Знач СбисОбъект, Знач Режим="ПоКоду", Знач ТочноеСоответствие=Ложь, Знач Родитель=Неопределено, Знач Владелец=Неопределено)
	СбисТипОбъекта = "Справочник";
	СбисИмяОбъекта = СбисОбъект.Тип;
	Если Найти(СбисИмяОбъекта, ".") Тогда
		ИмяОбъекта = СтрЗаменить(СбисИмяОбъекта,".",Символы.ПС);
		СбисТипОбъекта = СтрПолучитьСтроку(ИмяОбъекта, 1);
		СбисИмяОбъекта = СтрПолучитьСтроку(ИмяОбъекта, 2);
	КонецЕсли;
	Если СбисТипОбъекта = "Справочник" Тогда
		Если		Режим = "ПоНаименованию" Тогда
			СтрокаВычислить = "Справочники[СбисИмяОбъекта].НайтиПоНаименованию(СбисОбъект.Ключ, ТочноеСоответствие, Родитель, Владелец)";
		ИначеЕсли	Режим = "ПустаяСсылка" Тогда
			СтрокаВычислить = "Справочники[СбисИмяОбъекта].ПустаяСсылка()";
		Иначе
			СтрокаВычислить = "Справочники[СбисИмяОбъекта].НайтиПоКоду(СбисОбъект.Ключ, ТочноеСоответствие, Родитель, Владелец)";
		КонецЕсли;
	ИначеЕсли СбисТипОбъекта = "ПланыСчетов" Тогда
		Если		Режим = "ПоНаименованию" Тогда
			СтрокаВычислить = "ПланыСчетов[СбисИмяОбъекта].НайтиПоНаименованию(СбисОбъект.Ключ, ТочноеСоответствие, Родитель)";
		ИначеЕсли	Режим = "ПустаяСсылка" Тогда
			СтрокаВычислить = "ПланыСчетов[СбисИмяОбъекта].ПустаяСсылка()";
		Иначе
			СтрокаВычислить = "ПланыСчетов[СбисИмяОбъекта].НайтиПоКоду(СбисОбъект.Ключ, Родитель)";
		КонецЕсли;
	ИначеЕсли СбисТипОбъекта = "Документ" Тогда
		Если Режим = "ПустаяСсылка" Тогда
			СтрокаВычислить = "Документы[СбисИмяОбъекта].ПустаяСсылка()";
		Иначе//Сделать запрос
			СтрокаВычислить = "Документы[СбисИмяОбъекта].НайтиПоКоду(СбисОбъект.Ключ, ТочноеСоответствие, Родитель, Владелец)";
		КонецЕсли;
	ИначеЕсли СбисТипОбъекта = "Перечисление" Тогда
		СтрокаВычислить = "Перечисления[СбисИмяОбъекта][СбисОбъект.Ключ]";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Возврат Вычислить(СтрокаВычислить);
КонецФункции

&НаСервереБезКонтекста
Функция СбисЗначениеПеречисления(Знач ИмяПеречисления, Знач КлючПеречисления)
	Если Найти(ИмяПеречисления, ".") Тогда
		ИмяПеречисления = СтрПолучитьСтроку(СтрЗаменить(ИмяПеречисления,".",Символы.ПС), 2);
	КонецЕсли;
	Возврат Перечисления[ИмяПеречисления][КлючПеречисления];
	
КонецФункции

//Функция возвращает реквизит элемента с сервера, когда уже по-другому никак.
&НаСервереБезКонтекста
Функция СбисПолучитьРеквизит(Знач Контекст) Экспорт 
	Возврат Контекст.Ссылка[Контекст.ИмяРеквизита];
КонецФункции

//Функция возвращает значение перечисления ставки НДС по строковому представлению
&НаСервереБезКонтекста
Функция сбисПолучитьСтавкуНДС_Перечисление_НаСервере(Знач сбисСтавка)
	Если		(Найти(сбисСтавка,"20/120") = 1) Или (сбисСтавка = "17") Тогда
		Возврат Перечисления.СтавкиНДС.НДС20_120;
	ИначеЕсли	(Найти(сбисСтавка,"10/110") = 1) Или (сбисСтавка = "9") Тогда
		Возврат Перечисления.СтавкиНДС.НДС10_110;
	ИначеЕсли	(Найти(сбисСтавка,"18/118") = 1) Или (сбисСтавка = "15") Тогда
		Возврат Перечисления.СтавкиНДС.НДС18_118;
	ИначеЕсли	Найти(сбисСтавка,"20") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС20;
	ИначеЕсли	Найти(сбисСтавка,"10") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС10;
	ИначеЕсли	Найти(сбисСтавка,"18") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС18;
	ИначеЕсли	Найти(сбисСтавка,"0") = 1 Тогда
		Возврат Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли	НРег(сбисСтавка) = "без ндс" Тогда
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	Возврат Неопределено
КонецФункции

// Функция заполняет ставку НДС в загружаемых документах	
&НаСервереБезКонтекста
Функция сбисПолучитьСтавкуНДС_Справочник_НаСервере(Знач сбисСтавка)
	Если		(Найти(сбисСтавка,"20/120") = 1) Или (сбисСтавка = "17") Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("20/120");
	ИначеЕсли	(Найти(сбисСтавка,"10/110") = 1) Или (сбисСтавка = "9") Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("10/110");
	ИначеЕсли	(Найти(сбисСтавка,"18/118") = 1) Или (сбисСтавка = "15") Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("18/118");
	ИначеЕсли	Найти(сбисСтавка,"20") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("20");
	ИначеЕсли	Найти(сбисСтавка,"10") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("10");
	ИначеЕсли	Найти(сбисСтавка,"18") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("18");
	ИначеЕсли	Найти(сбисСтавка,"0") = 1 Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("0");
	ИначеЕсли	НРег(сбисСтавка) = "без ндс" Тогда
		Возврат ПоискСтавкиНДСВСправочникеПоНазванию("безндс");
	КонецЕсли;
	Возврат Неопределено
КонецФункции

&НаСервереБезКонтекста
Процедура сбисПроверитьЗаполнитьШтрихкод_Сервер(Знач Контекст)
	сбисШтрихкодыНоменклатуры = Неопределено;
	Если	Контекст.СтрТабл.Номенклатура = Неопределено
		Или	Не Контекст.Ини.Свойство("ШтрихкодыНоменклатуры", сбисШтрихкодыНоменклатуры)
		Или	Не сбисШтрихкодыНоменклатуры.Свойство("Отбор")
		Или	Не Лев(сбисШтрихкодыНоменклатуры.Значение, 16) = "РегистрыСведений"
		Или	Не Контекст.СтрокаФайла.Свойство("GTIN") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРегистра		= Сред(сбисШтрихкодыНоменклатуры.Значение, 18);
	ИмяРекШтрихкод	= Сред(Контекст.Ини.ШтрихкодыНоменклатуры_Штрихкод.Значение, Найти(Контекст.Ини.ШтрихкодыНоменклатуры_Штрихкод.Значение,".")+1);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ *
	|ИЗ
	|   РегистрСведений." + ИмяРегистра + " КАК Рег
	|ГДЕ
	| ";
	ТекстСообщения = "";
	Отбор = Новый Структура;
	Для Каждого Элемент Из Контекст.Ини.ШтрихкодыНоменклатуры.Отбор Цикл
		ЗначениеОтбора = РассчитатьЗначениеНаСервере(Элемент.Значение,Контекст);
		Если ЗначениеОтбора = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Вставить(Элемент.Ключ, ЗначениеОтбора);
		Запрос.УстановитьПараметр(Элемент.Ключ, ЗначениеОтбора);
		Запрос.Текст = Запрос.Текст+"Рег."+Элемент.Ключ+"=&"+Элемент.Ключ+" И ";
		ТекстСообщения = ТекстСообщения + Элемент.Ключ + " = " + строка(ЗначениеОтбора) + ", ";
	КонецЦикла;
	ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения)-2);
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
	НаборЗаписей = Запрос.Выполнить().Выбрать();
	Если Не НаборЗаписей.Количество() Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Для Каждого ЭлементИни Из Контекст.Ини Цикл
			Если Лев(ЭлементИни.Ключ,22) = "ШтрихкодыНоменклатуры_" Тогда
				ИмяРек = Сред(ЭлементИни.Ключ,23);
				Если Метаданные.РегистрыСведений[ИмяРегистра].Измерения.Найти(ИмяРек)<>Неопределено Тогда
					Если ЭлементИни.Значение.Свойство("РассчитанноеЗначение") Тогда
						НаборЗаписей.Отбор[ИмяРек].Установить(ЭлементИни.Значение.РассчитанноеЗначение);
					ИначеЕсли ЭлементИни.Значение.Свойство("ВычислитьНаСервере") Тогда
						ЗначениеРеквизита = РассчитатьЗначениеНаСервере(ЭлементИни.Значение.ВычислитьНаСервере,Контекст);
						НаборЗаписей.Отбор[ИмяРек].Установить(ЗначениеРеквизита);
						ЭлементИни.Значение.Вставить("РассчитанноеЗначение",ЗначениеРеквизита);
					Конецесли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Прочитать();	
		Если НаборЗаписей.Количество() Тогда
			Сообщить("Штрихкод "+Контекст.СтрокаФайла.GTIN+ " указан у другой номенклатуры/характеристики/единицы измерения");
			Возврат;
		КонецЕсли;
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		Для Каждого ЭлементИни Из Контекст.Ини Цикл
			Если Лев(ЭлементИни.Ключ,22) = "ШтрихкодыНоменклатуры_" Тогда
				ИмяРек = Сред(ЭлементИни.Ключ,23);
				Если ЭлементИни.Значение.Свойство("РассчитанноеЗначение") Тогда
					НоваяЗаписьНабора[ИмяРек] = ЭлементИни.Значение.РассчитанноеЗначение;
				ИначеЕсли ЭлементИни.Значение.Свойство("ВычислитьНаСервере") Тогда
					НоваяЗаписьНабора[ИмяРек] = РассчитатьЗначениеНаСервере(ЭлементИни.Значение.ВычислитьНаСервере,Контекст);
				Конецесли;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		Сообщить("Создана запись в регистре сведений "+ ИмяРегистра+" для штрихкода "+Контекст.СтрокаФайла.GTIN);
	ИначеЕсли НаборЗаписей.Количество()>1 Тогда
		Сообщить("Для набора данных "+ ТекстСообщения+ " указано несколько штрихкодов. Подтверждение заказа и накладная в этом случае могут быть сформированы некорректно.");	
	Иначе
		Пока НаборЗаписей.Следующий() Цикл
			Если НаборЗаписей[ИмяРекШтрихкод]<>Контекст.СтрокаФайла.GTIN Тогда
				Сообщить("Для набора данных "+ ТекстСообщения+ " указан штрихкод "+НаборЗаписей[ИмяРекШтрихкод]+", а во входящем документе "+Контекст.СтрокаФайла.GTIN+". Подтверждение заказа и накладная в этом случае могут быть сформированы некорректно.");	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;		
КонецПроцедуры

&НаСервереБезКонтекста
Функция сбисНоменклатура1СЗапас_УНФ_Сервер(Знач Контекст)
	Возврат Контекст.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас;
КонецФункции

//Функция рассчитывает ставку НДС из строки по сопоставлению сумм
&НаКлиенте
Функция сбисРассчитатьСтавкуНДС(СтрокаФайла)
	Попытка
		Возврат Строка(Окр(Число(СтрокаФайла.НДС.Сумма) / (Число(СтрокаФайла.Сумма) - Число(СтрокаФайла.НДС.Сумма)) * 100));
	Исключение
		Возврат "без ндс";
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ПоискСтавкиНДСВСправочникеПоНазванию(Знач Строка)
	Выборка = Справочники.СтавкиНДС.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (СтрЗаменить(СтрЗаменить(Выборка.Наименование,	" ", ""), 
			"%", "") = Строка) Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.СтавкиНДС.НайтиПоНаименованию("без ндс");
КонецФункции

////////////////////////////////////////////////////
////////Вспомогательные функции кэширование/////////

//Функция получает значение из кэша через описание объекта
&НаКлиенте
Функция сбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, сбисОписаниеОбъекта) Экспорт 
	Перем СбисЗначенияОбъектов;
	КлючТипа = СтрЗаменить(сбисОписаниеОбъекта.Тип, ".", "_");
	Если Не Кэш.ТекущийСеанс.РасчитанныеЗначения.Свойство(КлючТипа, СбисЗначенияОбъектов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СбисЗначенияОбъектов.Получить(сбисОписаниеОбъекта.Ключ);
КонецФункции

//Функция кэширует сформированный и посчитанный объект
&НаКлиенте
Процедура сбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, сбисОписаниеОбъекта) Экспорт
	сбисЗначенияОбъектов = Неопределено;
	КлючТипа = СтрЗаменить(сбисОписаниеОбъекта.Тип, ".", "_");
	Если Не Кэш.ТекущийСеанс.РасчитанныеЗначения.Свойство(КлючТипа, сбисЗначенияОбъектов) Тогда
		сбисЗначенияОбъектов = Новый Соответствие;
		Кэш.ТекущийСеанс.РасчитанныеЗначения.Вставить(КлючТипа, сбисЗначенияОбъектов);
	КонецЕсли;
	сбисЗначенияОбъектов.Вставить(сбисОписаниеОбъекта.Ключ, сбисОписаниеОбъекта.Значение);	
КонецПроцедуры

//Функция очищает кэшированное значение объекта
&НаКлиенте
Процедура сбисОчиститьЗначениеРассчитанногоОбъекта(Кэш, сбисОписаниеОбъекта) Экспорт
	сбисЗначенияОбъектов = Неопределено;
	КлючТипа = СтрЗаменить(сбисОписаниеОбъекта.Тип, ".", "_");
	Если Не Кэш.ТекущийСеанс.РасчитанныеЗначения.Свойство(КлючТипа, сбисЗначенияОбъектов) Тогда
		Возврат;
	Иначе
		сбисЗначенияОбъектов.Удалить(сбисОписаниеОбъекта.Ключ);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////
//////////////////////Прочее////////////////////////
////////////////////////////////////////////////////

///////////////////////Обновление///////////////////

//Процедура скачивает файл обновления и меняет обработку в каталоге и в справочнике при наличии
&НаКлиенте
Процедура ОбновитьОбработкуНаНовуюВерсию(Ответ, ПараметрыОбновления) Экспорт
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Отказ					= Ложь;
	Кэш						= ПараметрыОбновления.Кэш;
	сбисИмяОбработки		= "Sbis1C.epf";
	сбисПолноеИмяОбработки	= сбисПолноеИмяФайла(Кэш.ПараметрыСистемы);
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		сбисИмяОбработки = СтрЗаменить(сбисИмяОбработки, ".", "_UF.");
	КонецЕсли;
	//Сперва получим актуальную версию во временный файл
	ИмяВременногоФайлаНовойВерсии = СбисПолучитьИмяВременногоФайлаКлиент("tmp");
	ПараметрыОбновления.Вставить("ИмяФайла", ИмяВременногоФайлаНовойВерсии);
	ПараметрыОбновления.Вставить("URL",		"/1C/8.2-3/" + сбисИмяОбработки);
	РезультатОбновления = Кэш.Интеграция.СбисСохранитьВФайлПоСсылке(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатОбновления);
		Возврат;
	КонецЕсли;
	СообщитьОбУспехе = Ложь;
	
	//Обновим справочник
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		НаименованиеОбработки = "Отправить документ через online.sbis.ru";
	Иначе
		НаименованиеОбработки = "Электронный обмен документами в СБиС";
	КонецЕсли;
	ОбработкаСБИССсылка = ПолучитьОбработкуСБИСНаСервере(НаименованиеОбработки);
	Если ЗначениеЗаполнено(ОбработкаСБИССсылка) Тогда
		РезультатОбновления = ЗаписатьОбработкуВСправочник(ПараметрыОбновления.Версия, ОбработкаСБИССсылка, Новый ДвоичныеДанные(ИмяВременногоФайлаНовойВерсии), Отказ);
		Если Отказ Тогда
			Сообщить(РезультатОбновления.message + "(" + РезультатОбновления.details + ")");
			Отказ = Ложь;
		Иначе
			Сообщить("Обработка успешно обновлена в справочнике внешних обработок. Перезапустите 1С предприятие (не обработку!). Текущая версия должна быть " + ПараметрыОбновления.Версия);
		КонецЕсли;
	КонецЕсли;
	
	//Обновим файл
	Файл = Новый Файл(сбисПолноеИмяОбработки);
	Если Файл.Существует() Тогда
		Попытка                           	
			ПереместитьФайл(сбисПолноеИмяОбработки, сбисПолноеИмяОбработки + ".bak");
		Исключение 
			Сообщить("Ошибка при замене файла обработки " + сбисПолноеИмяОбработки + ". Возможно он заблокирован. Подробно: " + ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		Если Не Отказ Тогда
			Попытка                           	
				ПереместитьФайл(ИмяВременногоФайлаНовойВерсии, сбисПолноеИмяОбработки);
				СообщитьОбУспехе = Истина;
				Сообщить("Обработка успешно обновлена по пути " + сбисПолноеИмяОбработки + ". Перезапустите 1С предприятие (не обработку!). Текущая версия должна быть " + ПараметрыОбновления.Версия);
			Исключение
				//Восстановим исходный файл обратно.
				ПереместитьФайл(сбисПолноеИмяОбработки + ".bak", сбисПолноеИмяОбработки);
				Сообщить("Ошибка при переносе файла обработки новой версии " + сбисПолноеИмяОбработки + ". Подробно: " + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	СбисОчиститьВременныйФайлКлиент(ИмяВременногоФайлаНовойВерсии);
	
КонецПроцедуры

//Функция получает обработку из справочника
&НаСервереБезКонтекста
Функция ПолучитьОбработкуСБИСНаСервере(НаименованиеВнешнейОбработкиСбис)
	Если		Не Метаданные.Справочники.Найти("ВнешниеОбработки") = Неопределено Тогда 
		Возврат Справочники.ВнешниеОбработки.НайтиПоНаименованию(НаименованиеВнешнейОбработкиСбис);
	ИначеЕсли	Не Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки") = Неопределено Тогда
		Возврат Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(НаименованиеВнешнейОбработкиСбис);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

//Функция обновляет обработку в спроавчнике
&НаСервереБезКонтекста
Функция ЗаписатьОбработкуВСправочник(Версия, ОбработкаСБИССсылка, Знач ДД, Отказ)
	Попытка
		сбисОбработкаОбъект = ОбработкаСБИССсылка.ПолучитьОбъект();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Неизвестная ошибка системы", ОписаниеОшибки());
	КонецПопытки;
	Если Не сбисОбработкаОбъект.Метаданные().Реквизиты.Найти("ХранилищеВнешнейОбработки") = Неопределено Тогда
		сбисОбработкаОбъект.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	ИначеЕсли Не сбисОбработкаОбъект.Метаданные().Реквизиты.Найти("ХранилищеОбработки") = Неопределено Тогда
		сбисОбработкаОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДД, Новый СжатиеДанных(9));
	Иначе
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 100, "Неизвестная ошибка системы", "Не найден реквизит хранилища обработки");
	КонецЕсли;	
	Попытка
		сбисОбработкаОбъект.Записать();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 611, "Ошибка создания объекта в ИС", ОписаниеОшибки());
	КонецПопытки;	 
	Возврат Истина;
КонецФункции

//Функция возвращает параметры сервиса update для вызова
&НаКлиенте
Функция сбисПараметрыСервисаОбновления(Кэш) Экспорт
	
	//+++ МАИ 09.09.2021 Переопределяем сервер обновлений, если пользователь в режиме отладки указал другой
		АдресСервисаОбновлений = Неопределено;
		Если Кэш.СБИС.ПараметрыИнтеграции.Свойство("АдресСервисаОбновлений", АдресСервисаОбновлений) Тогда
			сбисСервер	= АдресСервисаОбновлений;
		Иначе
			сбисСервер	= "update.sbis.ru";	
		КонецЕсли;
	//--- МАИ 09.09.2021
	
	//сбисПрефикс	= СтрПолучитьСтроку(СтрЗаменить(Сред(Кэш.СБИС.АдресСервера, 9), "online", Символы.ПС), 1);
	//Если Не Лев(сбисПрефикс, 2) = ".s" Тогда
	//	сбисСервер = сбисПрефикс + сбисСервер;
	//КонецЕсли;
	сбисПараметрыОбновления = Новый Структура;
	сбисПараметрыОбновления.Вставить("Сервер",	сбисСервер);
	сбисПараметрыОбновления.Вставить("Протокол","https");
	сбисПараметрыОбновления.Вставить("URL",		"/1C/8.2-3/");
	Возврат сбисПараметрыОбновления;
КонецФункции

//Процедура выполняет проверку обновления на сервисе и предлагает скачать его. Доступно только если обработка лежит в каталоге и запускается оттуда же.
&НаКлиенте
Процедура СбисПроверитьНаличиеОбновлений(Кэш, ПараметрыОбновления) Экспорт
	Отказ = Ложь;
	РезультатОбновления = СбисПроверитьНаличиеОбновленияОбработки(Кэш, ПараметрыОбновления, Отказ);
	Если Отказ Тогда
		Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатОбновления, Новый Структура("ФормаВладелец", Кэш.ГлавноеОкно));
	ИначеЕсли Не РезультатОбновления = Неопределено Тогда 
		Сообщить(РезультатОбновления);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СбисПроверитьНаличиеОбновленияОбработки(Кэш, ПараметрыОбновления, Отказ)
	сбисПараметрыОбновления = сбисПараметрыСервисаОбновления(Кэш);
	сбисПараметрыОбновления.Вставить("ИмяФайла", КаталогВременныхФайлов() + "version.tmp");
	сбисПараметрыОбновления.URL = сбисПараметрыОбновления.URL + "version"  + ?(Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение, "_UF", "") + ".txt";
	
	РезультатЧтения = Кэш.Интеграция.сбисПолучитьПараметрыАктуальнойВерсии(Кэш, сбисПараметрыОбновления, Отказ);
	
	Если Отказ Тогда
		Возврат СбисИсключение(РезультатЧтения, "СбисПроверитьНаличиеОбновленияОбработки");
	КонецЕсли;
	
	//Читаем информацию о обновлении
	Попытка
		сбисВерсияНаСервере = Новый ЧтениеТекста(сбисПараметрыОбновления.ИмяФайла);
		сбисВерсияНаСервере = сбисВерсияНаСервере.ПрочитатьСтроку();
		Если Не ЗначениеЗаполнено(сбисВерсияНаСервере) Тогда
			сбисВерсияНаСервере = "0";
		КонецЕсли;
	Исключение
		//Не удалось прочитать версию на сервере
		Возврат Неопределено;
	КонецПопытки;
	//Сравниваем версии
	Если Не ЭтоНоваяВерсия(сбисВерсияНаСервере, Кэш.ПараметрыСистемы.Обработка.Версия) Тогда
		лРежимЗапуска = ПараметрыОбновления;
		Если	лРежимЗапуска.Свойство("Режим", лРежимЗапуска)
			И	лРежимЗапуска = "Ручной" Тогда
			Возврат "Обновление не требуется.";
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	//Предлагаем обновить	
	лРежимДиалога = РежимДиалогаВопрос.ДаНет;
	лТекстДиалога = "Обнаружена новая версия обработки " + сбисВерсияНаСервере + ", текущая версия " + Кэш.ПараметрыСистемы.Обработка.Версия + ". Обновить?";
	сбисПараметрыОбновления.Вставить("Кэш",	Кэш);
	сбисПараметрыОбновления.Вставить("Версия", сбисВерсияНаСервере);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		лОтвет = Вопрос(лТекстДиалога, лРежимДиалога, 0);
		ОбновитьОбработкуНаНовуюВерсию(лОтвет, сбисПараметрыОбновления);
	#Иначе
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьОбработкуНаНовуюВерсию", ЭтаФорма, сбисПараметрыОбновления), лТекстДиалога, лРежимДиалога, 0);
	#КонецЕсли
	Возврат Неопределено;
КонецФункции

//При изменении версии внешней обработки со старой на новую
&НаКлиенте
Процедура СбисДействияПриОбновленииВерсии(Кэш, СтараяВерсия, НоваяВерсия, Отказ) Экспорт
	Кэш.ОбщиеФункции.сбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, Новый Структура("Действие", "Обновление"), Ложь);
	Если НоваяВерсия = "2.40.1" Тогда
		//Установить переключатель автообновления файлов настроек
		Если Кэш.Парам.СпособХраненияНастроек = 0 Тогда
			Кэш.ФормаНастроек.АвтообновлениеПриИзменении(Кэш, Истина);
		КонецЕсли;
	ИначеЕсли НоваяВерсия = "2.41" Тогда
		Кэш.ГлавноеОкно.ЧтениеНастроекПоТребованию = Истина;
		Кэш.Парам.ЧтениеНастроекПоТребованию = Истина;
	КонецЕсли;
КонецПроцедуры

///////////////////Транспорт файлов/////////////////

//Функция выполняет копирование файлов 
&НаКлиенте
Функция СбисСкопироватьФайлы(Кэш, СбисПараметрыКопирования, Отказ) Экспорт
	Перем ПолныйПутьОткуда,ПолныйПутьКуда;
	КопированиеНаСервер = Ложь;
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		Если	СбисПараметрыКопирования.Свойство("НаСервер")
			И	СбисПараметрыКопирования.НаСервер Тогда
			КопированиеНаСервер = Истина;
		КонецЕсли;
	#КонецЕсли
	Для Каждого СбисФайл Из СбисПараметрыКопирования.Файлы Цикл
		Если Не СбисФайл.Свойство("ИмяФайлаОткуда", ПолныйПутьОткуда) Тогда
			ПолныйПутьОткуда= сбисФорматКаталога(СбисФайл.ПутьОткуда,	Кэш.ПараметрыСистемы.Клиент) + сбисФайл.ИмяФайла;
		КонецЕсли;
		Если Не СбисФайл.Свойство("ИмяФайлаКуда", ПолныйПутьКуда) Тогда
			ПолныйПутьКуда	= сбисФорматКаталога(СбисФайл.ПутьКуда,		Кэш.ПараметрыСистемы.Клиент) + сбисФайл.ИмяФайла;
		КонецЕсли;
		Если КопированиеНаСервер Тогда
			сбисФайл.Вставить("ПолныйПутьОткуда",	ПолныйПутьОткуда);
			сбисФайл.Вставить("ПолныйПутьКуда",		ПолныйПутьКуда);
			сбисФайл.Вставить("Адрес",				ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолныйПутьОткуда), ЭтаФорма.УникальныйИдентификатор));
		Иначе
			сбисФайлТест = Новый Файл(сбисФайл.ПутьКуда);
			Если Не сбисФайлТест.Существует() Тогда
				Попытка
					СоздатьКаталог(сбисФайл.ПутьКуда);
				Исключение
					Отказ = Истина;
					Возврат сбисИсключение(,"ОбщиеФункции.сбисСкопироватьФайлы", 772, "Ошибка работы с файловой системой", ОписаниеОшибки(), сбисПараметрыКопирования);
				КонецПопытки;
			КонецЕсли;
			Попытка
				Если сбисПараметрыКопирования.ОчиститьПослеПереноса Тогда
					ПереместитьФайл(ПолныйПутьОткуда, ПолныйПутьКуда);
				Иначе
					КопироватьФайл(ПолныйПутьОткуда, ПолныйПутьКуда);
				КонецЕсли;
			Исключение
				Отказ = Истина;
				Возврат сбисИсключение(,"ОбщиеФункции.сбисСкопироватьФайлы", 772, "Ошибка работы с файловой системой", ОписаниеОшибки(), сбисПараметрыКопирования);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Если КопированиеНаСервер Тогда
		РезультатЗаписи = сбисСохранитьФайлыНаСервере(сбисПараметрыКопирования, Отказ);
		Если Отказ Тогда
			Возврат  сбисИсключение(РезультатЗаписи, "ОбщиеФункции.сбисСохранитьФайлыНаСервере");
		КонецЕсли;
	КонецЕсли;
	Если	сбисПараметрыКопирования.ОчиститьПослеПереноса
		И	КопированиеНаСервер Тогда
		Для Каждого сбисФайл Из сбисПараметрыКопирования.Файлы Цикл
			Попытка
				УдалитьФайлы(сбисФайл.ПолныйПутьОткуда);
			Исключение
				Отказ = Истина;
				Возврат сбисИсключение(,"ОбщиеФункции.сбисСкопироватьФайлы", 772, "Ошибка работы с файловой системой", "Ошибка удаления исходного файла " + сбисФайл.ПолныйПутьОткуда + ". Детально: " + ИнформацияОбОшибке().Описание, сбисПараметрыКопирования);
				//Не удалось удалить исходный файл.
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

//Сохраняет подготовленные файлы на сервере
&НаСервере
Функция сбисСохранитьФайлыНаСервере(Знач сбисПараметрыКопирования, Отказ)
	
	Для Каждого сбисФайл Из сбисПараметрыКопирования.Файлы Цикл
		сбисФайлТест = Новый Файл(сбисФайл.ПутьКуда);
		Если Не сбисФайлТест.Существует() Тогда
			Попытка
				СоздатьКаталог(сбисФайл.ПутьКуда);
			Исключение
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой", ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		Попытка
			сбисДанныеФайла = ПолучитьИзВременногоХранилища(сбисФайл.Адрес);
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,message,details",777, "Вложения не найдены", ОписаниеОшибки());
		КонецПопытки;
		Попытка
			сбисДанныеФайла.Записать(сбисФайл.ПолныйПутьКуда);
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,message,details",772, "Ошибка работы с файловой системой", ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

//Просто возвращает путь к каталогу временных файлов на сервере
&НаСервереБезКонтекста
Функция сбисКаталогВременныхФайловНаСервере() Экспорт
	Возврат КаталогВременныхФайлов();
КонецФункции

/////////////////Списочные методы///////////////////

//Получает список документов определенного типа с online.sbis.ru	
&НаКлиенте
Функция сбисПолучитьСписокЗадач(Кэш) Экспорт
	Отказ						= Ложь;
	ГлавноеОкно					= Кэш.ГлавноеОкно;
	Выборка						= Неопределено;
	СтруктураДляОбновленияФормы = Новый Структура("Таблица_РеестрСобытий");
	
	ГлавноеОкно.сбисПоказатьСостояние("Получение данных с " + Кэш.Сбис.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно);
	ГлавноеОкно.ОтметитьВсе = Ложь;
	
	filter		= ПолучитьФильтрЗадач(Кэш);
	Результат	= Кэш.Интеграция.сбисПолучитьСписокЗадач(Кэш, filter, Отказ);
	Если Отказ Тогда
		ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
		ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, Результат);
		Возврат СтруктураДляОбновленияФормы;
	ИначеЕсли	Не Результат.Свойство("Навигация")
		Или	Не Результат.Свойство("Реестр", Выборка) Тогда
		Возврат СтруктураДляОбновленияФормы;
	КонецЕсли;
	
	ГлавноеОкно.ФильтрСтраница = Число(Результат.Навигация.Страница) + 1;
	ГлавноеОкно.ФильтрЕстьЕще = Результат.Навигация.ЕстьЕще;
	
	Размер	= Выборка.Количество();
	
	МассивДокументов		= Новый Массив;	
	МассивИдентификаторов	= Новый Массив;
	Для сч = 0 По Размер - 1 Цикл
		ГлавноеОкно.сбисПоказатьСостояние("Получение данных с " + Кэш.Сбис.ПараметрыИнтеграции.ПредставлениеСервера, ГлавноеОкно, Мин(100,Окр((сч+1)*100/Размер)));
		
		оДокумент = Выборка[сч].Документ;     
		
		НоваяСтр = Новый Структура;
		//НоваяСтр.Вставить("Статус",			Кэш.ОбщиеФункции.сбисИндексКартинкиПоСтатусуЭД(оДокумент.Состояние.Название));//???
		НоваяСтр.Вставить("Дата",			оДокумент.Дата);
		НоваяСтр.Вставить("Номер",			оДокумент.Номер);
		НоваяСтр.Вставить("ИдСБИС", 		оДокумент.Идентификатор);
		НоваяСтр.Вставить("Контрагент",		оДокумент.Контрагент.Название);
		НоваяСтр.Вставить("НашаОрганизация",оДокумент.НашаОрганизация.Название);
		
		Вложения		= "";
		счВложений		= 0;
		МассивВложений	= Новый	Массив;
		МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения", НоваяСтр.ИдСБИС, НоваяСтр.ИдСБИС));
		Для Каждого Элемент Из оДокумент.Вложение Цикл
			НазваниеВложения = Элемент.Название;
			Если Элемент.Служебный = "Да" Тогда
				Продолжить;
			КонецЕсли;
			ИдВложения = Неопределено;
			Если Не Элемент.Свойство("Идентификатор", ИдВложения) Тогда
				Продолжить;
			КонецЕсли;
			
			счВложений = счВложений + 1;
			Если счВложений < 3 Тогда
				Вложения = Вложения +НазваниеВложения+Символы.ПС;
			ИначеЕсли счВложений = 3 Тогда
				Вложения = Вложения + "..."+Символы.ПС;					
			КонецЕсли;
			МассивИдентификаторов.Добавить(Новый Структура("Ид, ИдВложения", НоваяСтр.ИдСБИС, ИдВложения));
			МассивВложений.Добавить(Новый Структура("Служебный,			Название,			Направление,	Идентификатор",
			Элемент.Служебный,	НазваниеВложения,	"Входящий",		ИдВложения));
		КонецЦикла;
		Если Не ЗначениеЗаполнено(Вложения) Тогда
			Вложения = оДокумент.Название;
		КонецЕсли;
		НоваяСтр.Вставить("Вложения",	Вложения);
		НоваяСтр.Вставить("Документы1С",Новый СписокЗначений);
		
		ВложениеСостав	= Новый	Структура("ИмяСБИС");
		ВложениеСостав.Вставить("Идентификатор",			НоваяСтр.ИдСБИС);
		ВложениеСостав.Вставить("Вложение",					МассивВложений);
		ВложениеСостав.Вставить("Название",					оДокумент.Название);
		ВложениеСостав.Вставить("СсылкаДляНашаОрганизация",	оДокумент.СсылкаДляНашаОрганизация);
		ВложениеСостав.Вставить("ИдСБИС",					оДокумент.ИдСБИС);
		ВложениеСостав.Вставить("ТекстЗадачи",				"");
		//TODO42 спилить проверку, всегда брать из оДокумент
		оДокумент.Свойство("ИмяСБИС", ВложениеСостав.ИмяСБИС);
		//ВложениеСостав.Вставить("ТекстЗадачи",				оДокумент.taskDescription);???
		
		СоставПакета	= Новый СписокЗначений;
		СоставПакета.Вставить(0,ВложениеСостав);
		НоваяСтр.Вставить("СоставПакета",	СоставПакета); // нельзя положить сразу структуру, поэтому кладем ее в нулевой элемент списка
		НоваяСтр.Вставить("ТекущийЭтап", 	оДокумент.Этап.Название);
		
		НоваяСтр.Вставить("Комментарий",	оДокумент.Примечание);
		НоваяСтр.Вставить("Проведен",		-1);
		МассивДокументов.Добавить(НоваяСтр);
	КонецЦикла;
	Если МассивИдентификаторов.Количество()>0 Тогда
		фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьТаблицуДокументов1СПоИдВложенияСБИС",Кэш.ФормаРаботыСоСтатусами,"",Кэш);
		фрм.ПолучитьТаблицуДокументов1СПоИдВложенияСБИС(МассивДокументов, МассивИдентификаторов, Кэш.Ини.Конфигурация, ГлавноеОкно.КаталогНастроек);
	КонецЕсли;
	ГлавноеОкно.сбисСпрятатьСостояние(ГлавноеОкно);
	СтруктураДляОбновленияФормы.Вставить("Таблица_РеестрСобытий", МассивДокументов);
	Возврат СтруктураДляОбновленияФормы;
КонецФункции

&НаКлиенте
Функция ПолучитьФильтрЗадач(Кэш, ДопПараметры=Неопределено) Экспорт
	// Формирует структуру фильтра для списочных методов SDK	
	Фильтр = Новый Структура; 
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		ЗначениеФильтраПериод	= Кэш.ГлавноеОкно.ФильтрПериод;
	Иначе
		ЗначениеФильтраПериод	= Кэш.ГлавноеОкно.ЭлементыФормы.ФильтрПериод.СписокВыбора.НайтиПоЗначению(Кэш.ГлавноеОкно.ФильтрПериод).Представление;
	КонецЕсли;
	Если Не ЗначениеФильтраПериод = "За весь период" Тогда
		Если ЗначениеЗаполнено(Кэш.ГлавноеОкно.ФильтрДатаКнц) Тогда
			Фильтр.Вставить("ДатаПо", Формат(Кэш.ГлавноеОкно.ФильтрДатаКнц, "ДФ=""гггг-ММ-дд"""));
		Иначе
			Фильтр.Вставить("ДатаПо", Формат(ТекущаяДата(),"ДФ=""гггг-ММ-дд"""));
		КонецЕсли;
		Если ЗначениеЗаполнено(Кэш.ГлавноеОкно.ФильтрДатаНач) Тогда
			Фильтр.Вставить("ДатаС", Формат(Кэш.ГлавноеОкно.ФильтрДатаНач, "ДФ=""гггг-ММ-дд"""));
		Иначе
			Фильтр.Вставить("ДатаС", Формат('00010102',"ДФ=""гггг-ММ-дд"""));
		КонецЕсли;
	КонецЕсли;
	Фильтр.Вставить("Тип", Кэш.Текущий.ТипДок);
	//Если ГлавноеОкно.СписокСостояний.Количество()>0 и ГлавноеОкно.ФильтрСостояние<>ГлавноеОкно.СписокСостояний.НайтиПоИдентификатору(0).Значение Тогда
	//	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПолучитьСоответствиеЗначенийФильтра","Раздел_"+"Задачи"+"_"+"Задачи","Раздел_"+"Задачи"+"_Шаблон", ГлавноеОкно.Кэш);	
	//	СоответствиеЗначенийФильтра = фрм.ПолучитьСоответствиеЗначенийФильтра();
	//	Фильтр.Вставить( "ФильтрСостояние", СоответствиеЗначенийФильтра.НайтиПоЗначению(ГлавноеОкно.ФильтрСостояние).Представление ); 
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрОрганизация) Тогда
	//	org = Новый Структура; 
	//	Если СтрДлина(СокрЛП(ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН"))) = 12 Тогда
	//		СвФЛ = Новый Структура;
	//		СвФЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
	//		org.Вставить( "СвФЛ", СвФЛ );	
	//	Иначе
	//		СвЮЛ = Новый Структура;
	//		СвЮЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "ИНН") ); 
	//		СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрОрганизация, "КПП") );
	//		org.Вставить( "СвЮЛ", СвЮЛ );
	//	КонецЕсли;
	//	Фильтр.Вставить( "ДокументНашаОрганизация", org ); 
	//КонецЕсли;
	//Если ЗначениеЗаполнено(ГлавноеОкно.ФильтрКонтрагент) Тогда
	//	kontr = Новый Структура; 
	//	ИННКонтр = ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН");
	//	Если ТипЗнч(ИННКонтр)=Тип("Строка") Тогда // если выбрана папка контрагентов, то ИНН получается NaN
	//		Если СтрДлина(СокрЛП(ИННКонтр)) = 12 Тогда
	//			СвФЛ = Новый Структура;
	//			СвФЛ.Вставить( "ИНН", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "ИНН") ); 
	//			kontr.Вставить( "СвФЛ", СвФЛ );	
	//		Иначе
	//			СвЮЛ = Новый Структура;
	//			СвЮЛ.Вставить( "ИНН", ИННКонтр ); 
	//			СвЮЛ.Вставить( "КПП", ПолучитьРеквизитОбъекта(ГлавноеОкно.ФильтрКонтрагент, "КПП") );
	//			kontr.Вставить( "СвЮЛ", СвЮЛ );
	//		КонецЕсли;
	//		Фильтр.Вставить( "Отправитель", kontr );
	//	КонецЕсли;
	//КонецЕсли;
	//a.v. matyakin
	Если ЗначениеЗаполнено(Кэш.ГлавноеОкно.ФильтрМаска) Тогда
		Фильтр.Вставить("ФильтрПоМаске", Кэш.ГлавноеОкно.ФильтрМаска); 
	КонецЕсли;
	//
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		Для Каждого Элемент Из ДопПараметры Цикл
			Фильтр.Вставить( Элемент.Ключ, Элемент.Значение );	
		КонецЦикла;
	КонецЕсли;
	//ДопПоля, Фильтр, Сортировка, Навигация	
	navigation = Новый Структура; 
	navigation.Вставить("РазмерСтраницы",	Кэш.ГлавноеОкно.ЗаписейНаСтранице ); 
	navigation.Вставить("Страница",			Кэш.ГлавноеОкно.ФильтрСтраница-1 ); 
	
	Фильтр.Вставить("ДопПоля",		Новый Массив);
	Фильтр.Вставить("Сортировка",	Новый Массив);
	Фильтр.Вставить("Навигация",	navigation);
	//Результат.Добавить(Новый	Массив);
	//Результат.Добавить(filter);	
	//Результат.Добавить(Новый	Массив);
	//Результат.Добавить(navigation);
	
	Возврат Фильтр;	
КонецФункции

////////////////////////Печать//////////////////////

&НаКлиенте
Функция СбисПечатьДокументов(ОбъектыПечати, ПараметрыПечати) Экспорт
	Если ПараметрыПечати.ВФоне Тогда
		Кэш = ПараметрыПечати.Кэш;
		Если МестныйКэш.ПараметрыСистемы.Клиент.ЭтоLinux Тогда
			Сообщить("Печать не поддерживается на ОС Linux.");
		КонецЕсли;
		Попытка
			Shell = Новый COMОбъект("Shell.Application");
		Исключение
			Возврат Неопределено
		КонецПопытки;
		Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
			Если ОбъектПечати.Тип = "Файл" Тогда
				Shell.ShellExecute(ОбъектПечати.Путь, "", "", "print", 0);
			КонецЕсли;
			МестныйКэш.ТекущийСеанс.ВременныеФайлы.Файлы.Получить(ОбъектПечати.Путь).Освободить = Истина;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьВложенияПакетовНаПечать(СписокПакетов, ПараметрыПечати) Экспорт
	Кэш = ПараметрыПечати.Кэш;
	СписокДляВыбора = Новый СписокЗначений;
	Для Каждого СбисПакет Из СписокПакетов Цикл
		лСоставПакета = СбисПакет.Значение.СоставПакета;
		Если ТипЗнч(лСоставПакета) = Тип("СписокЗначений") Тогда
			Для Каждого СоставПакета Из лСоставПакета Цикл
				ЗаполнитьВложенияИзСоставаПакетаНаПечать(СписокДляВыбора, СоставПакета.Значение)
			КонецЦикла;
		Иначе
			ЗаполнитьВложенияИзСоставаПакетаНаПечать(СписокДляВыбора, лСоставПакета)
		КонецЕсли;
	КонецЦикла;
	Возврат СписокДляВыбора;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВложенияИзСоставаПакетаНаПечать(СписокДляВыбора, СоставПакета)
	Если Не СоставПакета.Свойство("Вложение") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ВложениеПакета Из СоставПакета.Вложение Цикл
		//Пока вызов только для вложений, для которых можно получить PDF преставление с online
		Если	ВложениеПакета.Свойство("СсылкаНаPDF")
			И	ЗначениеЗаполнено(ВложениеПакета.СсылкаНаPDF) Тогда
			СписокДляВыбора.Добавить(ВложениеПакета, ВложениеПакета.Название, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СбисМассоваяПечать(ОбъектыПечати, ДополнительныеПараметры) Экспорт
	Кэш = ДополнительныеПараметры.Кэш;
	Результат = РезультатДействия_Новый(Кэш, Новый Структура("ПредставлениеОперации, ФормаВызова", "МассоваяПечать", ДополнительныеПараметры.ФормаВызова));
	Если		ОбъектыПечати = Неопределено
		Или	Не	ДополнительныеПараметры.ВФоне Тогда//Пока просто заглушка 
		Возврат Неопределено;
	ИначеЕсли Кэш.ПараметрыСистемы.Клиент.ЭтоLinux Тогда
		Сообщить("Печать не поддерживается на ОС Linux.");
		Возврат Неопределено;
	КонецЕсли;
	СбисОписаниеОбъекта = Новый Структура("Тип, Ключ, Значение", "ComObject", "Shell.Application");
	СбисОписаниеОбъекта.Значение = СбисПолучитьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
	Если СбисОписаниеОбъекта.Значение = Неопределено Тогда
		Попытка
			СбисОписаниеОбъекта.Значение = Новый COMОбъект(СбисОписаниеОбъекта.Ключ);
			СбисЗакэшироватьЗначениеРассчитанногоОбъекта(Кэш, СбисОписаниеОбъекта);
		Исключение
			СбисОшибка = СбисИсключение(,"Shell.Application",,,ОписаниеОшибки());
			СтрокаДетализации = РезультатДействия_СформироватьСтрокуДетализации(Кэш, "Подготовка");
			РезультатДействия_ДобавитьОшибку(Кэш, Результат, СтрокаДетализации, СбисОшибка, Новый Структура("ТипОшибки", "Подготовка"));
			Возврат Результат;
		КонецПопытки;
	КонецЕсли;
	Shell = СбисОписаниеОбъекта.Значение;
	ПараметрыЗапросаФайла = Новый Структура("Протокол,Сервер,ИмяФайла,URLПолный","https");
	ПараметрыЗапросаФайла.Сервер = СтрПолучитьСтроку(СтрЗаменить(Кэш.Парам.АдресСервера, "//", Символы.ПС), 2);
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		СтрокаРезультат = РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ВыполнитьДействие");
		СтрокаРезультат.Название = ОбъектПечати.Представление;
		ПараметрыЗапросаФайла.ИмяФайла	= СбисПолучитьИмяВременногоФайлаКлиент("pdf");
		ПараметрыЗапросаФайла.URLПолный	= ОбъектПечати.Значение.СсылкаНаPDF;
		ОшибкаСкачки = Ложь;
		РезультатЗаписи = Кэш.Интеграция.СбисСохранитьВФайлПоСсылке(Кэш, ПараметрыЗапросаФайла, ОшибкаСкачки);
		Если ОшибкаСкачки Тогда
			РезультатДействия_ДобавитьОшибку(Кэш, Результат, СтрокаРезультат, РезультатЗаписи);
			Продолжить;
		КонецЕсли;
		Попытка
			Shell.ShellExecute(ПараметрыЗапросаФайла.ИмяФайла, "", "", "print", 0);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		МестныйКэш.ТекущийСеанс.ВременныеФайлы.Файлы.Получить(ПараметрыЗапросаФайла.ИмяФайла).Освободить = Истина;
		РезультатДействия_ДобавитьРезультат(Кэш, Результат, СтрокаРезультат, Новый Структура("Выполнено, КлючГруппировки", Истина, "Отправлен на печать"));
	КонецЦикла;
	Возврат Результат;
КонецФункции

////////////////////////Разное//////////////////////
//Функция заменяет в строке недопустимые символы для имени поля структуры
&НаКлиенте
Функция сбисЗаменитьНедопустимыеСимволы(СтрГдеЗаменить) Экспорт
	Возврат	СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрГдеЗаменить,".","_"), " ", ""),"-", "_");
КонецФункции
//Функция проверяет регламент из состава пакета и возвращает ключ подходящего мДокумента.
&НаКлиенте
Функция ОпределитьМДокументПоРегламенту(Контекст) Экспорт
	Кэш			= Контекст.Кэш;
	Ини			= Контекст.Ини;
	Вложение	= Контекст.Вложение;
	СоставПакета= Контекст.СоставПакета;
	
	Регламент_Пакет				= Неопределено;
	мДокументРезультат_Ключ		= Неопределено;
	мДокументРезультат_Дефолт	= Неопределено;
	//Получим регламент пакета
	Если	СоставПакета.Свойство("Регламент", Регламент_Пакет)
		И	Регламент_Пакет.Свойство("Название", Регламент_Пакет) Тогда
		Регламент_Пакет = СтрЗаменить(Регламент_Пакет, "'", "");
	КонецЕсли;
	
	//Проверим наличие такого регламента с списке мДокумент, если нет определим по-умолчанию
	Для Каждого КлючИЗначение Из Ини.мДокумент Цикл
		мДокумент_Ключ		= КлючИЗначение.Ключ;
		мДокумент_Значение	= КлючИЗначение.Значение;
		мДокумент_Регламент	= Неопределено;
		Если ЗначениеЗаполнено(Регламент_Пакет) Тогда//Проверяем регламент если он есть. Если нет, берём по-умолчанию
			Если	мДокумент_Значение.Свойство("РеестрСБИС_Операция", мДокумент_Регламент)
				И	мДокумент_Регламент.Свойство("Значение", мДокумент_Регламент) Тогда
				мДокумент_Регламент = СтрЗаменить(мДокумент_Регламент, "'", "");
			КонецЕсли;
			Если мДокумент_Регламент = Регламент_Пакет Тогда
				мДокументРезультат_Ключ = мДокумент_Ключ;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		//По-дефолту берем первый мДокумент, или если есть, то с узлом "ДокументПоУмолчанию"
		Если    мДокументРезультат_Дефолт = Неопределено
			Или(	мДокумент_Значение.Свойство("ДокументПоУмолчанию", мДокумент_Регламент)
			И	мДокумент_Регламент.Свойство("Значение", мДокумент_Регламент)
			И	мДокумент_Регламент = "1") Тогда
			мДокументРезультат_Дефолт = мДокумент_Ключ;
		КонецЕсли;		
	КонецЦикла;
	Результат = Новый Структура("Ключ", мДокументРезультат_Ключ);
	Если Не ЗначениеЗаполнено(Результат.Ключ) Тогда
		Результат.Ключ = мДокументРезультат_Дефолт;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция сбисЗаписатьФайл_Клиент(Кэш, сбисОписаниеФайла, Отказ) Экспорт
	РасширениеФайла	= Неопределено;
	ПутьФайла 		= Неопределено;
	ИмяФайла		= Неопределено;
	КодировкаФайла	= Неопределено;
	Если Не сбисОписаниеФайла.Свойство("Расширение", РасширениеФайла) Тогда
		РасширениеФайла	= "txt";
	КонецЕсли;
	Если Не сбисОписаниеФайла.Свойство("Путь", ПутьФайла) Тогда
		ПутьФайла		= КаталогВременныхФайлов();
	Иначе
		Попытка
			СоздатьКаталог(ПутьФайла);
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой", "Не удалось создать каталог по пути " + ПутьФайла + ". Детально: " + ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЕсли;
	Если Не сбисОписаниеФайла.Свойство("Имя", ИмяФайла) Тогда
		ИмяФайла		= "tmp_file";
	КонецЕсли;
	Если Не сбисОписаниеФайла.Свойство("Кодировка", КодировкаФайла) Тогда
		КодировкаФайла	= "windows-1251";
	КонецЕсли;
	Результат = Новый Структура;
	Результат.Вставить("Имя",		ИмяФайла + "." + РасширениеФайла);
	Результат.Вставить("ПолноеИмя",	ПутьФайла + Результат.Имя);
	//Пока запишем только как тест
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(сбисОписаниеФайла.Данные);
	Попытка
		ТекстДок.Записать(Результат.ПолноеИмя, КодировкаФайла);
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 772, "Ошибка работы с файловой системой", "Не удалось записать " + Результат.ПолноеИмя + ". Детально: " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
	Возврат Результат;
КонецФункции

//Функция сортирует объект. Возвращает поверхностную(ОФ) отсортированную копию объекта, если он не пуст.
//Пример структуры параметров: {"ПараметрыСортировки": [{"Поле": "Ключ объекта, по которому сортируем", "Направление": "Направление сортировки(Возр/Убыв)"}]}
&НаСервереБезКонтекста
Функция сбисОтсортироватьОбъект(Знач ОбъектКСортировке, Знач ПараметрыСортировки, Отказ) Экспорт
	
	Если Не ОбъектКСортировке.Количество() Тогда
		Возврат ОбъектКСортировке;
	КонецЕсли;
	Результат			= Неопределено;
	ТипОбъект			= Неопределено;
	СтрокаСортировки	= "";
	ТаблицаСортировки	= Новый ТаблицаЗначений;
	ТаблицаСортировки.Колонки.Добавить("Значение_Сортировки");
	//Определим тип результата
	Если		ТипЗнч(ОбъектКСортировке) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений;
		ТипОбъект = "Список";
	ИначеЕсли   ТипЗнч(ОбъектКСортировке) = Тип("Массив") Тогда
		ТипОбъект = "Массив";
	КонецЕсли;
	//Определим строку сортировки для таблицы, 
	Для Каждого ПолеСортировки Из ПараметрыСортировки.ПоляСортировки Цикл
		СтрокаСортировки = СтрокаСортировки + ?(ПустаяСтрока(СтрокаСортировки), "", ", ") + ПолеСортировки.Поле + ?(ПолеСортировки.Свойство("Направление"), " " + ПолеСортировки.Направление, "");
		ТаблицаСортировки.Колонки.Добавить(ПолеСортировки.Поле);
	КонецЦикла;
	//Заполним поля, по которым проводится сортировка
	Для Каждого ЭлементСортировки Из ОбъектКСортировке Цикл
		ЭлементЗаполнить = ЭлементСортировки;
		Если ТипОбъект = "Список" Или ТипЗнч(ЭлементСортировки) = Тип("КлючИЗначение") Тогда
			ЭлементЗаполнить = ЭлементЗаполнить.Значение;
		КонецЕсли;
		НоваяСтрока = ТаблицаСортировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементЗаполнить);
		НоваяСтрока.Значение_Сортировки = ЭлементСортировки;
	КонецЦикла;
	ТаблицаСортировки.Сортировать(СтрокаСортировки);
	
	//Формируем результат
	КолонкаСортировки = ТаблицаСортировки.ВыгрузитьКолонку("Значение_Сортировки");
	Если ТипОбъект = "Массив" Тогда
		Результат = КолонкаСортировки;
	Иначе
		Для Каждого ЭлементСортировки Из КолонкаСортировки Цикл
			Если ТипОбъект = "Список" Тогда
				Результат.Добавить(ЭлементСортировки.Значение, ЭлементСортировки.Представление, ЭлементСортировки.Пометка, ЭлементСортировки.Картинка);
			Иначе
				Результат.Добавить(ЭлементСортировки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция возвращает элемент по пути
&НаКлиенте
Функция СбисПолучитьЭлементФормы(Кэш, ОтЭлемента = Неопределено, СбисПутьЭлемента) Экспорт
	ИмяЭлементаРазбивка = СтрЗаменить(СбисПутьЭлемента, ".", Символы.ПС);
	СчетчикРазбивки = 1;
	Если ОтЭлемента = Неопределено Тогда
		Результат = Кэш.ГлавноеОкно;
	Иначе
		Результат = ОтЭлемента;
	КонецЕсли;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ТипЗнч(Результат) = Тип("Форма") Тогда
			Результат = Результат.ЭлементыФормы;
		КонецЕсли;
	#Иначе
		Если ТипЗнч(Результат) = Тип("УправляемаяФорма") Тогда
			Результат = Результат.Элементы.Найти(СтрПолучитьСтроку(ИмяЭлементаРазбивка, 1));
			СчетчикРазбивки = СчетчикРазбивки + 1;
		КонецЕсли;
	#КонецЕсли
	Для СчетчикРазбивки = СчетчикРазбивки По СтрЧислоСтрок(ИмяЭлементаРазбивка) Цикл
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		КлючПути = СтрПолучитьСтроку(ИмяЭлементаРазбивка, СчетчикРазбивки);
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если	ТипЗнч(Результат) = Тип("ТаблицаЗначений")
				Или	ТипЗнч(Результат) = Тип("ТабличноеПоле") Тогда
				Результат = Результат["Колонки"];
			ИначеЕсли ТипЗнч(Результат) = Тип("Панель") Тогда
				Результат = Результат["Страницы"];
			ИначеЕсли  ТипЗнч(Результат) = Тип("СтраницаПанели") Тогда
				Если ОтЭлемента = Неопределено Тогда
					Результат = Кэш.ГлавноеОкно.ЭлементыФормы;
				ИначеЕсли ТипЗнч(ОтЭлемента) = Тип("Форма") Тогда
					Результат = ОтЭлемента.ЭлементыФормы;
				Иначе
					Результат = ОтЭлемента;
				КонецЕсли;
			КонецЕсли;
		#Иначе	
			Результат = Результат["ПодчиненныеЭлементы"];
		#КонецЕсли
		Если КлючПути = "Страницы" Тогда
			Продолжить;
		КонецЕсли;
		Результат = Результат.Найти(КлючПути);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

//Процедура копирует структуру в контексте сервера. Использовать ТОЛЬКО для серверных функций и процедур	
&НаСервереБезКонтекста
Процедура сбисСкопироватьСтруктуру(СтруктураКуда, Знач СтруктураОткуда)  Экспорт
	СбисСкопироватьСтруктуруСПараметрами(СтруктураКуда, СтруктураОткуда, Новый Структура("КлючиНеКопировать", Новый Массив));
КонецПроцедуры

//Процедура копирует структуру в контексте сервера. Использовать ТОЛЬКО для серверных функций и процедур	
&НаСервереБезКонтекста
Процедура СбисСкопироватьСтруктуруСПараметрами(СтруктураКуда, Знач СтруктураОткуда, Знач ДопПараметры)
	Если ТипЗнч(СтруктураОткуда) =  Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если Не ДопПараметры.КлючиНеКопировать.Найти(Элемент.Ключ) = Неопределено Тогда
			Если Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
				СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
			Иначе
				СтруктураКуда[Элемент.Ключ] = Элемент.Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			сбисСкопироватьСтруктуру(СтруктураКуда[Элемент.Ключ], Элемент.Значение);
		ИначеЕсли ТипЗнч(Элемент.Значение) =  Тип("Массив") Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Массив);
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ПромежуточнаяСтруктура = Новый Структура;
				сбисСкопироватьСтруктуру(ПромежуточнаяСтруктура, ЭлементМассива);
				СтруктураКуда[Элемент.Ключ].Добавить(ПромежуточнаяСтруктура);
			КонецЦикла;
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Функция возвращает глубокую копию раздела ини без копии расчитанных значений. 
//Поддерживаемые составные типы: Структура, Массив.
//ДопПараметры: КлючиНеКопировать - массив ключей, значения которых не копируются, а переносятся как есть.
&НаСервереБезКонтекста
Функция СбисСкопироватьОбъектСПараметрами(Знач ОбъектНаВход, Знач ДопПараметры)
	Если ТипЗнч(ОбъектНаВход) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Для Каждого КлючИЗначение Из ОбъектНаВход Цикл
			Если ДопПараметры.КлючиНеКопировать.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
				Результат.Вставить(КлючИЗначение.Ключ, СбисСкопироватьОбъектСПараметрами(КлючИЗначение.Значение, ДопПараметры));
			Иначе
				Результат.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;	
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектНаВход) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Для Каждого ЭлементМассива Из ОбъектНаВход Цикл
			Результат.Добавить(СбисСкопироватьОбъектСПараметрами(ЭлементМассива, ДопПараметры));
		КонецЦикла;
	Иначе
		Результат = ОбъектНаВход;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция возвращает глубокую копию исходного объекта. Поддерживаемые составные типы: Структура, Массив.
&НаСервереБезКонтекста
Функция СбисСкопироватьОбъект(Знач ОбъектНаВход)  Экспорт
	ДопПараметры = Новый Структура("КлючиНеКопировать", Новый Массив);
	Возврат СбисСкопироватьОбъектСПараметрами(ОбъектНаВход, ДопПараметры);
КонецФункции

//Функция возвращает глубокую копию исходного объекта. Поддерживаемые составные типы: Структура, Массив.
&НаКлиенте
Функция сбисСкопироватьОбъектНаКлиенте(ОбъектНаВход)  Экспорт
	Если ТипЗнч(ОбъектНаВход) = Тип("Структура") Тогда
		Результат = Новый Структура;
		Для Каждого КлючИЗначение Из ОбъектНаВход Цикл
			Результат.Вставить(КлючИЗначение.Ключ, сбисСкопироватьОбъектНаКлиенте(КлючИЗначение.Значение));
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектНаВход) = Тип("Массив") Тогда
		Результат = Новый Массив;
		Для Каждого ЭлементМассива Из ОбъектНаВход Цикл
			Результат.Добавить(сбисСкопироватьОбъектНаКлиенте(ЭлементМассива));
		КонецЦикла;
	Иначе
		Результат = ОбъектНаВход;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// формирование титулов
&НаКлиенте
Функция сбисСформироватьТитулы(Кэш, СоставПакета, Действие, ДополнительныеПараметры, Отказ) Экспорт
	ДополнительныеПараметры.Вставить("Шифрование", Ложь);
	ЕстьРасхождения = СоставПакета.Свойство("ЕстьРасхождения");
	ДополнительныеПараметры.Вставить("ЕстьРасхождения", ЕстьРасхождения);
	Для Каждого Вложение Из СоставПакета.Вложение Цикл
		Зашифрован		= Вложение.Свойство("Зашифрован") И Вложение.Зашифрован = "Да";
		СбисТип			= Неопределено;
		СбисПодтип		= Неопределено;
		СбисВерсияФормат= Неопределено;
		Если Не	(	Вложение.Свойство("Тип", сбисТип)
			И	Вложение.Свойство("ВерсияФормата", СбисВерсияФормат)
			И	ЗначениеЗаполнено(СбисВерсияФормат)) Тогда
			//В случае неформализованных вложений будет пустая версия формата
			Продолжить;
		КонецЕсли;
		сбисДействие	= СбисФорматСтроки(Действие.Название,	"КлючСтруктуры");
		сбисТип			= СбисФорматСтроки(сбисТип,				"КлючСтруктуры");
		сбисВерсияФормат= СтрЗаменить(СтрЗаменить(сбисВерсияФормат, ".", "_"), " ", "");
		Если Вложение.Свойство("ПодТип", сбисПодтип) Тогда
			сбисПодтип = СтрЗаменить(сбисПодтип, " ", "");
		Иначе
			сбисПодтип = "";
		КонецЕсли;
		
		ИмяФункции = сбисДействие + "_" + сбисТип + "_" + сбисПодтип + "_" + сбисВерсияФормат;
		Если Зашифрован или ЕстьРасхождения Тогда
			ИмяОсновнойФормы = Кэш.ИнтеграцияИмя;
			ИмяВспомогательнойФормы = "";
			ДополнительныеПараметры.Шифрование = Зашифрован;
		Иначе
			ИмяОсновнойФормы = "Файл_Шаблон";
			ИмяВспомогательнойФормы = "Файл_" + сбисТип + "_" + сбисВерсияФормат;
		КонецЕсли;
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции, ИмяОсновнойФормы, ИмяВспомогательнойФормы, Кэш);
		Если фрм = Ложь Тогда
			Если Зашифрован Тогда
				//Если документ зашифрован, а титула нет, то проверим ошибка ли это: если есть обработчик ошибки, то вернём исключение.
				ИмяФункции = сбисДействие + "_" + сбисТип;
				фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ИмяФункции,ИмяОсновнойФормы,"",Кэш);
				Если фрм = Ложь Тогда
					Продолжить;
				КонецЕсли;				
				сбисТекст	= Вычислить("фрм." + ИмяФункции + "(Кэш, СоставПакета, Вложение, Действие, ДополнительныеПараметры)");
				сбисДамп	= Новый Структура("Действие", сбисСкопироватьОбъектНаКлиенте(Действие));
				Отказ		= Истина;
				Возврат сбисИсключение(, ИмяОсновнойФормы + "." + ИмяФункции, 610, "Отсутствует файл настроек для данного типа данных", сбисТекст, сбисДамп)
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Попытка
			сбисРезультат = Вычислить("фрм."+ИмяФункции+"(Кэш, СоставПакета, Вложение, Действие, ДополнительныеПараметры)");
		Исключение
			//Не удалось посчитать титул.
			Отказ = Истина;
			сбисДамп = Новый Структура("Действие", сбисСкопироватьОбъектНаКлиенте(Действие));
			Возврат сбисИсключение(, ?(ЗначениеЗаполнено(ИмяОсновнойФормы), ИмяОсновнойФормы, ИмяВспомогательнойФормы) + ".сбисСформироватьТитулы", 
			600, "Неизвестная ошибка настроек", ОписаниеОшибки(), сбисДамп)
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
КонецФункции

//Функция возвращает представление сертификата для формы ввода пинкода
&НаКлиенте
Функция СформироватьЗаголовокСертификатаДляФормыВвода(Кэш, Сертификат) Экспорт
	сбисСертификатИмя = СокращенноеФИО(Кэш, Сертификат.ФИО);
	Если Сертификат.Свойство("Должность") Тогда
		сбисСертификатИмя = сбисСертификатИмя + "(" + Сертификат.Должность + ")"
	КонецЕсли;
	сбисСертификатИмя = сбисСертификатИмя + ", "  + Сертификат.Название;
	Если Сертификат.Свойство("ИНН") Тогда
		сбисСертификатИмя = сбисСертификатИмя + "(ИНН " + Сертификат.ИНН + ")"
	КонецЕсли;
	Возврат сбисСертификатИмя;
КонецФункции

//UAA Убрал экспорт для серверной функции дабы избежать лишних вызовов при разработке внешних функций. Использовать РазбитьСтрокуВМассивНаКлиенте(). А ещё лучше сразу СтрЗаменить()
//Функция разбивает строку по разделителю в массив
&НаСервереБезКонтекста
Функция РазбитьСтрокуВМассив(Знач сбисСтрока, сбисРазделитель=".")
	Результат = Новый Массив();	
	МногоуровневаяСтрока = СтрЗаменить(сбисСтрока, сбисРазделитель, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(МногоуровневаяСтрока) Цикл 
		Результат.Добавить(СокрЛП(СтрПолучитьСтроку(МногоуровневаяСтрока, НомерСтроки)));
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Функция разбивает строку по разделителю в массив в контексте клиента
&НаКлиенте
Функция РазбитьСтрокуВМассивНаКлиенте(сбисСтрока, сбисРазделитель=".") Экспорт 
	Результат = Новый Массив();	
	МногоуровневаяСтрока = СтрЗаменить(сбисСтрока, сбисРазделитель, Символы.ПС);
	Для НомерСтроки = 1 По СтрЧислоСтрок(МногоуровневаяСтрока) Цикл 
		Результат.Добавить(СокрЛП(СтрПолучитьСтроку(МногоуровневаяСтрока, НомерСтроки)));
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Процедура дозаполняет структуру данными из другой структуры в контексте клиента	
&НаКлиенте
Процедура сбисСкопироватьСтруктуруНаКлиенте(СтруктураКуда, СтруктураОткуда)  Экспорт
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");
	Для Каждого Элемент Из СтруктураОткуда Цикл	
		Если ТипЗнч(СтруктураОткуда) = ТипМассив Тогда
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = ТипСтруктура Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Структура);
			сбисСкопироватьСтруктуруНаКлиенте(СтруктураКуда[Элемент.Ключ], Элемент.Значение);				
		ИначеЕсли ТипЗнч(Элемент.Значение) = ТипМассив Тогда
			СтруктураКуда.Вставить(Элемент.Ключ, Новый Массив);
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				ПромежуточнаяСтруктура = Новый Структура;
				сбисСкопироватьСтруктуруНаКлиенте(ПромежуточнаяСтруктура, ЭлементМассива);
				СтруктураКуда[Элемент.Ключ].Добавить(ПромежуточнаяСтруктура);
			КонецЦикла;
		ИначеЕсли Не СтруктураКуда.Свойство(Элемент.Ключ) Тогда
			СтруктураКуда.Вставить(Элемент.Ключ,Элемент.Значение);
		Иначе
			СтруктураКуда[Элемент.Ключ] = Элемент.Значение;			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//Возвращает полное имя файла обработки.
&НаСервере
Функция сбисПолноеИмяФайла(сбисПараметрыСистемы) Экспорт
	Если сбисПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		Возврат Вычислить("РеквизитФормыВЗначение(""Объект"")").ИспользуемоеИмяФайла;
	Иначе
		Возврат Вычислить("ИспользуемоеИмяФайла");
	КонецЕсли;	
КонецФункции

&НаКлиенте
Функция СбисТекущаяДатаВМиллисекундах(Кэш) Экспорт
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Используется только на обычных формах. Для поддержки 8.2 ниже 17 версии
		Возврат (ТекущаяДата() - '0001.01.01') * 1000 - 10800000;
	#Иначе
		Возврат ТекущаяУниверсальнаяДатаВМиллисекундах();
	#КонецЕсли
КонецФункции

&НаКлиенте
Функция СбисФорматРазделителя(ПараметрыКаталога) Экспорт
	Если ПараметрыКаталога.ЭтоLinux Тогда
		Возврат "/";
	КонецЕсли;
	Возврат "\";
КонецФункции

//Функция выполняет обработку строк в зависимости от режима
&НаКлиенте
Функция СбисФорматСтроки(СбисСтрока, Режим="", ФорматнаяСтрока="") Экспорт
	Если		Режим = "Убрать" Тогда
		СбисНоваяСтрока	= СбисСтрока;
		Для	шаг	= 1	По СтрДлина(ФорматнаяСтрока) Цикл
			СбисНоваяСтрока	= СтрЗаменить(СбисНоваяСтрока, Сред(ФорматнаяСтрока, шаг, 1), "");
		КонецЦикла;
	ИначеЕсли	Режим = "КлючСтруктуры" Тогда
		СбисНоваяСтрока = СбисФорматСтроки(СбисСтрока, "Убрать", "@/-?=\& ""'#№*(:|;).");
		Если Найти("0123456789", Лев(СбисНоваяСтрока, 1)) Тогда//Первый символ - число. Добавить префикс(в структуре ключ не может начинаться с числа)
			СбисНоваяСтрока = "_" + СбисНоваяСтрока;
		КонецЕсли;
	Иначе
		СбисНоваяСтрока = СбисСтрока;
	КонецЕсли;
	Возврат СбисНоваяСтрока;
КонецФункции

//Процедура завершает работу в СБИС
//Структура ошибки при отказе, Истина при успешном завершении
&НаКлиенте
Функция СбисЗавершениеРаботы(Кэш, Отказ) Экспорт
	Если Кэш.ТекущийСеанс.Свойство("ВременныеФайлы") Тогда 
		Кэш.ТекущийСеанс.ВременныеФайлы.Параметры.ВремяЖизни = 0;
		СбисОчиститьВременныеФайлы();
		ЭтаФорма.ОтключитьОбработчикОжидания("СбисОчиститьВременныеФайлы");
	КонецЕсли;
	МестныйКэш.Интеграция.Завершить(Кэш, Новый Структура, Отказ);
	Возврат Истина;
КонецФункции

//Очищалка для временных файлов
&НаКлиенте
Процедура СбисОчиститьВременныеФайлы() Экспорт
	Если Не МестныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы") Тогда
		Возврат;
	КонецЕсли;
	СбисВремяПроверки = ТекущаяДата();
	МассивФайловУдалены = Новый Массив;
	Для Каждого КлючИЗначение Из МестныйКэш.ТекущийСеанс.ВременныеФайлы.Файлы Цикл
		Если Не	КлючИЗначение.Значение.Освободить
			И	СбисВремяПроверки - КлючИЗначение.Значение.ВремяПолучения < МестныйКэш.ТекущийСеанс.ВременныеФайлы.Параметры.ВремяЖизни Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Файл = Новый Файл(КлючИЗначение.Ключ);
			Если Файл.Существует() Тогда
				УдалитьФайлы(КлючИЗначение.Ключ);
			КонецЕсли;
			МассивФайловУдалены.Добавить(КлючИЗначение.Ключ);
		Исключение
		КонецПопытки;
	КонецЦикла;
	Для Каждого ЭлементУдален Из МассивФайловУдалены Цикл
		МестныйКэш.ТекущийСеанс.ВременныеФайлы.Файлы.Удалить(ЭлементУдален);
	КонецЦикла;
	
	Если МестныйКэш.ТекущийСеанс.ВременныеФайлы.Файлы.Количество() Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("СбисОчиститьВременныеФайлы", 300, Истина);
	КонецЕсли;
КонецПроцедуры

//Создает временный файл. Подключает обработчик ожидания, который очищает файлы по истечении их срока жизни.
&НаКлиенте
Функция СбисПолучитьИмяВременногоФайлаКлиент(Расширение="tmp") Экспорт
	Перем СбисВременныеФайлы;
	Если НЕ МестныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы", СбисВременныеФайлы) Тогда
		СбисВременныеФайлы = Новый Структура("Файлы, Параметры", Новый Соответствие, Новый Структура("ВремяЖизни", 3600));
		МестныйКэш.ТекущийСеанс.Вставить("ВременныеФайлы", СбисВременныеФайлы);
	КонецЕсли;
	#Если ВебКлиент Тогда
		ИмяФайла = КаталогВременныхФайлов() + "sbis_" + Строка(Новый УникальныйИдентификатор()) + "." + СтрЗаменить(Расширение, ".", "");
	#Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
	#КонецЕсли
	СбисВременныеФайлы.Файлы.Вставить(ИмяФайла, Новый Структура("ВремяПолучения, Освободить", ТекущаяДата(), Ложь));
	ЭтаФорма.ПодключитьОбработчикОжидания("СбисОчиститьВременныеФайлы", 60, Истина);
	Возврат ИмяФайла;
КонецФункции

//Очищает временный файл
&НаКлиенте
Процедура СбисОчиститьВременныйФайлКлиент(ИмяФайла) Экспорт
	Перем СбисВременныеФайлы;
	Если	Не МестныйКэш.ТекущийСеанс.Свойство("ВременныеФайлы", СбисВременныеФайлы)
		Или	СбисВременныеФайлы.Файлы.Получить(ИмяФайла) = Неопределено Тогда
		Возврат
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	СбисВременныеФайлы.Файлы.Удалить(ИмяФайла);
КонецПроцедуры

&НаКлиенте
Функция сбисФорматКаталога(КаталогПуть, ПараметрыКаталога) Экспорт
	сРазделитель = СбисФорматРазделителя(ПараметрыКаталога);
	Возврат КаталогПуть + ?(Прав(КаталогПуть, 1) = сРазделитель, "", сРазделитель);	
КонецФункции

//Функция возвращает истину, либо ложь для номенклатуры
&НаСервереБезКонтекста
Функция сбисНоменклатура1СУслуга_Сервер(Знач Контекст)
	Возврат	ЗначениеЗаполнено(Контекст.Номенклатура)
	И	Контекст.Номенклатура.Услуга;
КонецФункции

&НаКлиенте
Функция ЭтоНоваяВерсия(НоваяВерсия, СтараяВерсия) Экспорт
	// Функция проверяет, является ли текущая версия обработки или SDK новой по отношению к предыдущей запущенной	
	Если Не ЗначениеЗаполнено(СтараяВерсия) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрНоваяВерсия = СтрЗаменить(НоваяВерсия, ".", Символы.ПС);
	СтрСтараяВерсия= СтрЗаменить(СтараяВерсия, ".", Символы.ПС);
	сЧислоРазрядов = Макс(СтрЧислоСтрок(СтрНоваяВерсия),СтрЧислоСтрок(СтрСтараяВерсия));
	Для сч = 1 По сЧислоРазрядов Цикл
		ЗначениеРазрядаНов = СтрПолучитьСтроку(СтрНоваяВерсия, сч);
		ЗначениеРазрядаСтар = СтрПолучитьСтроку(СтрСтараяВерсия, сч);
		Попытка
			ЗначениеРазрядаНов = Число(ЗначениеРазрядаНов);
		Исключение
			ЗначениеРазрядаНов = 0;
		КонецПопытки;
		Попытка
			ЗначениеРазрядаСтар = Число(ЗначениеРазрядаСтар);
		Исключение
			ЗначениеРазрядаСтар = 0;
		КонецПопытки;
		
		Если ЗначениеРазрядаНов > ЗначениеРазрядаСтар Тогда
			Возврат Истина;
		ИначеЕсли ЗначениеРазрядаНов = ЗначениеРазрядаСтар Тогда
			Продолжить;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

//Функция сериализует версию из формата 1С в формат Число и обратно. Пример в 1С: 3.0.40.40, пример в число: 3 0000 0040 0040
&НаКлиенте                                  
Функция СериализоватьВерсию(Версия, Направление="ЧислоВСтроку",ДополнительныеПараметры=Неопределено) Экспорт
	
	Если ДополнительныеПараметры = Неопределено	Тогда
		ДополнительныеПараметры	= Новый	Структура;
	КонецЕсли;
	Разделитель		= ?(ДополнительныеПараметры.Свойство("Разделитель"),	ДополнительныеПараметры.Разделитель,	".");
	Заполнитель		= ?(ДополнительныеПараметры.Свойство("Заполнитель"),	ДополнительныеПараметры.Заполнитель,	"0");
	Разрядность		= ?(ДополнительныеПараметры.Свойство("Разрядность"),	ДополнительныеПараметры.Разрядность,	4);
	ЧислоРазрядов	= ?(ДополнительныеПараметры.Свойство("ЧислоРазрядов"),	ДополнительныеПараметры.ЧислоРазрядов,	4);
	Результат		= "";
	
	СтрокаВерсии	= СокрЛП(СтрЗаменить(Формат(Версия, "ЧН=0; ЧГ=0"), Символы.НПП, ""));
	
	Если		Направление	= "СтрокуВЧисло" Тогда//Переводит из формата 1.1.1.1 в число 1 0001 0001 0001
		МногоуровневаяСтрока = СтрЗаменить(СтрокаВерсии, Разделитель, Символы.ПС);
		Для шаг = 2 По СтрЧислоСтрок(МногоуровневаяСтрока) Цикл
			СтрокаРазряда = СтрПолучитьСтроку(МногоуровневаяСтрока, шаг);
			Пока СтрДлина(СтрокаРазряда) < Разрядность Цикл
				СтрокаРазряда = Заполнитель + СтрокаРазряда;
			КонецЦикла;
			Результат = Результат + СтрокаРазряда;
		КонецЦикла;
		Результат = СтрПолучитьСтроку(МногоуровневаяСтрока, 1)	+ Результат;
		Результат = Число(Результат);
	ИначеЕсли	Направление	= "ЧислоВСтроку" Тогда//Переводит из формата числа 1 0001 0001 0001 в 1.1.1.1
		Если СтрЧислоВхождений(СтрокаВерсии, Разделитель) = ЧислоРазрядов - 1 Тогда//версия уже сериализована.
			Возврат	СтрокаВерсии;
		КонецЕсли;
		ДробЧислоРазрядов	= СтрДлина(СтрокаВерсии) / Разрядность;
		ЦелЧислоРазрядов	= ?(Цел(ДробЧислоРазрядов) = ДробЧислоРазрядов, ДробЧислоРазрядов, Цел(ДробЧислоРазрядов)	+ 1);
		
		Для шаг = 1 По ЦелЧислоРазрядов Цикл
			Если СтрДлина(СтрокаВерсии) > Разрядность * шаг Тогда 
				СтрокаРазряда	= Сред(СтрокаВерсии, (СтрДлина(СтрокаВерсии)	- Разрядность*шаг)+1, Разрядность);
			Иначе
				СтрокаРазряда	= Сред(СтрокаВерсии, 1, Разрядность-(Разрядность*шаг-СтрДлина(СтрокаВерсии)));
			КонецЕсли;
			Пока	Лев(СтрокаРазряда, 1) = Заполнитель
				И	СтрДлина(СтрокаРазряда) > 1	Цикл
				СтрокаРазряда	= Сред(СтрокаРазряда, 2);
			КонецЦикла;
			Результат	= Разделитель	+ СтрокаРазряда	+ Результат;
		КонецЦикла;
		Если ЧислоРазрядов > ЦелЧислоРазрядов Тогда
			Для	шаг = 1 По ЧислоРазрядов - ЦелЧислоРазрядов	Цикл
				Результат = Разделитель	+ Заполнитель + Результат;
			КонецЦикла;
		КонецЕсли;
		Если Лев(Результат, 1) = Разделитель Тогда
			Результат = Сред(Результат, 2);
		КонецЕсли;
	ИначеЕсли	Направление	= "Дозаполнить"	Тогда//дозаполнение версии до стандарта. Пример: версия 1.1.1 станет 1.1.1.0
		ВспомогательныйРазделитель	= ?(ДополнительныеПараметры.Свойство("ВспомогательныйРазделитель"), ДополнительныеПараметры.ВспомогательныйРазделитель, "-");
		шаг = 0;
		Если Не ПустаяСтрока(СтрокаВерсии) Тогда
			МногоСтрочнаяЗапись = СтрЗаменить(СтрокаВерсии, ВспомогательныйРазделитель, Символы.ПС);
			Пока шаг < СтрЧислоСтрок(МногоСтрочнаяЗапись) Цикл
				шаг = шаг + 1;
				Результат = Результат + СтрПолучитьСтроку(МногоСтрочнаяЗапись, шаг)	+ Разделитель;
			КонецЦикла;
		КонецЕсли;
		Пока шаг < ЧислоРазрядов Цикл//Дозаполнить недостающие разряды
			шаг = шаг + 1;
			Результат = Результат + "0" + Разделитель;
		КонецЦикла;
		Результат = Лев(Результат, СтрДлина(Результат) - СтрДлина(Разделитель));
	КонецЕсли;
	
	Возврат	Результат;
	
КонецФункции

//Функция формирует действие для выполнения аннулирования. ДействиеАннулировать - структура. 
&НаКлиенте
Функция СформироватьЗапросНаАннулирование(Кэш, ПараметрыЗапроса, Отказ) Экспорт
	РезультатЗапроса	= Новый Структура("Действие, Этап");
	ЭтапАннулирование	= Новый Структура("Название, Действие", "Аннулирование");
	Если Не ПараметрыЗапроса.Свойство("Действие", ЭтапАннулирование.Действие) Тогда
		ЭтапАннулирование.Действие = Новый Структура("Название", "Аннулировать");
	КонецЕсли;
	ПараметрыВыбор		= Новый Структура("Этап, ВернутьОшибку, СообщатьПриОшибке", ЭтапАннулирование, Истина, Ложь);
	
	РезультатЧтенияПакета = МестныйКэш.Интеграция.ПрочитатьДокумент(МестныйКэш, ПараметрыЗапроса.ИдентификаторПакета, ПараметрыВыбор, Отказ);
	Если Отказ Тогда
		Возврат РезультатЧтенияПакета;
	КонецЕсли;
	//После чтения запроса, найдем нужное действие в ответе - оно и будет искомым вариантом.
	ЭтапАннулированиеОтвет = Неопределено;
	Для Каждого РезультатЭтап Из РезультатЧтенияПакета.Этап Цикл
		Если РезультатЭтап.Название = ЭтапАннулирование.Название Тогда
			РезультатЗапроса.Этап = РезультатЭтап;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если РезультатЗапроса.Этап = Неопределено Тогда
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Не удалось сформировать запрос на аннулирование документа!")
	КонецЕсли;
	Для Каждого РезультатДействие Из РезультатЗапроса.Этап.Действие Цикл
		Если РезультатДействие.Название = ЭтапАннулирование.Действие.Название Тогда
			РезультатЗапроса.Действие = РезультатДействие;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если РезультатЗапроса.Действие = Неопределено Тогда
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Не удалось сформировать запрос на аннулирование документа!")
	КонецЕсли;
	Возврат РезультатЗапроса;
КонецФункции

//функция сохраняет пакеты документов на диск
&НаКлиенте
Функция СохранитьПакетыНаДиск(Кэш, СписокСтрок) Экспорт
	КаталогВыгрузкиФайлов = "";
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Заголовок = "Выберите каталог выгрузки";
	Если ДиалогОткрытия.Выбрать() Тогда
		КаталогВыгрузкиФайлов = ДиалогОткрытия.Каталог;//Исправлена ошибка при массовом сохранении документов. 
	КонецЕсли;
	
	Если КаталогВыгрузкиФайлов <> "" Тогда
		ВремКаталог = КаталогВременныхФайлов();
		Сч = 0;
		
		Для каждого СтрокаИзСписка из СписокСтрок Цикл
			Сч = Сч + 1;			
			сбисПоказатьСостояние("Сохранение файлов", Кэш.ГлавноеОкно, Окр(100*Сч / СписокСтрок.Количество(), 0));
			
			Результат = Кэш.Интеграция.ПрочитатьДокумент(Кэш,СтрокаИзСписка.Идентификатор);	
			ЗаголовокПакета = СтрокаИзСписка.Название;
			ИмяZIP = СтрЗаменить(ЗаголовокПакета,":",".");
			ИмяZIP = СтрЗаменить(ИмяZIP,"\","_");
			ИмяZIP = СтрЗаменить(ИмяZIP,"/","_");
			КаталогВыгрузки = КаталогВыгрузкиФайлов+"\"+ИмяZip;
			СоздатьКаталог(КаталогВыгрузки);
			СоздатьКаталог(КаталогВыгрузки+"\PDF");
			
			//Сохраним архив пакета во временный каталог
			URL = Результат.СсылкаНаАрхив;		
			ПолноеИмяФайла = КаталогВыгрузки + "\" + ИмяZIP + ".zip";
			Кэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(Кэш,URL,ПолноеИмяФайла);
			
			//Добавим в новый архив pdf-файлы
			СписокФайлов = Новый СписокЗначений;
			Вложения = Результат.Вложение;
			Если Вложения= Неопределено Тогда
				Сообщить("В пакете "+ЗаголовокПакета+" отсутствуют вложения");
				сбисСпрятатьСостояние(ЭтаФорма);
				Продолжить;
			КонецЕсли;
			МассивВложений = Новый Массив;
			Для СчВложений = 0 по Вложения.Количество() - 1 Цикл
				Если Вложения[СчВложений].Служебный = "Да" Тогда
					Продолжить;
				КонецЕсли;	
				Если Вложения[СчВложений].Свойство("Зашифрован") и Вложения[СчВложений].Зашифрован = "Да" Тогда
					Продолжить;
				КонецЕсли;
				URL = Вложения[СчВложений].СсылкаНаPDF;
				ИмяФайла = Вложения[СчВложений].Файл.Имя;
				ИмяФайла = СтрЗаменить(ИмяФайла,".xml","");
				ИмяФайла = СтрЗаменить(ИмяФайла,".XML","");
				ИмяФайла = СтрЗаменить(ИмяФайла,":",".");
				ИмяФайла = СтрЗаменить(ИмяФайла,"\","_");
				ИмяФайла = СтрЗаменить(ИмяФайла,"/","_");
				ИмяФайла = СтрЗаменить(ИмяФайла,"*","_");
				ИмяФайла = СтрЗаменить(ИмяФайла,"?","_");
				ИмяФайла = СтрЗаменить(ИмяФайла,">","_");
				ИмяФайла = СтрЗаменить(ИмяФайла,"<","_");
				ИмяФайла = СтрЗаменить(ИмяФайла,"+","_");
				
				ПолноеИмяФайлаПДФ = КаталогВыгрузки+"\PDF" + "\" + ИмяФайла + ".pdf";			
				Если URL <> "" Тогда						
					Кэш.Интеграция.СохранитьВложениеПоСсылкеВФайл(Кэш,URL,ПолноеИмяФайлаПДФ);
				КонецЕсли;								
			КонецЦикла;
			
		КонецЦикла;	
		сбисСпрятатьСостояние(Кэш.ГлавноеОкно);
	КонецЕсли;
	
КонецФункции

//////////////////Работа с сторонами////////////////

&НаКлиенте
Функция ОткрытьКонтрагентаОнлайнПоПакету(Кэш, ФормаПросмотраДокумента) Экспорт 
	Перем сбисДополнительныеПараметры;
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		сбисДополнительныеПараметры = Новый Структура("ФормаВладелец", ФормаПросмотраДокумента);
	#КонецЕсли
	МестныйКэш.ОбщиеФункции.сбисОткрытьКонтрагентаОнлайнПоСтруктуре(МестныйКэш, ФормаПросмотраДокумента.СоставПакета.Контрагент, сбисДополнительныеПараметры);	
КонецФункции

&НаСервереБезКонтекста
Функция сбисЗаполнитьСтруктуруКонтрагента(Контрагент) Экспорт
	стрКонтрагент = Новый Структура;
	Если СтрДлина(СокрЛП(Контрагент.Инн))=12 Тогда
		СвФЛ = Новый Структура;
		стрКонтрагент.Вставить("СвФЛ",СвФЛ);
		стрКонтрагент.СвФЛ.Вставить("ИНН",Контрагент.Инн);
	Иначе
		СвЮЛ = Новый Структура;
		стрКонтрагент.Вставить("СвЮЛ",СвЮЛ);
		стрКонтрагент.СвЮЛ.Вставить("ИНН",Контрагент.Инн);
		стрКонтрагент.СвЮЛ.Вставить("КПП",Контрагент.КПП);
	КонецЕсли;
	Возврат стрКонтрагент;	
КонецФункции

//Функция читает данные мСтороны по ини через настройку конфигурации и возвращает структуру стороны
&НаКлиенте
Функция сбисСформироватьСтруктуруСвЮЛФЛ(Кэш, ПараметрыКонтрагента, Отказ) Экспорт
	СоставПакета		= Новый СписокЗначений;
	СоответствиеДанные	= Новый Соответствие;
	ЧтениеМСторона = Новый Структура("ИмяИни, ДокументДанные", ПараметрыКонтрагента.ИмяИни, Неопределено);
	Если Кэш.Ини.Конфигурация.мСторона.Свойство(ПараметрыКонтрагента.ИмяИни, ЧтениеМСторона.ДокументДанные) Тогда
		СоставПакета.Добавить(ПараметрыКонтрагента.Ссылка);
		СоответствиеДанные.Вставить(ПараметрыКонтрагента.Ссылка, ЧтениеМСторона);
	КонецЕсли;
	ПолучитьДанныеДокументов1С(СоответствиеДанные, Новый Структура("ТекущийПакет",Новый Структура), СоставПакета, Новый Структура);
	РезультатЧтения = СоответствиеДанные.Получить(ПараметрыКонтрагента.Ссылка).ДокументДанные;
	Если РезультатЧтения = Неопределено Тогда
		Отказ = Истина;
		Если ПараметрыКонтрагента.ИмяИни = "Организация" Тогда
			Возврат Новый Структура("code,message,details", 724, "Организация не определен", "Не удалось получить данные о указанной стороне");
		Иначе	
			Возврат Новый Структура("code,message,details", 725, "Контрагент не определен", "Не удалось получить данные о указанной стороне");
		КонецЕсли;
	КонецЕсли;
	сбисРезультат = ПолучитьСторону(Кэш, РезультатЧтения);
	Если сбисРезультат = Неопределено Тогда
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 721, "Неверно указан ИНН", "Не удалось получить данные о указанной стороне. Проверьте, что в карточке заполнены ИНН/КПП и повторите попытку.");
	КонецЕсли;
	Возврат сбисРезультат;
КонецФункции

// Процедура открывает контрагента по ИНН/КПП на онлайне	
&НаКлиенте
Процедура сбисОткрытьКонтрагентаОнлайнПоСсылке(Кэш, сбисКонтрагент, сбисДополнительныеПараметры) Экспорт
	ОшибкиФормирования = Ложь;
	Если ЗначениеЗаполнено(сбисКонтрагент) Тогда
		сбисСтруктураКонтрагента= сбисСформироватьСтруктуруСвЮЛФЛ(Кэш, Новый Структура("ИмяИни,Ссылка", "Контрагент", сбисКонтрагент), ОшибкиФормирования);
	Иначе
		Сообщить("Контрагент не заполнен");
		Возврат;
	КонецЕсли;
	Если ОшибкиФормирования Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(МестныйКэш,сбисСтруктураКонтрагента,сбисДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	сбисОткрытьКонтрагентаОнлайнПоСтруктуре(Кэш, сбисСтруктураКонтрагента, сбисДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура сбисОткрытьКонтрагентаОнлайнПоСтруктуре(Кэш, сбисСтруктураКонтрагента, сбисДополнительныеПараметры) Экспорт
	ОшибкиФормирования = Ложь;
	КонтрагентСсылка = сбисПолучитьСсылкуКонтрагента(МестныйКэш, сбисСтруктураКонтрагента, ОшибкиФормирования);
	Если ОшибкиФормирования Тогда
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(МестныйКэш,КонтрагентСсылка,сбисДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение(КонтрагентСсылка);	
КонецПроцедуры

&НаКлиенте
Функция сбисПолучитьСсылкуКонтрагента(Кэш, СтруктураКонтрагента, Отказ)
	Перем СвЮлФл, ИНН, КПП;
	Если		СтруктураКонтрагента.Свойство("СвЮЛ", СвЮлФл)
		И	ЗначениеЗаполнено(СвЮлФл) Тогда
		ИНН = СвЮлФл.ИНН;
		КПП = СвЮлФл.ИНН;
	ИначеЕсли	СтруктураКонтрагента.Свойство("СвФЛ", СвЮлФл)
		И	ЗначениеЗаполнено(СвЮлФл) Тогда
		ИНН = СвЮлФл.ИНН;
		СвЮлФл.Свойство("КПП", КПП);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИНН) Тогда 
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 721, "Неверно указан ИНН", "Не удалось определить ИНН контрагента");
	КонецЕсли;
	СтрокаРезультат = Кэш.СБИС.АдресСервера + "contractor-innkpp/v1/" + ИНН;
	Если ЗначениеЗаполнено(КПП) Тогда 
		СтрокаРезультат = СтрокаРезультат + "/" + КПП;
	КонецЕсли;
	Возврат СтрокаРезультат;
	
КонецФункции	

&НаКлиенте
Функция сбисНазваниеСтороны(мСторона)
	НазваниеМСтороны = Неопределено;
	Если Не ЗначениеЗаполнено(мСторона) Тогда
		Возврат "";
	ИначеЕсли мСторона.Свойство("СвЮЛ", НазваниеМСтороны) Тогда
		НазваниеМСтороны = НазваниеМСтороны.Название;
	Иначе
		ДанныеФЛСтороны = мСторона.СвФЛ;
		Если Не ДанныеФЛСтороны.Свойство("Название", НазваниеМСтороны) Тогда 
			НазваниеМСтороны = ДанныеФЛСтороны.Фамилия;
			НазваниеМСтороны = НазваниеМСтороны + ?(ЗначениеЗаполнено(НазваниеМСтороны), " ", "") + ДанныеФЛСтороны.Имя;
			НазваниеМСтороны = НазваниеМСтороны + ?(ЗначениеЗаполнено(НазваниеМСтороны), " ", "") + ДанныеФЛСтороны.Отчество;
		КонецЕсли;
	КонецЕсли;
	Возврат НазваниеМСтороны;
КонецФункции

//////////////Интерактивная кнопка KES///////////////

&НаКлиенте
Функция сбисПослеВыбораПерехода(Результат, сбисДополнительныеПараметры) Экспорт
	Перем сбисСписокПакетов;
	Если НЕ	(	ЗначениеЗаполнено(Результат)
		И	сбисДополнительныеПараметры.Свойство("СписокПакетов", сбисСписокПакетов)
		И	сбисСписокПакетов.Количество()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//получение сертификатов, ввод пин-кода при необходимости. 
	//внесение комментария на форме переходов происходит в функциях выше по стеку вызовов индивидуально
	
	ПараметрыПереходЗавершение = Новый Структура;
	//скопирую все параметры для переноса в последующие функции
	Для Каждого Параметр Из сбисДополнительныеПараметры Цикл
		ПараметрыПереходЗавершение.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Если Результат.Действие.ТребуетПодписания = "Да" Тогда
		//возможно, было удобно предварительно собрать список ИНН по переданным пакетам
		Если сбисДополнительныеПараметры.Свойство("СписокИНН") И сбисДополнительныеПараметры.СписокИНН.Количество() > 0 Тогда
			СписокИНН = сбисДополнительныеПараметры.СписокИНН;
		Иначе
			//пока не понятно, зачем мне список ИНН, если я могу работать только с одним подходящим сертификатом
			СписокИНН = Новый СписокЗначений;
			Для Каждого Пакет из сбисСписокПакетов Цикл
				ИННОрг = ?(Пакет.Значение.НашаОрганизация.Свойство("СвФЛ"),Пакет.Значение.НашаОрганизация.СвФЛ.ИНН,Пакет.Значение.НашаОрганизация.СвЮЛ.ИНН);
				Если СписокИНН.НайтиПоЗначению("ИННОрг") = Неопределено Тогда
					СписокИНН.Вставить(ИННОрг);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МассивОрганизаций = МестныйКэш.Интеграция.ПолучитьСписокНашихОрганизаций(МестныйКэш, СписокИНН);	
		
		СписокСертификатов = МестныйКэш.Интеграция.ПолучитьСертификатыДляАктивации(МестныйКэш,СписокИНН);
		Если СписокСертификатов.Количество()>0 Тогда
			Сертификат = СписокСертификатов[0].Значение;
			Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
				МестныйКэш.Интеграция.ПолучитьКодАктивацииСертификата(МестныйКэш, Сертификат);				
			КонецЕсли;
			
			ДополнитьПараметрыСертификатом(ПараметрыПереходЗавершение,0,СписокСертификатов,МестныйКэш,МассивОрганизаций,Результат);
			
			//выход после первого сертификата, т.е. для нескольких разных организаций с разными сертификатами массовой обработки нет
			ФормаВводаПинкода = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаВводаПинкода");
			ПараметрыВвода = Новый Структура("СертификатИмя", СформироватьЗаголовокСертификатаДляФормыВвода(МестныйКэш, Сертификат));
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				КодАктивации = ФормаВводаПинкода.Показать(ПараметрыВвода);
				Если Не	ЗначениеЗаполнено(КодАктивации)	Или КодАктивации.ПинКод = "" Тогда
					Сообщить("Не активирован сертификат для подписания документов.");
					Возврат Неопределено;	
				КонецЕсли;		
				Возврат сбисВыполнитьПереходЗавершение(Новый Структура("ПинКод",КодАктивации.ПинКод), ПараметрыПереходЗавершение);		
			#Иначе
				ФормаВводаПинкода.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисВыполнитьПереходЗавершение",ЭтаФорма,ПараметрыПереходЗавершение);
				ФормаВводаПинкода.Показать(ПараметрыВвода);
			#КонецЕсли
			Возврат Неопределено;
		Иначе
			ДополнитьПараметрыСертификатом(ПараметрыПереходЗавершение,0,Новый СписокЗначений,МестныйКэш,Новый Массив,Результат);
			Возврат сбисВыполнитьПереходЗавершение(Истина, ПараметрыПереходЗавершение);
		КонецЕсли;
	Иначе
		
		//подписание не требуется
		ДополнитьПараметрыСертификатом(ПараметрыПереходЗавершение,0,Новый СписокЗначений,МестныйКэш,Новый Массив,Результат);
		
		Возврат сбисВыполнитьПереходЗавершение(Истина, ПараметрыПереходЗавершение);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция сбисВыполнитьПереходЗавершение(Результат, сбисДополнительныеПараметры) Экспорт
	
	Кэш = сбисДополнительныеПараметры.Кэш;
	РезультатДетализация		= Новый Структура("Строки");
	РезультатДетализация.Строки	= Новый Структура("Выполнено, НеВыполнено",Новый Соответствие, Новый Соответствие);
	РезультатВыбораПерехода = сбисДополнительныеПараметры.РезультатВыбораПерехода;
	
	//сертификаты
	Если Результат = Неопределено Тогда   // не ввели пин-код
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			//вызов осуществляется на форме выбора действия
			Возврат РезультатДетализация;
		#Иначе
			//обработка результата (индивидуально на каждой форме, для этого в параметрах должно находиться оповещение)
			ВыполнитьОбработкуОповещения(сбисДополнительныеПараметры.ОповещениеРезультатДействия, РезультатДетализация);
		#КонецЕсли
	КонецЕсли;
	
	
	СчСерт = сбисДополнительныеПараметры.СчСерт;
	СписокСертификатов = сбисДополнительныеПараметры.СписокСертификатов;
	
	//"Результат" получен на форме ввода пин-кода или в нем содержится "Истина", когда работа ведется без сертификата
	Если СписокСертификатов.Количество()>0 И ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ПинКод") Тогда
		Серт = СписокСертификатов[СчСерт].Значение;
		//ФормаВводаПинкода всегда в результате возвращает ПинКод
		Серт.Вставить("КодАктивации", Результат.ПинКод);
	КонецЕсли;
	
	Если СчСерт<СписокСертификатов.Количество()-1 Тогда    // еще не все пин-коды ввели
		
		Сертификат = СписокСертификатов[СчСерт+1].Значение;
		Если Сертификат.Ключ.СпособАктивации<>"СтатическийКод" Тогда
			Кэш.Интеграция.ПолучитьКодАктивацииСертификата(Кэш, Сертификат);				
		КонецЕсли;
		//зациклим снова на сбисВыполнитьПереходЗавершение
		сбисДополнительныеПараметры.СчСерт = сбисДополнительныеПараметры.СчСерт+1;
		ФормаВводаПинКода = Кэш.ГлавноеОкно.сбисПолучитьФорму("ФормаВводаПинкода");
		ПараметрыВвода = Новый Структура("СертификатИмя", СформироватьЗаголовокСертификатаДляФормыВвода(Кэш, Сертификат));
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			сбисРезультат = ФормаВводаПинКода.Показать(ПараметрыВвода);
			сбисВыполнитьПереходЗавершение(сбисРезультат, сбисДополнительныеПараметры);
		#Иначе			
			ФормаВводаПинКода.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("сбисВыполнитьПереходЗавершение", ЭтаФорма, сбисДополнительныеПараметры);
			ФормаВводаПинКода.Показать(ПараметрыВвода);
		#КонецЕсли
		Возврат Неопределено;
	Иначе  // ввели пин-коды для всех сертов
		//сообщит "введен неправильный код", если ПинКод не верен
		Кэш.Интеграция.АктивироватьСерверныеСертификаты(Кэш, СписокСертификатов);
	КонецЕсли;
	
	//обработка перехода
	Для Каждого СоставПакета из сбисДополнительныеПараметры.СписокПакетов Цикл
		//не исключено, что в выделенные записи попали документы на финальном этапе. Это не повод прерывать обработку
		Если НЕ ( СоставПакета.Значение.Свойство("Этап") И СоставПакета.Значение.Этап.Количество() > 0 ) Тогда
			Продолжить;
		КонецЕсли;
		
		//обрабатывается всегда ближайший, нулевой этап
		Если РезультатВыбораПерехода.Свойство("Исполнитель")	Тогда
			СоставПакета.Значение.Этап[0].Вставить("Исполнитель", РезультатВыбораПерехода.Исполнитель);
		КонецЕсли;
		
		//общая функция перед выполнением действия, если требуется, к примеру, прикрепить пакет с расхождением.
		//для сетей перед выполнением отклонения будет крепиться расхождение, но решено сделать это через внешние функции
		фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПередЗавершениемПерехода", "РаботаСДокументами1С","",Кэш);
		
		//скопирую все параметры для переноса в последующие функции
		ПараметрыПередЗавершениемПерехода = Новый Структура;
		Для Каждого Параметр Из сбисДополнительныеПараметры Цикл
			ПараметрыПередЗавершениемПерехода.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
		//конкретный пакет
		ПараметрыПередЗавершениемПерехода.Вставить("СоставПакета",СоставПакета.Значение);
		
		Если Не фрм = Ложь Тогда
			КлиентскийРезультат = фрм.сбисПередЗавершениемПерехода(Кэш, ПараметрыПередЗавершениемПерехода);	
		КонецЕсли;
		
		ДействиеВыполнено = Ложь;
		Если ЗначениеЗаполнено(КлиентскийРезультат) И Строка(ТипЗнч(КлиентскийРезультат))="Структура" И КлиентскийРезультат.Свойство("Продолжить") И КлиентскийРезультат.Продолжить = Ложь Тогда
			Сообщить(?(КлиентскийРезультат.Свойство("Сообщение") И ЗначениеЗаполнено(КлиентскийРезультат.Сообщение),КлиентскийРезультат.Сообщение, "Выполнение перехода прервано для документа """+СоставПакета.Значение.Название+Символ(34)));
			Продолжить;
		Иначе 
			ДействиеВыполнено = МестныйКэш.Интеграция.сбисВыполнитьДействие(МестныйКэш, ПараметрыПередЗавершениемПерехода.СоставПакета, СоставПакета.Значение.Этап[0], РезультатВыбораПерехода.Действие, РезультатВыбораПерехода.Комментарий, "");
			//общая функция после выполнения действия
			фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("сбисПослеЗавершенияПерехода", "РаботаСДокументами1С","",Кэш);
			Если Не фрм = Ложь Тогда
				фрм.сбисПослеЗавершенияПерехода(Кэш, ПараметрыПередЗавершениемПерехода,Новый Структура("Этап,Действие,Результат", СоставПакета.Значение.Этап[0],РезультатВыбораПерехода.Действие,ДействиеВыполнено));	
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРезультат = РезультатДействия_СформироватьСтрокуДетализации(Кэш, "ВыполнитьДействие");
		Если НЕ СтрокаРезультат.Свойство("ИдентификаторПакета") Тогда
			СтрокаРезультат.Вставить("ИдентификаторПакета",ПараметрыПередЗавершениемПерехода.СоставПакета.Идентификатор);
		Иначе
			СтрокаРезультат.ИдентификаторПакета	= ПараметрыПередЗавершениемПерехода.СоставПакета.Идентификатор;
		КонецЕсли;
		
		СтрокаРезультат.Состояние = ДействиеВыполнено;
		СтрокаРезультат.Сообщение = РезультатВыбораПерехода.Действие.Название + " " + ПараметрыПередЗавершениемПерехода.СоставПакета.Название;
		
		Если ДействиеВыполнено = Истина Тогда
			РезультатДетализация.Строки.Выполнено.Вставить(ПараметрыПередЗавершениемПерехода.СоставПакета.Идентификатор, СтрокаРезультат);
		Иначе
			РезультатДетализация.Строки.НеВыполнено.Вставить(ПараметрыПередЗавершениемПерехода.СоставПакета.Идентификатор, СтрокаРезультат);
		КонецЕсли;
	КонецЦикла;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		//вызов осуществляется на форме выбора действия
		Возврат РезультатДетализация;
	#Иначе
		//обработка результата (индивидуально на каждой форме, для этого в параметрах должно находиться оповещение)
		ВыполнитьОбработкуОповещения(сбисДополнительныеПараметры.ОповещениеРезультатДействия,РезультатДетализация);
	#КонецЕсли
	
КонецФункции

//Вынесен дублирующийся код
&НаКлиенте
Процедура ДополнитьПараметрыСертификатом(Парам,СчСерт,СписокСертификатов,Кэш,МассивОрганизаций,РезультатВыбораПерехода)
	
	Парам.Вставить("Кэш",						Кэш);
	Парам.Вставить("МассивОрганизаций",			МассивОрганизаций);
	Парам.Вставить("РезультатВыбораПерехода",	РезультатВыбораПерехода);
	Парам.Вставить("СчСерт",					СчСерт);
	Парам.Вставить("СписокСертификатов",		СписокСертификатов);
	
КонецПроцедуры

&НаКлиенте
Функция УпорядочитьВложенияВПакете(ПолныйСоставПакета) Экспорт
	Вложения = Новый СписокЗначений;	
	Для Каждого Вложение Из ПолныйСоставПакета.Вложение Цикл
		ИндексМассива = ?(Вложение.Свойство("СтруктураИниФайла") И Вложение.СтруктураИниФайла.Свойство("Вес") И (НЕ Вложение.СтруктураИниФайла.Вес = Неопределено),Вложение.СтруктураИниФайла.Вес,0);
		Вложения.Добавить(Вложение,ИндексМассива);
	КонецЦикла;
	Вложения.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	Возврат Вложения.ВыгрузитьЗначения();
КонецФункции

////////Совместное использование СБИС и 1С VII///////

&НаКлиенте 
Функция ВыполнитьОбработкуАпи3Объекта(Кэш, ПараметрыОбработкиОбъекта, Отказ) Экспорт 
	Результат = ВыполнитьОбработкуАпи3ОбъектаНаСервере(ПараметрыОбработкиОбъекта, Отказ);
	Если Отказ Тогда
		Результат = СбисИсключение(Результат, "РаботаСДокументами1С.ВыполнитьОбработкуАпи3ОбъектаНаСервере");
		Результат = СбисИсключение(Результат, "РаботаСДокументами1С.ВыполнитьОбработкуАпи3Объекта");
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Форматирование структуры объекта для загрузки в 1С. Получение объектов по идентификаторам, формирование структуры типов
// СтруктураОбъекта - Структура, соответствующая загружаемому объекту, с определением типов данных.
&НаКлиенте 
Функция ПодготовитьСтруктуруОбъектаДляЗаписив1С(Кэш, СтруктураОбъекта, Отказ) Экспорт
	Попытка
		Возврат ПодготовитьСтруктуруОбъектаДляЗаписиВ1ССервер(СтруктураОбъекта);
	Исключение
		Отказ = Истина;
		Возврат СбисИсключение(, "РаботаСДокументами.ПодготовитьСтруктуруОбъектаДляЗаписив1С", 773, ,ОписаниеОшибки());
	КонецПопытки;
КонецФункции

//Выполняет подготовку типов к записи, проверку наличия требуемого объекта (досоздаёт при необходимости), выполняет обновление данных в объекте
&НаСервереБезКонтекста
Функция ВыполнитьОбработкуАпи3ОбъектаНаСервере(Знач ПараметрыОбработкиОбъекта, Отказ);
	//Подготовим значения
	Попытка
		ПараметрыОбработкиОбъекта.СтруктураОбъекта = ПодготовитьСтруктуруОбъектаДляЗаписиВ1ССервер(ПараметрыОбработкиОбъекта.СтруктураОбъекта);
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details,methodName", 773, "Неизвестная ошибка при выполнении метода", ИнформацияОбОшибке().Описание, "РаботаСДокументами.ПодготовитьСтруктуруОбъектаДляЗаписиВ1ССервер");
	КонецПопытки;
	//Получим объект 1С на редактирование
	ДанныеОбъекта1С = СбисПолучитьЗначениеОбъекта(ПараметрыОбработкиОбъекта, Отказ);
	Если Отказ Тогда
		ДанныеОбъекта1С.Вставить("methodName", "РаботаСДокументами1С.СбисПолучитьЗначениеОбъекта");
		Возврат ДанныеОбъекта1С;
	КонецЕсли;
	//Обновим по сформированной структуре
	РезультатЗаписи = ЗаполнитьИЗаписатьОбъектИзСтруктуры(ДанныеОбъекта1С.Объект, ПараметрыОбработкиОбъекта.СтруктураОбъекта, Отказ);
	Если Отказ Тогда
		РезультатЗаписи.Вставить("methodName", "РаботаСДокументами1С.ЗаполнитьИЗаписатьОбъектИзСтруктуры");
		Возврат РезультатЗаписи;
	КонецЕсли;
	ДанныеОбъекта1С.Удалить("Объект");
	ДанныеОбъекта1С.Вставить("Ссылка", РезультатЗаписи);
	Возврат ДанныеОбъекта1С;	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьСтруктуруОбъектаДляЗаписиВ1ССервер(СтруктураОбъекта, ПутьКУзлу="СтруктураОбъекта")
	ИтоговаяСтруктураОбъекта = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураОбъекта Цикл
		Если 	Не ТипЗнч(КлючИЗначение.Значение) = Тип("Структура")
			Или	Не КлючИЗначение.Значение.Свойство("Тип")
			Или	Не КлючИЗначение.Значение.Свойство("Значение")
			Или	Не ТипЗнч(КлючИЗначение.Значение.Тип) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		СбисТипРеквизита		= НРег(КлючИЗначение.Значение.Тип);
		СбисЗначениеРеквизита	= КлючИЗначение.Значение.Значение;
		
		Если		ТипЗнч(СбисЗначениеРеквизита) = Тип("Строка") Тогда
			Если		СбисТипРеквизита = "строка" Тогда
				ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, СбисЗначениеРеквизита);
			ИначеЕсли	СбисТипРеквизита = "число" Тогда
				ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, Число(СбисЗначениеРеквизита));
			ИначеЕсли 	СбисТипРеквизита = "дата" Тогда
				Если СбисЗначениеРеквизита = "0001-01-01T00:00:00" Тогда
					Продолжить;
				КонецЕсли;
				РеквизитДата = СтрЗаменить(СбисЗначениеРеквизита, "T", "");
				РеквизитДата = СтрЗаменить(РеквизитДата, "-", "");
				РеквизитДата = СтрЗаменить(РеквизитДата, ":", "");
				ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, Дата(РеквизитДата));
			ИначеЕсли	Найти(СбисТипРеквизита, "ссылка")
				И	Найти(СбисТипРеквизита, ".") Тогда
				Если	СбисЗначениеРеквизита = "00000000-0000-0000-0000-000000000000"
					Или	СтрЧислоВхождений(СбисТипРеквизита, ".") <> 1 Тогда
					Продолжить;
				КонецЕсли;
				Попытка
					ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, ПолучитьСсылкуПоТипуИИдентификатору(КлючИЗначение.Значение.Тип, СбисЗначениеРеквизита));
				Исключение
					ВызватьИсключение("Ошибка получения ссылки объекта по пути " + ПутьКУзлу + "." + КлючИЗначение.Ключ + ". Детально:" + ИнформацияОбОшибке().Описание);
				КонецПопытки;
			ИначеЕсли	СбисТипРеквизита = "булево" Тогда
				СбисЗначениеРеквизита = НРег(СбисЗначениеРеквизита);
				Если СбисЗначениеРеквизита = "true" Или СбисЗначениеРеквизита = "истина" Тогда
					ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, Истина);
				ИначеЕсли СбисЗначениеРеквизита = "false" Или СбисЗначениеРеквизита = "ложь" Тогда
					ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, Ложь);
				КонецЕсли;
			КонецЕсли;			
		ИначеЕсли	ТипЗнч(СбисЗначениеРеквизита) = Тип("Булево") Тогда
			ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, СбисЗначениеРеквизита);
		ИначеЕсли	ТипЗнч(СбисЗначениеРеквизита) = Тип("Массив") Тогда	
			Если СбисТипРеквизита = "табличнаячасть" Тогда
				ТабличнаяЧасть = Новый Массив;
				Для СчетчикМассива = 0 По СбисЗначениеРеквизита.Количество()-1 Цикл
					ЭлементМассива = СбисЗначениеРеквизита[СчетчикМассива]; 
					Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 
						ТабличнаяЧасть.Добавить(ПодготовитьСтруктуруОбъектаДляЗаписиВ1ССервер(ЭлементМассива, ПутьКУзлу + "[" + СчетчикМассива + "]"));
					КонецЕсли;
				КонецЦикла;
				ИтоговаяСтруктураОбъекта.Вставить(КлючИЗначение.Ключ, ТабличнаяЧасть);
			Иначе
				ВызватьИсключение("Указан неизвестный тип """ + КлючИЗначение.Значение.Тип + """ для обработки массива по пути " + ПутьКУзлу + "." + КлючИЗначение.Ключ + ".");
			КонецЕсли;
		Иначе
			ВызватьИсключение("Необрабатываемый тип значения узла """ + ТипЗнч(СбисЗначениеРеквизита) + """ по пути " + ПутьКУзлу + "." + КлючИЗначение.Ключ + ".");
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговаяСтруктураОбъекта;
КонецФункции

&НаСервереБезКонтекста
Функция СбисТипСправочник(СбисИмяТипа)
	Возврат СбисИмяТипа = "справочникссылка" Или СбисИмяТипа = "catalogobject";
КонецФункции

&НаСервереБезКонтекста
Функция СбисТипДокумент(СбисИмяТипа)
	Возврат СбисИмяТипа = "документссылка" Или СбисИмяТипа = "documentobject";
КонецФункции

&НаСервереБезКонтекста
Функция СбисЭтоГруппа(СбисСтруктураОбъекта)
	Возврат		СбисСтруктураОбъекта.Свойство("ЭтоГруппа") 
	И	СбисСтруктураОбъекта.ЭтоГруппа 
	Или		СбисСтруктураОбъекта.Свойство("IsFolder")
	И	СбисСтруктураОбъекта.IsFolder;
КонецФункции

//Возвращает ссылку на объект по имени метаданных и идентификатору (для перечислений по значению)
// СбисТип - полный тип объекта 1С вида СправочникСсылка.Номенклатура или DocumentObject.АвансовыйОтчет
// СбисИдентификатор - Уникальный идентификатор объекта
// Возвращает сылку на объект
&НаСервереБезКонтекста
Функция ПолучитьСсылкуПоТипуИИдентификатору(СбисТип, СбисИдентификатор) Экспорт
	СтрСбисТип = СтрЗаменить(СокрЛП(СбисТип), ".", Символы.ПС);
	СбисТипОбъекта = НРег(СтрПолучитьСтроку(СтрСбисТип, 1));
	СбисИмяОбъекта = СтрПолучитьСтроку(СтрСбисТип, 2);
	Попытка
		Если		СбисТипСправочник(СбисТипОбъекта) Тогда
			Возврат Справочники[СбисИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СбисИдентификатор));
		ИначеЕсли	СбисТипДокумент(СбисТипОбъекта) Тогда
			Возврат Документы[СбисИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(СбисИдентификатор));
		ИначеЕсли	СбисТипОбъекта = "перечислениессылка" Тогда
			Возврат Перечисления[СбисИмяОбъекта][СбисИдентификатор];
		ИначеЕсли	СбисТипОбъекта = "плансчетовссылка" Тогда
			Если СтрДлина(СбисИдентификатор) = 36 Тогда
				Возврат ПланыСчетов.Хозрасчетный.ПолучитьСсылку(Новый УникальныйИдентификатор(СбисИдентификатор));
			Иначе
				Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду(СбисИдентификатор);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ВызватьИсключение("Ошибка при обработке типа " + СбисТип + " с идентификатором " + СбисИдентификатор + ". " + ИнформацияОбОшибке().Описание);
	КонецПопытки;
КонецФункции

// Получение объекта
// 1) Если нет уникального идентификатора объекта ищем/создаем новый объект.
// 2) Если есть идентификатор объекта но по нему не удалось получить объект ищем/создаем новый объект.
// Для обеих случаев обновляем запись сопоставления новым идентификатором.
// 3) Если объект по идекнтификатору получен возвращаем его
// В результате возвращает объект в узле object и его идентификатор в узле mappingData
// ТипИмяОбъекта - Тип и название объекта как в ИС
// ИдентификаторОбъекта - Идентификатор объекта в этой системе
// СтруктураОбъекта - Структура рассчитанного объекта ИС с приведенными типами для поиска
// ИмяИни - Имя ИНИ объекта, необходимо для поиска
&НаСервереБезКонтекста
Функция СбисПолучитьЗначениеОбъекта(Знач СбисОписаниеОбъекта, Отказ)	
	Перем СбисСсылкаНаОбъект, СбисОбъектЗначение, СбисИдентификаторОбъекта;
	ОбновитьСопоставление = Ложь;
	
	//Указан Идетификатор
	Если	СбисОписаниеОбъекта.Свойство("Идентификатор", СбисИдентификаторОбъекта)
		И	СбисИдентификаторОбъекта <> Неопределено Тогда
		Попытка
			СбисСсылкаНаОбъект = ПолучитьСсылкуПоТипуИИдентификатору(СбисОписаниеОбъекта.Тип, СбисИдентификаторОбъекта);
			СбисОбъектЗначение = СбисСсылкаНаОбъект.ПолучитьОбъект();
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 773, "Ошибка получения ссылки по идентификатору", ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	//Не найден объект, пробуем найти ссылку
	Если СбисОбъектЗначение = Неопределено Тогда
		Попытка
			СбисСсылкаНаОбъект = СбисНайтиСсылкуОбъекта(СбисОписаниеОбъекта);
		Исключение
			Отказ = Истина;
			Возврат Новый Структура("code,message,details", 773, "Ошибка посика ссылки на объект", ОписаниеОшибки());
		КонецПопытки;
		Если СбисСсылкаНаОбъект <> Неопределено Тогда
			Попытка
				СбисОбъектЗначение = СбисСсылкаНаОбъект.ПолучитьОбъект();
				СбисИдентификаторОбъекта = СбисСсылкаНаОбъект.УникальныйИдентификатор();
			Исключение
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 773, "Ошибка получения объекта", ОписаниеОшибки());
			КонецПопытки;
			ОбновитьСопоставление = Истина;
		КонецЕсли;
	КонецЕсли;		
	Если СбисОбъектЗначение = Неопределено Тогда
		СбисИдентификаторОбъекта = Новый УникальныйИдентификатор;
		СтрТипОбъекта = СтрЗаменить(СбисОписаниеОбъекта.Тип, ".", Символы.ПС);
		СбисТипОбъекта = НРег(СтрПолучитьСтроку(СтрТипОбъекта, 1));
		СбисИмяОбъекта = СтрПолучитьСтроку(СтрТипОбъекта, 2);
		Если		СбисТипСправочник(СбисТипОбъекта) Тогда
			Если СбисЭтоГруппа(СбисОписаниеОбъекта.СтруктураОбъекта) Тогда
				Попытка
					СбисОбъектЗначение = Справочники[СбисИмяОбъекта].СоздатьГруппу();
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Ошибка создания группы справочника", ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Попытка
					СбисОбъектЗначение = Справочники[СбисИмяОбъекта].СоздатьЭлемент();
				Исключение
					Отказ = Истина;
					Возврат Новый Структура("code,message,details", 773, "Ошибка создания элемента справочника", ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			СбисОбъектЗначение.УстановитьСсылкуНового(Справочники[СбисИмяОбъекта].ПолучитьСсылку(СбисИдентификаторОбъекта));
		ИначеЕсли СбисТипДокумент(СбисТипОбъекта) Тогда
			Попытка
				СбисОбъектЗначение = Документы[СбисИмяОбъекта].СоздатьДокумент();
			Исключение
				Отказ = Истина;
				Возврат Новый Структура("code,message,details", 773, "Ошибка создания документа", ОписаниеОшибки());
			КонецПопытки;
			СбисОбъектЗначение.УстановитьСсылкуНового(Документы[СбисИмяОбъекта].ПолучитьСсылку(СбисИдентификаторОбъекта));
		КонецЕсли;
		ОбновитьСопоставление = Истина;
	КонецЕсли;
	
	Результат = Новый Структура("Объект", СбисОбъектЗначение);
	Если ОбновитьСопоставление Тогда 
		Результат.Вставить("ДанныеМаппинга", Новый Структура("ClientId", Строка(СбисИдентификаторОбъекта)));
	КонецЕсли;
	Возврат Результат
КонецФункции

// Поиск объекта по данным из рассчитанной структуры на основании запроса в ини файле
// Тип - Тип объекта в 1С 
// Имя - Имя объекта в 1С
// СтруктураОбъекта - Структура рассчитанного объекта ИС с приведенными типами для поиска
// Ини - Значение ИНИ объекта, необходимо для поиска
// Возвращает ссылку на объект
&НаСервереБезКонтекста
Функция СбисНайтиСсылкуОбъекта(Знач СбисСтруктураОбъекта)
	Перем КлючиОбъекта;
	Перем ЗначениеРеквизита;
	Если	Не СбисСтруктураОбъекта.Свойство("Ключи", КлючиОбъекта) 
		Или	Не ЗначениеЗаполнено(КлючиОбъекта) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СбисТипОбъекта = Лев(СбисСтруктураОбъекта.Тип, Найти(СбисСтруктураОбъекта.Тип,".") - 1);
	СбисИмяОбъекта = Прав(СбисСтруктураОбъекта.Тип, СтрДлина(СбисСтруктураОбъекта.Тип) - Найти(СбисСтруктураОбъекта.Тип,"."));
	Если СбисТипСправочник(НРег(СбисТипОбъекта)) Тогда
		СбисТипОбъекта = "Справочник";
	ИначеЕсли СбисТипДокумент(НРег(СбисТипОбъекта)) Тогда
		СбисТипОбъекта = "Документ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|   " + СбисТипОбъекта + "."+ СбисИмяОбъекта +" КАК Объект
	|ГДЕ
	| ";
	Для Каждого Элемент Из КлючиОбъекта Цикл
		ИмяРеквизита = Элемент.Значение.Значение;
		Если СбисСтруктураОбъекта.СтруктураОбъекта.Свойство(ИмяРеквизита, ЗначениеРеквизита) Тогда
			Запрос.УстановитьПараметр(ИмяРеквизита, ЗначениеРеквизита);
			Если ТипЗнч(ЗначениеРеквизита) = "Дата" Тогда
				Запрос.Текст = Запрос.Текст + "Объект." + ИмяРеквизита + " МЕЖДУ НАЧАЛОПЕРИОДА(&" + ИмяРеквизита + ", ДЕНЬ) И КОНЕЦПЕРИОДА(&" + ИмяРеквизита + ", ДЕНЬ) И ";
			Иначе
				Запрос.Текст = Запрос.Текст + "Объект." + ИмяРеквизита + "=&"+ИмяРеквизита + " И ";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-3);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество()>0 Тогда
		Пока Выборка.Следующий() Цикл
			Возврат Выборка.Ссылка;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// VII Формируем структуру API3 объекта из объекта 1С. Сделано тк, для минимальной реализации требований по клиенту.
&НаСервереБезКонтекста
Функция СбисПолучитьСтруктуруОбъекта1С(ОбъектСсылка, Знач СтруктураДокумента, Отказ) Экспорт
	Попытка
		СтруктураОбъекта = Новый Структура();
		СтруктураОбъекта.Вставить("ИдИС",				ОбъектСсылка.УникальныйИдентификатор());
		СтруктураОбъекта.Вставить("ИмяИС",				ПолучитьИмяИСПоСсылке(ОбъектСсылка));//"Документы.АвансовыйОтчет"
		СтруктураОбъекта.Вставить("ИмяСБИС",			СтруктураДокумента.ИмяСБИС);
		СтруктураОбъекта.Вставить("ИдСБИС",				СтруктураДокумента.ИдСБИС);	
		СтруктураОбъекта.Вставить("Номер",				ОбъектСсылка.Номер);
		СтруктураОбъекта.Вставить("Дата", 				Формат(ОбъектСсылка.Дата, "ДФ=dd.MM.yyyy"));
		СтруктураОбъекта.Вставить("НашаОрганизация",	СтруктураДокумента.НашаОрганизация);
		СтруктураОбъекта.Вставить("РабочаяГруппа",		СтруктураДокумента.РабочаяГруппа);
		СтруктураОбъекта.Вставить("ЧастноеЛицо",		СтруктураДокумента.ЧастноеЛицо);
		Если ОбъектСсылка.Комментарий <> "" Тогда 
			СтруктураОбъекта.Вставить("Комментарий", ОбъектСсылка.Комментарий);
		КонецЕсли;
		Возврат СтруктураОбъекта;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Ошибка получения структуры документа", ОписаниеОшибки());
	КонецПопытки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяИСПоСсылке(СсылкаОбъект1С)
	Если		Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаОбъект1С)) Тогда
		Возврат "Справочники." + СсылкаОбъект1С.Метаданные().Имя;
	ИначеЕсли	Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаОбъект1С)) Тогда
		Возврат "Документы." + СсылкаОбъект1С.Метаданные().Имя;
	КонецЕсли;
	ВызватьИсключение("Неподдерживаемый тип ИС по ссылке " + Строка(СсылкаОбъект1С));
КонецФункции

// Функция заполняет реквизиты объекта 1С из одноименных полей структуры. Поддерживаемые типы: Документ, Справочник	
&НаСервереБезКонтекста
Функция ЗаполнитьИЗаписатьОбъектИзСтруктуры(Объект1С, СтруктураОбъекта, Отказ) Экспорт	
	Попытка
		Для Каждого КлючИЗначениеСтруктуры Из СтруктураОбъекта Цикл
			Если ТипЗнч(КлючИЗначениеСтруктуры.Значение) = Тип("Массив") Тогда
				Объект1С[КлючИЗначениеСтруктуры.Ключ].Очистить();
				Для Каждого СбисСтрокаМассива Из КлючИЗначениеСтруктуры.Значение Цикл
					НоваяСтрока = Объект1С[КлючИЗначениеСтруктуры.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СбисСтрокаМассива);
				КонецЦикла;
			Иначе
				Если КлючИЗначениеСтруктуры.Ключ = "ЭтоГруппа" или КлючИЗначениеСтруктуры.Ключ = "IsFolder" Тогда
					Если КлючИЗначениеСтруктуры.Значение <> Объект1С[КлючИЗначениеСтруктуры.Ключ] Тогда
						Отказ = Истина;
						Возврат Новый Структура("code,message,details,dump", 773, "Ошибка заполнения структуры объекта", "Значения реквизита ЭтоГруппа объекта 1С не соовтетсвует значению реквизита объекта СБИС", Новый Структура("Ключ", КлючИЗначениеСтруктуры.Ключ));
					КонецЕсли;
				Иначе
					Объект1С[КлючИЗначениеСтруктуры.Ключ] = КлючИЗначениеСтруктуры.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details,dump", 773, "Ошибка заполнения структуры объекта", ОписаниеОшибки(), Новый Структура("Ключ", КлючИЗначениеСтруктуры.Ключ));
	КонецПопытки;
	Попытка
		Объект1С.Записать();
	Исключение
		Отказ = Истина;
		Возврат Новый Структура("code,message,details", 773, "Ошибка записи объекта", ОписаниеОшибки());
	КонецПопытки;
	Возврат Объект1С.Ссылка;
КонецФункции

////////////////////////////////////////////////////
/////////////Обработка XML конвертеров//////////////
////////////////////////////////////////////////////

//Функция применяет XSLT к указанному XML
&НаКлиенте
Функция сбисПрименитьXSLT(Кэш, ШаблонXML, ИмяXSLT, ДопПараметры, Отказ) Экспорт
	ШаблонXSLT = Неопределено;
	Если Не Кэш.Xslt.Свойство(ИмяXSLT, ШаблонXSLT) Тогда
		Если Кэш.Парам.РежимОтладки Тогда
			сбисНазваниеПапки = Неопределено;
			Если Не ДопПараметры.Свойство("Название", сбисНазваниеПапки) Тогда
				сбисНазваниеПапки = "";
			КонецЕсли;
			лОтладочныеДанные = Новый Структура("XML", Новый Массив);
			лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Ложь, ШаблонXML, ИмяXSLT, сбисНазваниеПапки);
			лОтладочныеДанные.XML.Добавить(лЗаписьXML);
			сбисСохранитьОтладочныеДанные(Кэш, лОтладочныеДанные, Неопределено);
		КонецЕсли;
		Возврат ШаблонXML;
	КонецЕсли;
	
	Попытка
		РезультатПреобразования = сбисПреобразоватьШаблон(ШаблонXML, ШаблонXSLT, ИмяXSLT, Кэш.СовместимостьМетодов);
	Исключение
		Отказ = Истина;
		РезультатПреобразования = сбисИсключение(, "ОбщиеФункции.сбисПрименитьXSLT", 770, "Ошибка XSLT", ОписаниеОшибки(),
		Новый Структура("ИмяXSLT, СовместимостьМетодов", ИмяXSLT, Кэш.СовместимостьМетодов));
	КонецПопытки;
	Если Кэш.Парам.РежимОтладки Тогда
		сбисНазваниеПапки = Неопределено;
		Если Не ДопПараметры.Свойство("Название", сбисНазваниеПапки) Тогда
			сбисНазваниеПапки = "";
		КонецЕсли;
		лОтладочныеДанные = Новый Структура("XML,XSLT", Новый Массив, Новый Массив);
		лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Ложь, ШаблонXSLT, ИмяXSLT, сбисНазваниеПапки);
		лОтладочныеДанные.XSLT.Добавить(лЗаписьXML);
		
		лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Ложь, ШаблонXML, ИмяXSLT + "_origin", сбисНазваниеПапки);
		лОтладочныеДанные.XML.Добавить(лЗаписьXML);
		лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Отказ, РезультатПреобразования, ИмяXSLT, сбисНазваниеПапки);
		лОтладочныеДанные.XML.Добавить(лЗаписьXML);
		сбисСохранитьОтладочныеДанные(Кэш, лОтладочныеДанные, Неопределено);
	КонецЕсли;
	
	Возврат РезультатПреобразования;
	
КонецФункции

//Функция делает преобразование структуры документа к XML и ищет подходящий xslt. Вызывает преобразование, если есть
&НаКлиенте
Функция сбисПолучитьXMLФайлаИзСтруктуры(Кэш, Вложение, Отказ=Ложь) Экспорт
	
	ИмяXSLT					= сбисИмяXSLTДляВложения(Кэш, Вложение.СтруктураФайла.Файл, Вложение);
	ИмяXSLTФайлИмя			= "ФайлИмя_"+ИмяXSLT;
	
	сбисДопПараметры		= Новый Структура;
	сбисДопПараметры.Вставить("ИмяXSLTФайлИмя",ИмяXSLTФайлИмя);
	Если Вложение.Свойство("Название") Тогда
		сбисДопПараметры.Вставить("Название", Вложение.Название);
	КонецЕсли;
	
	РезультатПреобразования = сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент(Кэш, Вложение.СтруктураФайла, ИмяXSLT, сбисДопПараметры, Отказ);
	Если Отказ Тогда
		РезультатПреобразования = сбисИсключение(РезультатПреобразования, "ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктуры");
		Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатПреобразования);
		Возврат Неопределено;
	КонецЕсли;
	Возврат РезультатПреобразования;
КонецФункции

&НаКлиенте
Функция сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент(Кэш, СтруктураФайла, ИмяXSLT, сбисДополнительныеПараметры, Отказ) Экспорт
	XSLTПреобразование	= Неопределено;
	ЕстьXSLT = ЗначениеЗаполнено(ИмяXSLT) И Кэш.XSLT.Свойство(ИмяXSLT, XSLTПреобразование);
	
	//KES МОТП ИСМП Имя файла через xslt -->
	XSLTПреобразованиеФайлИмя = Неопределено;
	ЕстьXSLTФайлИмя = сбисДополнительныеПараметры.Свойство("ИмяXSLTФайлИмя") 
	И ЗначениеЗаполнено(сбисДополнительныеПараметры.ИмяXSLTФайлИмя)
	И Кэш.XSLT.Свойство(сбисДополнительныеПараметры.ИмяXSLTФайлИмя,XSLTПреобразованиеФайлИмя);
	
	Если ЕстьXSLTФайлИмя Тогда
		сбисДополнительныеПараметры.Вставить("ШаблонXSLTФайлИмя",XSLTПреобразованиеФайлИмя);
	КонецЕсли;
	//KES <--
	
	Если Не сбисДополнительныеПараметры.Свойство("ПреобразованиеXSL") Тогда
		сбисДополнительныеПараметры.Вставить("ПреобразованиеXSL", Кэш.СовместимостьМетодов.ПреобразованиеXSL);
	КонецЕсли;
	
	//KES МОТП ИСМП Имя файла через xslt -->
	РезультатПреобразованияСтруктура = сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Сервер(СтруктураФайла, XSLTПреобразование, ИмяXSLT, сбисДополнительныеПараметры, Отказ);
	Если ТипЗнч(РезультатПреобразованияСтруктура) = Тип("Структура") Тогда
		РезультатПреобразования = РезультатПреобразованияСтруктура.РезультатПреобразования;
		Если РезультатПреобразованияСтруктура.Свойство("ИмяФайла") И СтруктураФайла.Свойство("Файл") Тогда
			СтруктураФайла.Файл.Вставить("Имя",РезультатПреобразованияСтруктура.ИмяФайла);
		КонецЕсли;
	Иначе 
		РезультатПреобразования = РезультатПреобразованияСтруктура;
	КонецЕсли;
	//KES <--
	
	
	Если Отказ Тогда
		РезультатПреобразования = сбисИсключение(РезультатПреобразования, "ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Сервер");
		РезультатПреобразования = сбисИсключение(РезультатПреобразования, "ОбщиеФункции.сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Клиент");
	КонецЕсли;
	Если Кэш.Парам.РежимОтладки Тогда//В режиме отладки запишем данные по XML в выбранный каталог
		лОтладочныеДанные	= Новый Структура("XML,XSLT", Новый Массив, Новый Массив);
		сбисНазваниеПапки	= сбисФорматКаталога("Выгрузка", Кэш.ПараметрыСистемы.Клиент);
		Если сбисДополнительныеПараметры.Свойство("Название") Тогда
			сбисНазваниеПапки = сбисНазваниеПапки + сбисДополнительныеПараметры.Название;
		КонецЕсли;
		
		Если ЕстьXSLT Тогда
			лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Ложь, XSLTПреобразование, ИмяXSLT, сбисНазваниеПапки);
			лОтладочныеДанные.XSLT.Добавить(лЗаписьXML);
			
			лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Ложь, "", ИмяXSLT + "_origin", сбисНазваниеПапки);
			лЗаписьXML.Данные = сбисПреобразоватьДокументВXML(СтруктураФайла, Кэш.СовместимостьМетодов, лЗаписьXML.Отказ);
			лОтладочныеДанные.XML.Добавить(лЗаписьXML);
			лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Отказ, РезультатПреобразования, ИмяXSLT, сбисНазваниеПапки);
			лОтладочныеДанные.XML.Добавить(лЗаписьXML);
		Иначе
			лЗаписьXML = Новый Структура("Отказ, Данные, Имя, Папка", Отказ, РезультатПреобразования, Строка(ИмяXSLT) + "_origin", сбисНазваниеПапки);
			лОтладочныеДанные.XML.Добавить(лЗаписьXML);
		КонецЕсли;
		сбисСохранитьОтладочныеДанные(Кэш, лОтладочныеДанные, Неопределено);
	КонецЕсли;
	Возврат РезультатПреобразования;
КонецФункции

&НаСервереБезКонтекста
Функция сбисПолучитьXMLФайлаИзСтруктурыПоИмениXSLT_Сервер(Знач СтруктураФайла, Знач ШаблонXSLT, Знач ИмяXSLT, Знач сбисДополнительныеПараметры, Отказ) Экспорт
	ШаблонXML = сбисПреобразоватьДокументВXML(СтруктураФайла, сбисДополнительныеПараметры, Отказ);
	Если	Отказ
		Или	ШаблонXSLT = Неопределено Тогда 
		Возврат  Новый Структура("РезультатПреобразования",ШаблонXML);
	КонецЕсли;
	
	//KES МОТП ИСМП применить к ШаблонXML-->
	Попытка
		XSLTПреобразованиеФайлИмя = Неопределено;
		//основной xslt
		РезультатПреобразования = сбисПреобразоватьШаблон(ШаблонXML, ШаблонXSLT, ИмяXSLT, сбисДополнительныеПараметры);
	Исключение
		Отказ = Истина;
		РезультатПреобразования = Новый Структура("code,message,details", 770, "Ошибка XSLT", ОписаниеОшибки());
		Возврат Новый Структура("РезультатПреобразования",РезультатПреобразования);
	КонецПопытки;
	
	ИмяФайла = Неопределено;
	Если  сбисДополнительныеПараметры.Свойство("ШаблонXSLTФайлИмя") И ЗначениеЗаполнено(сбисДополнительныеПараметры.ШаблонXSLTФайлИмя) Тогда
		Попытка
			//xslt на Имя
			сбисДополнительныеПараметры.Вставить("output","text");
			ИмяФайла = сбисПреобразоватьШаблон(РезультатПреобразования, сбисДополнительныеПараметры.ШаблонXSLTФайлИмя, сбисДополнительныеПараметры.ИмяXSLTФайлИмя, сбисДополнительныеПараметры);
		Исключение
			Отказ = Истина;
			РезультатПреобразования = Новый Структура("code,message,details", 770, "Ошибка XSLT", ОписаниеОшибки());
			Возврат Новый Структура("РезультатПреобразования",РезультатПреобразования);
		КонецПопытки;
	ИначеЕсли СтруктураФайла.Свойство("Файл") И СтруктураФайла.Файл.Свойство("Имя") Тогда 
		ИмяФайла = СтруктураФайла.Файл.Имя;
	КонецЕсли;
	
	Возврат Новый Структура("РезультатПреобразования,ИмяФайла",РезультатПреобразования,ИмяФайла);
	//<--KES МОТП ИСМП применить к ШаблонXML
КонецФункции

//Функция Получает Имя XSLT для указанного вложения
&НаКлиенте
Функция сбисИмяXSLTДляВложения(Кэш, СтруктураФайла, сбисДополнительныеПараметры) Экспорт 
	
	Файл_Формат			= сбисЗаменитьНедопустимыеСимволы(СтруктураФайла.Формат);
	Файл_ВерсияФормата	= сбисЗаменитьНедопустимыеСимволы(СтруктураФайла.ВерсияФормата);
	
	ПодТип = Неопределено;
	
	Если	Не сбисДополнительныеПараметры.Свойство("ПодТип", ПодТип)
		Или	Не ЗначениеЗаполнено(ПодТип) Тогда
		ПодТип = сбисПодтипПоУмолчанию(Файл_Формат);// на случай, если используется пользовательская настройка без указания подтипа вложения
	КонецЕсли;	
	ИмяXSLT = Файл_Формат + "_" + ПодТип + "_" + Файл_ВерсияФормата;
	
	Если сбисДополнительныеПараметры.Свойство("Получатель") Тогда
		РасширениеXSLT = сбисРасширениеXSLTПолучателя(сбисДополнительныеПараметры.Получатель);
		Если ЗначениеЗаполнено(РасширениеXSLT) Тогда 
			ИмяXSLT = ИмяXSLT + "_" + РасширениеXSLT;
		КонецЕсли;
	КонецЕсли;
	Возврат ИмяXSLT;
	
КонецФункции

&НаКлиенте
Функция сбисРасширениеXSLTПолучателя(сбисПолучатель) Экспорт 
	
	ПараметрыXSLT = сбисПолучатель;
	Если	ТипЗнч(ПараметрыXSLT) = Тип("Структура")
		И	ПараметрыXSLT.Свойство("Параметр", ПараметрыXSLT) Тогда
		Для Каждого ПараметрXSLT Из ПараметрыXSLT Цикл
			ПараметрИмя		= Неопределено;
			ПараметрЗначение= Неопределено;
			Если	Не ПараметрXSLT.Свойство("Имя",			ПараметрИмя)
				Или	Не ПараметрXSLT.Свойство("Значение",	ПараметрЗначение) Тогда
				Продолжить;
			КонецЕсли;
			Если ПараметрИмя = "СБИС_КодXSLT" Тогда
				Возврат ПараметрЗначение;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура сбисСохранитьОтладочныеДанные(Кэш, ДанныеЗаписать, ДополнительныеПараметры=Неопределено) Экспорт 
	
	ПараметрКЗаписи = Неопределено;
	Если ДанныеЗаписать.Свойство("XML", ПараметрКЗаписи) Тогда
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			ШаблонXML = ЗаписьПараметра.Данные;
			Если ЗаписьПараметра.Отказ Тогда
				ШаблонXML = Кэш.РаботаСJson.ПреобразоватьЗначениеВJson(ШаблонXML);
			КонецЕсли;
			ОшибкаЗаписи	= Ложь;
			сбисПутьЗаписи	= Кэш.Парам.КаталогОтладки;
			Если	ЗаписьПараметра.Свойство("Папка")
				И	ЗначениеЗаполнено(ЗаписьПараметра.Папка) Тогда
				сбисПутьЗаписи = сбисФорматКаталога(сбисПутьЗаписи + ЗаписьПараметра.Папка, Кэш.ПараметрыСистемы.Клиент);
			КонецЕсли;
			РезультатЗаписи = сбисЗаписатьФайл_Клиент(Кэш, Новый Структура("Путь, Имя, Расширение, Данные, Кодировка", сбисПутьЗаписи, ЗаписьПараметра.Имя, "xml", ШаблонXML, "windows-1251"), ОшибкаЗаписи);
			Если ОшибкаЗаписи Тогда
				Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеЗаписать.Свойство("XSLT", ПараметрКЗаписи) Тогда
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			ОшибкаЗаписи	= Ложь;
			сбисПутьЗаписи	= Кэш.Парам.КаталогОтладки;
			Если	ЗаписьПараметра.Свойство("Папка")
				И	ЗначениеЗаполнено(ЗаписьПараметра.Папка) Тогда
				сбисПутьЗаписи = сбисФорматКаталога(сбисПутьЗаписи + ЗаписьПараметра.Папка, Кэш.ПараметрыСистемы.Клиент);
			КонецЕсли;
			РезультатЗаписи = сбисЗаписатьФайл_Клиент(Кэш, Новый Структура("Путь, Имя, Расширение, Данные, Кодировка", сбисПутьЗаписи, ЗаписьПараметра.Имя, "xslt", ЗаписьПараметра.Данные,  КодировкаТекста.UTF8), ОшибкаЗаписи);
			Если ОшибкаЗаписи Тогда
				Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеЗаписать.Свойство("Log", ПараметрКЗаписи) Тогда
		СбисИмяМодуля	= Неопределено;
		ОшибкаЗаписи	= Ложь;
		СбисИмяПапкиЛог	= Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		СбисПутьЗаписи	= сбисФорматКаталога(сбисФорматКаталога(Кэш.Парам.КаталогОтладки + "Log", Кэш.ПараметрыСистемы.Клиент) + СбисИмяПапкиЛог, Кэш.ПараметрыСистемы.Клиент);
		//Если Не	ЗаписьПараметра.Свойство("Модуль", СбисИмяМодуля) Тогда
		//	СБисИмяМодуля = "Неизвестно";
		//КонецЕсли;
		ФайлТест = Новый Файл(СбисПутьЗаписи);
		Если	Не ФайлТест.Существует()
			Или	Не ФайлТест.ЭтоКаталог() Тогда 
			Попытка
				СоздатьКаталог(СбисПутьЗаписи);
			Исключение
				Отказ = Истина;
				Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, сбисИсключение(, "РаботаСДокументами1С.сбисСохранитьОтладочныеДанные",772, "Ошибка работы с файловой системой", "Ошибка доступа к каталогу записи логов " + СбисПутьЗаписи + ". Детально: " + ИнформацияОбОшибке().Описание));
			КонецПопытки;
		КонецЕсли;
		СбисФорматЛога = "{Время}{Тип}{Вызов}{Идентификатор}{Сообщение}";
		Для Каждого ЗаписьПараметра Из ПараметрКЗаписи Цикл
			СбисИмяМодуля = ЗаписьПараметра.Модуль + ".txt";
			СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрЗаменить(СбисФорматЛога, 
			"{Время}",		СбисДополнитьСтроку(Формат(ЗаписьПараметра.Время, "ДФ=HH:mm:ss"),10)),
			"{Тип}",		СбисДополнитьСтроку(ЗаписьПараметра.Тип, 10)),
			"{Сообщение}",	ЗаписьПараметра.Сообщение);
			Если ЗаписьПараметра.Свойство("Идентификатор") Тогда
				СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрокаНаВывод, 
				"{Вызов}",			СбисДополнитьСтроку(ЗаписьПараметра.Вызов, 30)),
				"{Идентификатор}",	СбисДополнитьСтроку(ЗаписьПараметра.Идентификатор, 40));
			Иначе
				СтрокаНаВывод = СтрЗаменить(СтрЗаменить(СтрокаНаВывод, 
				"{Вызов}",			СбисДополнитьСтроку(ЗаписьПараметра.Вызов, 70)),
				"{Идентификатор}",	"");
			КонецЕсли;
			ТекстДок = Новый ТекстовыйДокумент;
			ФайлТест = Новый Файл(СбисПутьЗаписи + СбисИмяМодуля);
			Если ФайлТест.Существует() Тогда
				ТекстДок.Прочитать(СбисПутьЗаписи + СбисИмяМодуля);
			КонецЕсли;							
			ТекстДок.ДобавитьСтроку(СтрокаНаВывод);
			ТекстДок.Записать(СбисПутьЗаписи + СбисИмяМодуля);
			//Если ОшибкаЗаписи Тогда
			//	Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, РезультатЗаписи);
			//КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СбисДополнитьСтроку(Знач СтрокаИсх, ДлинаСтрокиДополнить, СимволДополнить = " ") Экспорт
	СтрокаРезультат = Лев(СтрокаИсх, ДлинаСтрокиДополнить);
	Пока  СтрДлина(СтрокаРезультат) < ДлинаСтрокиДополнить Цикл
		СтрокаРезультат = СтрокаРезультат + СимволДополнить;
	КонецЦикла;
	Возврат СтрокаРезультат;
КонецФункции

//Функция применяет шаблон xslt в выбранному XML в контексте сервера
&НаСервереБезКонтекста
Функция сбисПреобразоватьШаблон(Знач ШаблонXML, Знач ШаблонXSLT, Знач ИмяXSLT, Знач ДополнительныеПараметры) Экспорт
	Результат = Неопределено;
	ПреобразованиеXSL = Новый ПреобразованиеXSL;
	
	Если ДополнительныеПараметры.ПреобразованиеXSL.ПреобразоватьИзСтроки Тогда
		ПреобразованиеXSL.ЗагрузитьТаблицуСтилейXSLИзСтроки(ШаблонXSLT);
		Результат = ПреобразованиеXSL.ПреобразоватьИзСтроки(ШаблонXML);
	Иначе
		//Для старых платформ остаётся через запись и чтение из файла, так как проблема с кодировкой строки
		ПреобразованиеXSL.ЗагрузитьИзСтроки(ШаблонXSLT);
		
		ИсхФайл = Новый ТекстовыйДокумент;
		ИсхФайл.УстановитьТекст(ШаблонXML);
		ИмяИсходногоФайла = КаталогВременныхФайлов() + ИмяXSLT + "_origin.xml";
		ИсхФайл.Записать(ИмяИсходногоФайла, "windows-1251");
		Если ДополнительныеПараметры.Свойство("output") И ДополнительныеПараметры.output = "text" Тогда
			Результат = ПреобразованиеXSL.ПреобразоватьИзФайла(ИмяИсходногоФайла);
		Иначе
			XML = Новый ЗаписьXML();
			XML.УстановитьСтроку("windows-1251");
			ПреобразованиеXSL.ПреобразоватьИзФайла(ИмяИсходногоФайла, XML);
			Результат = XML.Закрыть();
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//Функция формирует строку xml на основании структуры документа	
&НаСервереБезКонтекста
Функция сбисПреобразоватьДокументВXML(Знач Док, Знач ДополнительныеПараметры, Отказ) Экспорт
	
	ОбъектXML = Новый ЗаписьXML;
	Если ДополнительныеПараметры.Свойство("Кодировка") Тогда
		ОбъектXML.УстановитьСтроку(ДополнительныеПараметры.Кодировка);
	Иначе	
		ОбъектXML.УстановитьСтроку("windows-1251");
	КонецЕсли;
	ОбъектXML.ЗаписатьОбъявлениеXML();
	Попытка
		Если	ДополнительныеПараметры.Свойство("СПростымиЭлементами")
			И	ДополнительныеПараметры.СПростымиЭлементами Тогда
			ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, Док);
		Иначе
			ЗаписатьСтруктуруВXML(ОбъектXML, Док);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ОбъектXML = Неопределено;
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Новый Структура("code, message, details", 766, "Ошибка при конвертации", СтрЗаменить(ОписаниеОшибки, "%Заменить%", ""));
	КонецПопытки;
	Возврат ОбъектXML.Закрыть();
	
КонецФункции

//Процедура рекурсивно заполняет ЗаписьXML на основании структуры
&НаСервереБезКонтекста
Процедура ЗаписатьСтруктуруВXML(ОбъектXML, Знач СтруктураДокумента) Экспорт
	Для Каждого Элемент Из СтруктураДокумента Цикл
		ТипЗначенияЭлемент = ТипЗнч(Элемент.Значение);
		Если		ТипЗначенияЭлемент = Тип("Строка") Тогда
			ЗначениеВXML = СокрЛП(Элемент.Значение);
		ИначеЕсли	ТипЗначенияЭлемент = Тип("Число") Тогда
			ЗначениеВXML = Формат(Элемент.Значение,"ЧРД=.; ЧГ=0");
		ИначеЕсли	ТипЗначенияЭлемент = Тип("Дата") Тогда
			ЗначениеВXML = Строка(Элемент.Значение);
		ИначеЕсли	ТипЗначенияЭлемент = Тип("Структура") Тогда
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
			Попытка
				ЗаписатьСтруктуруВXML(ОбъектXML, Элемент.Значение);
			Исключение//Укажем точное место, где произошла ошибка
				ОписаниеОшибки = ИнформацияОбОшибке().Описание;
				ВызватьИсключение(СтрЗаменить(ОписаниеОшибки, "%Заменить%", "%Заменить%" + Элемент.Ключ + "."));
			КонецПопытки;
			ОбъектXML.ЗаписатьКонецЭлемента();
			Продолжить;
		ИначеЕсли	ТипЗначенияЭлемент = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
					Попытка
						ЗаписатьСтруктуруВXML(ОбъектXML, ЭлементМассива);
					Исключение//Укажем точное место, где произошла ошибка
						ОписаниеОшибки = ИнформацияОбОшибке().Описание;
						ВызватьИсключение(СтрЗаменить(ОписаниеОшибки, "%Заменить%", "%Заменить%" + Элемент.Ключ + "."));
					КонецПопытки;
					ОбъектXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЦикла;
			Продолжить;			
		Иначе//неопознанный тип данных
			ЗначениеВXML = Строка(Элемент.Значение);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗначениеВXML) Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ОбъектXML.ЗаписатьАтрибут(Элемент.Ключ, ЗначениеВXML);
		Исключение
			ВызватьИсключение("Ошибка обработки узла %Заменить%" + Элемент.Ключ + "=" + ЗначениеВXML + ". Детально: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла
КонецПроцедуры

//Процедура рекурсивно заполняет ЗаписьXML на основании структуры (xml с простыми элементами. Для записи атрибутов - ключ Атрибуты)
&НаСервереБезКонтекста
Процедура ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, Знач СтруктураДокумента) Экспорт
	Для Каждого Элемент Из СтруктураДокумента Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
			ЗначениеВXML = СокрЛП(Элемент.Значение);
			Если Элемент.Ключ = "ЗначениеУзла" Тогда
				Попытка
					ОбъектXML.ЗаписатьТекст(ЗначениеВXML);
				Исключение
					ВызватьИсключение("Ошибка обработки узла %Заменить%" + Элемент.Ключ + "=" + ЗначениеВXML + ". Детально: " + ОписаниеОшибки());
				КонецПопытки;
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Число") Тогда
			ЗначениеВXML = Формат(Элемент.Значение,"ЧРД=.; ЧГ=0");
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
			ЗначениеВXML = Формат(Элемент.Значение,"ДФ=""дд.ММ.гггг ЧЧ.мм.сс""");
		ИначеЕсли Элемент.Значение = Неопределено И Элемент.Ключ <> "ЗначениеУзла" Тогда
			ЗначениеВXML = "";
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			Если Элемент.Ключ = "Атрибуты" Тогда
				Для Каждого Атрибут Из Элемент.Значение Цикл
					ЗначениеАтрибута = СокрЛП(Атрибут.Значение);
					Если Не ЗначениеЗаполнено(ЗначениеАтрибута) Тогда
						Продолжить;
					КонецЕсли;		 
					Попытка
						ОбъектXML.ЗаписатьАтрибут(Атрибут.Ключ, ЗначениеАтрибута);
					Исключение
						ВызватьИсключение("Ошибка обработки узла %Заменить%Атрибуты." + Атрибут.Ключ + "=" + ЗначениеАтрибута + ". Детально: " + ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;
				Продолжить;
			КонецЕсли;
			Попытка
				ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
				ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, Элемент.Значение);
				ОбъектXML.ЗаписатьКонецЭлемента();
			Исключение//Укажем точное место, где произошла ошибка
				ОписаниеОшибки = ИнформацияОбОшибке().Описание;
				ВызватьИсключение(СтрЗаменить(ОписаниеОшибки, "%Заменить%", "%Заменить%" + Элемент.Ключ + "."));
			КонецПопытки;
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			Для сИндексМассива = 0 По Элемент.Значение.Количество()-1 Цикл
				Попытка
					ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);	
					ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML, Элемент.Значение[сИндексМассива]);
					ОбъектXML.ЗаписатьКонецЭлемента();
				Исключение//Укажем точное место, где произошла ошибка
					ОписаниеОшибки = ИнформацияОбОшибке().Описание;
					ВызватьИсключение(СтрЗаменить(ОписаниеОшибки, "%Заменить%", "%Заменить%" + Элемент.Ключ + "[" + сИндексМассива +"]."));
				КонецПопытки;
			КонецЦикла;
			Продолжить;
		Иначе
			Продолжить;
		КонецЕсли;
		Попытка
			ОбъектXML.ЗаписатьНачалоЭлемента(Элемент.Ключ);
			ОбъектXML.ЗаписатьТекст(ЗначениеВXML);
			ОбъектXML.ЗаписатьКонецЭлемента();
		Исключение
			ВызватьИсключение("Ошибка обработки узла %Заменить%" + Элемент.Ключ + "=" + ЗначениеВXML + ". Детально: " + ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьXMLСПростымиЭлементами(Док, кодировка = "windows-1251") Экспорт
	// функция формирует строку xml на основании структуры	(xml без атрибутов, с простыми элементами)
	ОбъектXML = Новый ЗаписьXML;
	ОбъектXML.УстановитьСтроку(кодировка);
	ОбъектXML.ЗаписатьОбъявлениеXML();
	Попытка
		ЗаписатьСтруктуруВXMLСПростымиЭлементами(ОбъектXML,Док);
	Исключение
		ВызватьИсключение(СтрЗаменить(ИнформацияОбОшибке().Описание, "%Заменить%", ""));
	КонецПопытки;
	СтрXML = ОбъектXML.Закрыть();
	Возврат СтрXML;
КонецФункции

////////////////////////////////////////////////////
///////////////Результат действия///////////////////
////////////////////////////////////////////////////

//Функция описания типового результата выполнения действия
&НаКлиенте
Функция РезультатДействия_Получить(Кэш, ДопПараметры, НовоеДействие=Ложь) Экспорт 
	РезультатДействия = Неопределено;
	Если		НовоеДействие
		Или Не	Кэш.Свойство("РезультатДействия", РезультатДействия) Тогда 
		РезультатДействия = РезультатДействия_Новый(Кэш, ДопПараметры);
		Кэш.Вставить("РезультатДействия", РезультатДействия);
	КонецЕсли;
	Возврат РезультатДействия;
КонецФункции

//Функция описания типового результата выполнения действия
&НаКлиенте
Функция РезультатДействия_Новый(Кэш, ДопПараметры) Экспорт
	РезультатДействия = Новый Структура("Время, Всего, Действие, Ошибки, Параметры", 
	Новый Структура("Запись, Начало, Конец, ОжиданиеОтвета, Выполнение, ПолучениеДанных, Подготовка",0,0,0,0,0,0,0), 
	Новый Структура("Выполнено, НеВыполнено, ОшибокВыполнения, ОшибокПодготовки", 0,0,0,0),
	Новый Структура("ДетализацияВыполнено, ДетализацияНеВыполнено", Новый Соответствие,Новый Соответствие),
	Новый Структура("ДетализацияОшибок,СоответствиеКодов", Новый Соответствие,Новый Соответствие),
	Новый Структура("КоличествоСвободныхПотоков, КоличествоОтветов, ПорНомер, ПредставлениеОперации, ФормаВызова, СформированныеДанные, ДанныеПоСтатусам", 30));
	РезультатДействия.Время.Начало = сбисТекущаяДатаВМиллисекундах(Кэш);
	Если ЗначениеЗаполнено(ДопПараметры) Тогда
		РезультатДействия_Заполнить(РезультатДействия, ДопПараметры);
	КонецЕсли;
	Возврат РезультатДействия;
КонецФункции

//Сообщает пользователю результат выполнения действия.
&НаКлиенте
Процедура РезультатДействия_СообщитьРезультат(РезультатДействия, ДопПараметры) Экспорт
	СообщитьВыполнено	= Неопределено;
	СообщитьНеВыполнено	= Неопределено;
	СообщитьОшбики		= Неопределено;
	ПараметрыСообщить	= Неопределено;
	//Значения по-умолчанию.
	Если Не ДопПараметры.Свойство("СообщитьВыполнено", СообщитьВыполнено) Тогда
		СообщитьВыполнено = Истина;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("СообщитьОшибки", СообщитьОшбики) Тогда
		СообщитьОшбики = Истина;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("СообщитьНеВыполнено", СообщитьНеВыполнено) Тогда
		СообщитьНеВыполнено = Истина;
	КонецЕсли;
	Если Не ДопПараметры.Свойство("ПараметрыСообщить", ПараметрыСообщить) Тогда
		ПараметрыСообщить = Новый Структура();
		Если РезультатДействия.Параметры.ПредставлениеОперации = "ЗагрузкаДокумента" Тогда
			ПараметрыСообщить.Вставить("Выполнено",		Новый Структура("Текст", "Вложение %Название% загружено. "));
			ПараметрыСообщить.Вставить("НеВыполнено",	Новый Структура("Текст", "Вложение %Название% не загружено. "));
			ПараметрыСообщить.Вставить("Ошибки",		Новый Структура("Текст, Статус", "Вложение %Название% не загружено. ", СтатусСообщения.Внимание));
		КонецЕсли;
	КонецЕсли;
	//Показываем детализации
	Если СообщитьВыполнено Тогда
		РезультатДействия_СообщитьДетализацию(РезультатДействия.Действие.ДетализацияВыполнено, ПараметрыСообщить.Выполнено);
	КонецЕсли;
	Если СообщитьНеВыполнено Тогда
		РезультатДействия_СообщитьДетализацию(РезультатДействия.Действие.ДетализацияНеВыполнено, ПараметрыСообщить.НеВыполнено);
	КонецЕсли;
	Если СообщитьОшбики Тогда
		РезультатДействия_СообщитьДетализацию(РезультатДействия.Ошибки.ДетализацияОшибок, ПараметрыСообщить.Ошибки);
	КонецЕсли;	
КонецПроцедуры

//Сообщает все строки из детализации Действие, либо Ошибки
&НаКлиенте
Процедура РезультатДействия_СообщитьДетализацию(ЭлементДетализации, ДопПараметры) 
	СтатусСообщений = Неопределено;
	Если Не ДопПараметры.Свойство("Статус", СтатусСообщений) Тогда
		СтатусСообщений = СтатусСообщения.Обычное;
	КонецЕсли;
	Для Каждого КлючИЗначение Из ЭлементДетализации Цикл
		Для Каждого СтрокаДетализации Из КлючИЗначение.Значение Цикл
			ТекстДетализации = Неопределено;
			Если ДопПараметры.Свойство("Текст", ТекстДетализации) Тогда 
				СообщитьДетализацию	= Истина;
				ТекстДетализации	= СтрЗаменить(ТекстДетализации, "%Название%", СтрокаДетализации.Название);
			Иначе
				СообщитьДетализацию = Ложь;
			КонецЕсли;
			Если Не ПустаяСтрока(СтрокаДетализации.Сообщение) Тогда
				Сообщить(?(СообщитьДетализацию, ТекстДетализации, "") + СтрокаДетализации.Сообщение, СтатусСообщений);
				СообщитьДетализацию = Ложь;
			КонецЕсли;
			Если СтрокаДетализации.ОбработаныОбъекты1С.Количество() = 1 Тогда
				Сообщить(?(СообщитьДетализацию, ТекстДетализации, "") + СтрокаДетализации.ОбработаныОбъекты1С[0].Сообщение, СтатусСообщений);
			Иначе
				Если СообщитьДетализацию Тогда
					Сообщить(ТекстДетализации, СтатусСообщений);
					СообщитьДетализацию = Ложь;
				КонецЕсли;
				Для Каждого СтрокаРасшифровки Из СтрокаДетализации.ОбработаныОбъекты1С Цикл
					Сообщить(СтрокаРасшифровки.Сообщение, СтатусСообщений);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

//Дозаполняет поля результата переданными параметрами
&НаКлиенте
Процедура РезультатДействия_Заполнить(РезультатДействия, ДопПараметры)
	
	Для Каждого КлючИЗначение Из РезультатДействия Цикл
		Если ТипЗнч(КлючИЗначение.Значение) = Тип("Структура") Тогда
			РезультатДействия_Заполнить(КлючИЗначение.Значение, ДопПараметры);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ДопПараметры Цикл
		Если РезультатДействия.Свойство(КлючИЗначение.Ключ) Тогда
			РезультатДействия[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Добавляет строку в детализацию ошибок.
&НаКлиенте
Процедура РезультатДействия_ДобавитьОшибку(Кэш, РезультатДействия, ЭлементДетализации, ПараметрыОшибки, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	Отказ = Истина;
	РасширенноеОписаниеОшибки = ПараметрыОшибки.details;
	ТекстОшибки				= Неопределено;
	КодОшибки				= Неопределено;
	ТипОшибки				= Неопределено;
	сбисПараметрыСчетчика	= Неопределено;
	Если Не ПараметрыОшибки.Свойство("message",ТекстОшибки) Тогда
		//Если нет кода ошибки, то считаем её как 100.
		ТекстОшибки = "Неизвестная ошибка системы";
	КонецЕсли;
	Если Не ПараметрыОшибки.Свойство("code",КодОшибки) Тогда
		//Если нет кода ошибки, то считаем её как 100.
		КодОшибки = 100;
	КонецЕсли;
	Если КодОшибки = 100 Тогда
		//Если ошибка - 100, то проверяем наличие ошибки в соответствии кодов. (Можно будет добавить соответствие основных кодов ошибок)
		КодОшибки = РезультатДействия.Ошибки.СоответствиеКодов.Получить(ТекстОшибки);
		Если Не ЗначениеЗаполнено(КодОшибки) Тогда
			КодОшибки = 100;
		КонецЕсли;
	КонецЕсли;
	РезультатДействия.Ошибки.СоответствиеКодов.Вставить(ТекстОшибки, КодОшибки);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	Если Не	ДополнительныеПараметры.Свойство("ТипОшибки", ТипОшибки) Тогда
		ТипОшибки = "Выполнение";
	КонецЕсли;
	Если Не	ДополнительныеПараметры.Свойство("ПараметрыСчетчика", сбисПараметрыСчетчика) Тогда
		сбисПараметрыСчетчика = Новый Структура;
	КонецЕсли;
	ДопПараметр = Неопределено;
	Если ДополнительныеПараметры.Свойство("КлючДетализацииУдалить",ДопПараметр) Тогда
		//Очищаем из детализации результата ключ детализации, если необходимо
		ЭлементДетализации = РезультатДействия.Действие.ДетализацияДействия.Свойство(ДопПараметр);
		Если Не ЭлементДетализации = Неопределено Тогда
			РезультатДействия.Действие.ДетализацияДействия.Удалить(ДопПараметр);
		КонецЕсли;
	КонецЕсли;
	Если	сбисПараметрыСчетчика.Свойство("ОбработанКакУспех")
		И	сбисПараметрыСчетчика.ОбработанКакУспех Тогда
		РезультатДействия.Всего.Выполнено = РезультатДействия.Всего.Выполнено - 1;
		сбисПараметрыСчетчика.ОбработанКакУспех = Ложь;
	КонецЕсли;
	Если	Не сбисПараметрыСчетчика.Свойство("ОбработанКакОшибка")
		Или	Не сбисПараметрыСчетчика.ОбработанКакОшибка Тогда
		Если ТипОшибки = "Выполнение" Тогда
			РезультатДействия.Всего.ОшибокВыполнения = РезультатДействия.Всего.ОшибокВыполнения + 1;
		Иначе
			РезультатДействия.Всего.ОшибокПодготовки = РезультатДействия.Всего.ОшибокПодготовки + 1;
		КонецЕсли;
		сбисПараметрыСчетчика.Вставить("ОбработанКакОшибка", Истина);
	КонецЕсли;
	ЭлементСоответствия = РезультатДействия.Ошибки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия=Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		РезультатДействия.Ошибки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
	КонецЕсли;
	ЭлементДетализации.Сообщение = РасширенноеОписаниеОшибки;
	ЭлементСоответствия.Добавить(ЭлементДетализации);
	РезультатДействия_ДобавитьВремя(Кэш, РезультатДействия, ТипОшибки);
	
КонецПроцедуры	

//Добавляет строку в детализацию результата, в зависимости от того, было выполнено, или нет.
&НаКлиенте
Процедура РезультатДействия_ДобавитьРезультат(Кэш, РезультатДействия, ЭлементДетализации, ПараметрыРезультат, ДополнительныеПараметры=Неопределено) Экспорт
	
	Перем КлючГруппировки, КлючДобавления, СбисПараметрыСчетчика, СбисСчитать;
	
	КлючДобавления	= "Выполнено";
	СбисТип			= "Выполнение";
	Если Не ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("Тип") Тогда
			сбисТип = ДополнительныеПараметры.Тип;
		КонецЕсли;
	Иначе
		сбисПараметрыСчетчика = Новый Структура;
	КонецЕсли;
	Если	Не	ПараметрыРезультат.Свойство("Считать", СбисСчитать) Тогда
		СбисСчитать = Истина;
	КонецЕсли;
	Если		ПараметрыРезультат.Свойство("Выполнено") 
		И	Не	ПараметрыРезультат.Выполнено Тогда
		КлючДобавления = "Не" + КлючДобавления;
	КонецЕсли;
	Если Не ПараметрыРезультат.Свойство("КлючГруппировки", КлючГруппировки) Тогда
		КлючГруппировки = "-";
	КонецЕсли;
	Если Не	ПараметрыРезультат.Свойство("ПараметрыСчетчика", сбисПараметрыСчетчика) Тогда
		сбисПараметрыСчетчика = Новый Структура;
	КонецЕсли;
	//Если указан добавляемый элемент детализации, то ставим его в соответствующее место в результате выполнено/невыполнено
	Если Не ЭлементДетализации = Неопределено Тогда 
		ЭлементДляВставки = РезультатДействия.Действие["Детализация" + КлючДобавления].Получить(КлючГруппировки);
		Если ЭлементДляВставки = Неопределено Тогда
			ЭлементДляВставки = Новый Массив; 
			РезультатДействия.Действие["Детализация" + КлючДобавления].Вставить(КлючГруппировки, ЭлементДляВставки);
		КонецЕсли;	
		ЭлементДляВставки.Добавить(ЭлементДетализации);
	КонецЕсли;
	
	Если СбисСчитать Тогда
		//Делаем итерацию по счетчику. Если уже обработан как ошибка, или успех то не считаем.
		Если	(	Не сбисПараметрыСчетчика.Свойство("ОбработанКакУспех")
			Или	Не сбисПараметрыСчетчика.ОбработанКакУспех)
			И	(	Не сбисПараметрыСчетчика.Свойство("ОбработанКакОшибка")
			Или	Не сбисПараметрыСчетчика.ОбработанКакОшибка) Тогда
			РезультатДействия.Всего[КлючДобавления] = РезультатДействия.Всего[КлючДобавления] + 1;
			сбисПараметрыСчетчика.Вставить("ОбработанКакУспех", Истина);
		КонецЕсли;
	КонецЕсли;
	РезультатДействия_ДобавитьВремя(Кэш, РезультатДействия, сбисТип);
	
КонецПроцедуры	

//Обновляет счетчики времени в результате
&НаКлиенте
Процедура РезультатДействия_ДобавитьВремя(Кэш, РезультатДействия, Тип) Экспорт
	
	РезультатДействия.Время.Конец = сбисТекущаяДатаВМиллисекундах(Кэш);
	сбисВремя = РезультатДействия.Время.Конец - РезультатДействия.Время.Начало;
	Для Каждого КлючИЗначение Из РезультатДействия.Время Цикл
		Если	КлючИЗначение.Ключ = "Начало"
			Или	КлючИЗначение.Ключ = "Конец" Тогда
			Продолжить;
		КонецЕсли;
		сбисВремя = сбисВремя - КлючИЗначение.Значение;
	КонецЦикла;
	РезультатДействия.Время[Тип] = РезультатДействия.Время[Тип] + сбисВремя;
	
КонецПроцедуры

//Формирует строку для детализации
&НаКлиенте
Функция РезультатДействия_СформироватьСтрокуДетализации(Кэш, Тип, ДопПараметры=Неопределено) Экспорт
	
	СтрокаРезультат = Новый Структура("ОбработаныОбъекты1С, Состояние, Сообщение, Название", Новый Массив, "", "");
	Если Тип = "Загрузка" Тогда
		СтрокаРезультат.Вставить("ИдентификаторПакета");
		СтрокаРезультат.Вставить("ИдентификаторВложения");
	КонецЕсли;
	Возврат СтрокаРезультат;
	
КонецФункции

//Вынесено в отдельный метод, чтобы формирование результата было в одном месте. Генерирует строку обработанного объекта 1С в детализации
&НаКлиенте
Процедура РезультатДействия_ДобавитьВРасшифровку(Кэш, ТипДетализации, СтрокаДетализации, ПараметрыОбъекта) Экспорт
	//Добавляем обработанный объект в массив детализации
	СтрокаДобавить = Новый Структура("Ошибки, Ссылка, Тип, Состояние, Сообщение", Ложь);
	ЗаполнитьЗначенияСвойств(СтрокаДобавить, ПараметрыОбъекта);
	
	Если	Кэш.РезультатДействия.Параметры.ФормаВызова = "ФормаПросмотрДокумента"
		И	ТипДетализации = "ЗагрузкаДокумента" Тогда
		СтруктураДокумента1С = Неопределено;
		Если Не ПараметрыОбъекта.Свойство("СтруктураДокумента1С", СтруктураДокумента1С) Тогда
			СтруктураДокумента1С = Новый Структура;
		КонецЕсли;
		СтрокаДобавить.Вставить("СтруктураДокумента1С", СтруктураДокумента1С);
	КонецЕсли;
	СтрокаДетализации.ОбработаныОбъекты1С.Добавить(СтрокаДобавить);
	
КонецПроцедуры	

//Функция для методов, в которые нормально никак не передать дополнительные аргументы. Извлекает детализацию из результата в кэше.
&НаКлиенте
Функция РезультатДействия_ИзвлечьВременныеДанные(Кэш) Экспорт 
	
	Результат = Новый Структура("ЗаполнитьДетализацию, Отказ", Ложь, Ложь);
	ВременныеДанные = Неопределено;
	Если	Кэш.Свойство("РезультатДействия", ВременныеДанные)
		И	ЗначениеЗаполнено(ВременныеДанные)
		И	ВременныеДанные.Свойство("ВременныеДанные",ВременныеДанные)
		И	ЗначениеЗаполнено(ВременныеДанные)
		И	ВременныеДанные.Свойство("ЗаполнитьДетализацию")Тогда
		Результат = ВременныеДанные;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//ExtSysException
//БазоваяОшибка - пробрасываемая ошибка, code, message, details, dump
&НаКлиенте
Функция СбисИсключение(	БазоваяОшибка=Неопределено, СбисИмяКоманды,
	СбисКод=Неопределено, СбисСообщение=Неопределено, СбисДетализация=Неопределено, СбисДамп=Неопределено) Экспорт
	Перем СбисСтек,СбисОсновнаяОшибка,СтрокаРазбора;
	СбисИсключение = Новый Структура("code, message, details, methodName, dump, base", СбисКод, СбисСообщение, СбисДетализация, СбисИмяКоманды, СбисДамп);
	
	Если ТипЗнч(БазоваяОшибка) = Тип("Строка") Тогда
		//Конструктор из строки
		СбисОсновнаяОшибка = Новый Структура("code,message,details,methodName,dump");
		Если Лев(СбисОсновнаяОшибка,1) = "{" Тогда
			СтрокаРазбора = БазоваяОшибка;
		ИначеЕсли	Лев(СбисОсновнаяОшибка,35) = "callBLObject(): Метод бизнес логики"
			И		Найти(СбисОсновнаяОшибка,"вернул ошибку") Тогда
			СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{"));
			СтрокаРазбора = Лев(СтрокаРазбора, СтрДлина(СтрокаРазбора)-1);
		ИначеЕсли Найти(БазоваяОшибка,"{""jsonrpc"":") Тогда
			СтрокаРазбора = Сред(БазоваяОшибка, Найти(БазоваяОшибка,"{""jsonrpc"":"));
		Иначе
			СбисОсновнаяОшибка.code	= 100;
			СбисОсновнаяОшибка.message	= БазоваяОшибка;
			СбисОсновнаяОшибка.details	= БазоваяОшибка;
		КонецЕсли;	
		Если Не СтрокаРазбора = Неопределено Тогда
			Попытка
				СбисОсновнаяОшибка = МестныйКэш.РаботаСJSON.СбисПрочитатьJSON(СтрокаРазбора);
				Если СбисОсновнаяОшибка.Свойство("Error") Тогда
					СбисОсновнаяОшибка = СбисОсновнаяОшибка.Error;
				КонецЕсли;
			Исключение
				СбисОсновнаяОшибка.code	= 100;
				СбисОсновнаяОшибка.message	= БазоваяОшибка;
				СбисОсновнаяОшибка.details	= БазоваяОшибка;
			КонецПопытки;
		КонецЕсли;
	ИначеЕсли ТипЗнч(БазоваяОшибка) = Тип("Число") Тогда
		СбисОсновнаяОшибка = Новый Структура("code,message,details", БазоваяОшибка, СбисИсключение_СообщениеПоКоду(БазоваяОшибка), СбисИсключение_СообщениеПоКоду(БазоваяОшибка));
	Иначе
		СбисОсновнаяОшибка = БазоваяОшибка;
	КонецЕсли;
	
	//Если не указаны основные поля для новой ошибки
	Если СбисИсключение.code = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.code = 100;
		Иначе
			СбисИсключение.code = СбисОсновнаяОшибка.code;
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.message = Неопределено Тогда
		Если		СбисОсновнаяОшибка = Неопределено
			Или	Не	СбисОсновнаяОшибка.Свойство("message", СбисИсключение.message) Тогда
			СбисИсключение.message = СбисИсключение_СообщениеПоКоду(СбисИсключение.code);
		КонецЕсли;
	КонецЕсли;
	Если СбисИсключение.details = Неопределено Тогда
		Если СбисОсновнаяОшибка = Неопределено Тогда
			СбисИсключение.details = СбисИсключение.message;
		ИначеЕсли СбисОсновнаяОшибка.Свойство("details") Тогда
			СбисИсключение.details = СбисОсновнаяОшибка.details;
		Иначе
			СбисИсключение.details = СбисОсновнаяОшибка.detail;
		КонецЕсли;
	КонецЕсли;
	
	Если СбисОсновнаяОшибка = Неопределено Тогда
		Возврат СбисИсключение;
	ИначеЕсли Не СбисОсновнаяОшибка.Свойство("base", СбисИсключение.base) Тогда
		СбисИсключение.base = СбисОсновнаяОшибка;
	КонецЕсли;
	//Добавим основную ошибку в стек
	Если СбисОсновнаяОшибка.Свойство("stack", СбисСтек) Тогда
		СбисОсновнаяОшибка.Удалить("stack");
	Иначе
		СбисСтек = Новый Массив;
		СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
		ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисОсновнаяОшибка);
		СбисСтек.Добавить(СбисЗаписьВСтек);
	КонецЕсли;
	//Добавим обрабатываемую ошибку в стек
	СбисЗаписьВСтек = Новый Структура("methodName, code, message, dump");
	ЗаполнитьЗначенияСвойств(СбисЗаписьВСтек, СбисИсключение);
	СбисСтек.Вставить(0, СбисЗаписьВСтек);
	СбисИсключение.Вставить("stack", СбисСтек);
	Если СбисОсновнаяОшибка.Свойство("data") Тогда
		СбисИсключение.Вставить("data", СбисОсновнаяОшибка.data);
	КонецЕсли;
	//пробросим дамп в основную ошибку, чтоб не потерять
	Если СбисДамп = Неопределено Тогда
		Если СбисОсновнаяОшибка.Свойство("dump", СбисИсключение.dump) Тогда
			СбисОсновнаяОшибка.Удалить("dump");
		КонецЕсли;
	КонецЕсли;
	Возврат СбисИсключение;
	
КонецФункции

&НаКлиенте
Функция СбисИсключение_СообщениеПоКоду(СбисКодОшибки) Экспорт
	Если		СбисКодОшибки = 100 Тогда
		Возврат "Неизвестная ошибка системы";
	ИначеЕсли	СбисКодОшибки = 300 Тогда
		Возврат "Неизвестная ошибка БЛ";
	ИначеЕсли	СбисКодОшибки = 400 Тогда
		Возврат "Неизвестная ошибка СБИС Плагина";
	ИначеЕсли	СбисКодОшибки = 409 Тогда
		Возврат "Сеанс с учетной системой завершен";
	ИначеЕсли	СбисКодОшибки = 600 Тогда
		Возврат "Неизвестная ошибка настроек";
	ИначеЕсли	СбисКодОшибки = 700 Тогда
		Возврат "Неизвестная ошибка подключения";
	ИначеЕсли	СбисКодОшибки = 770 Тогда
		Возврат "Ошибка XSLT";
	ИначеЕсли	СбисКодОшибки = 772 Тогда
		Возврат "Ошибка работы с файловой системой";
	ИначеЕсли	СбисКодОшибки = 773 Тогда
		Возврат "Неизвестная ошибка при выполнении метода";	
	ИначеЕсли	СбисКодОшибки = 775 Тогда
		Возврат "Не получен ответ от плагина";	
	ИначеЕсли	СбисКодОшибки = 779 Тогда
		Возврат "Не найден объект";	
	КонецЕсли;
	Возврат "Неизвестная ошибка системы";
КонецФункции


////////////////////////////////////////////////////
///////////////Результат отправки///////////////////
////////////////////////////////////////////////////

&НаКлиенте
Функция ДобавитьОшибкуВРезультат(Кэш, Ошибка, ДанныеПоСтатусу) Экспорт
	ТекстОшибки			= Ошибка.message;
	ОписаниеРасширенное	= Ошибка.details;
	КодОшибки			= Ошибка.code;
	Кэш.РезультатОтправки.Ошибок = Кэш.РезультатОтправки.Ошибок + 1;
	Если Не Кэш.РезультатОтправки.Свойство("СоответствиеКодовИТекстовОшибок") Тогда
		Кэш.РезультатОтправки.Вставить("СоответствиеКодовИТекстовОшибок", Новый Соответствие);
	КонецЕсли;
	
	ЭлементСписка = Кэш.РезультатОтправки.ТипыОшибок.НайтиПоЗначению(ТекстОшибки);
	Если ЭлементСписка=Неопределено Тогда
		Кэш.РезультатОтправки.ТипыОшибок.Добавить(ТекстОшибки, 1);
		Кэш.РезультатОтправки.СоответствиеКодовИТекстовОшибок.Вставить(ТекстОшибки, КодОшибки);
	Иначе
		ЭлементСписка.Представление = Число(ЭлементСписка.Представление)+1;
	КонецЕсли;
	//AU изменена структура в детализации ошибок для возможности проброса дампа в сервис статистики
	ЭлементСоответствия = Кэш.РезультатОтправки.ДетализацияОшибок.Получить(ТекстОшибки);
	Если ЭлементСоответствия = Неопределено Тогда
		ЭлементСоответствия = Новый Массив;
		Кэш.РезультатОтправки.ДетализацияОшибок.Вставить(ТекстОшибки, ЭлементСоответствия);
	КонецЕсли;
	СтрокаВСоответствие = Новый Структура("ОбработанДокумент1С,Сообщение,СтруктураОшибки", ДанныеПоСтатусу.ОсновнойДокумент1С, ОписаниеРасширенное, Ошибка);
	ЭлементСоответствия.Добавить(СтрокаВСоответствие);
КонецФункции

////////////////////////////////////////////////////
////////////////////Статистика//////////////////////
////////////////////////////////////////////////////

//Функция собирает данные для отправки на сервис статистики и выполняет вызов
&НаКлиенте
Функция СбисСтатистика_СформироватьИЗаписатьСтатистикуНаСервис(Кэш, ПараметрыСтатистики, Отказ) Экспорт
	ДанныеСтатистики = СбисСтатистика_СформироватьДанныеСообщений(Кэш, ПараметрыСтатистики, Отказ);
	Если Отказ Тогда //При формировании записи произошла ошибка
		Возврат Новый Структура("code, message, details",100, "Неизвестная ошибка системы.", "Ошибка при обработке результата отправки.");;
	КонецЕсли;
	Для Каждого СообщениеСтатистики Из ДанныеСтатистики.Сообщения Цикл
		РезультатОтправки = Кэш.Интеграция.СбисОтправитьСообщениеСтатистики(Кэш, СообщениеСтатистики, Отказ);
		Если Отказ Тогда
			Возврат РезультатОтправки;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СообщениеОбОшибке Из ДанныеСтатистики.Ошибки Цикл
		РезультатОтправки = Кэш.Интеграция.СбисОтправитьСообщениеОшибки(Кэш, СообщениеОбОшибке, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.СбисСообщитьОбОшибке(Кэш, РезультатОтправки, Новый Структура("Отправлять", Ложь));
			Возврат РезультатОтправки;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;	
КонецФункции

//Функция, в зависимости от выбранного действия, формирует параметры к отправке на сервис статистики
&НаКлиенте
Функция	СбисСтатистика_СформироватьДанныеСообщений(Кэш, ПараметрыСтатистики, Отказ) 
	
	Действие = ПараметрыСтатистики.Действие;
	Результат = Новый Структура("Сообщения, Ошибки", Новый Массив, Новый Массив);	
	Если Действие = "Отправка" Тогда
		//обрабатываем результат в Кэш
		Если Кэш.РезультатОтправки.Отправлено Тогда
			ПараметрыСообщения = Новый Структура("count, action_param, action_name", Кэш.РезультатОтправки.Отправлено, Кэш.Текущий.ТипДок, Действие);
			НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОперации(Кэш, ПараметрыСообщения, Отказ);
			Результат.Сообщения.Добавить(НовоеСообщение);
		КонецЕсли;
		Если Кэш.РезультатОтправки.Ошибок Тогда
			ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 0, 100, Кэш.Текущий.ТипДок, Действие);
			Для Каждого ОшибкаОтправки Из Кэш.РезультатОтправки.ДетализацияОшибок Цикл
				ТекстОшибки = ОшибкаОтправки.Ключ;
				ПараметрыСообщения.count		= 1;
				ПараметрыСообщения.error_name	= ТекстОшибки;
				ПараметрыСообщения.code			= 100;
				//Если нет соответствия кодов, то ставится код по-умолчанию 100.
				Если Кэш.РезультатОтправки.Свойство("СоответствиеКодовИТекстовОшибок") Тогда
					КодОшибки = Кэш.РезультатОтправки.СоответствиеКодовИТекстовОшибок.Получить(ТекстОшибки);
					Если Не КодОшибки = Неопределено Тогда
						ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
					КонецЕсли;
				КонецЕсли;
				//Генерируем для каждой ошибки из детализации сообщение для статистики
				Для Каждого ДетализацияОшибки Из ОшибкаОтправки.Значение Цикл
					СбисСтек = Неопределено;
					//Если у ошибки нет стека, то генерируем
					Если Не ДетализацияОшибки.СтруктураОшибки.Свойство("stack", СбисСтек) Тогда
						СбисСтек	= Новый Массив;
						ЗаписьВСтек	= Новый Структура("message,details,code");
						ЗаполнитьЗначенияСвойств(ЗаписьВСтек, ДетализацияОшибки.СтруктураОшибки);
						ЗаписьВСтек.Вставить("method_name", "WriteDocumentEx");
						Если ДетализацияОшибки.СтруктураОшибки.Свойство("dump") Тогда
							ЗаписьВСтек.Вставить("dump", ДетализацияОшибки.СтруктураОшибки.dump);
						КонецЕсли;
						СбисСтек.Добавить(ЗаписьВСтек);
					КонецЕсли;
					
					ПараметрыОтправки = Новый Структура;
					ПараметрыОтправки.Вставить("ini_name",	Кэш.Текущий.ТипДок);
					ПараметрыОтправки.Вставить("value",		Строка(ДетализацияОшибки.ОбработанДокумент1С));
					ПараметрыОтправки.Вставить("type",		"ДокументСсылка." + Кэш.Текущий.ТипДок);
					
					ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
					НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(Кэш, ПараметрыСообщения, Отказ);
					НовоеСообщение.data.Вставить("stack", СбисСтек);
					НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
					Результат.Ошибки.Добавить(НовоеСообщение);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Действие = "Загрузка" Тогда
		//обрабатываем результат
		Если ПараметрыСтатистики.Результат.Всего.Выполнено Тогда
			ПараметрыСообщения = Новый Структура("count, action_param, action_name", ПараметрыСтатистики.Результат.Всего.Выполнено, Кэш.Текущий.ТипДок, Действие);
			НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОперации(Кэш, ПараметрыСообщения, Отказ);
			Результат.Сообщения.Добавить(НовоеСообщение);
		КонецЕсли;
		Для Каждого ОшибкаЗагрузки Из ПараметрыСтатистики.Результат.Ошибки.ДетализацияОшибок Цикл
			ПараметрыСообщения = Новый Структура("count, code, action_param, action_name, error_name, error_detail", 1, 100, Кэш.Текущий.ТипДок, Действие);
			ТекстОшибки = ОшибкаЗагрузки.Ключ;
			ПараметрыСообщения.error_name	= ТекстОшибки;
			ПараметрыСообщения.code			= 100;
			//Если нет соответствия кодов, то ставится код по-умолчанию 100.
			КодОшибки = ПараметрыСтатистики.Результат.Ошибки.СоответствиеКодов.Получить(ТекстОшибки);
			Если Не КодОшибки = Неопределено Тогда
				ПараметрыСообщения.code = Формат(КодОшибки,"ЧГ=0");
			КонецЕсли;
			//Генерируем для каждой ошибки из детализации сообщение для статистики
			Для Каждого ДетализацияОшибки Из ОшибкаЗагрузки.Значение Цикл
				СбисСтек	= Новый Массив;
				ЗаписьВСтек	= Новый Структура(
				"message,						details,					code,					method_name", 
				ДетализацияОшибки.Состояние,	ДетализацияОшибки.Сообщение,ПараметрыСообщения.code,"ЗагрузитьУпорядоченныйСоставПакетаВыбраннымСпособом");
				
				СбисДампОшибки		= Новый Структура;
				ПараметрыОтправки	= Новый Структура;
				ПараметрыОтправки.Вставить("ini_name",	Кэш.Текущий.ТипДок);
				Для Каждого СбисОбработанОбъект Из ДетализацияОшибки.ОбработаныОбъекты1С Цикл
					//Ищем первый объект, на котором свалилась загрузка. Пока что он будет основным в ошибке.
					Если Не СбисОбработанОбъект.Ошибки Тогда
						Продолжить;
					КонецЕсли;
					Если ПараметрыОтправки.Свойство("value") Тогда
						//Допишем остальные объекты в дамп на всякий.
						СбисДампДополнительныеОбъекты = Неопределено;
						Если Не СбисДампОшибки.Свойство("ДополнительныеОбъекты", СбисДампДополнительныеОбъекты) Тогда
							СбисДампДополнительныеОбъекты = Новый Массив;
							СбисДампОшибки.Вставить("ДополнительныеОбъекты", СбисДампДополнительныеОбъекты);
						КонецЕсли;
						СбисДампДополнительныеОбъекты.Добавить(Новый Структура("value, type", Строка(СбисОбработанОбъект.Ссылка), СбисОбработанОбъект.Тип));
						Продолжить;
					КонецЕсли;
					ПараметрыОтправки.Вставить("value",		Строка(СбисОбработанОбъект.Ссылка));
					ПараметрыОтправки.Вставить("type",		СбисОбработанОбъект.Тип);
				КонецЦикла;
				Если ЗначениеЗаполнено(СбисДампОшибки) Тогда
					ЗаписьВСтек.Вставить("dump", СбисДампОшибки);
				КонецЕсли;
				СбисСтек.Добавить(ЗаписьВСтек);					
				
				ПараметрыСообщения.error_detail	= ДетализацияОшибки.Сообщение;
				НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(Кэш, ПараметрыСообщения, Отказ);
				НовоеСообщение.data.Вставить("stack", СбисСтек);
				НовоеСообщение.data.Вставить("param", ПараметрыОтправки);
				Результат.Ошибки.Добавить(НовоеСообщение);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Действие = "Ошибка" Тогда
		СбисСтек = Неопределено;
		ПараметрыСообщения	= Новый Структура("count, code, action_param, action_name, error_name, error_detail", 1, 100, "Ошибка", Действие);
		//Если у ошибки нет стека, то генерируем
		Если Не ПараметрыСтатистики.Ошибка.Свойство("stack", СбисСтек) Тогда
			СбисСтек = Новый Массив;
			ЗаписьВСтек	= СбисСкопироватьОбъектНаКлиенте(ПараметрыСтатистики.Ошибка);
			СбисСтек.Добавить(ЗаписьВСтек);
		КонецЕсли;
		
		ПараметрыСообщения.code			= Формат(ПараметрыСтатистики.Ошибка.code,"ЧГ=0");
		ПараметрыСообщения.error_name	= ПараметрыСтатистики.Ошибка.message;
		ПараметрыСообщения.error_detail	= ПараметрыСтатистики.Ошибка.details;
		
		НовоеСообщение = СбисСтатистика_СформироватьСтруктуруОшибки(Кэш, ПараметрыСообщения, Отказ);
		НовоеСообщение.data.Вставить("stack", СбисСтек);
		Результат.Ошибки.Добавить(НовоеСообщение);
	ИначеЕсли Действие = "Обновление" Тогда
		ПараметрыСтатистики	= Новый Структура;
		ПараметрыОтправки	= Новый Структура;
		ДанныеПоНастройкам	= Кэш.ФормаНастроек.ПолучитьИнформациюПоНастройкам(Кэш, ПараметрыСтатистики, Отказ);
		//Смотрим полученные данные и формируем детальную информацию
		Дамп = Новый Структура("Xslt,Ини,Функции", Новый Массив, Новый Массив, ДанныеПоНастройкам.EPF.ЕстьИзменения);
		Для Каждого ФайлНастроек Из ДанныеПоНастройкам.XSLT Цикл
			Если	Не	ФайлНастроек.ЕстьИзменения
				Или		Найти(ФайлНастроек.ИмяФайла, "Утвердить") Тогда
				Продолжить;//Не отправляем статистику по изменениям титулов
			КонецЕсли;
			Дамп.Xslt.Добавить(ФайлНастроек.ИмяФайла);
		КонецЦикла;
		Для Каждого ФайлНастроек Из ДанныеПоНастройкам.XML Цикл
			Если	Не	ФайлНастроек.ЕстьИзменения
				И		ФайлНастроек.Автообновление Тогда
				Продолжить;
			КонецЕсли;
			Дамп.Ини.Добавить(ФайлНастроек.Ини_ИмяИни);
		КонецЦикла;
		ДетальноеСообщение = "";
		
		ИзмененыXSLT	= Булево(Дамп.Xslt.Количество());
		ИзмененыXML		= Булево(Дамп.Ини.Количество());
		ИзмененыФункции	= Дамп.Функции;
		Если ИзмененыXSLT Тогда
			ДетальноеСообщение = ДетальноеСообщение + "Xslt";
		Иначе
			Дамп.Удалить("Xslt");
		КонецЕсли;
		Если ИзмененыXML Тогда
			ДетальноеСообщение = ДетальноеСообщение + ?(ПустаяСтрока(ДетальноеСообщение),"",", ") + "Ини";
		Иначе
			Дамп.Удалить("Ини");
		КонецЕсли;
		Если ИзмененыФункции Тогда
			ДетальноеСообщение = ДетальноеСообщение + ?(ПустаяСтрока(ДетальноеСообщение),"",", ") + "Функции";
		Иначе
			Дамп.Удалить("Функции");
		КонецЕсли;
		ДетальноеСообщение = ?(ПустаяСтрока(ДетальноеСообщение), ДетальноеСообщение, "Изменено: " + ДетальноеСообщение);
		
		ПараметрыСообщения	= Новый Структура("count, action_param, action_name", 1, ДетальноеСообщение, Действие);
		НовоеСообщение		= СбисСтатистика_СформироватьСтруктуруОперации(Кэш, ПараметрыСообщения, Отказ);
		Результат.Сообщения.Добавить(НовоеСообщение);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

//Функция генерирует сообщение об успешной операции на сервис статистики
&НаКлиенте
Функция СбисСтатистика_СформироватьСтруктуруОперации(Кэш, ПараметрыСтатистики, Отказ)
	СтруктураПараметров = Новый Структура();
	Для Каждого КлючИЗначение Из ПараметрыСтатистики Цикл 
		СтруктураПараметров.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	СтруктураПараметров.Вставить("service",		"ext1C");
	СтрокаМодуль = Кэш.ПараметрыСистемы.Обработка.КраткаяВерсия + "_" + Кэш.ИнтеграцияИмя;
	СтруктураПараметров.Вставить("module", 			СтрокаМодуль);
	СтруктураПараметров.Вставить("subsystem",		Кэш.КэшНастроек.ПараметрыНастроек.ПрефиксУстановленныхНастроек);
	СтруктураПараметров.Вставить("connection_id",	"0");//connection_id не передаём.
	
	Возврат СтруктураПараметров;
	
КонецФункции

//Функция генерирует готовое сообщение об ошибке для сервиса статистики
&НаКлиенте
Функция СбисСтатистика_СформироватьСтруктуруОшибки(Кэш, ПараметрыСтатистики, Отказ)
	СтруктураПараметров = СбисСтатистика_СформироватьСтруктуруОперации(Кэш, ПараметрыСтатистики, Отказ);
	//Добавим в data поля шапки статистики
	stat_data = Новый Структура;
	СбисСкопироватьСтруктуру(stat_data, СтруктураПараметров);
	//Допишем информацию о системе для записи.
	system_info = Новый Структура;
	system_info.Вставить("configuration_info",		Кэш.ПараметрыСистемы.Конфигурация.ПодробнаяИнформация);
	system_info.Вставить("configuration_version",	Кэш.ПараметрыСистемы.Конфигурация.Версия);
	system_info.Вставить("platform_version",		Кэш.ПараметрыСистемы.Клиент.ВерсияПриложения);
	system_info.Вставить("os_client",				Кэш.ПараметрыСистемы.Клиент.ТипОС);
	system_info.Вставить("os_server",				Кэш.ПараметрыСистемы.Сервер.ТипОС);
	system_info.Вставить("first_launch",			Кэш.ПараметрыСистемы.Обработка.ПервыйЗапуск);
	system_info.Вставить("sdk_version",				Кэш.СБИС.ПараметрыИнтеграции.Версия);
	stat_data.Вставить("systemInfo", system_info);
	СтруктураПараметров.Вставить("data", stat_data);
	Возврат СтруктураПараметров;		
	
КонецФункции

////////////////////////////////////////////////////
////////////////////Подсистемы//////////////////////
////////////////////////////////////////////////////

//Функция ищет выбранную функцию с учетом версии подсистемы 1С и форм обработки 
&НаКлиенте
Функция сбисНайтиФормуФункцииПодсистемы(Кэш, ПараметрыПоиска, ДополнительныеПараметры=Неопределено, Отказ=Ложь) Экспорт
	
	КлючПодсистемы		= ПараметрыПоиска.КлючФорм; 
	Инициировать		= Ложь;
	ПараметрыПодсистемы	= Неопределено;
	Если		Не Кэш.ТекущийСеанс.Свойство("Подсистемы",ПараметрыПодсистемы) Тогда
		Кэш.ТекущийСеанс.Вставить("Подсистемы", Новый Структура);
		Инициировать = Истина;
	ИначеЕсли	Не ПараметрыПодсистемы.Свойство(КлючПодсистемы, ПараметрыПодсистемы)
		Или	Не ПараметрыПодсистемы.Инициирована Тогда
		Инициировать = Истина;
	КонецЕсли;
	Если Инициировать Тогда
		ПараметрыПодсистемы = сбисИнициироватьПодсистему(Кэш, ПараметрыПоиска, Отказ);
		Если Отказ Тогда
			Кэш.ГлавноеОкно.сбисСообщитьОбОшибке(Кэш, ПараметрыПодсистемы);
			Возврат Ложь;
		КонецЕсли;
		Кэш.ТекущийСеанс.Подсистемы.Вставить(КлючПодсистемы, ПараметрыПодсистемы);
	КонецЕсли;
	// << alo СостояниеЭД Удалить после решения 1179585426
	Если Кэш.Заплатки <> Ложь Тогда
		фрм = Неопределено;
		Если Кэш.ТекущийСеанс.Функции.Свойство(ПараметрыПоиска.ИмяФункции + "_" + ПараметрыПодсистемы.Объекты.ФормаОсновная, фрм) Тогда 
			Возврат фрм;
		КонецЕсли;
		фрм = Кэш.ГлавноеОкно.ПроверитьНаличиеФункцииВФорме(Кэш.Заплатки, ПараметрыПодсистемы.Объекты.ФормаОсновная, ПараметрыПоиска.ИмяФункции);
		Если фрм = Ложь Тогда
			фрм = Кэш.ГлавноеОкно.ПроверитьНаличиеФункцииВФорме(Кэш.Заплатки, ПараметрыПодсистемы.Объекты.ФормаБазовая, ПараметрыПоиска.ИмяФункции);
		КонецЕсли;
		Если фрм <> Ложь Тогда //Закэшируем результат
			Кэш.ТекущийСеанс.Функции.Вставить(ПараметрыПоиска.ИмяФункции + "_" + ПараметрыПодсистемы.Объекты.ФормаОсновная, фрм);
			Возврат фрм;
		КонецЕсли;
	КонецЕсли; 	// alo СостояниеЭД >>
	Возврат Кэш.ГлавноеОкно.сбисНайтиФормуФункции(ПараметрыПоиска.ИмяФункции,ПараметрыПодсистемы.Объекты.ФормаОсновная,ПараметрыПодсистемы.Объекты.ФормаБазовая,Кэш);
	
КонецФункции

//Функция формирует структуру для взаимодействия с подсистемой 1С. Проверяет доступные формы по ключу и выбирает наиболее подходящие по версии.
&НаКлиенте
Функция сбисИнициироватьПодсистему(Кэш, ПараметрыИнициации, Отказ) Экспорт
	
	ИмяПодсистемы = сбисСоответствиеПодсистем(Кэш).Получить(ПараметрыИнициации.КлючФорм);
	Если ИмяПодсистемы = Неопределено Тогда 
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", "Отсутствует подсистема 1С для формы " + ПараметрыИнициации.КлючФорм);
	КонецЕсли;	
	
	СтруктураПодсистемы = Новый Структура("Параметры, Инициирована, Объекты", Новый Структура("Имя,Версия", ИмяПодсистемы), Ложь, Новый Структура);
	
	ДополнительныеПараметры = Новый Структура;
	РезультатЗапроса = сбисПолучитьВерсиюПодсистемы(ИмяПодсистемы,ДополнительныеПараметры,Отказ);
	Если Отказ Тогда
		Возврат РезультатЗапроса;
	КонецЕсли;
	
	ПараметрыИнициации.Вставить("УправляемоеПриложение", Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение);
	
	СтруктураПодсистемы.Параметры.Версия = РезультатЗапроса;
	ВерсияПодсистемы = СериализоватьВерсию(СтруктураПодсистемы.Параметры.Версия, "СтрокуВЧисло");
	//Получим доступные формы для выбранной подсистемы и определим основную и базовую
	СписокФормПодсистемы = сбисПолучитьСписокДоступныхФормОбработки(ПараметрыИнициации, Отказ);
	СписокФормФункций = сбисПолучитьСписокДоступныхФормФункций(Кэш, ПараметрыИнициации, Отказ);
	//Составим общий список доступных форм для работы с подсистемой.
	ПараметрыЗаполненияВерсии = Новый Структура("ВспомогательныйРазделитель", ".");
	Для Каждого ФормаПодсистемы Из СписокФормПодсистемы Цикл
		ФормаПодсистемы.Значение = СериализоватьВерсию(СериализоватьВерсию(ФормаПодсистемы.Значение, "Дозаполнить", ПараметрыЗаполненияВерсии), "СтрокуВЧисло");
	КонецЦикла;
	Для Каждого ФормаПодсистемы Из СписокФормФункций Цикл
		ЧислоВерсии = СериализоватьВерсию(СериализоватьВерсию(ФормаПодсистемы.Значение, "Дозаполнить", ПараметрыЗаполненияВерсии), "СтрокуВЧисло");
		ЭлементСписка = СписокФормПодсистемы.НайтиПоЗначению(ЧислоВерсии);
		Если ЭлементСписка = Неопределено Тогда
			СписокФормПодсистемы.Добавить(ЧислоВерсии, ФормаПодсистемы.Представление);
		Иначе
			ЭлементСписка.Представление = ФормаПодсистемы.Представление;
		КонецЕсли;
	КонецЦикла;
	//И отберем из списка наиболее подходящую по версии форму. Как запасная остаётся форма с 0 версией.	
	СписокФормПодсистемы.СортироватьПоЗначению();
	Для шаг=0 По СписокФормПодсистемы.Количество()-1 Цикл
		Если СписокФормПодсистемы[шаг].Значение > ВерсияПодсистемы Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураПодсистемы.Объекты.Вставить("ФормаБазовая", СписокФормПодсистемы[0].Представление);
	СтруктураПодсистемы.Объекты.Вставить("ФормаОсновная", СписокФормПодсистемы[шаг-1].Представление);
	СтруктураПодсистемы.Инициирована = Истина;
	Возврат СтруктураПодсистемы;
	
КонецФункции

//Функция возвращает соответствие подсистем 1С формам обработки
&НаКлиенте
Функция сбисСоответствиеПодсистем(Кэш)
	Результат = Новый Соответствие;
	Подсистема_Статусы = РассчитатьЗначение("Подсистема_Статусы_СостоянияЭД", Кэш.ини.Конфигурация, Кэш);
	Если Не ЗначениеЗаполнено(Подсистема_Статусы) Тогда
		Подсистема_Статусы = "БиблиотекаЭлектронныхДокументов";	
	КонецЕсли;
	Результат.Вставить("Статусы_СостоянияЭД", Подсистема_Статусы);
	Возврат Результат;
КонецФункции

//Функция получает версию указанной подсистемы 1С
&НаСервереБезКонтекста
Функция сбисПолучитьВерсиюПодсистемы(Знач ИмяПодсистемы, Знач ДополнительныеПараметры=Неопределено, Отказ);
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|ГДЕ
	|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы");
	Запрос.УстановитьПараметр("ИмяПодсистемы", ИмяПодсистемы);
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Результат = Запрос.Выполнить().Выбрать();
	Исключение
		УстановитьПривилегированныйРежим(Ложь);
		Отказ = Истина;
		Возврат Новый Структура("code, message, details", 100, "Неизвестная ошибка системы", ОписаниеОшибки());
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Следующий() Тогда
		Возврат Результат.Версия;
	КонецЕсли;
	Возврат "0.0.0.1";
КонецФункции

//Получает список форм по ключу имен
&НаСервере
Функция сбисПолучитьСписокДоступныхФормОбработки(Знач ПараметрыПолучения, Отказ)
	Если ПараметрыПолучения.УправляемоеПриложение Тогда
		ОбработкаОбъект = Вычислить("РеквизитФормыВЗначение(""Объект"")");
	КонецЕсли;
	СписокФорм = ОбработкаОбъект.Метаданные().Формы;
	
	КлючФормы = СокрЛП(НРег(ПараметрыПолучения.КлючФорм));
	ДлинаКлюча = СтрДлина(КлючФормы);
	Результат = Новый СписокЗначений;
	Для Каждого Фрм Из СписокФорм Цикл
		_ИмяФормы = Фрм.Имя;
		Если Не НРег(Лев(_ИмяФормы, ДлинаКлюча)) = КлючФормы Тогда
			Продолжить;
		КонецЕсли;
		Версия = СтрПолучитьСтроку(СтрЗаменить(НРег(_ИмяФормы), КлючФормы + "_", Символы.ПС), 2);
		
		Результат.Добавить(СтрЗаменить(Версия, "_", "."), _ИмяФормы);	
	КонецЦикла;
	Возврат Результат;
КонецФункции

//Получает список клиентских форм по ключу имен
&НаКлиенте
Функция сбисПолучитьСписокДоступныхФормФункций(Кэш, ПараметрыПолучения, Отказ)
	
	Результат = Новый СписокЗначений;
	Если Кэш.Заплатки = Ложь Тогда
		Возврат Результат;
	КонецЕсли;
	КлючФормы = СокрЛП(НРег(ПараметрыПолучения.КлючФорм));
	ДлинаКлюча = СтрДлина(КлючФормы);
	
	Если Кэш.ПараметрыСистемы.Клиент.УправляемоеПриложение Тогда
		СписокКлиентскихФорм = Кэш.ТекущийСеанс.Формы.Клиентские;
		КлючИмени = "Значение";
	Иначе
		СписокКлиентскихФорм = Кэш.Заплатки.Метаданные().Формы;
		КлючИмени = "Имя";
	КонецЕсли;
	Для Каждого ФормаФункций Из СписокКлиентскихФорм Цикл
		_ИмяФормы = ФормаФункций[КлючИмени];
		Если Не НРег(Лев(_ИмяФормы, ДлинаКлюча)) = КлючФормы Тогда
			Продолжить;
		КонецЕсли;
		
		Версия = СтрПолучитьСтроку(СтрЗаменить(НРег(_ИмяФормы), КлючФормы + "_", Символы.ПС), 2);
		
		Результат.Добавить(СтрЗаменить(Версия, "_", "."), _ИмяФормы);	
	КонецЦикла;
	Возврат Результат;
КонецФункции