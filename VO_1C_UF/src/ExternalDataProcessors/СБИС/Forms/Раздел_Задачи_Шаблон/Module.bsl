// функции для совместимости кода 
&НаКлиенте
Функция сбисПолучитьФорму(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено )
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Попытка
			ЭтотОбъект="";
		Исключение
		КонецПопытки;
		Возврат ПолучитьФорму("ВнешняяОбработка.СБИС.Форма."+ИмяФормы, Параметры, Владелец);
	КонецЕсли;
	Возврат ЭтотОбъект.ПолучитьФорму(ИмяФормы, Владелец, Параметры);
КонецФункции
&НаКлиенте
Функция сбисЭлементФормы(Форма,ИмяЭлемента)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Форма.Элементы.Найти(ИмяЭлемента);
	КонецЕсли;
	Возврат Форма.ЭлементыФормы.Найти(ИмяЭлемента);
КонецФункции
&НаКлиенте
Функция сбисПолучитьСтраницу(Элемент, ИмяСтраницы)
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		Возврат Элемент.ПодчиненныеЭлементы[ИмяСтраницы];
	КонецЕсли;
	Возврат Элемент.Страницы[ИмяСтраницы];
КонецФункции
//------------------------------------------------------

&НаКлиенте
Функция ОбновитьКонтент(Кэш) Экспорт
	// функция обновляет контент для подразделов раздела Полученные	
	СтруктураДляОбновленияФормы = Кэш.ОбщиеФункции.сбисПолучитьСписокЗадач(Кэш);
	Кэш.ОбщиеФункции.ОбновитьПанельНавигации(Кэш);
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Контент = сбисЭлементФормы(ГлавноеОкно, "Контент");
	Контент.ТекущаяСтраница = сбисПолучитьСтраницу(Контент, "РеестрСобытий");	
	Кэш.ТаблДок = сбисЭлементФормы(ГлавноеОкно,"Таблица_РеестрСобытий");
	Кэш.ГлавноеОкно.СписокДопОперацийРеестра.Очистить();
	Возврат СтруктураДляОбновленияФормы;
КонецФункции
&НаКлиенте
Процедура НастроитьКолонки(Кэш) Экспорт
КонецПроцедуры
&НаКлиенте
Процедура НавигацияУстановитьПанель(Кэш) Экспорт
// Процедура устанавливает панель навигации на 1ую страницу	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	сбисЭлементФормы(ГлавноеОкно,"ПанельНавигации").Видимость=Истина;
	сбисЭлементФормы(ГлавноеОкно,"ЗаписейНаСтранице1С").Видимость=Ложь;
	сбисЭлементФормы(ГлавноеОкно,"ЗаписейНаСтранице").Видимость=Истина;
КонецПроцедуры
&НаКлиенте
Процедура ПоказатьДокумент(Кэш, СтрТабл) Экспорт
	Перем ТекстЗадачи, ТипВложения;
	// Процедура открывает окно просмотра документа	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	ПараметрыВызова = Новый Структура("СоставПакета");
	ЗаполнитьЗначенияСвойств(ПараметрыВызова, СтрТабл);
	ПараметрыВызова.Вставить("ВернутьПустойСоставПакета", Истина);//Так костыльно передаём параметр в общую функцию получения состава пакета. Чтобы даже если нет вложений, нам всё равно вернулся пакет.
	МассивПакетов = ПодготовитьСтруктуруДокумента(ПараметрыВызова, Кэш);
	Если Не МассивПакетов.Количество() Тогда
		Возврат;
	КонецЕсли;
	Если СтрТабл.СоставПакета.Количество() Тогда
		ИсходныйСоставПакета = СтрТабл.СоставПакета[0].Значение;
	Иначе
		ИсходныйСоставПакета = Новый Структура("Название", "Пакет");
	КонецЕсли;
		
	ПолныйСоставПакета = МассивПакетов[0];
	Вложение = Неопределено;
	Если Не ПолныйСоставПакета.Свойство("Вложение", Вложение) Тогда//Нет вложений в пакете. Всё равно нужно показать задачу без вложений.
		ПолныйСоставПакета.Вставить("Вложение", Новый Массив);
		Вложение = ПолныйСоставПакета.Вложение;	
	КонецЕсли;
	
	ЕстьСлужебнаяЗаписка = Ложь;
	сч = 0;
	Для Каждого Элемент Из Вложение Цикл
		Если	Элемент.Свойство("Тип", ТипВложения)
			И	ТипВложения = "Служебная записка" Тогда//Во вложении есть служебная записка. Генерируем HTML текст.
			ЕстьСлужебнаяЗаписка = Истина;
			Если ИсходныйСоставПакета.Свойство("ТекстЗадачи") Тогда
				ТекстHTML = ГенерацияТекстаHTMLЗадачи(ИсходныйСоставПакета.ТекстЗадачи);
			Иначе//Заходить не должно, но на всякий случай. Если в строке таблице нет текста задачи, то пробуем получить с онлайна HTML вложения.
				ТекстHTML = Кэш.Интеграция.ПолучитьHTMLВложения(Кэш, ПолныйСоставПакета.Идентификатор, Элемент);
			КонецЕсли;
		Иначе
			ТекстHTML = Кэш.Интеграция.ПолучитьHTMLВложения(Кэш, ПолныйСоставПакета.Идентификатор, Элемент);
		КонецЕсли;
		ПолныйСоставПакета.Вложение[сч].Вставить("ТекстHTML",ТекстHTML);
		ПолныйСоставПакета.Вложение[сч].Вставить("Отмечен",Истина);
		сч = сч + 1;
	КонецЦикла;
	//Служебной записки в пакете нет. Генерируем строку задачи на основании полного состава пакета. Установить текст вложения для вывода на форме просмотра.
	Если 	Не	ЕстьСлужебнаяЗаписка
		И		ИсходныйСоставПакета.Название = "Задача"
		И		ИсходныйСоставПакета.Свойство("ТекстЗадачи", ТекстЗадачи)
		И		ЗначениеЗаполнено(ТекстЗадачи) Тогда
		НоваяСтрока = Новый Структура("Название, Идентификатор,Подпись,ТекстHTML,СтатусКартинка,МожемЗагрузитьВ1С,Статус,Вложение");
		НоваяСтрока.ТекстHTML = ГенерацияТекстаHTMLЗадачи(ТекстЗадачи);
		НоваяСтрока.Название = ПолныйСоставПакета.Название;
		НоваяСтрока.Статус = "Загрузка документа не поддерживается.";
		НоваяСтрока.СтатусКартинка = 0;
		НоваяСтрока.МожемЗагрузитьВ1С = 0;
		ВложениеЗадачи = Новый СписокЗначений;
		ВложениеЗадачи.Добавить(Новый Структура);
		НоваяСтрока.Вложение = ВложениеЗадачи;
		
		ДобавитьСтроки = Новый Массив();
		ДобавитьСтроки.Добавить(НоваяСтрока);
		ПолныйСоставПакета.Вставить("ДобавочныеСтроки", ДобавитьСтроки);
	КонецЕсли;
	Если ИсходныйСоставПакета.Свойство("ИмяСБИС") Тогда
		ПолныйСоставПакета.Вставить("ИмяСБИС", ИсходныйСоставПакета.ИмяСБИС);
	КонецЕсли;
	Если ИсходныйСоставПакета.Свойство("ИдСБИС") Тогда
		ПолныйСоставПакета.Вставить("ИдСБИС", ИсходныйСоставПакета.ИдСБИС);
	КонецЕсли;
		
	ПолныйСоставПакета.Вставить("Примечание", СтрТабл.Комментарий);
	фрм = ГлавноеОкно.сбисНайтиФормуФункции("ПоказатьДокумент","ФормаПросмотрДокумента","", Кэш);
	фрм.ПоказатьДокумент(Кэш,ПолныйСоставПакета);	
	
КонецПроцедуры
&НаКлиенте
Функция	ГенерацияТекстаHTMLЗадачи(ТекстЗадачи)
	Результат = "<HTML><BODY><table cellspacing=0 cellpadding=0 WIDTH=100%>";
	Для шаг = 1 По СтрЧислоСтрок(ТекстЗадачи) Цикл
		Результат = Результат + Символы.ПС + "<tr><td>" + СтрПолучитьСтроку(ТекстЗадачи, шаг) + "</td></tr>";
	КонецЦикла;
	Результат = Результат + "</table></BODY></HTML>";
	Возврат Результат;
КонецФункции
&НаКлиенте
Функция ЗаполнитьПрохождение(СоставПакета) Экспорт
// Функция заполняет данные о прохождении документа	
	//СбисСобытия = Новый Структура("Начало, Отправка, Получение, Утверждение", Новый Структура,Новый Структура,Новый Структура);
	СбисСобытия = Новый Соответствие();
	СистемныеСбисСобытия = Новый Массив;
	СистемныеСбисСобытия.Добавить("извещение о получении ");
	СистемныеСбисСобытия.Добавить("загрузка");
	
	ПакетСобытие = Неопределено;
	Если Не СоставПакета.Свойство("Событие", ПакетСобытие) Тогда
		Возврат СбисСобытия;
	КонецЕсли;
		
	Для Каждого Событие Из ПакетСобытие Цикл
		КлючСбисСобытия		= "";
		НазваниеСбисСобытия	= Событие.Название;
		ЭтоСистемноеСобытие	= Ложь;
		ЗаполнитьПодпись	= Истина;
		Для	Каждого	СистемноеСобытие Из СистемныеСбисСобытия Цикл
			Если НРег(Лев(НазваниеСбисСобытия, СтрДлина(СистемноеСобытие))) = СистемноеСобытие Тогда
				ЭтоСистемноеСобытие	= Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоСистемноеСобытие Тогда
			Продолжить;
		КонецЕсли;
		 
		Если		Лев(НазваниеСбисСобытия, 9)  = "Получение" Тогда
			Если Найти(НазваниеСбисСобытия, "аннулирова") Тогда
				НазваниеСбисСобытия = "Запрос на аннулирование";
			Иначе
				НазваниеСбисСобытия = "Отправлено";
				КлючСбисСобытия		= "Отправка1";
			КонецЕсли;
		ИначеЕсли	Лев(НазваниеСбисСобытия, 11) = "Уведомление" Тогда
			КлючСбисСобытия		= "Утверждение";
			Если		Найти(НазваниеСбисСобытия, "о приеме")	Тогда
				НазваниеСбисСобытия	= "Утверждено";
			ИначеЕсли   Найти(НазваниеСбисСобытия, "об уточнении")	Тогда
				НазваниеСбисСобытия	= "Отклонено";
			КонецЕсли;
		ИначеЕсли	Лев(НазваниеСбисСобытия,9)	= "Извещение" Тогда
			Если Найти(НазваниеСбисСобытия, "отправ") Тогда
				НазваниеСбисСобытия = "Отправлено";
				КлючСбисСобытия		= "Отправка1";
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли	Лев(НазваниеСбисСобытия,13)	= "Подтверждение" Тогда
			ЗаполнитьПодпись = Ложь;
			Если		Найти(НазваниеСбисСобытия, "даты получения") Тогда
				НазваниеСбисСобытия	= "Получено";
				КлючСбисСобытия		= "Получение";
			ИначеЕсли	Найти(НазваниеСбисСобытия, "даты отправки") Тогда
				НазваниеСбисСобытия = "Отправлено";
				КлючСбисСобытия		= "Отправка1";
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если	ПустаяСтрока(КлючСбисСобытия) Тогда
			КлючСбисСобытия = СтрЗаменить(НазваниеСбисСобытия, " ", "");
		КонецЕсли;
		//КлючСбисСобытия = "Событие_" + КлючСбисСобытия;//Для исключения возможных нестандартных регламентов, у которых название начинается с числа
		СобытиеВставка = СбисСобытия.Получить(КлючСбисСобытия); 
		Если СобытиеВставка = Неопределено Тогда
			СобытиеВставка = Новый Структура;
			СбисСобытия.Вставить(КлючСбисСобытия, СобытиеВставка);
		КонецЕсли;	
		СобытиеВставка.Вставить("Название",	НазваниеСбисСобытия	+ ?(ПустаяСтрока(Событие.Комментарий),"",": "	+ Событие.Комментарий));
		СобытиеВставка.Вставить("ДатаВремя",?(ЗначениеЗаполнено(Событие.ДатаВремяДокумента),Событие.ДатаВремяДокумента,Событие.ДатаВремя));
		Если ЗаполнитьПодпись Тогда//01.08.2017 Заполнение исполнителя при наличии в этапе
			ФИОПодписи	= "";
			Если		Событие.Свойство("Вложение") И Событие.Вложение[0].Свойство("Подпись") Тогда
				ФИОПодписи	= Событие.Вложение[0].Подпись[0].Сертификат.ФИО;
			ИначеЕсли	Событие.Свойство("Исполнитель")	Тогда//нет сертификата, проверить наличие исполнителя, взять ФИО оттуда
				ФИОПодписи	= Событие.Исполнитель.Фамилия;
				ФИОПодписи	= ФИОПодписи + ?(ПустаяСтрока(ФИОПодписи), "", " ") + Событие.Исполнитель.Имя;
				ФИОПодписи	= ФИОПодписи + ?(ПустаяСтрока(ФИОПодписи), "", " ") + Событие.Исполнитель.Отчество;
			КонецЕсли;
			СобытиеВставка.Вставить("Подпись",	СокрЛП(ФИОПодписи));
		КонецЕсли;
	КонецЦикла;
	Возврат СбисСобытия;
КонецФункции
&НаКлиенте
Процедура НаСменуРаздела(Кэш) Экспорт
	фрм = Кэш.ГлавноеОкно.сбисНайтиФормуФункции("НаСменуРаздела","Раздел_Задачи_Задачи","", Кэш);
	фрм.НаСменуРаздела(Кэш);
КонецПроцедуры
&НаКлиенте
Функция ПодготовитьСтруктуруДокумента(СтрокаСпискаДокументов, Кэш) Экспорт
// функция формирует структуру данных по пакету электронных документов, необходимую для его предварительного просмотра и загрузки в 1С		
	МассивПакетов	= Кэш.ОбщиеФункции.ПодготовитьСтруктуруДокументаСбис(СтрокаСпискаДокументов, Кэш);
	Если	ЗначениеЗаполнено(МассивПакетов)	Тогда
		Возврат	МассивПакетов;
	Иначе
		Возврат	Новый	Массив;
	КонецЕсли;
КонецФункции
&НаКлиенте
Процедура ФильтрОчистить(Кэш) Экспорт
// Процедура устанавливает значения фильтра по-умолчанию для текущего раздела	
	ГлавноеОкно = Кэш.ГлавноеОкно;
	Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
		ГлавноеОкно.ФильтрПериод = "За весь период";
	Иначе
		ГлавноеОкно.ФильтрПериод = "0";
	КонецЕсли;
	Если Кэш.ТипыПолейФильтра.Свойство("ФильтрОрганизация") Тогда
		ГлавноеОкно.ФильтрОрганизация = Кэш.ТипыПолейФильтра.ФильтрОрганизация.ПривестиЗначение();
	Иначе	
		ГлавноеОкно.ФильтрОрганизация = "";
	КонецЕсли;
	Если Кэш.ТипыПолейФильтра.Свойство("ФильтрКонтрагент") Тогда
		ГлавноеОкно.ФильтрКонтрагент = Кэш.ТипыПолейФильтра.ФильтрКонтрагент.ПривестиЗначение();
	Иначе	
		ГлавноеОкно.ФильтрКонтрагент = "";
	КонецЕсли;
	Если Кэш.ТипыПолейФильтра.Свойство("ФильтрОтветственный") Тогда
		ГлавноеОкно.ФильтрОтветственный = Кэш.ТипыПолейФильтра.ФильтрОтветственный.ПривестиЗначение();
	Иначе	
		ГлавноеОкно.ФильтрОтветственный = "";
	КонецЕсли;
	ГлавноеОкно.ФильтрДатаНач = "";
	ГлавноеОкно.ФильтрДатаКнц = "";
	ГлавноеОкно.ФильтрСостояние = ГлавноеОкно.СписокСостояний.НайтиПоИдентификатору(0).Значение;
	ГлавноеОкно.ФильтрКонтрагентПодключен = "";
	ГлавноеОкно.ФильтрКонтрагентСФилиалами = Ложь;
	ГлавноеОкно.ФильтрСтраница = 1;
	ГлавноеОкно.ФильтрМаска = "";
КонецПроцедуры
&НаКлиенте
Процедура УстановитьВидимостьЭлементовВформеПросмотра(ФормаПросмотра, СоставПакета, КэшПарам) Экспорт
	ФормаПросмотра.Заголовок = ФормаПросмотра.СоставПакета.Название;
	ФормаПросмотра.ЗаголовокПакета = ФормаПросмотра.СоставПакета.Название;
	ФормаПросмотра.Элементы.Контент.ПодчиненныеЭлементы.Загрузка.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьИдентификатор.Видимость = Ложь;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьНоменклатураПоставщика.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьХарактеристикаПоставщика.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьЕдИзм.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьКоличество.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьЦена.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьСуммаБезНал.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьСтавкаНДС.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьСуммаНДС.Видимость = Истина;
	ФормаПросмотра.Элементы.ТабличнаяЧасть.ПодчиненныеЭлементы.ТабличнаяЧастьСумма.Видимость = Истина;
	ФормаПросмотра.Элементы.СинонимДокумента.Видимость = Истина;
	Если СоставПакета.Свойство("Этап") и СоставПакета.Этап.Количество()>0 и СоставПакета.Этап[0].Свойство("Действие") и СоставПакета.Этап[0].Действие.Количество()>0 Тогда
		ФормаПросмотра.Элементы.ТекущийЭтап.Видимость = Истина;
		ФормаПросмотра.Элементы.ТекущийЭтап.Заголовок = СоставПакета.Этап[0].Название;
		ФормаПросмотра.Элементы.Утвердить.Видимость = Истина;
		ФормаПросмотра.Элементы.Утвердить.Заголовок = СоставПакета.Этап[0].Действие[0].Название;
		Если СоставПакета.Этап[0].Действие.Количество()>1 Тогда
			ФормаПросмотра.Элементы.Отклонить.Видимость = Истина;
			ФормаПросмотра.Элементы.Отклонить.Заголовок = СоставПакета.Этап[0].Действие[1].Название;
		Иначе
			ФормаПросмотра.Элементы.Отклонить.Видимость = Ложь;
		КонецЕсли;
	Иначе
		ФормаПросмотра.Элементы.ТекущийЭтап.Видимость = Ложь;
		ФормаПросмотра.Элементы.Отклонить.Видимость = Ложь;
		ФормаПросмотра.Элементы.Утвердить.Видимость = Ложь;
	КонецЕсли;
	ФормаПросмотра.Элементы.ТулБар.ТекущаяСтраница = сбисПолучитьСтраницу(ФормаПросмотра.Элементы.ТулБар,"Полученные");
	ФормаПросмотра.Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСтатус.Видимость = Ложь;
	ФормаПросмотра.Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовСтатусКартинка.Видимость = Ложь;	
	ФормаПросмотра.Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовШифрование.Видимость = Ложь;
	ФормаПросмотра.Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовОтмечен.Видимость = Истина;
	ФормаПросмотра.Элементы.ПакетКомментарий.Доступность = Ложь;
	ФормаПросмотра.Элементы.Контент.ПодчиненныеЭлементы.Прохождение.Видимость = Истина;
	ФормаПросмотра.Элементы.ТаблицаДокументов.ПодчиненныеЭлементы.ТаблицаДокументовУдалить.Видимость = Ложь;
КонецПроцедуры
&НаКлиенте
Функция сбисСписокДополнительныхОпераций(Кэш, ФормаПросмотра) Экспорт
	СписокДопОпераций = Новый СписокЗначений;
	СписокДопОпераций.Добавить("СбисПечать", "Печать");
	СписокДопОпераций.Добавить("СохранитьНаДиск", "Сохранить на диск");
	СписокДопОпераций.Добавить("ОткрытьДокументОнлайн", "Открыть документ на sbis.ru");
	СписокДопОпераций.Добавить("СформироватьРасхождение", "Сформировать расхождение");
	ФормаПросмотра.СервисДопОперацияПросмотра(СписокДопОпераций);	// alo доп операции из инишки Сервис
	Возврат СписокДопОпераций;
КонецФункции
&НаКлиенте
Функция СбисПечать(Кэш, ФормаПросмотра) Экспорт
	ФормаПросмотра.СбисПечать("");
КонецФункции
&НаКлиенте
Функция СохранитьНаДиск(Кэш, ФормаПросмотра) Экспорт
	ФормаПросмотра.СохранитьНаДискНажатие("");
КонецФункции
&НаКлиенте
Функция ОткрытьДокументОнлайн(Кэш, ФормаПросмотра) Экспорт
	Если ФормаПросмотра<>Неопределено Тогда
	ФормаПросмотра.ОткрытьДокументОнлайн("");
	КонецЕсли;
КонецФункции
&НаКлиенте
Функция СформироватьРасхождение(Кэш, ФормаПросмотра) Экспорт
	ФормаПросмотра.СформироватьРасхождениеНажатие("");
КонецФункции
&НаКлиенте
Процедура ФильтрУстановитьВидимость(ФормаФильтра) Экспорт
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрКонтрагентПодключен");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрОтветственный");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрТипыДокументов");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрКонтрагент");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрКонтрагентСФилиалами");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрОрганизация");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Ложь;
	КонецЕсли;
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрСостояние");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Ложь;
	КонецЕсли;	
	ВыбранныйЭлемент = сбисЭлементФормы(ФормаФильтра,"ФильтрМаска");
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВыбранныйЭлемент.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура сбисОформлениеДопПолейРеестра(Кэш) Экспорт
	сбисЭлементФормы(Кэш.ГлавноеОкно,"Таблица_РеестрДокументов").ПодчиненныеЭлементы.Таблица_РеестрДокументовСрок.Видимость = Ложь;
	сбисЭлементФормы(Кэш.ГлавноеОкно,"Таблица_РеестрДокументов").ПодчиненныеЭлементы.Таблица_РеестрДокументовЛицо2.Видимость = Ложь;
КонецПроцедуры