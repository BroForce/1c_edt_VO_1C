&НаКлиенте
Перем МестныйКэш Экспорт;//aa.uferov добавлена переменная на формы сопоставления номенклатуры. Для работы через внешний интерфейс, когда не удаётся найти главное окно с инициированным кэшем.

// Получает номенклатуру 1С по структуре контрагента и номенклатуры СБИС. Вызывает функцию поиска номенклатуры на сервере 
&НаКлиенте
Функция НайтиНоменклатуруПоставщикаПоТабличнойЧасти(стрКонтрагент, знач мТаблДок, КаталогНастроек, Ини) Экспорт
	Попытка
		ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	Исключение
		Отказ = Истина;
		ВызватьИсключение("В документе не заполнен ИНН контрагента. Сопоставление номенклатуры невозможно.");
	КонецПопытки;
	СчетчикСтрок = 0;
	СтрокиПоиска = Новый Структура;
	Для Каждого СтрТабл Из мТаблДок Цикл
		СтрокаПоиска = Новый Структура;
		Если СтрТабл.Свойство("Название") Тогда
			СтрокаПоиска.Вставить("Название",		СтрТабл.Название);
		КонецЕсли;
		Если СтрТабл.Свойство("Идентификатор") Тогда
			СтрокаПоиска.Вставить("Идентификатор",	СтрТабл.Идентификатор);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
			ВызватьИсключение("НайтиНоменклатуруПоставщикаПоТабличнойЧасти() Отсутствует название и идентификатор номенклатуры для поиска в строке №" + (СчетчикСтрок+1));
		КонецЕсли;
		СтрокиПоиска.Вставить("СтрТабл_"+Формат(СчетчикСтрок, "ЧН=0; ЧГ=0"),СтрокаПоиска);
		СчетчикСтрок = СчетчикСтрок + 1;
	КонецЦикла;
	Отказ = Ложь;
	Рез = НайтиНоменклатуруПоставщикаПоТабличнойЧастиНаСервере(стрКонтрагент, СтрокиПоиска, КаталогНастроек, Ини.Конфигурация, Отказ);
	Если Отказ Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы");
		ПараметрыСообщения.Вставить("Текст",		"Возникла проблема при работе с com-объектом ""ADODB.Connection"""+Символы.ПС+Рез);
		ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/catalog/driver_not_found");

		ФормаПредупреждение = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПредупреждения",,,);
		ФормаПредупреждение.Показать(МестныйКэш, ПараметрыСообщения);
		ВызватьИсключение("Проблема с драйвером ODBC");
	КонецЕсли;
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиНоменклатуруПоставщикаПоТабличнойЧастиНаСервере(стрКонтрагент,стрНоменклатураПоставщикаВсе, КаталогНастроек, ИниКонфигурация, Отказ) Экспорт
// ищет запись с определенной номенклатурой поставщика по реквизитам, указанным в файле настроек
// возвращает структуру с полями Номенклатура и Характеристика	
	
	Для Каждого стрНоменклатураПоставщика Из стрНоменклатураПоставщикаВсе Цикл
		Результат = НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика.Значение, КаталогНастроек, ИниКонфигурация, Отказ);	
		Если Отказ Тогда
			Возврат Результат;	
		КонецЕсли;
		стрНоменклатураПоставщика.Значение.Вставить("НоменклатураПоставщика",Результат);	
	КонецЦикла;
	Возврат стрНоменклатураПоставщикаВсе; 
КонецФункции
&НаКлиенте
Функция НайтиНоменклатуруПоставщика(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини) Экспорт
// Функция ищет номенклатуру поставщика по идентификатору.
// Если сопоставление заполнено, возвращает структуру с номенклатурой и характеристикой номенклатуры
	Попытка
		ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	Исключение
		Отказ = Истина;
		ВызватьИсключение("В документе не заполнен ИНН контрагента. Сопоставление номенклатуры невозможно.");
	КонецПопытки;
	Отказ = Ложь;
	Рез = НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини.Конфигурация, Отказ);
	Если Отказ Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("ТекстСсылка",	"Решение проблемы");
		ПараметрыСообщения.Вставить("Текст",		"Возникла проблема при работе с com-объектом ""ADODB.Connection"""+Символы.ПС+Рез);
		ПараметрыСообщения.Вставить("АдресСсылка",	"https://sbis.ru/help/integration/catalog/driver_not_found");

		ФормаПредупреждение = МестныйКэш.ГлавноеОкно.сбисПолучитьФорму("ФормаПредупреждения",,,);
		ФормаПредупреждение.Показать(МестныйКэш, ПараметрыСообщения);
		ВызватьИсключение("Проблема с драйвером ODBC");
	КонецЕсли;
	Возврат Рез;
КонецФункции
&НаСервереБезКонтекста
Функция НайтиНоменклатуруПоставщикаНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, ИниКонфигурация, Отказ) Экспорт
// Функция ищет номенклатуру поставщика по идентификатору.
// Если сопоставление заполнено, возвращает структуру с номенклатурой и характеристикой номенклатуры
	ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";

	КаталогНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика);	
	Если КаталогНоменклатурыПоставщика.Существует() = Ложь Тогда
		СоздатьКаталог(ИмяКаталогаНоменклатурыПоставщика);
		Сообщить("Создан каталог """+ИмяКаталогаНоменклатурыПоставщика+""""); 
	КонецЕсли;
	
	Попытка
		БД = Новый COMОбъект("ADODB.Connection");
	Исключение
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");	
				   
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Попытка
		Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
			СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
			БД.Open(СтрокаПодключения);
		Иначе
			СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			Попытка
				БД.Open(СтрокаПодключения);
			Исключение
				СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
				БД.Open(СтрокаПодключения);
			КонецПопытки;
			//СтрокаПодключения = "Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			//СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Ошибка = ОписаниеОшибки();
		Возврат Ошибка;
	КонецПопытки;
	
	ФайлНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика + "NomPost.dbf");
	Если ФайлНоменклатурыПоставщика.Существует() = Ложь Тогда
		БД.Execute("Create Table NomPost.dbf (NAME char(240), ID char(240), IDNOM char(240), SPRNOM char(240), IDCHAR char(240), SPRCHAR char(240))");
	КонецЕсли;
	
	NAME = "";
	СбисИмяКакИд = Истина;
	Если стрНоменклатураПоставщика.Свойство("Название") Тогда
		NAME = Лев(СокрЛП(стрНоменклатураПоставщика.Название),240); 
	КонецЕсли;
	Если стрНоменклатураПоставщика.Свойство("Идентификатор") И стрНоменклатураПоставщика.Идентификатор <> "-" Тогда // alo Меркурий  если заполнен идентификатор, то ищем по нему
		ID = Лев(стрНоменклатураПоставщика.Идентификатор, 240); 
		Если ЗначениеЗаполнено(ID) Тогда
			СбисИмяКакИд = Ложь;
		Иначе
			ID = NAME;
		КонецЕсли;		
	Иначе
		ID = NAME;
	КонецЕсли;	
	ID = СбисИдентификатор(ID);
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);	
	
	Результат = Новый Структура("Номенклатура, Характеристика");
	
	Если Recordset.EOF=Ложь Тогда 
		Если ЗначениеЗаполнено(RecordSet.Fields("IDNOM").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRNOM").value) Тогда
			Результат.Номенклатура = Справочники[СокрЛП(RecordSet.Fields("SPRNOM").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDNOM").value)));	
			Если ЗначениеЗаполнено(RecordSet.Fields("IDCHAR").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRCHAR").value) Тогда
				Результат.Характеристика = Справочники[СокрЛП(RecordSet.Fields("SPRCHAR").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDCHAR").value)));	
			КонецЕсли;
			Возврат Результат;
		Иначе
			Возврат Неопределено;
		КонецЕсли;		
	// << alo Меркурий
	// Искали по идентификатору и не нашли. Возможно, существуют старые сопоставления по наименованию - перепишем их
	// блок добавлен в версии 37. Удалить спустя время.
	//TODO40 удалить блок
	ИначеЕсли Не СбисИмяКакИд Тогда
		NAME = СбисИдентификатор(NAME);
		Если ЗначениеЗаполнено(NAME) Тогда
			RecordSet = Новый ComОбъект("ADODB.Recordset");
			Recordset.CursorLocation = 3;
			Recordset.Open("Select * from NomPost where NomPost.ID like'"+NAME+"%'",БД,2,3);	
			Если Recordset.EOF=Ложь Тогда 
				Если ЗначениеЗаполнено(RecordSet.Fields("IDNOM").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRNOM").value) Тогда
					Результат.Номенклатура = Справочники[СокрЛП(RecordSet.Fields("SPRNOM").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDNOM").value)));	
					Если ЗначениеЗаполнено(RecordSet.Fields("IDCHAR").value) и ЗначениеЗаполнено(RecordSet.Fields("SPRCHAR").value) Тогда
						Результат.Характеристика = Справочники[СокрЛП(RecordSet.Fields("SPRCHAR").value)].ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(RecordSet.Fields("IDCHAR").value)));	
					КонецЕсли;
				КонецЕсли;		
				RecordSet.Fields("ID").value=ID; 
				RecordSet.Update();
				Возврат Результат;
			КонецЕсли;
		КонецЕсли; // alo Меркурий >>
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции
&НаКлиенте
Процедура УстановитьСоответствиеНоменклатуры(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини) Экспорт
// Процедура устанавливает/удаляет соответствие номенклатуры	
	УстановитьСоответствиеНоменклатурыНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, Ини.Конфигурация);
КонецПроцедуры
&НаСервереБезКонтекста
Процедура УстановитьСоответствиеНоменклатурыНаСервере(стрКонтрагент, стрНоменклатураПоставщика, КаталогНастроек, ИниКонфигурация) Экспорт
// Процедура устанавливает/удаляет соответствие номенклатуры	
	ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	
	БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
		СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
		БД.Open(СтрокаПодключения);
	Иначе
		СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		Попытка
			БД.Open(СтрокаПодключения);
		Исключение
			СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			БД.Open(СтрокаПодключения);
		КонецПопытки;
	КонецЕсли;
	
	NAME = Лев(СокрЛП(стрНоменклатураПоставщика.Название), 240); 
	ID = Лев(стрНоменклатураПоставщика.Идентификатор, 240); 
	Если Не ЗначениеЗаполнено(ID) Тогда
		ID = NAME;
	КонецЕсли;	
	ID = СбисИдентификатор(ID);
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open("Select * from NomPost where NomPost.ID ='"+ID+"'",БД,2,3);

	Если ЗначениеЗаполнено(стрНоменклатураПоставщика.Номенклатура) Тогда   // если выбрали номенклатуру для сопоставления
		Если Recordset.EOF=Ложь Тогда 
			
		Иначе
			RecordSet.AddNew();
		    RecordSet.Fields("ID").value=ID; 
			RecordSet.Fields("NAME").value=NAME;
		КонецЕсли;
		RecordSet.Fields("IDNOM").value = Строка(стрНоменклатураПоставщика.Номенклатура.УникальныйИдентификатор());
		Если ИниКонфигурация.Свойство("Номенклатура") Тогда
			RecordSet.Fields("SPRNOM").value = СокрЛП(Сред(ИниКонфигурация.Номенклатура.Значение, Найти(ИниКонфигурация.Номенклатура.Значение, ".")+1));
		Иначе
			RecordSet.Fields("SPRNOM").value = "Номенклатура";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стрНоменклатураПоставщика.Характеристика) Тогда
			RecordSet.Fields("IDCHAR").value = Строка(стрНоменклатураПоставщика.Характеристика.УникальныйИдентификатор());
			Если ИниКонфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
				RecordSet.Fields("SPRCHAR").value = СокрЛП(Сред(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, Найти(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
			Иначе
				RecordSet.Fields("SPRCHAR").value="ХарактеристикиНоменклатуры";
			КонецЕсли;
		Иначе
			RecordSet.Fields("IDCHAR").value = "";
			RecordSet.Fields("SPRCHAR").value = "";
		КонецЕсли;
		RecordSet.Update();
	Иначе  // если удалили номенклатуру для сопоставления
		Если Recordset.EOF=Ложь Тогда 
			Recordset.Delete(); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Функция ПолучитьИдентификаторНоменклатурыПоставщика(стрКонтрагент, стрНоменклатура, КаталогНастроек, Ини) Экспорт
// Процедура ищет идентификатор номенклатуры контрагента	
	Возврат ПолучитьИдентификаторНоменклатурыПоставщикаНаСервере(стрКонтрагент, стрНоменклатура, КаталогНастроек, Ини.Конфигурация);
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьИдентификаторНоменклатурыПоставщикаНаСервере(стрКонтрагент, стрНоменклатура, КаталогНастроек, ИниКонфигурация) Экспорт
// Процедура ищет идентификатор номенклатуры контрагента	
	ИНН = ?(стрКонтрагент.Свойство("СвЮЛ"), стрКонтрагент.СвЮЛ.ИНН, стрКонтрагент.СвФЛ.ИНН);
	ИмяКаталогаНоменклатурыПоставщика = КаталогНастроек + "НоменклатураПоставщика\"+ИНН+"\";
	ФайлНоменклатурыПоставщика = Новый Файл(ИмяКаталогаНоменклатурыПоставщика + "NomPost.dbf");
	Если ФайлНоменклатурыПоставщика.Существует() = Ложь Тогда
		Возврат "";
	КонецЕсли;
	БД = Новый COMОбъект("ADODB.Connection");
	//БД.Open("Provider=Microsoft.Jet.OLEDB.4.0;" +
	//               "Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";Extended Properties=""DBASE IV;"";");
	//БД.Open("DRIVER=Microsoft dBase Driver (*.dbf);UID=admin;UserCommitSync=Yes;Threads=3;Statistics=0;SafeTransactions=0;PageTimeout=600;MaxScanRows=8;MaxBufferSize=2048;FIL=dBase 5.0;DriverId=533;Deleted=1;DefaultDir=" + ИмяКаталогаНоменклатурыПоставщика + ";" + ИмяКаталогаНоменклатурыПоставщика + ";CollatingSequence=ASCII");
	Если ИниКонфигурация.Свойство("СтрокаПодключенияДБФ") Тогда
		СтрокаПодключения = СтрЗаменить(ИниКонфигурация.СтрокаПодключенияДБФ.Значение, "'","")+ИмяКаталогаНоменклатурыПоставщика;
		БД.Open(СтрокаПодключения);
	Иначе
		СтрокаПодключения = "Driver={Microsoft dBASE Driver (*.dbf)};DriverID=533;Dbq=" + ИмяКаталогаНоменклатурыПоставщика + ";";
		Попытка
			БД.Open(СтрокаПодключения);
		Исключение
			СтрокаПодключения = "Provider=Microsoft.ACE.OLEDB.12.0;Extended Properties='dBASE IV';Data Source=" + ИмяКаталогаНоменклатурыПоставщика + ";";
			БД.Open(СтрокаПодключения);
		КонецПопытки;
	КонецЕсли;
	
	IDNOM = Строка(стрНоменклатура.Номенклатура.УникальныйИдентификатор());
	Если ИниКонфигурация.Свойство("Номенклатура") Тогда
		SPRNOM = СокрЛП(Сред(ИниКонфигурация.Номенклатура.Значение, Найти(ИниКонфигурация.Номенклатура.Значение, ".")+1));
	Иначе
		SPRNOM = "Номенклатура";
	КонецЕсли;
	ТекстЗапроса = "Select * from NomPost where NomPost.IDNOM='"+IDNOM+"'";
	Если ЗначениеЗаполнено(стрНоменклатура.Характеристика) Тогда
		IDCHAR = Строка(стрНоменклатура.Характеристика.УникальныйИдентификатор());
		Если ИниКонфигурация.Свойство("ХарактеристикиНоменклатуры") Тогда
			SPRCHAR = СокрЛП(Сред(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, Найти(ИниКонфигурация.ХарактеристикиНоменклатуры.Значение, ".")+1));
		Иначе
			SPRCHAR="ХарактеристикиНоменклатуры";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса+" and NomPost.IDCHAR='"+IDCHAR+"'";
	КонецЕсли;		
	RecordSet = Новый ComОбъект("ADODB.Recordset");
    Recordset.CursorLocation = 3;
    Recordset.Open(ТекстЗапроса,БД,2,3);

	Если Recordset.EOF=Ложь Тогда 
		Возврат СокрЛП(RecordSet.Fields("ID").value);		
	КонецЕсли;
	Возврат "";
КонецФункции

//Функция вырезает всё лишнее от ИД для ДБФ
&НаСервереБезКонтекста
Функция СбисИдентификатор(Знач СыраяСтрокаИд)
	Возврат СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(
					СыраяСтрокаИд	,"«","<")
									,"»",">")
									,"""","")
									,"'","")
									,"[","")
									,"]","")
									,"—","-")
									,"’","")
									,"“","")
									,"”","")
									,"®",""));
КонецФункции

